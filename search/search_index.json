{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Django Introducci\u00f3n Configuraci\u00f3n Inicial Hello World app Pages app Message Board app Blog app Formularios Cuentas de Usuarios Modelo de Usuario Personalizado Autenticaci\u00f3n de Usuarios Bootstrap Cambio y Restauraci\u00f3n de contrase\u00f1as Email Newspaper app","title":"Django"},{"location":"#django","text":"","title":"Django"},{"location":"#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"#configuracion-inicial","text":"","title":"Configuraci\u00f3n Inicial"},{"location":"#hello-world-app","text":"","title":"Hello World app"},{"location":"#pages-app","text":"","title":"Pages app"},{"location":"#message-board-app","text":"","title":"Message Board app"},{"location":"#blog-app","text":"","title":"Blog app"},{"location":"#formularios","text":"","title":"Formularios"},{"location":"#cuentas-de-usuarios","text":"","title":"Cuentas de Usuarios"},{"location":"#modelo-de-usuario-personalizado","text":"","title":"Modelo de Usuario Personalizado"},{"location":"#autenticacion-de-usuarios","text":"","title":"Autenticaci\u00f3n de Usuarios"},{"location":"#bootstrap","text":"","title":"Bootstrap"},{"location":"#cambio-y-restauracion-de-contrasenas","text":"","title":"Cambio y Restauraci\u00f3n de contrase\u00f1as"},{"location":"#email","text":"","title":"Email"},{"location":"#newspaper-app","text":"","title":"Newspaper app"},{"location":"10_autenticacion_de_usuarios/","text":"10. Autenticaci\u00f3n de usuarios 10.1. Plantillas Por defecto, el cargador de plantillas de Django busca plantillas en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html en usuarios tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero un enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que eso es lo que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Si se piensa en lo que sucede cuando se inicia o cierra sesi\u00f3n en un sitio, se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar a los usuarios en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block contente %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf- \"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} 10.2. URLs En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias. Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include from django.views.generic.base import TemplateView urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar a los users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser . La p\u00e1gina de inicio se desconect\u00f3 Ahora estamos en la p\u00e1gina de inicio de la sesi\u00f3n. Adelante, haz clic en el enlace de acceso y usa tus credenciales de superusuario. 10.3. Admin Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En pripio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new Reg\u00edstrate con una nueva cuenta de usuario. He nombrado a mi testuser con una direcci\u00f3n de correo electr\u00f3nico de testuser@email.com . Si luego volvemos a la p\u00e1gina de administraci\u00f3n y nos registramos con nuestra cuenta de superusuario para hacerlo, los tres usuarios son ahora evidentes. -El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera. 10.4. Conclusi\u00f3n Hasta ahora nuestra aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro, login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar para el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10. Autenticaci\u00f3n de Usuarios"},{"location":"10_autenticacion_de_usuarios/#10-autenticacion-de-usuarios","text":"","title":"10. Autenticaci\u00f3n de usuarios"},{"location":"10_autenticacion_de_usuarios/#101-plantillas","text":"Por defecto, el cargador de plantillas de Django busca plantillas en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html en usuarios tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero un enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que eso es lo que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Si se piensa en lo que sucede cuando se inicia o cierra sesi\u00f3n en un sitio, se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar a los usuarios en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block contente %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf- \"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %}","title":"10.1. Plantillas"},{"location":"10_autenticacion_de_usuarios/#102-urls","text":"En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias. Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include from django.views.generic.base import TemplateView urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar a los users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser . La p\u00e1gina de inicio se desconect\u00f3 Ahora estamos en la p\u00e1gina de inicio de la sesi\u00f3n. Adelante, haz clic en el enlace de acceso y usa tus credenciales de superusuario.","title":"10.2. URLs"},{"location":"10_autenticacion_de_usuarios/#103-admin","text":"Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En pripio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new Reg\u00edstrate con una nueva cuenta de usuario. He nombrado a mi testuser con una direcci\u00f3n de correo electr\u00f3nico de testuser@email.com . Si luego volvemos a la p\u00e1gina de administraci\u00f3n y nos registramos con nuestra cuenta de superusuario para hacerlo, los tres usuarios son ahora evidentes. -El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera.","title":"10.3. Admin"},{"location":"10_autenticacion_de_usuarios/#104-conclusion","text":"Hasta ahora nuestra aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro, login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar para el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10.4. Conclusi\u00f3n"},{"location":"11_bootstrap/","text":"11. Bootstrap El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n. 11.1. Pages app Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente no se escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar podemos y debemos crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas. Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'pages', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con nuestra la nueva url y vista. 11.2. Pruebas Hay dos momentos ideales para a\u00f1adir pruebas Antes de escribir cualquier c\u00f3digo (test-driven-development) Inmediatamente despu\u00e9s de que hayas a\u00f1adido una nueva funcionalidad y lo tengas claro en tu mente. Actualmente nuestro proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. El login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirnos al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 la p\u00e1gina utiliza el nombre de la url correcta en la vista se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test 11.3. Bootstrap Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: Se pueden descargar todos los archivos y servirlos localmente Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: la p\u00e1gina de inicio inicio de sesi\u00f3n cierre de sesi\u00f3n registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico que se ve mal es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ... 11.4. Formulario de inscripci\u00f3n \u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra aqu\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hat tres opciones: anular el help_text existente ocultar el help_text reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users', 'pages', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap ' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si nuestro bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ... 11.5. Pr\u00f3ximos pasos El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11. Bootstrap"},{"location":"11_bootstrap/#11-bootstrap","text":"El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n.","title":"11. Bootstrap"},{"location":"11_bootstrap/#111-pages-app","text":"Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente no se escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar podemos y debemos crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas. Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'pages', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con nuestra la nueva url y vista.","title":"11.1. Pages app"},{"location":"11_bootstrap/#112-pruebas","text":"Hay dos momentos ideales para a\u00f1adir pruebas Antes de escribir cualquier c\u00f3digo (test-driven-development) Inmediatamente despu\u00e9s de que hayas a\u00f1adido una nueva funcionalidad y lo tengas claro en tu mente. Actualmente nuestro proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. El login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirnos al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 la p\u00e1gina utiliza el nombre de la url correcta en la vista se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test","title":"11.2. Pruebas"},{"location":"11_bootstrap/#113-bootstrap","text":"Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: Se pueden descargar todos los archivos y servirlos localmente Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: la p\u00e1gina de inicio inicio de sesi\u00f3n cierre de sesi\u00f3n registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico que se ve mal es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ...","title":"11.3. Bootstrap"},{"location":"11_bootstrap/#114-formulario-de-inscripcion","text":"\u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra aqu\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hat tres opciones: anular el help_text existente ocultar el help_text reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users', 'pages', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap ' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si nuestro bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ...","title":"11.4. Formulario de inscripci\u00f3n"},{"location":"11_bootstrap/#115-proximos-pasos","text":"El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11.5. Pr\u00f3ximos pasos"},{"location":"12_cambio_y_restauracion_de_contrasenas/","text":"12. Cambio y restauraci\u00f3n de contrase\u00f1as As\u00ed como Django viene con vistas y urls incorporadas para el inicio y el cierre de sesi\u00f3n, tambi\u00e9n viene con vistas/urls para el cambio y el restablecimiento de la contrase\u00f1a. 12.1. Cambio de contrase\u00f1a Django proporciona una implementaci\u00f3n predeterminada que ya funciona para este cometido. Para probarlo, hacer clic en el bot\u00f3n \"Login\" para asegurar que se ha iniciado sesi\u00f3n. Luego navegar a la p\u00e1gina \"Password change\" en http://127.0.0.1:8000/users/password_change/ Introducir la antigua contrase\u00f1a y luego una nueva. Luego hacer clic en el bot\u00f3n \"Change My Password\". Ser\u00e1 redirigido a la p\u00e1gina \"Password change successful\" ubicada en: http://127.0.0.1:8000/users/password_change/done/. 12.2. Personalizar el cambio de contrase\u00f1a Se van a personalizar estas dos p\u00e1ginas de cambio de contrase\u00f1a para que coincidan con el aspecto y la sensaci\u00f3n del sitio del peri\u00f3dico. Dado que Django ya ha creado las vistas y las URL, s\u00f3lo hay que a\u00f1adir nuevas plantillas. Crear dos nuevos archivos de plantillas en la carpeta de registro. (noticias) $ plantillas t\u00e1ctiles/registro/cambio de contrase\u00f1a_formulario.html (noticias) $ plantillas de toque/registro/cambio de contrase\u00f1a_hecho.html Actualiza password_change_form.html con el siguiente c\u00f3digo. FICHERO: plantillas/registro/password_change.html {% extends 'base.html' %} {% block tile %}Password Change{% endblock %} {% block content %} <h1>Password change</h1> <p>Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que se usan t\u00edtulos \"bloques\" en el archivo base.html se pueden anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Usando form.as_p estamos simplemente mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de contrase\u00f1a por defecto. Y finalmente incluimos un bot\u00f3n de env\u00edo que usa el estilo btn btn-success de Bootstrap para que sea verde. Lo siguiente es la plantilla password_change_done . FICHERO: templates/registration/password_change_done.html {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} <h1>Password change successful</h1> <p>Your password was changed.</p> {% endblock content %} Tambi\u00e9n se extiende base.html y se incluye un nuevo t\u00edtulo. Sin embargo, no hay ning\u00fan formulario en la p\u00e1gina, s\u00f3lo texto nuevo. La nueva p\u00e1gina est\u00e1 en http://127.0.0.1:8000/users/password_change/done/. Restablecer la contrase\u00f1a La \u00fanica configuraci\u00f3n que se requiere es decirle a Django c\u00f3mo enviar los correos electr\u00f3nicos. Despu\u00e9s de todo, un usuario s\u00f3lo puede restablecer una contrase\u00f1a si se tiene acceso al correo electr\u00f3nico vinculado a la cuenta. En la producci\u00f3n se usar\u00e1 el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos, pero para fines de prueba se puede confiar en la configuraci\u00f3n del backend de la consola de Django que env\u00eda el texto del correo electr\u00f3nico a la consola de l\u00ednea de comandos en su lugar. En la parte inferior del archivo settings.py hacer el siguiente cambio de una l\u00ednea. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Listo. Django se encargar\u00e1 del resto. Probarlo desde http://127.0.0.1:8000/users/password_reset/. Asegurar que la direcci\u00f3n de correo electr\u00f3nico coincida con una de las cuentas de usuario. Una vez enviado, ser\u00e1 redirigido a la p\u00e1gina de restablecimiento de contrase\u00f1a en: http://127.0.0.1:8000/users/password_reset/done/. Que dice que revise nuestro correo electr\u00f3nico. Ya que le hemos dicho a Django que env\u00ede correos electr\u00f3nicos a la consola de la l\u00ednea de comando, el texto del correo electr\u00f3nico estar\u00e1 ahora all\u00ed. Esto es lo que se muestra por la consola. Content-Type: text/plain; charset=\"utf-8\" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Password reset on 127.0.0.1:8000 From: webmaster@localhost To: will@wsvincent.com Date: Thu,22 Mar 2018 20:31:48 -0000 Message-ID: <152175070807.39206.18266082938043731152@1.0.0.127.in-addr.arpa> You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000. Please go to the following page and choose a new password: http://127.0.0.1:8000/user/reset/MQ/4up-678712c114db2ead7780/ Your username, in case you've forgotten: wsv Thanks for using our site! The 127.0.0.1:8000 team El texto del correo electr\u00f3nico debe ser id\u00e9ntico excepto por tres l\u00edneas: el \"Para\" en la sexta l\u00ednea contiene la direcci\u00f3n de correo electr\u00f3nico del usuario el enlace URL contiene una se\u00f1al segura que Django genera aleatoriamente y puede ser usada s\u00f3lo una vez Django nos recuerda amablemente nuestro nombre de usuario El enlace proporcionado: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/, nos redirigir\u00e1 a la \"change password page\". Introducir una nueva contrase\u00f1a y hacer clic en el bot\u00f3n \"Change my password\". El paso final es que ser redirigido a la p\u00e1gina de \"Password reset complete\". Restablecimiento completo de la contrase\u00f1a predeterminada Comprobar que todo ha funcionado, hacer clic en el enlace \"Log in\" y usar la nueva contrase\u00f1a. 12.. Plantillas personalizadas S\u00f3lo hay que crear nuevas plantillas para personalizar el el aspecto y la sensaci\u00f3n del restablecimiento de la contrase\u00f1a. Crear cuatro nuevos archivos de plantilla. (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reset_form.html (noticias) $ plantillas de toque/registro/contrase\u00f1a_reset_done.html (noticias) $ plantillas de toque/registro/confirmaci\u00f3n_contrase\u00f1a.html (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reinicio_completo.html Se empieza con el formulario de restablecimiento de contrase\u00f1a que es password_reset_form.html . FICHERO: plantillas/registro/contrase\u00f1a_reset_form.html {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} <h1>Forgot your password?</h1> <p>Enter your email address below, and we'll email instructions for setting a new one.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Send me instructions!\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que usamos t\u00edtulos \"block\" en el base.html se puede anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Al usar form.as_p simplemente se est\u00e1 mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de la contrase\u00f1a predeterminada. Finalmente se incluye un enviar el bot\u00f3n y se usa el estilo de Bootstrap btn btn-success para hacerlo verde. Ahora se puede actualizar las otras tres p\u00e1ginas. Cada una tiene la misma forma de extender base.html , un nuevo t\u00edtulo, un nuevo texto de contenido, y para \"password reset confirm\" una actualizaci\u00f3n tambi\u00e9n. FICHERO: templates/registration/password_reset_done.html {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} <h1>Check your inbox.</h1> <p>We've emailed you instructions for setting your password. You should receive the email shortly!</p> {% endblock %} Confirmar los cambios en http://127.0.0.1:8000/users/password_reset/done/ A continuaci\u00f3n, la p\u00e1gina de confirmaci\u00f3n del restablecimiento de la contrase\u00f1a. FICHERO: templates/registration/password_reset_confirm.html {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} <h1>Set a new password!</h1> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} Abrir la linea de comandos y tomar el enlace URL del correo electr\u00f3nico enviado a la consola. Finalmente aqu\u00ed est\u00e1 el c\u00f3digo completo para reestablecer la password. FICHERO: templates/registration/password_reset_complete.html {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} <h1>Password reset complete</h1> <p>Your new password has been set. You can log in now on the <a href=\"{% url 'login' %}\">log in page</a>.</p> {% endblock %} Conclusi\u00f3n En el pr\u00f3ximo cap\u00edtulo conectaremos nuestra aplicaci\u00f3n para peri\u00f3dicos con el servicio de correo electr\u00f3nico SendGrid para enviar realmente nuestros correos electr\u00f3nicos automatizados a los usuarios, en lugar de emitirlos en nuestra consola de l\u00ednea de comandos.","title":"12. Cambio y Restauraci\u00f3n de Contrase\u00f1as"},{"location":"12_cambio_y_restauracion_de_contrasenas/#12-cambio-y-restauracion-de-contrasenas","text":"As\u00ed como Django viene con vistas y urls incorporadas para el inicio y el cierre de sesi\u00f3n, tambi\u00e9n viene con vistas/urls para el cambio y el restablecimiento de la contrase\u00f1a.","title":"12. Cambio y restauraci\u00f3n de contrase\u00f1as"},{"location":"12_cambio_y_restauracion_de_contrasenas/#121-cambio-de-contrasena","text":"Django proporciona una implementaci\u00f3n predeterminada que ya funciona para este cometido. Para probarlo, hacer clic en el bot\u00f3n \"Login\" para asegurar que se ha iniciado sesi\u00f3n. Luego navegar a la p\u00e1gina \"Password change\" en http://127.0.0.1:8000/users/password_change/ Introducir la antigua contrase\u00f1a y luego una nueva. Luego hacer clic en el bot\u00f3n \"Change My Password\". Ser\u00e1 redirigido a la p\u00e1gina \"Password change successful\" ubicada en: http://127.0.0.1:8000/users/password_change/done/.","title":"12.1. Cambio de contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#122-personalizar-el-cambio-de-contrasena","text":"Se van a personalizar estas dos p\u00e1ginas de cambio de contrase\u00f1a para que coincidan con el aspecto y la sensaci\u00f3n del sitio del peri\u00f3dico. Dado que Django ya ha creado las vistas y las URL, s\u00f3lo hay que a\u00f1adir nuevas plantillas. Crear dos nuevos archivos de plantillas en la carpeta de registro. (noticias) $ plantillas t\u00e1ctiles/registro/cambio de contrase\u00f1a_formulario.html (noticias) $ plantillas de toque/registro/cambio de contrase\u00f1a_hecho.html Actualiza password_change_form.html con el siguiente c\u00f3digo. FICHERO: plantillas/registro/password_change.html {% extends 'base.html' %} {% block tile %}Password Change{% endblock %} {% block content %} <h1>Password change</h1> <p>Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que se usan t\u00edtulos \"bloques\" en el archivo base.html se pueden anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Usando form.as_p estamos simplemente mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de contrase\u00f1a por defecto. Y finalmente incluimos un bot\u00f3n de env\u00edo que usa el estilo btn btn-success de Bootstrap para que sea verde. Lo siguiente es la plantilla password_change_done . FICHERO: templates/registration/password_change_done.html {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} <h1>Password change successful</h1> <p>Your password was changed.</p> {% endblock content %} Tambi\u00e9n se extiende base.html y se incluye un nuevo t\u00edtulo. Sin embargo, no hay ning\u00fan formulario en la p\u00e1gina, s\u00f3lo texto nuevo. La nueva p\u00e1gina est\u00e1 en http://127.0.0.1:8000/users/password_change/done/.","title":"12.2. Personalizar el cambio de contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#restablecer-la-contrasena","text":"La \u00fanica configuraci\u00f3n que se requiere es decirle a Django c\u00f3mo enviar los correos electr\u00f3nicos. Despu\u00e9s de todo, un usuario s\u00f3lo puede restablecer una contrase\u00f1a si se tiene acceso al correo electr\u00f3nico vinculado a la cuenta. En la producci\u00f3n se usar\u00e1 el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos, pero para fines de prueba se puede confiar en la configuraci\u00f3n del backend de la consola de Django que env\u00eda el texto del correo electr\u00f3nico a la consola de l\u00ednea de comandos en su lugar. En la parte inferior del archivo settings.py hacer el siguiente cambio de una l\u00ednea. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Listo. Django se encargar\u00e1 del resto. Probarlo desde http://127.0.0.1:8000/users/password_reset/. Asegurar que la direcci\u00f3n de correo electr\u00f3nico coincida con una de las cuentas de usuario. Una vez enviado, ser\u00e1 redirigido a la p\u00e1gina de restablecimiento de contrase\u00f1a en: http://127.0.0.1:8000/users/password_reset/done/. Que dice que revise nuestro correo electr\u00f3nico. Ya que le hemos dicho a Django que env\u00ede correos electr\u00f3nicos a la consola de la l\u00ednea de comando, el texto del correo electr\u00f3nico estar\u00e1 ahora all\u00ed. Esto es lo que se muestra por la consola. Content-Type: text/plain; charset=\"utf-8\" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Password reset on 127.0.0.1:8000 From: webmaster@localhost To: will@wsvincent.com Date: Thu,22 Mar 2018 20:31:48 -0000 Message-ID: <152175070807.39206.18266082938043731152@1.0.0.127.in-addr.arpa> You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000. Please go to the following page and choose a new password: http://127.0.0.1:8000/user/reset/MQ/4up-678712c114db2ead7780/ Your username, in case you've forgotten: wsv Thanks for using our site! The 127.0.0.1:8000 team El texto del correo electr\u00f3nico debe ser id\u00e9ntico excepto por tres l\u00edneas: el \"Para\" en la sexta l\u00ednea contiene la direcci\u00f3n de correo electr\u00f3nico del usuario el enlace URL contiene una se\u00f1al segura que Django genera aleatoriamente y puede ser usada s\u00f3lo una vez Django nos recuerda amablemente nuestro nombre de usuario El enlace proporcionado: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/, nos redirigir\u00e1 a la \"change password page\". Introducir una nueva contrase\u00f1a y hacer clic en el bot\u00f3n \"Change my password\". El paso final es que ser redirigido a la p\u00e1gina de \"Password reset complete\". Restablecimiento completo de la contrase\u00f1a predeterminada Comprobar que todo ha funcionado, hacer clic en el enlace \"Log in\" y usar la nueva contrase\u00f1a.","title":"Restablecer la contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#12-plantillas-personalizadas","text":"S\u00f3lo hay que crear nuevas plantillas para personalizar el el aspecto y la sensaci\u00f3n del restablecimiento de la contrase\u00f1a. Crear cuatro nuevos archivos de plantilla. (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reset_form.html (noticias) $ plantillas de toque/registro/contrase\u00f1a_reset_done.html (noticias) $ plantillas de toque/registro/confirmaci\u00f3n_contrase\u00f1a.html (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reinicio_completo.html Se empieza con el formulario de restablecimiento de contrase\u00f1a que es password_reset_form.html . FICHERO: plantillas/registro/contrase\u00f1a_reset_form.html {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} <h1>Forgot your password?</h1> <p>Enter your email address below, and we'll email instructions for setting a new one.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Send me instructions!\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que usamos t\u00edtulos \"block\" en el base.html se puede anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Al usar form.as_p simplemente se est\u00e1 mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de la contrase\u00f1a predeterminada. Finalmente se incluye un enviar el bot\u00f3n y se usa el estilo de Bootstrap btn btn-success para hacerlo verde. Ahora se puede actualizar las otras tres p\u00e1ginas. Cada una tiene la misma forma de extender base.html , un nuevo t\u00edtulo, un nuevo texto de contenido, y para \"password reset confirm\" una actualizaci\u00f3n tambi\u00e9n. FICHERO: templates/registration/password_reset_done.html {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} <h1>Check your inbox.</h1> <p>We've emailed you instructions for setting your password. You should receive the email shortly!</p> {% endblock %} Confirmar los cambios en http://127.0.0.1:8000/users/password_reset/done/ A continuaci\u00f3n, la p\u00e1gina de confirmaci\u00f3n del restablecimiento de la contrase\u00f1a. FICHERO: templates/registration/password_reset_confirm.html {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} <h1>Set a new password!</h1> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} Abrir la linea de comandos y tomar el enlace URL del correo electr\u00f3nico enviado a la consola. Finalmente aqu\u00ed est\u00e1 el c\u00f3digo completo para reestablecer la password. FICHERO: templates/registration/password_reset_complete.html {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} <h1>Password reset complete</h1> <p>Your new password has been set. You can log in now on the <a href=\"{% url 'login' %}\">log in page</a>.</p> {% endblock %}","title":"12.. Plantillas personalizadas"},{"location":"12_cambio_y_restauracion_de_contrasenas/#conclusion","text":"En el pr\u00f3ximo cap\u00edtulo conectaremos nuestra aplicaci\u00f3n para peri\u00f3dicos con el servicio de correo electr\u00f3nico SendGrid para enviar realmente nuestros correos electr\u00f3nicos automatizados a los usuarios, en lugar de emitirlos en nuestra consola de l\u00ednea de comandos.","title":"Conclusi\u00f3n"},{"location":"13_email/","text":"12. Correo electr\u00f3nico Ahora se quiere que los correos electr\u00f3nicos se env\u00eden realmente a los usuarios, no s\u00f3lo a la consola de l\u00ednea de comandos. Se precisa de una SendGrid y actualizar los archivos settings.py . Django se encargar\u00e1 del resto. 12.1. SendGrid SendGrid es un servicio popular para el env\u00edo de e-mails transaccionales, as\u00ed que lo usaremos. A Django no le importa el servicio que se elija; se puede usar MailGun o cualquier otro servicio con la misma facilidad. En la p\u00e1gina de inicio de SendGrid , haga clic en el gran bot\u00f3n azul para \"See Plans and Pricing\". En la siguiente p\u00e1gina, desplarse ligeramente hacia abajo y buscar en el lado izquierdo el bot\u00f3n \"Try for Free\". SendGrid proporciona un nivel gratuito que se puede utilizar, aunque lo hace un poco dif\u00edcil de encontrar. Registrarse para obtener su cuenta gratuita en la siguiente p\u00e1gina. Asegurarse de que la cuenta de correo electr\u00f3nico que se utiliza para SendGrid no sea la misma cuenta de correo electr\u00f3nico que tiene para la cuenta de superusuario en el proyecto de Newspaper o pueden suceder errores extra\u00f1os. Luego de confirmar su nueva cuenta a trav\u00e9s de un correo electr\u00f3nico, se pedir\u00e1 que ingrese y se lo llevar\u00e1 a la p\u00e1gina del panel de control de SendGrid . Ahora podemos configurar el c\u00f3digo Django en el archivo settings.py . Primero se actualizar\u00e1 el backend de correo electr\u00f3nico para usar SMTP. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Luego, justo debajo, agregar las siguientes cinco l\u00edneas de configuraci\u00f3n de correo electr\u00f3nico. Tener en cuenta que lo ideal ser\u00eda almacenar informaci\u00f3n segura como la contrase\u00f1a en variables de entorno, pero no estamos aqu\u00ed para mantener las cosas simples. FICHERO: newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = 587 EMAIL_USE_TLS = True Aseg\u00fararse de usar el nombre de usuario SendGrid para EMAIL_HOST_USER y la contrase\u00f1a de EMAIL_HOST_PASSWORD. Eso es todo. Correos electr\u00f3nicos personalizados Utiliza la barra de b\u00fasqueda de Github e introduce algunas palabras del texto del correo electr\u00f3nico. Si se escribe \"You're receiving this email because\" se terminar\u00e1 en una p\u00e1gina muy concreta de Github. El primer resultado es el que queremos. Muestra que el c\u00f3digo se encuentra en django/contrib/admin/templates/registration/password_reset_email.html . Eso significa que en la app contrib el archivo que queremos se llama password_reset_email.html . Aqu\u00ed est\u00e1 el texto por defecto del c\u00f3digo fuente de Django. {% load i18n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Para cambiarlo, se necesita crear un nuevo archivo password_reset_email.html en la carpeta registration . (news) $ touch templates/registration/password_reset_email.html Usar el siguiente c\u00f3digo que ajusta lo que Django proporcion\u00f3 por defecto. FICHERO: templates/registration/password_reset_email.html {% load i18n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make this request, you can safely ignore this email. Otherwise, click the button below to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% endautoescape %} Arriba se carga la etiqueta de la plantilla i18n lo que significa que este texto puede ser traducido a varios idiomas. Django tiene un s\u00f3lido soporte de internacionalizaci\u00f3n aunque cubrirlo est\u00e1 fuera de nuestro alcance, por ahora. Se saluda al usuario por su nombre gracias a user.get_username . Luego se usa el bloque reset_link incorporado para incluir el enlace URL personalizado. Tambi\u00e9n se actualiza el t\u00edtulo del asunto del correo electr\u00f3nico. Para ello, se crea un nuevo archivo templates/registration/password_reset_subject.txt . (news) $ touch templates/registration/password_reset_subject.txt Luego agregar la siguiente l\u00ednea de c\u00f3digo al archivo password_reset_subject.txt . Please reset your password Conclusi\u00f3n Se ha terminado de implementar un flujo de autenticaci\u00f3n de usuario completo. Los usuarios pueden ingresar una nueva cuenta, iniciar sesi\u00f3n, cerrar sesi\u00f3n, cambiar contrase\u00f1a y restablecerla.","title":"13. Email"},{"location":"13_email/#12-correo-electronico","text":"Ahora se quiere que los correos electr\u00f3nicos se env\u00eden realmente a los usuarios, no s\u00f3lo a la consola de l\u00ednea de comandos. Se precisa de una SendGrid y actualizar los archivos settings.py . Django se encargar\u00e1 del resto.","title":"12. Correo electr\u00f3nico"},{"location":"13_email/#121-sendgrid","text":"SendGrid es un servicio popular para el env\u00edo de e-mails transaccionales, as\u00ed que lo usaremos. A Django no le importa el servicio que se elija; se puede usar MailGun o cualquier otro servicio con la misma facilidad. En la p\u00e1gina de inicio de SendGrid , haga clic en el gran bot\u00f3n azul para \"See Plans and Pricing\". En la siguiente p\u00e1gina, desplarse ligeramente hacia abajo y buscar en el lado izquierdo el bot\u00f3n \"Try for Free\". SendGrid proporciona un nivel gratuito que se puede utilizar, aunque lo hace un poco dif\u00edcil de encontrar. Registrarse para obtener su cuenta gratuita en la siguiente p\u00e1gina. Asegurarse de que la cuenta de correo electr\u00f3nico que se utiliza para SendGrid no sea la misma cuenta de correo electr\u00f3nico que tiene para la cuenta de superusuario en el proyecto de Newspaper o pueden suceder errores extra\u00f1os. Luego de confirmar su nueva cuenta a trav\u00e9s de un correo electr\u00f3nico, se pedir\u00e1 que ingrese y se lo llevar\u00e1 a la p\u00e1gina del panel de control de SendGrid . Ahora podemos configurar el c\u00f3digo Django en el archivo settings.py . Primero se actualizar\u00e1 el backend de correo electr\u00f3nico para usar SMTP. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Luego, justo debajo, agregar las siguientes cinco l\u00edneas de configuraci\u00f3n de correo electr\u00f3nico. Tener en cuenta que lo ideal ser\u00eda almacenar informaci\u00f3n segura como la contrase\u00f1a en variables de entorno, pero no estamos aqu\u00ed para mantener las cosas simples. FICHERO: newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = 587 EMAIL_USE_TLS = True Aseg\u00fararse de usar el nombre de usuario SendGrid para EMAIL_HOST_USER y la contrase\u00f1a de EMAIL_HOST_PASSWORD. Eso es todo.","title":"12.1. SendGrid"},{"location":"13_email/#correos-electronicos-personalizados","text":"Utiliza la barra de b\u00fasqueda de Github e introduce algunas palabras del texto del correo electr\u00f3nico. Si se escribe \"You're receiving this email because\" se terminar\u00e1 en una p\u00e1gina muy concreta de Github. El primer resultado es el que queremos. Muestra que el c\u00f3digo se encuentra en django/contrib/admin/templates/registration/password_reset_email.html . Eso significa que en la app contrib el archivo que queremos se llama password_reset_email.html . Aqu\u00ed est\u00e1 el texto por defecto del c\u00f3digo fuente de Django. {% load i18n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Para cambiarlo, se necesita crear un nuevo archivo password_reset_email.html en la carpeta registration . (news) $ touch templates/registration/password_reset_email.html Usar el siguiente c\u00f3digo que ajusta lo que Django proporcion\u00f3 por defecto. FICHERO: templates/registration/password_reset_email.html {% load i18n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make this request, you can safely ignore this email. Otherwise, click the button below to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% endautoescape %} Arriba se carga la etiqueta de la plantilla i18n lo que significa que este texto puede ser traducido a varios idiomas. Django tiene un s\u00f3lido soporte de internacionalizaci\u00f3n aunque cubrirlo est\u00e1 fuera de nuestro alcance, por ahora. Se saluda al usuario por su nombre gracias a user.get_username . Luego se usa el bloque reset_link incorporado para incluir el enlace URL personalizado. Tambi\u00e9n se actualiza el t\u00edtulo del asunto del correo electr\u00f3nico. Para ello, se crea un nuevo archivo templates/registration/password_reset_subject.txt . (news) $ touch templates/registration/password_reset_subject.txt Luego agregar la siguiente l\u00ednea de c\u00f3digo al archivo password_reset_subject.txt . Please reset your password","title":"Correos electr\u00f3nicos personalizados"},{"location":"13_email/#conclusion","text":"Se ha terminado de implementar un flujo de autenticaci\u00f3n de usuario completo. Los usuarios pueden ingresar una nueva cuenta, iniciar sesi\u00f3n, cerrar sesi\u00f3n, cambiar contrase\u00f1a y restablecerla.","title":"Conclusi\u00f3n"},{"location":"14_newspaper_app/","text":"14. Newspaper app Habr\u00e1 una p\u00e1gina de art\u00edculos en la que los periodistas podr\u00e1n publicar art\u00edculos, establecer permisos para que s\u00f3lo el autor de un art\u00edculo pueda editarlo o borrarlo, y finalmente a\u00f1adir la posibilidad de que otros usuarios escriban comentarios en cada art\u00edculo, lo que introducir\u00e1 el concepto de claves externas . 14.1. Articles app No hay reglas r\u00edgidas sobre c\u00f3mo llamar a las aplicaciones, excepto que no se puede usar el nombre de una aplicaci\u00f3n incorporada. Una regla general es usar el plural del nombre de una aplicaci\u00f3n - posts , payments , users , etc.- a menos que hacerlo sea obviamente incorrecto como en el caso com\u00fan de blog donde el singular tiene m\u00e1s sentido. Crear la aplicaci\u00f3n para los nuevos art\u00edculos. (news) $ python manage.py startapp articles A\u00f1adirla a INSTALLED_APPS y actualizar la zona horaria ya que se marcar\u00e1 la hora de los art\u00edculos. Para averiguar la zona horaria correspondiente: >>> from pytz import all_timezones, common_timezones >>> 'Europe/Madrid' in all_timezones True FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd Party 'crispy_forms', # Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'Europe/Madrid' Se define el modelo de base de datos con cuatro campos: title , body , date , y author . Para el campo autor se har\u00e1 referencia al modelo de usuario personalizado users.CustomUser que se ha establecido en el archivo settings.py como AUTH_USER_MODEL . Por lo tanto, si se importa la configuraci\u00f3n podemos referirnos a ella como settings.AUTH_USER_MODEL . Tambi\u00e9n se implementa la 'buena mejores pr\u00e1ctica' de definir un get_absolute_url desde el principio y un m\u00e9todo __str__ para ver el modelo en la interfaz de administraci\u00f3n. FICHERO: articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length=255) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Como se tiene una nueva aplicaci\u00f3n y modelo, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo a la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate En este punto es conveniente ir a la administraci\u00f3n para jugar con el modelo antes de construir las urls/vistas/plantillas necesarias para mostrar los datos en el sitio web. Pero primero necesitamos actualizar admin.py para que se muestre la nueva aplicaci\u00f3n. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Iniciar el servidor, ir a la p\u00e1gina de administraci\u00f3n y a\u00f1adir algunos art\u00edculos de ejemplo. No se podr\u00e1 a\u00f1adir la fecha porque fue a\u00f1adida autom\u00e1ticamente por Django en nuestro nombre y no puede ser cambiada en la administraci\u00f3n. Se podr\u00e1 hacer que la fecha sea editable -en aplicaciones m\u00e1s complejas es com\u00fan tener un campo created_at y updated_at - pero para mantener las cosas simples, por ahora s\u00f3lo se tendr\u00e1 date establecida por Django al momento de la creaci\u00f3n. 14.2. URLs y Vistas Vamos a hacer que los art\u00edculos aparezcan en articles/ . FICHERO: # newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Crear ahora la vista usando la gen\u00e9rica ListView de Django. FICHERO: # articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' Los dos \u00fanicos campos que se necesitan especificar son el modelo de art\u00edculo y el nombre de la plantilla que ser\u00e1 article_list.html . El \u00faltimo paso es crear la plantilla. Bootstrap tiene un componente incorporado llamado Cards que se puede personalizar para los art\u00edculos individuales. Recordar que ListView devuelve un objeto llamado object_list que se puede iterar con un bucle for. Dentro de cada art\u00edculo se muestra el t\u00edtulo, el cuerpo, el autor y la fecha. Incluso se proporcionan enlaces a las funciones de \"editar\" y \"borrar\" que a\u00fan no se han construido. FICHERO: templates/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> {{ article.body }} </div> <div class=\"card-footer text-center text-muted\"> <a href=\"#\">Edit</a> | <a href=\"#\">Delete</a> </div> </div> <br /> {% endfor %} {% endblock content %} Arracar el servidor y consultar la p\u00e1gina articles/ 14.3. Editar/Borrar Se necesitan nuevas urls, vistas y plantillas. Se puede aprovechar el hecho de que Django a\u00f1ade autom\u00e1ticamente una clave primaria a cada base de datos. Por lo tanto, el primer art\u00edculo con una clave primaria de 1 estar\u00e1 en articles/1/edit/ y la ruta de borrado estar\u00e1 en articles/1/delete/ . FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path('<int:pk>/edit/',views.ArticleUpdateView.as_view(), name='article_edit'),# new path('<int:pk>/', views.ArticleDetailView.as_view(), name='article_detail'), # new path('<int:pk>/delete/', views.ArticleDeleteView.as_view(), name='article_delete'), # new ] Ahora se escribir\u00e1n las vistas que usar\u00e1n las vistas gen\u00e9ricas basadas en clases de Django para DetailView , UpdateView y DeleteView . Especificamos qu\u00e9 campos pueden ser actualizados - title y body - y d\u00f3nde redirigir al usuario despu\u00e9s de borrar un art\u00edculo: article_list . FICHERO: articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') Finalmente se necesita a\u00f1adir las nuevas plantillas. Se empezar\u00e1 con la p\u00e1gina de detalles que mostrar\u00e1 el t\u00edtulo, la fecha, el cuerpo y el autor con enlaces para editar y borrar. Tambi\u00e9n enlazar\u00e1 hacia atr\u00e1s con todos los art\u00edculos. El nombre de la ruta de edici\u00f3n es article_edit y tenemos que pasarle su clave principal article.pk . El nombre de la ruta de borrado es article_delete y tambi\u00e9n necesita una clave primaria article.pk . La p\u00e1gina de art\u00edculos es una ListView por lo que no necesita que se le pase ning\u00fan argumento adicional. FICHERO: templates/article_detail.html {% extends 'base.html' %} {% block content %} <div class=\"article-entry\"> <h2>{{ object.title }}</h2> <p>by {{ object.author }} | {{ object.date }}</p> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a></p> <p>Back to <a href=\"{% url 'article_list' %}\">All Articles</a>.</p> {% endblock content %} Para las p\u00e1ginas de edici\u00f3n y borrado se puede usar el estilo del bot\u00f3n de Bootstrap para hacer que el bot\u00f3n de edici\u00f3n sea azul claro y el de borrado rojo. FICHERO: templates/article_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-info ml-2\" type=\"submit\">Update</button> </form> {% endblock %} FICHERO: templates/article_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ article.title }}\"?</p> <button class=\"btn btn-danger ml- \" type=\"submit\">Confirm</button> </form> {% endblock %} Como paso final se a\u00f1aden los enlaces de edici\u00f3n y borrado a la p\u00e1gina de listas en la clase div para el card-foot . Ser\u00e1n los mismos que los a\u00f1adidos a la p\u00e1gina detalle. FICHERO: templates/article_list.html ... <div class=\"card-footer text-center text-muted\"> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> ... Arrancar el servidor e ir a la p\u00e1gina de articles/ y pulsar sobre Edit . Si se actualiza el campo \"t\u00edtulo\" y se hace clic en actualizar, el usuario ser\u00e1 redirigido a la p\u00e1gina de detalles que mostrar\u00e1 el nuevo cambio. Si se hace clic en el enlace Delete el usuario ser\u00e1 redirigido a la p\u00e1gina de borrado. Si se presiona el aterrador bot\u00f3n rojo Confirm el usuario ser\u00e1 redirigido a la p\u00e1gina de art\u00edculos donde ahora habr\u00e1 una entrada menos. 00000000000000000000000000000000000000000000000000000000000000000000000000000 14.Crear la page El paso final es una p\u00e1gina de creaci\u00f3n de nuevos art\u00edculos que podemos hacer con el CreateView de Django. Nuestros tres pasos son crear una vista, una url y una plantilla. Este flujo ya deber\u00eda resultar bastante familiar. En nuestro archivo de vistas agregamos CreateView a las importaciones de la parte superior y hacemos una nueva clase ArticleCreateView que especifica nuestro modelo, plantilla y los campos disponibles. FICHERO: articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... N\u00f3tese que nuestros campos tienen autor ya que queremos asociar un nuevo art\u00edculo con un autor, sin embargo una vez que un art\u00edculo ha sido creado no queremos que un usuario pueda cambiar el autor, por lo que ArticleUpdateView s\u00f3lo tiene los campos ['title', 'body',] . Actualizar nuestro archivo de urls con la nueva ruta para la vista. FICHERO: articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Luego, salga del servidor Control+c para crear una nueva plantilla llamada article_new.html . (news) $ touch templates/article_new.html Y actualizarlo con el siguiente c\u00f3digo HTML. FICHERO: templates/article_new.html {% extends 'base.html' %} {% block content %} <h1>New article</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-success ml- \" type=\"submit\">Save</button> </form> {% endblock %} Como paso final deber\u00edamos a\u00f1adir un enlace para crear nuevos art\u00edculos en nuestro navegador para que sea accesible en todas partes del sitio para los usuarios registrados. FICHERO: templates/base.html ... <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb- \"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> {% if user.is_authenticated %} <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"><a href=\"{% url 'article_new' %}\">+ New</a></li> </ul> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-tar\\ get=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-\\ label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> ... \u00bfY por qu\u00e9 no usar Bootstrap para mejorar nuestra p\u00e1gina web original ahora tambi\u00e9n? Podemos actualizar plantillas/home.html como sigue. FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} <div class=\"jumbotron\"> <h1 class=\"display- \">Newspaper app</h1> <p class=\"lead\">A Newspaper website built with Django.</p> <p class=\"lead\"> <a class=\"btn btn-primary btn-lg\" href=\"{% url 'article_list' %}\" role=\"butt\\ on\">View All Articles</a> </p> </div> {% endblock %} Ya hemos terminado. Vamos a confirmar que todo funciona como se esperaba. Arranca el servidor de nuevo python manage.py runserver y navega a nuestra p\u00e1gina web en: http://127.0.0.1:8000/.273 P\u00e1gina principal con nuevo enlace en la navegaci\u00f3n Haz clic en el enlace \"+ Nuevo\" en la parte superior del navegador y ser\u00e1s redirigido a nuestra p\u00e1gina de creaci\u00f3n. Crear p\u00e1gina Adelante, crea un nuevo art\u00edculo. Luego haz clic en el bot\u00f3n \"Guardar\". Ser\u00e1s redirigido a la p\u00e1gina de detalles. \u00bfPor qu\u00e9? Porque en nuestro archivo models.py establecemos el m\u00e9todo get_-absolute_url en article_detail . Este es un buen enfoque porque si m\u00e1s tarde cambiamos el patr\u00f3n de url de la p\u00e1gina de detalles a, digamos, art\u00edculos/detalles/ / , la redirecci\u00f3n seguir\u00e1 funcionando. Se utilizar\u00e1 cualquier ruta asociada a article_detail; no hay c\u00f3digo duro de la ruta en s\u00ed. P\u00e1gina de detalles Tengan en cuenta tambi\u00e9n que la clave principal aqu\u00ed est\u00e1 en el URL. Aunque s\u00f3lo estamos mostrando tres art\u00edculos ahora mismo, Django no reordena las claves primarias s\u00f3lo porque hayamos borrado una. En la pr\u00e1ctica, la mayor\u00eda de los sitios del mundo real no borran nada; en su lugar, \"ocultan\" los campos borrados, ya que esto facilita el mantenimiento de la integridad de una base de datos y da la opci\u00f3n de \"recuperar\" m\u00e1s adelante si es necesario. Con nuestro enfoque actual, una vez que algo se borra, \u00a1se va para siempre! Haga clic en el enlace de \"Todos los art\u00edculos\" para ver nuestra nueva p\u00e1gina de art\u00edculos. P\u00e1gina de art\u00edculos actualizada Hay un nuevo art\u00edculo en la parte inferior como se esperaba. Conclusi\u00f3n... Hemos creado una aplicaci\u00f3n de art\u00edculos dedicados con la funcionalidad de CRUD. Pero a\u00fan no hay permisos o autorizaciones, lo que significa que cualquiera puede hacer cualquier cosa. Un usuario desconectado puede visitar todas las URLs y cualquier usuario conectado puede editar o eliminar un art\u00edculo existente, \u00a1incluso uno que no sea suyo! En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos permisos y autorizaciones a nuestro proyecto para arreglar esto.","title":"14. Newspaper app"},{"location":"14_newspaper_app/#14-newspaper-app","text":"Habr\u00e1 una p\u00e1gina de art\u00edculos en la que los periodistas podr\u00e1n publicar art\u00edculos, establecer permisos para que s\u00f3lo el autor de un art\u00edculo pueda editarlo o borrarlo, y finalmente a\u00f1adir la posibilidad de que otros usuarios escriban comentarios en cada art\u00edculo, lo que introducir\u00e1 el concepto de claves externas .","title":"14. Newspaper app"},{"location":"14_newspaper_app/#141-articles-app","text":"No hay reglas r\u00edgidas sobre c\u00f3mo llamar a las aplicaciones, excepto que no se puede usar el nombre de una aplicaci\u00f3n incorporada. Una regla general es usar el plural del nombre de una aplicaci\u00f3n - posts , payments , users , etc.- a menos que hacerlo sea obviamente incorrecto como en el caso com\u00fan de blog donde el singular tiene m\u00e1s sentido. Crear la aplicaci\u00f3n para los nuevos art\u00edculos. (news) $ python manage.py startapp articles A\u00f1adirla a INSTALLED_APPS y actualizar la zona horaria ya que se marcar\u00e1 la hora de los art\u00edculos. Para averiguar la zona horaria correspondiente: >>> from pytz import all_timezones, common_timezones >>> 'Europe/Madrid' in all_timezones True FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd Party 'crispy_forms', # Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'Europe/Madrid' Se define el modelo de base de datos con cuatro campos: title , body , date , y author . Para el campo autor se har\u00e1 referencia al modelo de usuario personalizado users.CustomUser que se ha establecido en el archivo settings.py como AUTH_USER_MODEL . Por lo tanto, si se importa la configuraci\u00f3n podemos referirnos a ella como settings.AUTH_USER_MODEL . Tambi\u00e9n se implementa la 'buena mejores pr\u00e1ctica' de definir un get_absolute_url desde el principio y un m\u00e9todo __str__ para ver el modelo en la interfaz de administraci\u00f3n. FICHERO: articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length=255) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Como se tiene una nueva aplicaci\u00f3n y modelo, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo a la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate En este punto es conveniente ir a la administraci\u00f3n para jugar con el modelo antes de construir las urls/vistas/plantillas necesarias para mostrar los datos en el sitio web. Pero primero necesitamos actualizar admin.py para que se muestre la nueva aplicaci\u00f3n. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Iniciar el servidor, ir a la p\u00e1gina de administraci\u00f3n y a\u00f1adir algunos art\u00edculos de ejemplo. No se podr\u00e1 a\u00f1adir la fecha porque fue a\u00f1adida autom\u00e1ticamente por Django en nuestro nombre y no puede ser cambiada en la administraci\u00f3n. Se podr\u00e1 hacer que la fecha sea editable -en aplicaciones m\u00e1s complejas es com\u00fan tener un campo created_at y updated_at - pero para mantener las cosas simples, por ahora s\u00f3lo se tendr\u00e1 date establecida por Django al momento de la creaci\u00f3n.","title":"14.1. Articles app"},{"location":"14_newspaper_app/#142-urls-y-vistas","text":"Vamos a hacer que los art\u00edculos aparezcan en articles/ . FICHERO: # newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Crear ahora la vista usando la gen\u00e9rica ListView de Django. FICHERO: # articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' Los dos \u00fanicos campos que se necesitan especificar son el modelo de art\u00edculo y el nombre de la plantilla que ser\u00e1 article_list.html . El \u00faltimo paso es crear la plantilla. Bootstrap tiene un componente incorporado llamado Cards que se puede personalizar para los art\u00edculos individuales. Recordar que ListView devuelve un objeto llamado object_list que se puede iterar con un bucle for. Dentro de cada art\u00edculo se muestra el t\u00edtulo, el cuerpo, el autor y la fecha. Incluso se proporcionan enlaces a las funciones de \"editar\" y \"borrar\" que a\u00fan no se han construido. FICHERO: templates/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> {{ article.body }} </div> <div class=\"card-footer text-center text-muted\"> <a href=\"#\">Edit</a> | <a href=\"#\">Delete</a> </div> </div> <br /> {% endfor %} {% endblock content %} Arracar el servidor y consultar la p\u00e1gina articles/","title":"14.2. URLs y Vistas"},{"location":"14_newspaper_app/#143-editarborrar","text":"Se necesitan nuevas urls, vistas y plantillas. Se puede aprovechar el hecho de que Django a\u00f1ade autom\u00e1ticamente una clave primaria a cada base de datos. Por lo tanto, el primer art\u00edculo con una clave primaria de 1 estar\u00e1 en articles/1/edit/ y la ruta de borrado estar\u00e1 en articles/1/delete/ . FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path('<int:pk>/edit/',views.ArticleUpdateView.as_view(), name='article_edit'),# new path('<int:pk>/', views.ArticleDetailView.as_view(), name='article_detail'), # new path('<int:pk>/delete/', views.ArticleDeleteView.as_view(), name='article_delete'), # new ] Ahora se escribir\u00e1n las vistas que usar\u00e1n las vistas gen\u00e9ricas basadas en clases de Django para DetailView , UpdateView y DeleteView . Especificamos qu\u00e9 campos pueden ser actualizados - title y body - y d\u00f3nde redirigir al usuario despu\u00e9s de borrar un art\u00edculo: article_list . FICHERO: articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') Finalmente se necesita a\u00f1adir las nuevas plantillas. Se empezar\u00e1 con la p\u00e1gina de detalles que mostrar\u00e1 el t\u00edtulo, la fecha, el cuerpo y el autor con enlaces para editar y borrar. Tambi\u00e9n enlazar\u00e1 hacia atr\u00e1s con todos los art\u00edculos. El nombre de la ruta de edici\u00f3n es article_edit y tenemos que pasarle su clave principal article.pk . El nombre de la ruta de borrado es article_delete y tambi\u00e9n necesita una clave primaria article.pk . La p\u00e1gina de art\u00edculos es una ListView por lo que no necesita que se le pase ning\u00fan argumento adicional. FICHERO: templates/article_detail.html {% extends 'base.html' %} {% block content %} <div class=\"article-entry\"> <h2>{{ object.title }}</h2> <p>by {{ object.author }} | {{ object.date }}</p> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a></p> <p>Back to <a href=\"{% url 'article_list' %}\">All Articles</a>.</p> {% endblock content %} Para las p\u00e1ginas de edici\u00f3n y borrado se puede usar el estilo del bot\u00f3n de Bootstrap para hacer que el bot\u00f3n de edici\u00f3n sea azul claro y el de borrado rojo. FICHERO: templates/article_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-info ml-2\" type=\"submit\">Update</button> </form> {% endblock %} FICHERO: templates/article_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ article.title }}\"?</p> <button class=\"btn btn-danger ml- \" type=\"submit\">Confirm</button> </form> {% endblock %} Como paso final se a\u00f1aden los enlaces de edici\u00f3n y borrado a la p\u00e1gina de listas en la clase div para el card-foot . Ser\u00e1n los mismos que los a\u00f1adidos a la p\u00e1gina detalle. FICHERO: templates/article_list.html ... <div class=\"card-footer text-center text-muted\"> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> ... Arrancar el servidor e ir a la p\u00e1gina de articles/ y pulsar sobre Edit . Si se actualiza el campo \"t\u00edtulo\" y se hace clic en actualizar, el usuario ser\u00e1 redirigido a la p\u00e1gina de detalles que mostrar\u00e1 el nuevo cambio. Si se hace clic en el enlace Delete el usuario ser\u00e1 redirigido a la p\u00e1gina de borrado. Si se presiona el aterrador bot\u00f3n rojo Confirm el usuario ser\u00e1 redirigido a la p\u00e1gina de art\u00edculos donde ahora habr\u00e1 una entrada menos. 00000000000000000000000000000000000000000000000000000000000000000000000000000","title":"14.3. Editar/Borrar"},{"location":"14_newspaper_app/#14crear-la-page","text":"El paso final es una p\u00e1gina de creaci\u00f3n de nuevos art\u00edculos que podemos hacer con el CreateView de Django. Nuestros tres pasos son crear una vista, una url y una plantilla. Este flujo ya deber\u00eda resultar bastante familiar. En nuestro archivo de vistas agregamos CreateView a las importaciones de la parte superior y hacemos una nueva clase ArticleCreateView que especifica nuestro modelo, plantilla y los campos disponibles. FICHERO: articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... N\u00f3tese que nuestros campos tienen autor ya que queremos asociar un nuevo art\u00edculo con un autor, sin embargo una vez que un art\u00edculo ha sido creado no queremos que un usuario pueda cambiar el autor, por lo que ArticleUpdateView s\u00f3lo tiene los campos ['title', 'body',] . Actualizar nuestro archivo de urls con la nueva ruta para la vista. FICHERO: articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Luego, salga del servidor Control+c para crear una nueva plantilla llamada article_new.html . (news) $ touch templates/article_new.html Y actualizarlo con el siguiente c\u00f3digo HTML. FICHERO: templates/article_new.html {% extends 'base.html' %} {% block content %} <h1>New article</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-success ml- \" type=\"submit\">Save</button> </form> {% endblock %} Como paso final deber\u00edamos a\u00f1adir un enlace para crear nuevos art\u00edculos en nuestro navegador para que sea accesible en todas partes del sitio para los usuarios registrados. FICHERO: templates/base.html ... <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb- \"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> {% if user.is_authenticated %} <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"><a href=\"{% url 'article_new' %}\">+ New</a></li> </ul> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-tar\\ get=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-\\ label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> ... \u00bfY por qu\u00e9 no usar Bootstrap para mejorar nuestra p\u00e1gina web original ahora tambi\u00e9n? Podemos actualizar plantillas/home.html como sigue. FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} <div class=\"jumbotron\"> <h1 class=\"display- \">Newspaper app</h1> <p class=\"lead\">A Newspaper website built with Django.</p> <p class=\"lead\"> <a class=\"btn btn-primary btn-lg\" href=\"{% url 'article_list' %}\" role=\"butt\\ on\">View All Articles</a> </p> </div> {% endblock %} Ya hemos terminado. Vamos a confirmar que todo funciona como se esperaba. Arranca el servidor de nuevo python manage.py runserver y navega a nuestra p\u00e1gina web en: http://127.0.0.1:8000/.273 P\u00e1gina principal con nuevo enlace en la navegaci\u00f3n Haz clic en el enlace \"+ Nuevo\" en la parte superior del navegador y ser\u00e1s redirigido a nuestra p\u00e1gina de creaci\u00f3n. Crear p\u00e1gina Adelante, crea un nuevo art\u00edculo. Luego haz clic en el bot\u00f3n \"Guardar\". Ser\u00e1s redirigido a la p\u00e1gina de detalles. \u00bfPor qu\u00e9? Porque en nuestro archivo models.py establecemos el m\u00e9todo get_-absolute_url en article_detail . Este es un buen enfoque porque si m\u00e1s tarde cambiamos el patr\u00f3n de url de la p\u00e1gina de detalles a, digamos, art\u00edculos/detalles/ / , la redirecci\u00f3n seguir\u00e1 funcionando. Se utilizar\u00e1 cualquier ruta asociada a article_detail; no hay c\u00f3digo duro de la ruta en s\u00ed. P\u00e1gina de detalles Tengan en cuenta tambi\u00e9n que la clave principal aqu\u00ed est\u00e1 en el URL. Aunque s\u00f3lo estamos mostrando tres art\u00edculos ahora mismo, Django no reordena las claves primarias s\u00f3lo porque hayamos borrado una. En la pr\u00e1ctica, la mayor\u00eda de los sitios del mundo real no borran nada; en su lugar, \"ocultan\" los campos borrados, ya que esto facilita el mantenimiento de la integridad de una base de datos y da la opci\u00f3n de \"recuperar\" m\u00e1s adelante si es necesario. Con nuestro enfoque actual, una vez que algo se borra, \u00a1se va para siempre! Haga clic en el enlace de \"Todos los art\u00edculos\" para ver nuestra nueva p\u00e1gina de art\u00edculos. P\u00e1gina de art\u00edculos actualizada Hay un nuevo art\u00edculo en la parte inferior como se esperaba.","title":"14.Crear la page"},{"location":"14_newspaper_app/#conclusion","text":"Hemos creado una aplicaci\u00f3n de art\u00edculos dedicados con la funcionalidad de CRUD. Pero a\u00fan no hay permisos o autorizaciones, lo que significa que cualquiera puede hacer cualquier cosa. Un usuario desconectado puede visitar todas las URLs y cualquier usuario conectado puede editar o eliminar un art\u00edculo existente, \u00a1incluso uno que no sea suyo! En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos permisos y autorizaciones a nuestro proyecto para arreglar esto.","title":"Conclusi\u00f3n..."},{"location":"15/","text":"Permisos y Autorizaci\u00f3n Hay varios problemas con nuestro actual sitio web del peri\u00f3dico. Por un lado, queremos que nuestro peri\u00f3dico sea financieramente sostenible. Con m\u00e1s tiempo podr\u00edamos a\u00f1adir una aplicaci\u00f3n de pago para cobrar por el acceso, pero por ahora requeriremos que un usuario se registre para ver cualquier art\u00edculo. Esto se conoce como autorizaci\u00f3n. Es com\u00fan establecer diferentes reglas acerca de qui\u00e9n est\u00e1 autorizado para ver \u00e1reas de su sitio. Tenga en cuenta que esto es diferente de la autenticaci\u00f3n, que es el proceso de registro e inicio de sesi\u00f3n de los usuarios. La autorizaci\u00f3n restringe el acceso; la autenticaci\u00f3n permite el flujo de registro e inicio de sesi\u00f3n de un usuario. Como marco web maduro, Django tiene incorporada una funcionalidad de autorizaci\u00f3n que podemos utilizar r\u00e1pidamente. En este cap\u00edtulo limitaremos el acceso a varias p\u00e1ginas s\u00f3lo a los usuarios que hayan iniciado la sesi\u00f3n. Tambi\u00e9n a\u00f1adiremos permisos para que s\u00f3lo el autor de un art\u00edculo pueda actualizarlo o borrarlo; \u00a1ahora cualquier usuario puede hacerlo! Mejora de CreateView En la actualidad el autor de un nuevo art\u00edculo puede ser fijado a cualquier usuario. En cambio, deber\u00eda ser autom\u00e1ticamente establecido al usuario actual. Entonces estableceremos permisos de edici\u00f3n/borrado para que s\u00f3lo el autor de un art\u00edculo pueda hacer tales cambios. El CreateView por defecto nos proporciona una gran funcionalidad pero para establecer el usuario actual como autor necesitaremos personalizarlo. Eliminaremos el autor de los campos y en su lugar lo estableceremos autom\u00e1ticamente a trav\u00e9s del m\u00e9todo form_valid. FICHERO: articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... \u00bfC\u00f3mo supe que pod\u00eda actualizar CreateView de esta manera? La respuesta es que mir\u00e9 el c\u00f3digo fuente y us\u00e9 Google. Las vistas gen\u00e9ricas basadas en clases son incre\u00edbles para empezar nuevos proyectos, pero cuando quieres personalizarlas, es necesario arremangarse y empezar a entender lo que pasa bajo el cap\u00f3. Cuanto m\u00e1s uses y personalices las vistas incorporadas, m\u00e1s c\u00f3modo te sentir\u00e1s haciendo personalizaciones como esta. Lo m\u00e1s probable es que lo que est\u00e1s intentando hacer ya haya sido resuelto en alg\u00fan lugar, ya sea dentro de Django mismo o en un foro como Stack Overflow. No tengas miedo de pedir ayuda! Ahora recarga el navegador e intenta hacer clic en el enlace \"+ Nuevo\" en la parte superior de la pantalla. Se redirigir\u00e1 a la p\u00e1gina de creaci\u00f3n actualizada donde el autor ya no es un campo. Si creas un nuevo art\u00edculo y luego entras en el administrador ver\u00e1s que se establece autom\u00e1ticamente en el usuario actual conectado. Enlace a un nuevo art\u00edculo Autorizaciones Hay m\u00faltiples problemas en torno a la falta de autorizaciones en nuestro proyecto actual. Obviamente nos gustar\u00eda restringir el acceso s\u00f3lo a los usuarios para tener la opci\u00f3n de cobrar un d\u00eda a los lectores de nuestro peri\u00f3dico. Pero m\u00e1s all\u00e1 de eso, cualquier usuario desconectado al azar que conozca la URL correcta puede acceder a cualquier parte del sitio. Considere lo que suceder\u00eda si un usuario desconectado intentara crear un nuevo art\u00edculo. Para probarlo, haga clic en su nombre de usuario en la esquina superior derecha de la barra de navegaci\u00f3n, y luego seleccione \"Cerrar sesi\u00f3n\" en las opciones desplegables. El enlace \"+ Nuevo\" desaparece de la barra de navegaci\u00f3n, pero \u00bfqu\u00e9 pasa si vas directamente a \u00e9l: http://127.0.0.1:8000/articles/new/? La p\u00e1gina sigue ah\u00ed. Desconexi\u00f3n nueva Ahora intenta crear un nuevo art\u00edculo con un t\u00edtulo y un cuerpo. Haz clic en el bot\u00f3n \"Guardar\". Crear error de p\u00e1gina Un error. Esto se debe a que nuestro modelo espera un campo de autor que est\u00e1 ligado al usuario actual conectado. Pero como no estamos conectados, no hay autor, y por lo tanto la presentaci\u00f3n falla. Mixins Claramente queremos establecer algunas autorizaciones para que s\u00f3lo los usuarios registrados puedan acceder al sitio. Para ello podemos utilizar un mixin, que es un tipo especial de herencia m\u00faltiple que Django utiliza para evitar la duplicaci\u00f3n de c\u00f3digo y permitir la personalizaci\u00f3n. Por ejemplo, el ListView gen\u00e9rico incorporado necesita una forma de devolver una plantilla. Pero tambi\u00e9n lo hace DetailView y, de hecho, casi todas las dem\u00e1s vistas. En lugar de repetir el mismo c\u00f3digo en cada gran vista gen\u00e9rica, Django descompone esta funcionalidad en una \"mezcla\" conocida como TemplateResponseMixin. Tanto la Vista Lista como la Vista Detallada usan esta mezcla para mostrar la plantilla adecuada. Si lees el c\u00f3digo fuente de Django, que est\u00e1 disponible gratuitamente en Github, ver\u00e1s que se utilizan mixins por todas partes. Para restringir el acceso a la vista a s\u00f3lo los usuarios conectados, Django tiene un mixin LoginRequired que podemos utilizar. Es potente y extremadamente conciso. Dentro del archivo existente articles/views.py, imp\u00f3rtalo en la parte superior y luego agrega LoginRequiredMixin a nuestro ArticleCreateView . Aseg\u00farate de que el mixin est\u00e9 a la izquierda de ListView para que sea le\u00eddo primero. Queremos que el ListView ya sepa que pretendemos restringir el acceso. Y eso es todo! Hemos terminado. FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Ahora regresa a la URL para crear nuevos mensajes en http://127.0.0.1:8000/articles/new/ y ver\u00e1s el siguiente error: P\u00e1gina de error \u00bfQu\u00e9 es lo que est\u00e1 pasando? Django nos ha redirigido autom\u00e1ticamente a la ubicaci\u00f3n por defecto de la p\u00e1gina de inicio de sesi\u00f3n que est\u00e1 en /cuentas/login, sin embargo, si recuerdas, en nuestros URLs a nivel de proyecto estamos usando usuarios/ como nuestra ruta. Por eso nuestra p\u00e1gina de acceso est\u00e1 en users/login. Entonces, \u00bfc\u00f3mo le decimos a nuestro ArticleCreateView sobre esto? Si miras la documentaci\u00f3n de la mezcla LoginRequired nos dice la respuesta. Podemos agregar una ruta de login_url para anular el par\u00e1metro por defecto. Estamos usando la URL con nombre de nuestra ruta de acceso aqu\u00ed login . FICHERO: articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Pruebe el enlace para crear nuevos mensajes de nuevo: http://127.0.0.1:8000/articles/new/. Ahora redirige a los usuarios a la p\u00e1gina de acceso. Tal como lo dese\u00e1bamos. Actualizando las vistas Ahora vemos que restringir el acceso a las vistas es s\u00f3lo cuesti\u00f3n de a\u00f1adir LoginRequiredMixin al principio de todas las vistas existentes y especificar el login_url correcto. Vamos a actualizar el resto de las vistas de nuestros art\u00edculos ya que no queremos que un usuario pueda crear, leer, actualizar o borrar un mensaje si no est\u00e1 conectado. El archivo completo views.py deber\u00eda tener ahora este aspecto: FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Adelante, juega con el sitio para confirmar que las redirecciones de acceso ahora funcionan como se esperaba. Si necesitas ayuda para recordar cu\u00e1les son las URL adecuadas, inicia sesi\u00f3n primero y escribe las URL de cada una de las rutas para crear, editar, borrar y todos los art\u00edculos. Conclusi\u00f3n Nuestra aplicaci\u00f3n para el peri\u00f3dico est\u00e1 casi terminada. Tenemos nuestros art\u00edculos correctamente configurados, hemos establecido permisos y autorizaciones, la autentificaci\u00f3n de los usuarios est\u00e1 en buen estado. El \u00faltimo punto es a\u00f1adir la posibilidad de que otros usuarios conectados dejen comentarios que cubriremos en el pr\u00f3ximo cap\u00edtulo.","title":"Permisos y Autorizaci\u00f3n"},{"location":"15/#permisos-y-autorizacion","text":"Hay varios problemas con nuestro actual sitio web del peri\u00f3dico. Por un lado, queremos que nuestro peri\u00f3dico sea financieramente sostenible. Con m\u00e1s tiempo podr\u00edamos a\u00f1adir una aplicaci\u00f3n de pago para cobrar por el acceso, pero por ahora requeriremos que un usuario se registre para ver cualquier art\u00edculo. Esto se conoce como autorizaci\u00f3n. Es com\u00fan establecer diferentes reglas acerca de qui\u00e9n est\u00e1 autorizado para ver \u00e1reas de su sitio. Tenga en cuenta que esto es diferente de la autenticaci\u00f3n, que es el proceso de registro e inicio de sesi\u00f3n de los usuarios. La autorizaci\u00f3n restringe el acceso; la autenticaci\u00f3n permite el flujo de registro e inicio de sesi\u00f3n de un usuario. Como marco web maduro, Django tiene incorporada una funcionalidad de autorizaci\u00f3n que podemos utilizar r\u00e1pidamente. En este cap\u00edtulo limitaremos el acceso a varias p\u00e1ginas s\u00f3lo a los usuarios que hayan iniciado la sesi\u00f3n. Tambi\u00e9n a\u00f1adiremos permisos para que s\u00f3lo el autor de un art\u00edculo pueda actualizarlo o borrarlo; \u00a1ahora cualquier usuario puede hacerlo! Mejora de CreateView En la actualidad el autor de un nuevo art\u00edculo puede ser fijado a cualquier usuario. En cambio, deber\u00eda ser autom\u00e1ticamente establecido al usuario actual. Entonces estableceremos permisos de edici\u00f3n/borrado para que s\u00f3lo el autor de un art\u00edculo pueda hacer tales cambios. El CreateView por defecto nos proporciona una gran funcionalidad pero para establecer el usuario actual como autor necesitaremos personalizarlo. Eliminaremos el autor de los campos y en su lugar lo estableceremos autom\u00e1ticamente a trav\u00e9s del m\u00e9todo form_valid. FICHERO: articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... \u00bfC\u00f3mo supe que pod\u00eda actualizar CreateView de esta manera? La respuesta es que mir\u00e9 el c\u00f3digo fuente y us\u00e9 Google. Las vistas gen\u00e9ricas basadas en clases son incre\u00edbles para empezar nuevos proyectos, pero cuando quieres personalizarlas, es necesario arremangarse y empezar a entender lo que pasa bajo el cap\u00f3. Cuanto m\u00e1s uses y personalices las vistas incorporadas, m\u00e1s c\u00f3modo te sentir\u00e1s haciendo personalizaciones como esta. Lo m\u00e1s probable es que lo que est\u00e1s intentando hacer ya haya sido resuelto en alg\u00fan lugar, ya sea dentro de Django mismo o en un foro como Stack Overflow. No tengas miedo de pedir ayuda! Ahora recarga el navegador e intenta hacer clic en el enlace \"+ Nuevo\" en la parte superior de la pantalla. Se redirigir\u00e1 a la p\u00e1gina de creaci\u00f3n actualizada donde el autor ya no es un campo. Si creas un nuevo art\u00edculo y luego entras en el administrador ver\u00e1s que se establece autom\u00e1ticamente en el usuario actual conectado. Enlace a un nuevo art\u00edculo Autorizaciones Hay m\u00faltiples problemas en torno a la falta de autorizaciones en nuestro proyecto actual. Obviamente nos gustar\u00eda restringir el acceso s\u00f3lo a los usuarios para tener la opci\u00f3n de cobrar un d\u00eda a los lectores de nuestro peri\u00f3dico. Pero m\u00e1s all\u00e1 de eso, cualquier usuario desconectado al azar que conozca la URL correcta puede acceder a cualquier parte del sitio. Considere lo que suceder\u00eda si un usuario desconectado intentara crear un nuevo art\u00edculo. Para probarlo, haga clic en su nombre de usuario en la esquina superior derecha de la barra de navegaci\u00f3n, y luego seleccione \"Cerrar sesi\u00f3n\" en las opciones desplegables. El enlace \"+ Nuevo\" desaparece de la barra de navegaci\u00f3n, pero \u00bfqu\u00e9 pasa si vas directamente a \u00e9l: http://127.0.0.1:8000/articles/new/? La p\u00e1gina sigue ah\u00ed. Desconexi\u00f3n nueva Ahora intenta crear un nuevo art\u00edculo con un t\u00edtulo y un cuerpo. Haz clic en el bot\u00f3n \"Guardar\". Crear error de p\u00e1gina Un error. Esto se debe a que nuestro modelo espera un campo de autor que est\u00e1 ligado al usuario actual conectado. Pero como no estamos conectados, no hay autor, y por lo tanto la presentaci\u00f3n falla. Mixins Claramente queremos establecer algunas autorizaciones para que s\u00f3lo los usuarios registrados puedan acceder al sitio. Para ello podemos utilizar un mixin, que es un tipo especial de herencia m\u00faltiple que Django utiliza para evitar la duplicaci\u00f3n de c\u00f3digo y permitir la personalizaci\u00f3n. Por ejemplo, el ListView gen\u00e9rico incorporado necesita una forma de devolver una plantilla. Pero tambi\u00e9n lo hace DetailView y, de hecho, casi todas las dem\u00e1s vistas. En lugar de repetir el mismo c\u00f3digo en cada gran vista gen\u00e9rica, Django descompone esta funcionalidad en una \"mezcla\" conocida como TemplateResponseMixin. Tanto la Vista Lista como la Vista Detallada usan esta mezcla para mostrar la plantilla adecuada. Si lees el c\u00f3digo fuente de Django, que est\u00e1 disponible gratuitamente en Github, ver\u00e1s que se utilizan mixins por todas partes. Para restringir el acceso a la vista a s\u00f3lo los usuarios conectados, Django tiene un mixin LoginRequired que podemos utilizar. Es potente y extremadamente conciso. Dentro del archivo existente articles/views.py, imp\u00f3rtalo en la parte superior y luego agrega LoginRequiredMixin a nuestro ArticleCreateView . Aseg\u00farate de que el mixin est\u00e9 a la izquierda de ListView para que sea le\u00eddo primero. Queremos que el ListView ya sepa que pretendemos restringir el acceso. Y eso es todo! Hemos terminado. FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Ahora regresa a la URL para crear nuevos mensajes en http://127.0.0.1:8000/articles/new/ y ver\u00e1s el siguiente error: P\u00e1gina de error \u00bfQu\u00e9 es lo que est\u00e1 pasando? Django nos ha redirigido autom\u00e1ticamente a la ubicaci\u00f3n por defecto de la p\u00e1gina de inicio de sesi\u00f3n que est\u00e1 en /cuentas/login, sin embargo, si recuerdas, en nuestros URLs a nivel de proyecto estamos usando usuarios/ como nuestra ruta. Por eso nuestra p\u00e1gina de acceso est\u00e1 en users/login. Entonces, \u00bfc\u00f3mo le decimos a nuestro ArticleCreateView sobre esto? Si miras la documentaci\u00f3n de la mezcla LoginRequired nos dice la respuesta. Podemos agregar una ruta de login_url para anular el par\u00e1metro por defecto. Estamos usando la URL con nombre de nuestra ruta de acceso aqu\u00ed login . FICHERO: articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Pruebe el enlace para crear nuevos mensajes de nuevo: http://127.0.0.1:8000/articles/new/. Ahora redirige a los usuarios a la p\u00e1gina de acceso. Tal como lo dese\u00e1bamos. Actualizando las vistas Ahora vemos que restringir el acceso a las vistas es s\u00f3lo cuesti\u00f3n de a\u00f1adir LoginRequiredMixin al principio de todas las vistas existentes y especificar el login_url correcto. Vamos a actualizar el resto de las vistas de nuestros art\u00edculos ya que no queremos que un usuario pueda crear, leer, actualizar o borrar un mensaje si no est\u00e1 conectado. El archivo completo views.py deber\u00eda tener ahora este aspecto: FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Adelante, juega con el sitio para confirmar que las redirecciones de acceso ahora funcionan como se esperaba. Si necesitas ayuda para recordar cu\u00e1les son las URL adecuadas, inicia sesi\u00f3n primero y escribe las URL de cada una de las rutas para crear, editar, borrar y todos los art\u00edculos.","title":"Permisos y Autorizaci\u00f3n"},{"location":"15/#conclusion","text":"Nuestra aplicaci\u00f3n para el peri\u00f3dico est\u00e1 casi terminada. Tenemos nuestros art\u00edculos correctamente configurados, hemos establecido permisos y autorizaciones, la autentificaci\u00f3n de los usuarios est\u00e1 en buen estado. El \u00faltimo punto es a\u00f1adir la posibilidad de que otros usuarios conectados dejen comentarios que cubriremos en el pr\u00f3ximo cap\u00edtulo.","title":"Conclusi\u00f3n"},{"location":"16/","text":"Comentarios Hay dos maneras en las que podr\u00edamos a\u00f1adir comentarios a nuestro sitio web del peri\u00f3dico. La primera es crear una aplicaci\u00f3n de comentarios dedicada y enlazarla a los art\u00edculos, sin embargo eso parece una sobreingenier\u00eda en este momento. En su lugar podemos simplemente a\u00f1adir un modelo adicional llamado Comentario a nuestra aplicaci\u00f3n de art\u00edculos y enlazarlo al modelo de Art\u00edculo a trav\u00e9s de una clave externa. Al final de este cap\u00edtulo los usuarios tendr\u00e1n la posibilidad de dejar comentarios en los art\u00edculos de cualquier otro usuario. Modelo Para empezar podemos a\u00f1adir otra tabla a nuestra base de datos existente llamada Comentario . Este modelo tendr\u00e1 una relaci\u00f3n clave de muchos a uno con el art\u00edculo: un art\u00edculo puede tener muchos comentarios, pero no al rev\u00e9s. Tradicionalmente el nombre del campo de la clave extranjera es simplemente el modelo con el que se vincula, por lo que este campo se llamar\u00e1 art\u00edculo . Los otros dos campos ser\u00e1n comentario y autor . Abra el archivo articles/models.py y debajo del c\u00f3digo existente a\u00f1ada lo siguiente. Comentarios FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length= ) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.comment def get_absolute_url(self): return reverse('article_list') Nuestro modelo de comentarios tambi\u00e9n tiene un m\u00e9todo str y un m\u00e9todo get_absolute_url que regresa a la p\u00e1gina principal de art\u00edculos. Ya que hemos actualizado nuestros modelos, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo. Tengan en cuenta que al a\u00f1adir art\u00edculos al final de cada comando, lo cual es opcional, estamos especificando que queremos usar s\u00f3lo la aplicaci\u00f3n de art\u00edculos aqu\u00ed. Este es un buen h\u00e1bito para usar. Por ejemplo, \u00bfqu\u00e9 pasar\u00eda si hici\u00e9ramos cambios en los modelos de dos aplicaciones diferentes? Si no especificamos una aplicaci\u00f3n, entonces los cambios de ambas aplicaciones se incorporar\u00e1n en el mismo archivo de migraciones, lo que hace m\u00e1s dif\u00edcil, en el futuro, depurar los errores. Mant\u00e9n cada migraci\u00f3n tan peque\u00f1a y contenida como sea posible. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate Admin Despu\u00e9s de hacer un nuevo modelo es bueno jugar con \u00e9l en la aplicaci\u00f3n de administraci\u00f3n antes de mostrarlo en nuestro sitio web real. A\u00f1ade el comentario a nuestro archivo admin.py para que sea visible. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) Luego inicia el servidor con python manage.py runserver y navega a nuestra p\u00e1gina principal http://127.0.0.1:8000/admin/ P\u00e1gina de administraci\u00f3n con comentarios En nuestra aplicaci\u00f3n \"Art\u00edculos\" ver\u00e1s nuestras dos mesas: Comentarios y Art\u00edculos. Haga clic en el \"+ Agregar\" junto a Comentarios. Ver\u00e1s que en \"Art\u00edculo\" hay un desplegable de art\u00edculos salientes, lo mismo para \"Autor\", y hay un campo de texto junto a \"Comentario\". Admin Comentarios Selecciona un art\u00edculo, escribe un comentario y luego selecciona un autor que no sea tu superusuario, tal vez un testusuario como he hecho en la foto. Luego haz clic en el bot\u00f3n \"Guardar\". A continuaci\u00f3n deber\u00edas ver tu comentario en la p\u00e1gina de \"Comentarios\". Admin Comentario Uno En este punto podr\u00edamos a\u00f1adir un campo de administraci\u00f3n adicional para ver el comentario y el art\u00edculo en esta p\u00e1gina. \u00bfPero no ser\u00eda mejor ver todos los modelos de comentarios relacionados con un solo modelo de Post? Resulta que s\u00ed, con una funci\u00f3n de administraci\u00f3n de Django llamada inlines que muestra las relaciones de claves externas de una manera visual y agradable. Se utilizan dos vistas en l\u00ednea principales: TabularInline y StackedInline. La \u00fanica diferencia entre las dos es el modelo para mostrar la informaci\u00f3n. En una TabularInline todos los campos del modelo aparecen en una l\u00ednea mientras que en una StackedInline cada campo tiene su propia l\u00ednea. Implementaremos ambos para que puedas decidir cu\u00e1l prefieres. Actualiza los art\u00edculos/admin.py como sigue en tu editor de texto. FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Ahora vuelve a la p\u00e1gina principal de administraci\u00f3n en http://127.0.0.1:8000/admin/ y haz clic en \"Art\u00edculos\". Selecciona el art\u00edculo al que acabas de a\u00f1adir un comentario que en mi caso era \"Noticias locales\". P\u00e1gina de cambio de administraci\u00f3n \u00a1Mejor a la derecha! Podemos ver y modificar todos nuestros art\u00edculos y comentarios relacionados en un solo lugar. Personalmente prefiero usar TabularInline ya que muestra m\u00e1s informaci\u00f3n en menos espacio. Para cambiar a \u00e9l s\u00f3lo tenemos que cambiar nuestro CommentInline de admin.StackedInline a admin.TabularInline . FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Actualice la p\u00e1gina de administraci\u00f3n y ver\u00e1 el nuevo cambio: todos los campos de cada modelo se muestran en la misma l\u00ednea. P\u00e1gina TabularInline Mucho mejor. Ahora necesitamos actualizar nuestra plantilla para mostrar los comentarios. Plantilla Dado que Comment vive dentro de nuestra aplicaci\u00f3n de art\u00edculos existentes, s\u00f3lo necesitamos actualizar las plantillas existentes para article_list.html y article_detail.html para mostrar nuestro nuevo contenido. No tenemos que crear nuevas plantillas y jugar con las urls y las vistas. Lo que queremos hacer es mostrar todos los comentarios relacionados con un art\u00edculo espec\u00edfico. Esto se llama \"consulta\" ya que estamos pidiendo a la base de datos una informaci\u00f3n espec\u00edfica. En nuestro caso, al trabajar con una clave extranjera, queremos seguir una relaci\u00f3n hacia atr\u00e1s: para cada art\u00edculo buscar modelos de comentarios relacionados. Django tiene una sintaxis incorporada que podemos usar conocida como FOO_set donde FOO es el nombre del modelo de fuente en min\u00fasculas. As\u00ed que para nuestro modelo de Art\u00edculo podemos usar article_set para acceder a todas las instancias del modelo. Pero personalmente me disgusta mucho esta sintaxis ya que la encuentro confusa y no intuitiva. Un mejor enfoque es a\u00f1adir un atributo related_name a nuestro modelo que nos permita establecer expl\u00edcitamente el nombre de esta relaci\u00f3n inversa en su lugar. Hag\u00e1moslo. Para empezar, agrega un atributo related_name a nuestro modelo de comentarios. Un buen valor por defecto es nombrarlo en el plural del modelo que contiene la llave extranjera. FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Como acabamos de hacer un cambio en nuestro modelo de base de datos, necesitamos crear un archivo de migraciones y actualizar la base de datos. Detenga el servidor local con Control+c y ejecute los siguientes dos comandos. Luego gire el servidor de nuevo ya que lo usaremos en breve. Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Entender las consultas lleva alg\u00fan tiempo, as\u00ed que no se preocupe si la idea de las relaciones inversas es confusa. Te mostrar\u00e9 c\u00f3mo implementar el c\u00f3digo como se desea. Y una vez que domine estos casos b\u00e1sicos, puede explorar c\u00f3mo filtrar sus consultas con gran detalle para que devuelvan exactamente la informaci\u00f3n que desea. En nuestro archivo article_list.html podemos a\u00f1adir nuestros comentarios al pie de la tarjeta. Note que he movido nuestros enlaces de edici\u00f3n y borrado al cuerpo de la tarjeta. Para acceder a cada comentario llamamos a article.comments.all lo que significa que primero miramos el modelo de art\u00edculo, luego los comentarios que es el nombre relacionado de todo el modelo de comentario, y seleccionamos todo incluido. Puede llevar un poco de tiempo acostumbrarse a esta sintaxis para referenciar datos de claves extranjeras en un modelo! FICHERO: template/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</s\\pan> </div> <div class=\"card-body\"> <p>{{ article.body }}</p> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> <div class=\"card-footer\"> {% for comment in article.comments.all %} <p> <span class=\"font-weight-bold\">{{ comment.author }} &middot;</span> {{ comment }} </p> {% endfor %} </div> </div> <br /> {% endfor %} {% endblock content %} Si actualiza la p\u00e1gina de art\u00edculos en http://127.0.0.1:8000/articles/ podemos ver nuestro nuevo comentario en la p\u00e1gina. P\u00e1gina de art\u00edculos con comentarios Yoohoo! Funciona. Podemos ver ambos comentarios listados debajo del mensaje inicial. Conclusi\u00f3n Con m\u00e1s tiempo nos centrar\u00edamos en los formularios ahora para que un usuario pueda escribir un nuevo art\u00edculo directamente en la p\u00e1gina de art\u00edculos, as\u00ed como a\u00f1adir comentarios tambi\u00e9n. Pero el principal objetivo de este cap\u00edtulo es demostrar c\u00f3mo funcionan las relaciones clave extranjeras en Django. Nuestra aplicaci\u00f3n para el peri\u00f3dico ya est\u00e1 completa. Tiene un flujo de autenticaci\u00f3n de usuario robusto, incluyendo el uso del correo electr\u00f3nico para el restablecimiento de la contrase\u00f1a. Tambi\u00e9n estamos utilizando un modelo de usuario personalizado, por lo que si queremos a\u00f1adir campos adicionales a nuestro modelo de usuario personalizado es tan sencillo como a\u00f1adir un campo adicional. Ya tenemos un campo de edad para todos los usuarios que est\u00e1 siendo configurado por defecto. Si quisi\u00e9ramos, podr\u00edamos a\u00f1adir un desplegable de edad al formulario de registro y restringir el acceso de los usuarios s\u00f3lo a los mayores de 13 a\u00f1os. O podr\u00edamos ofrecer descuentos a los usuarios mayores de 65 a\u00f1os. Lo que queramos hacer con nuestro modelo de usuario personalizado es una opci\u00f3n. La mayor parte del desarrollo web sigue los mismos patrones y al utilizar un marco web como Django el 99% de lo que queremos en t\u00e9rminos de funcionalidad ya est\u00e1 incluido o s\u00f3lo falta una peque\u00f1a personalizaci\u00f3n de una funci\u00f3n existente.","title":"Comentarios"},{"location":"16/#comentarios","text":"Hay dos maneras en las que podr\u00edamos a\u00f1adir comentarios a nuestro sitio web del peri\u00f3dico. La primera es crear una aplicaci\u00f3n de comentarios dedicada y enlazarla a los art\u00edculos, sin embargo eso parece una sobreingenier\u00eda en este momento. En su lugar podemos simplemente a\u00f1adir un modelo adicional llamado Comentario a nuestra aplicaci\u00f3n de art\u00edculos y enlazarlo al modelo de Art\u00edculo a trav\u00e9s de una clave externa. Al final de este cap\u00edtulo los usuarios tendr\u00e1n la posibilidad de dejar comentarios en los art\u00edculos de cualquier otro usuario. Modelo Para empezar podemos a\u00f1adir otra tabla a nuestra base de datos existente llamada Comentario . Este modelo tendr\u00e1 una relaci\u00f3n clave de muchos a uno con el art\u00edculo: un art\u00edculo puede tener muchos comentarios, pero no al rev\u00e9s. Tradicionalmente el nombre del campo de la clave extranjera es simplemente el modelo con el que se vincula, por lo que este campo se llamar\u00e1 art\u00edculo . Los otros dos campos ser\u00e1n comentario y autor . Abra el archivo articles/models.py y debajo del c\u00f3digo existente a\u00f1ada lo siguiente. Comentarios FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length= ) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.comment def get_absolute_url(self): return reverse('article_list') Nuestro modelo de comentarios tambi\u00e9n tiene un m\u00e9todo str y un m\u00e9todo get_absolute_url que regresa a la p\u00e1gina principal de art\u00edculos. Ya que hemos actualizado nuestros modelos, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo. Tengan en cuenta que al a\u00f1adir art\u00edculos al final de cada comando, lo cual es opcional, estamos especificando que queremos usar s\u00f3lo la aplicaci\u00f3n de art\u00edculos aqu\u00ed. Este es un buen h\u00e1bito para usar. Por ejemplo, \u00bfqu\u00e9 pasar\u00eda si hici\u00e9ramos cambios en los modelos de dos aplicaciones diferentes? Si no especificamos una aplicaci\u00f3n, entonces los cambios de ambas aplicaciones se incorporar\u00e1n en el mismo archivo de migraciones, lo que hace m\u00e1s dif\u00edcil, en el futuro, depurar los errores. Mant\u00e9n cada migraci\u00f3n tan peque\u00f1a y contenida como sea posible. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate Admin Despu\u00e9s de hacer un nuevo modelo es bueno jugar con \u00e9l en la aplicaci\u00f3n de administraci\u00f3n antes de mostrarlo en nuestro sitio web real. A\u00f1ade el comentario a nuestro archivo admin.py para que sea visible. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) Luego inicia el servidor con python manage.py runserver y navega a nuestra p\u00e1gina principal http://127.0.0.1:8000/admin/ P\u00e1gina de administraci\u00f3n con comentarios En nuestra aplicaci\u00f3n \"Art\u00edculos\" ver\u00e1s nuestras dos mesas: Comentarios y Art\u00edculos. Haga clic en el \"+ Agregar\" junto a Comentarios. Ver\u00e1s que en \"Art\u00edculo\" hay un desplegable de art\u00edculos salientes, lo mismo para \"Autor\", y hay un campo de texto junto a \"Comentario\". Admin Comentarios Selecciona un art\u00edculo, escribe un comentario y luego selecciona un autor que no sea tu superusuario, tal vez un testusuario como he hecho en la foto. Luego haz clic en el bot\u00f3n \"Guardar\". A continuaci\u00f3n deber\u00edas ver tu comentario en la p\u00e1gina de \"Comentarios\". Admin Comentario Uno En este punto podr\u00edamos a\u00f1adir un campo de administraci\u00f3n adicional para ver el comentario y el art\u00edculo en esta p\u00e1gina. \u00bfPero no ser\u00eda mejor ver todos los modelos de comentarios relacionados con un solo modelo de Post? Resulta que s\u00ed, con una funci\u00f3n de administraci\u00f3n de Django llamada inlines que muestra las relaciones de claves externas de una manera visual y agradable. Se utilizan dos vistas en l\u00ednea principales: TabularInline y StackedInline. La \u00fanica diferencia entre las dos es el modelo para mostrar la informaci\u00f3n. En una TabularInline todos los campos del modelo aparecen en una l\u00ednea mientras que en una StackedInline cada campo tiene su propia l\u00ednea. Implementaremos ambos para que puedas decidir cu\u00e1l prefieres. Actualiza los art\u00edculos/admin.py como sigue en tu editor de texto. FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Ahora vuelve a la p\u00e1gina principal de administraci\u00f3n en http://127.0.0.1:8000/admin/ y haz clic en \"Art\u00edculos\". Selecciona el art\u00edculo al que acabas de a\u00f1adir un comentario que en mi caso era \"Noticias locales\". P\u00e1gina de cambio de administraci\u00f3n \u00a1Mejor a la derecha! Podemos ver y modificar todos nuestros art\u00edculos y comentarios relacionados en un solo lugar. Personalmente prefiero usar TabularInline ya que muestra m\u00e1s informaci\u00f3n en menos espacio. Para cambiar a \u00e9l s\u00f3lo tenemos que cambiar nuestro CommentInline de admin.StackedInline a admin.TabularInline . FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Actualice la p\u00e1gina de administraci\u00f3n y ver\u00e1 el nuevo cambio: todos los campos de cada modelo se muestran en la misma l\u00ednea. P\u00e1gina TabularInline Mucho mejor. Ahora necesitamos actualizar nuestra plantilla para mostrar los comentarios. Plantilla Dado que Comment vive dentro de nuestra aplicaci\u00f3n de art\u00edculos existentes, s\u00f3lo necesitamos actualizar las plantillas existentes para article_list.html y article_detail.html para mostrar nuestro nuevo contenido. No tenemos que crear nuevas plantillas y jugar con las urls y las vistas. Lo que queremos hacer es mostrar todos los comentarios relacionados con un art\u00edculo espec\u00edfico. Esto se llama \"consulta\" ya que estamos pidiendo a la base de datos una informaci\u00f3n espec\u00edfica. En nuestro caso, al trabajar con una clave extranjera, queremos seguir una relaci\u00f3n hacia atr\u00e1s: para cada art\u00edculo buscar modelos de comentarios relacionados. Django tiene una sintaxis incorporada que podemos usar conocida como FOO_set donde FOO es el nombre del modelo de fuente en min\u00fasculas. As\u00ed que para nuestro modelo de Art\u00edculo podemos usar article_set para acceder a todas las instancias del modelo. Pero personalmente me disgusta mucho esta sintaxis ya que la encuentro confusa y no intuitiva. Un mejor enfoque es a\u00f1adir un atributo related_name a nuestro modelo que nos permita establecer expl\u00edcitamente el nombre de esta relaci\u00f3n inversa en su lugar. Hag\u00e1moslo. Para empezar, agrega un atributo related_name a nuestro modelo de comentarios. Un buen valor por defecto es nombrarlo en el plural del modelo que contiene la llave extranjera. FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Como acabamos de hacer un cambio en nuestro modelo de base de datos, necesitamos crear un archivo de migraciones y actualizar la base de datos. Detenga el servidor local con Control+c y ejecute los siguientes dos comandos. Luego gire el servidor de nuevo ya que lo usaremos en breve. Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Entender las consultas lleva alg\u00fan tiempo, as\u00ed que no se preocupe si la idea de las relaciones inversas es confusa. Te mostrar\u00e9 c\u00f3mo implementar el c\u00f3digo como se desea. Y una vez que domine estos casos b\u00e1sicos, puede explorar c\u00f3mo filtrar sus consultas con gran detalle para que devuelvan exactamente la informaci\u00f3n que desea. En nuestro archivo article_list.html podemos a\u00f1adir nuestros comentarios al pie de la tarjeta. Note que he movido nuestros enlaces de edici\u00f3n y borrado al cuerpo de la tarjeta. Para acceder a cada comentario llamamos a article.comments.all lo que significa que primero miramos el modelo de art\u00edculo, luego los comentarios que es el nombre relacionado de todo el modelo de comentario, y seleccionamos todo incluido. Puede llevar un poco de tiempo acostumbrarse a esta sintaxis para referenciar datos de claves extranjeras en un modelo! FICHERO: template/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</s\\pan> </div> <div class=\"card-body\"> <p>{{ article.body }}</p> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> <div class=\"card-footer\"> {% for comment in article.comments.all %} <p> <span class=\"font-weight-bold\">{{ comment.author }} &middot;</span> {{ comment }} </p> {% endfor %} </div> </div> <br /> {% endfor %} {% endblock content %} Si actualiza la p\u00e1gina de art\u00edculos en http://127.0.0.1:8000/articles/ podemos ver nuestro nuevo comentario en la p\u00e1gina. P\u00e1gina de art\u00edculos con comentarios Yoohoo! Funciona. Podemos ver ambos comentarios listados debajo del mensaje inicial.","title":"Comentarios"},{"location":"16/#conclusion","text":"Con m\u00e1s tiempo nos centrar\u00edamos en los formularios ahora para que un usuario pueda escribir un nuevo art\u00edculo directamente en la p\u00e1gina de art\u00edculos, as\u00ed como a\u00f1adir comentarios tambi\u00e9n. Pero el principal objetivo de este cap\u00edtulo es demostrar c\u00f3mo funcionan las relaciones clave extranjeras en Django. Nuestra aplicaci\u00f3n para el peri\u00f3dico ya est\u00e1 completa. Tiene un flujo de autenticaci\u00f3n de usuario robusto, incluyendo el uso del correo electr\u00f3nico para el restablecimiento de la contrase\u00f1a. Tambi\u00e9n estamos utilizando un modelo de usuario personalizado, por lo que si queremos a\u00f1adir campos adicionales a nuestro modelo de usuario personalizado es tan sencillo como a\u00f1adir un campo adicional. Ya tenemos un campo de edad para todos los usuarios que est\u00e1 siendo configurado por defecto. Si quisi\u00e9ramos, podr\u00edamos a\u00f1adir un desplegable de edad al formulario de registro y restringir el acceso de los usuarios s\u00f3lo a los mayores de 13 a\u00f1os. O podr\u00edamos ofrecer descuentos a los usuarios mayores de 65 a\u00f1os. Lo que queramos hacer con nuestro modelo de usuario personalizado es una opci\u00f3n. La mayor parte del desarrollo web sigue los mismos patrones y al utilizar un marco web como Django el 99% de lo que queremos en t\u00e9rminos de funcionalidad ya est\u00e1 incluido o s\u00f3lo falta una peque\u00f1a personalizaci\u00f3n de una funci\u00f3n existente.","title":"Conclusi\u00f3n"},{"location":"17/","text":"Conclusion Congratulations on finishing Django for Beginners! After starting from absolute zero we\u2019ve now built five different web applications from scratch. And we\u2019ve covered all the major features of Django: templates, views, urls, users, models, security, testing, and deployment. You now have the knowledge to go off and build your own modern websites with Django. As with any new skill, it\u2019s important to practice and apply what you\u2019ve just learned. The CRUD functionality in our Blog and Newspaper sites is common in many, many other web applications. For example, can you make a Todo List web application? You already have all the tools you need. Web development is a very deep field and there\u2019s still much more to learn about what Django has to offer. For example a more advanced Django project would likely use multiple settings files, environment variables, and PostgreSQL locally instead of SQLite. It might even use third-party packages like django-allauth for social authentication, django-debug-toolbar for debugging, and django-extensions for extra goodies. The best way to learn more about Django and web development in general is to think of a project you want to build and then step-by-step learn what you need to complete it. An additional resource that may help is DjangoX, which is a real-world starter project that features social authentication and more. You can also sign up for the Django for Beginners newsletter for periodic updates on new content and discounts on future books. And a final resource is my own personal website, wsvincent.com, which is regularly updated and features articles on some of these advanced techniques already:Conclusion 302 \u2022 Django Social Authentication \u2022 Django Login Mega-Tutorial \u2022 Django, PostgreSQL, and Docker \u2022 Django Rest Framework Tutorial \u2022 Django Rest Framework with React Django Resources To continue learning Django, I recommend working through the following free online tutorials: \u2022 Official Polls Tutorial \u2022 Django Girls Tutorial \u2022 MDN: Django Web Framework \u2022 A Complete Beginner\u2019s Guide to Django I also strongly recommend Two Scoops of Django 1.11: Best Practices for the Django Web Framework, which is the current best-practices bible for Django developers. Python Books If you\u2019re new to Python, there are several excellent books available for beginners to advanced Pythonistas: \u2022 Python Crash Course is a fantastic introduction to Python that also walks you through three real-world projects, including a Django application. \u2022 Think Python introduces Python and computer science fundamentals at the same time.Conclusion 303 \u2022 Automate the Boring Stuff is another great guide to learning and using Python in real-world settings. \u2022 The Hitchhiker\u2019s Guide to Python covers best practices in Python programming. \u2022 Python Tricks demonstrates how to write Pythonic code. \u2022 Effective Python is an excellent guide not just to Python but programming in general. \u2022 Fluent Python is amazing and provides a deep understanding of the Python language. Blogs to Follow These sites provide regular, high-quality writings on Python and web development. \u2022 Real Python \u2022 Dan Bader \u2022 Trey Hunner \u2022 Full Stack Python \u2022 Ned Batchelder \u2022 Armin Ronacher \u2022 Kenneth Reitz \u2022 Daniel Greenfeld Feedback If you\u2019ve made it through the entire book, I\u2019d love to hear your thoughts. What did you like or dislike? What areas were especially difficult? And what new content would you like to see? I can be reached at will@wsvincent.com.","title":"17"},{"location":"1_introduccion/","text":"1 Introducci\u00f3n Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv 1.1 Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\" La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas. 1.2 Por qu\u00e9 unos apuntes Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS 1.3 Estructura 1.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1. Introducci\u00f3n"},{"location":"1_introduccion/#1-introduccion","text":"Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv","title":"1 Introducci\u00f3n"},{"location":"1_introduccion/#11-por-que-django-comes-with-the-box-o-batteries-included","text":"La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas.","title":"1.1 Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\""},{"location":"1_introduccion/#12-por-que-unos-apuntes","text":"Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS","title":"1.2 Por qu\u00e9 unos apuntes"},{"location":"1_introduccion/#13-estructura","text":"1.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1.3 Estructura"},{"location":"2_configuracion_inicial/","text":"2 Configuraci\u00f3n inicial Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto 2.1 La l\u00ednea de comandos Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line 2.2 Instalar Python 3 Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes 2.3 Entornos Virtuales Ver: Entornos Virtuales 2.4 Instalaci\u00f3n de Django $ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual 2.5.1 Cambiando la IP de escucha y el puerto De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n. Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). Una descripci\u00f3n m\u00e1s detallada del servidor se puede encontrar aqu\u00ed . 2.5 Instalar Git $ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\" 2.6 Editores de texto Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm 2.7 Conclusi\u00f3n","title":"2. Configuraci\u00f3n Inicial"},{"location":"2_configuracion_inicial/#2-configuracion-inicial","text":"Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto","title":"2 Configuraci\u00f3n inicial"},{"location":"2_configuracion_inicial/#21-la-linea-de-comandos","text":"Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line","title":"2.1 La l\u00ednea de comandos"},{"location":"2_configuracion_inicial/#22-instalar-python-3","text":"Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes","title":"2.2 Instalar Python 3"},{"location":"2_configuracion_inicial/#23-entornos-virtuales","text":"Ver: Entornos Virtuales","title":"2.3 Entornos Virtuales"},{"location":"2_configuracion_inicial/#24-instalacion-de-django","text":"$ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual","title":"2.4 Instalaci\u00f3n de Django"},{"location":"2_configuracion_inicial/#251-cambiando-la-ip-de-escucha-y-el-puerto","text":"De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n. Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). Una descripci\u00f3n m\u00e1s detallada del servidor se puede encontrar aqu\u00ed .","title":"2.5.1 Cambiando la IP de escucha y el puerto"},{"location":"2_configuracion_inicial/#25-instalar-git","text":"$ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\"","title":"2.5 Instalar Git"},{"location":"2_configuracion_inicial/#26-editores-de-texto","text":"Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm","title":"2.6 Editores de texto"},{"location":"2_configuracion_inicial/#27-conclusion","text":"","title":"2.7 Conclusi\u00f3n"},{"location":"3_hello_world_app/","text":"3 Hello World app Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\" 3.1 Configuraci\u00f3n inicial $ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000 3.2 Crear una app Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. Para incluir la app en el proyecto se necesita a;adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig class est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. 3.3 Vistas (Views) y configurariones de URL's (URLConfs) En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template Se empieza actualizando el fichero views.py FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py \u00e7 # pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. 3.4 Resumen 1.- CREAR APP (helloworld) $ python manage.py startapp pages 2.- INFORMAR DE LA NUEVA APP FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... 3.- CREAR LA VISTA FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") 4.- CREAR EL FICHERO DE RUTAS DE LA APP FICHERO: pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] 5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"3. Hello World app"},{"location":"3_hello_world_app/#3-hello-world-app","text":"Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\"","title":"3 Hello World app"},{"location":"3_hello_world_app/#31-configuracion-inicial","text":"$ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000","title":"3.1 Configuraci\u00f3n inicial"},{"location":"3_hello_world_app/#32-crear-una-app","text":"Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. Para incluir la app en el proyecto se necesita a;adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig class est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia.","title":"3.2 Crear una app"},{"location":"3_hello_world_app/#33-vistas-views-y-configurariones-de-urls-urlconfs","text":"En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template Se empieza actualizando el fichero views.py FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py \u00e7 # pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto.","title":"3.3 Vistas (Views) y configurariones de URL's (URLConfs)"},{"location":"3_hello_world_app/#34-resumen","text":"","title":"3.4 Resumen"},{"location":"3_hello_world_app/#1-crear-app","text":"(helloworld) $ python manage.py startapp pages","title":"1.- CREAR APP"},{"location":"3_hello_world_app/#2-informar-de-la-nueva-app","text":"FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ...","title":"2.- INFORMAR DE LA NUEVA APP"},{"location":"3_hello_world_app/#3-crear-la-vista","text":"FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\")","title":"3.- CREAR LA VISTA"},{"location":"3_hello_world_app/#4-crear-el-fichero-de-rutas-de-la-app","text":"FICHERO: pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ]","title":"4.- CREAR EL FICHERO DE RUTAS DE LA APP"},{"location":"3_hello_world_app/#5-incluir-el-fichero-de-rutas-de-la-app-en-el-principal","text":"FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL"},{"location":"4_pages_app/","text":"4 Pages app 4.1 Objetivos Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates) 4.2 Configuraci\u00f3n inicial Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py # pages_project/settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... Arrancar servidor (pages) $ python manage.py runserver 4.3 Plantillas (Templates) Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta - Ruta (URL).- Controla la ruta inicial - Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. - Plantilla (Template).- Contiene el HTML. 4.3.1 D\u00f3nde colocar el directorio de plantillas Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... \u00e7 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista 4.4 Vistas basadas en clases (Class-Based Views) Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView . 1.4.5 URLs El \u00faltimo paso es actualizar los URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio. 4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\" Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Conectar la vista con la ruta FICHERO: pages/urls.py from django.urls import path \u00e7 from .views import HomePageView, AboutPageView urlpatterns = [ \u00e7 path('about/', AboutPageView.as_view(), name='about'), path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about 4.7 Extendiendo Plantillas El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} <h1>Homepage</h1> {% endblock content %} FICHERO: templates/about.html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %} 4.8 Tests Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code,200) Se usa SimpleTestCase ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos TestCase . Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. Para ejecutar los tests: (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK 4.9 Git, GitHub, GitLab y Bitbucket (pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial' 4.10 Local vs Producci\u00f3n C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo. 4.11 Heroku Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com 4.11 Ficheros adicionales Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco \"*\", que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master 4.12 Despliegue Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create (pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git A\u00f1adir un \u201chook\u201d para Heroku dentro de git Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349 Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1 Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/. 4.13 Conclusi\u00f3n Plantillas Vistas basadas en clases URLConfs Tests b\u00e1sicos Heroku","title":"4. Pages app"},{"location":"4_pages_app/#4-pages-app","text":"","title":"4 Pages app"},{"location":"4_pages_app/#41-objetivos","text":"Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates)","title":"4.1 Objetivos"},{"location":"4_pages_app/#42-configuracion-inicial","text":"Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py # pages_project/settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... Arrancar servidor (pages) $ python manage.py runserver","title":"4.2 Configuraci\u00f3n inicial"},{"location":"4_pages_app/#43-plantillas-templates","text":"Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta - Ruta (URL).- Controla la ruta inicial - Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. - Plantilla (Template).- Contiene el HTML.","title":"4.3 Plantillas (Templates)"},{"location":"4_pages_app/#431-donde-colocar-el-directorio-de-plantillas","text":"Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... \u00e7 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista","title":"4.3.1 D\u00f3nde colocar el directorio de plantillas"},{"location":"4_pages_app/#44-vistas-basadas-en-clases-class-based-views","text":"Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView .","title":"4.4 Vistas basadas en clases (Class-Based Views)"},{"location":"4_pages_app/#145-urls","text":"El \u00faltimo paso es actualizar los URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio.","title":"1.4.5 URLs"},{"location":"4_pages_app/#46-anadir-una-pagina-acerca-de","text":"Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Conectar la vista con la ruta FICHERO: pages/urls.py from django.urls import path \u00e7 from .views import HomePageView, AboutPageView urlpatterns = [ \u00e7 path('about/', AboutPageView.as_view(), name='about'), path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about","title":"4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\""},{"location":"4_pages_app/#47-extendiendo-plantillas","text":"El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} <h1>Homepage</h1> {% endblock content %} FICHERO: templates/about.html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %}","title":"4.7 Extendiendo Plantillas"},{"location":"4_pages_app/#48-tests","text":"Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code,200) Se usa SimpleTestCase ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos TestCase . Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. Para ejecutar los tests: (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK","title":"4.8 Tests"},{"location":"4_pages_app/#49-git-github-gitlab-y-bitbucket","text":"(pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial'","title":"4.9 Git, GitHub, GitLab y Bitbucket"},{"location":"4_pages_app/#410-local-vs-produccion","text":"C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo.","title":"4.10 Local vs Producci\u00f3n"},{"location":"4_pages_app/#411-heroku","text":"Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com","title":"4.11 Heroku"},{"location":"4_pages_app/#411-ficheros-adicionales","text":"Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco \"*\", que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master","title":"4.11 Ficheros adicionales"},{"location":"4_pages_app/#412-despliegue","text":"Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku","title":"4.12 Despliegue"},{"location":"4_pages_app/#crear-una-nueva-aplicacion-de-heroku-desde-la-linea-de-comandos-con-heroku-create","text":"(pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git","title":"Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create"},{"location":"4_pages_app/#anadir-un-hook-para-heroku-dentro-de-git","text":"Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349","title":"A\u00f1adir un \u201chook\u201d para Heroku dentro de git"},{"location":"4_pages_app/#configurar-la-aplicacion-para-ignorar-los-archivos-estaticos","text":"Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master","title":"Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos"},{"location":"4_pages_app/#iniciar-el-servidor-de-heroku-para-que-la-aplicacion-este-activa","text":"Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1","title":"Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa"},{"location":"4_pages_app/#visitar-la-aplicacion-en-la-url-proporcionada-por-heroku","text":"Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/.","title":"Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku"},{"location":"4_pages_app/#413-conclusion","text":"Plantillas Vistas basadas en clases URLConfs Tests b\u00e1sicos Heroku","title":"4.13 Conclusi\u00f3n"},{"location":"5_message_board_app/","text":"5. Message Board app Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os. 5.1. Setup Inicial Crear un nuevo directorio para nuestro c\u00f3digo en el Escritorio llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ cd ~/Desktop $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'posts', ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 ahora un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver 5.2. Crear un modelo de base de datos Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos. FICHERO: posts/models.py # posts/models.py from django.db import models # Create your models here Django importa un m\u00f3dulo models para ayudarnos a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. - Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual podemos hacer de la siguiente manera: FICHERO: post/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() . 5.3. Activando modelos Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS. Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos aplicaciones separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones. 5.4. Django Admin Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py # posts/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() \u00e7 def __str__(self): \u00e7 \"\"\"A string representation of the model.\"\"\" \u00e7 return self.text[:50] Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos str() a todos los modelos para aumentar la legibilidad. 5.5. Views/Templates/URLs Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs . 5.5.1. Vista Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla. Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla. 5.4.2. Plantilla Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial' 5.6. Tests Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post=Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: \"just a test\" Ejecutar test_text_content , para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id en el modelo de Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase \u00e7 from django.urls import reverse from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') \u00e7 class HomePageViewTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='this is another test') \u00e7 def test_view_url_exists_at_proper_location(self): \u00e7 resp = self.client.get('/') \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_url_by_name(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_uses_correct_template(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 self.assertTemplateUsed(resp, 'home.html') Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests' 5.7. GitHub Subir el proyecto... 5.8. Heroku configuration Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py 5.8.1. Actualizar Pipfile.lock Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock 5.8.2. Crear Procfile Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile 5.8.3. Instalar gunicorn Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn 5.8.4. Actualizar settings.py Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master 5.9. Despliegue en Heroku Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n. 5.10. Conclusi\u00f3n Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5. Message Board app"},{"location":"5_message_board_app/#5-message-board-app","text":"Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os.","title":"5. Message Board app"},{"location":"5_message_board_app/#51-setup-inicial","text":"Crear un nuevo directorio para nuestro c\u00f3digo en el Escritorio llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ cd ~/Desktop $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'posts', ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 ahora un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver","title":"5.1. Setup Inicial"},{"location":"5_message_board_app/#52-crear-un-modelo-de-base-de-datos","text":"Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos. FICHERO: posts/models.py # posts/models.py from django.db import models # Create your models here Django importa un m\u00f3dulo models para ayudarnos a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. - Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual podemos hacer de la siguiente manera: FICHERO: post/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() .","title":"5.2. Crear un modelo de base de datos"},{"location":"5_message_board_app/#53-activando-modelos","text":"Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS. Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos aplicaciones separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones.","title":"5.3. Activando modelos"},{"location":"5_message_board_app/#54-django-admin","text":"Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py # posts/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() \u00e7 def __str__(self): \u00e7 \"\"\"A string representation of the model.\"\"\" \u00e7 return self.text[:50] Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos str() a todos los modelos para aumentar la legibilidad.","title":"5.4. Django Admin"},{"location":"5_message_board_app/#55-viewstemplatesurls","text":"Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs .","title":"5.5. Views/Templates/URLs"},{"location":"5_message_board_app/#551-vista","text":"Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla. Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla.","title":"5.5.1. Vista"},{"location":"5_message_board_app/#542-plantilla","text":"Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial'","title":"5.4.2. Plantilla"},{"location":"5_message_board_app/#56-tests","text":"Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post=Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: \"just a test\" Ejecutar test_text_content , para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id en el modelo de Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase \u00e7 from django.urls import reverse from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') \u00e7 class HomePageViewTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='this is another test') \u00e7 def test_view_url_exists_at_proper_location(self): \u00e7 resp = self.client.get('/') \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_url_by_name(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_uses_correct_template(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 self.assertTemplateUsed(resp, 'home.html') Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests'","title":"5.6. Tests"},{"location":"5_message_board_app/#57-github","text":"Subir el proyecto...","title":"5.7. GitHub"},{"location":"5_message_board_app/#58-heroku-configuration","text":"Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py","title":"5.8. Heroku configuration"},{"location":"5_message_board_app/#581-actualizar-pipfilelock","text":"Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock","title":"5.8.1. Actualizar Pipfile.lock"},{"location":"5_message_board_app/#582-crear-procfile","text":"Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile","title":"5.8.2. Crear Procfile"},{"location":"5_message_board_app/#583-instalar-gunicorn","text":"Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn","title":"5.8.3. Instalar gunicorn"},{"location":"5_message_board_app/#584-actualizar-settingspy","text":"Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master","title":"5.8.4. Actualizar settings.py"},{"location":"5_message_board_app/#59-despliegue-en-heroku","text":"Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n.","title":"5.9. Despliegue en Heroku"},{"location":"5_message_board_app/#510-conclusion","text":"Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5.10. Conclusi\u00f3n"},{"location":"6_blog_app/","text":"6. Blog app Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos. 6.1. Configuraci\u00f3n inicial Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'blog', # new ] 6.2. Modelos de Bases de Datos Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User es para el modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada. 6.3. Admin 6.3.1. Para acceder a los datos: Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde esta nuevo modelo Post? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios 6.4 URLs (blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ] 6.5. Views FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' 6.6. Templates (blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno? 6.7. Ficheros est\u00e1ticos Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: static/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load static %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\" rel=\"\\stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; } 6.8. Individual blog pages Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3 Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . El pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando vayamos a la p\u00e1gina de entrada individual para nuestro primer post, podemos esperar que su patr\u00f3n de direcci\u00f3n sea post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un lugar de confusi\u00f3n muy com\u00fan para los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk . 6.9. Tests FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) t def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test 6.10. Git Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit' 6.11. Conclusi\u00f3n Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6. Blog app"},{"location":"6_blog_app/#6-blog-app","text":"Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos.","title":"6. Blog app"},{"location":"6_blog_app/#61-configuracion-inicial","text":"Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'blog', # new ]","title":"6.1. Configuraci\u00f3n inicial"},{"location":"6_blog_app/#62-modelos-de-bases-de-datos","text":"Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User es para el modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada.","title":"6.2. Modelos de Bases de Datos"},{"location":"6_blog_app/#63-admin","text":"","title":"6.3. Admin"},{"location":"6_blog_app/#631-para-acceder-a-los-datos","text":"Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde esta nuevo modelo Post? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios","title":"6.3.1. Para acceder a los datos:"},{"location":"6_blog_app/#64-urls","text":"(blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ]","title":"6.4 URLs"},{"location":"6_blog_app/#65-views","text":"FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html'","title":"6.5. Views"},{"location":"6_blog_app/#66-templates","text":"(blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno?","title":"6.6. Templates"},{"location":"6_blog_app/#67-ficheros-estaticos","text":"Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: static/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load static %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\" rel=\"\\stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; }","title":"6.7. Ficheros est\u00e1ticos"},{"location":"6_blog_app/#68-individual-blog-pages","text":"Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3 Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . El pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando vayamos a la p\u00e1gina de entrada individual para nuestro primer post, podemos esperar que su patr\u00f3n de direcci\u00f3n sea post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un lugar de confusi\u00f3n muy com\u00fan para los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk .","title":"6.8. Individual blog pages"},{"location":"6_blog_app/#69-tests","text":"FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) t def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test","title":"6.9. Tests"},{"location":"6_blog_app/#610-git","text":"Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit'","title":"6.10. Git"},{"location":"6_blog_app/#611-conclusion","text":"Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6.11. Conclusi\u00f3n"},{"location":"7_formularios/","text":"7. Formularios Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas. 7.1 Formularios Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad (Ataques XSS) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito. Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan que trabajan con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting. Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establecer una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico sea la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models \u00e7 from django.urls import reverse class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio. 7.2 Actualizar Formularios Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. Nota.- Si se sigue usando el contexto de la vista tal y como se dej\u00f3 al final del tema previo, se tendr\u00e1 el contexto anything_you_want que habr\u00e1 que eliminar para volver a usar los habituales object y post . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego heredarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. Tengase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas. 7.3 Borrar la vista El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota: se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que tambi\u00e9n lo proporciona DetailView . - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ] 7.4 Tests Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_get_absolute_url(self): self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_create_view(self): response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades. 7.5 Conclusi\u00f3n En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7. Formularios"},{"location":"7_formularios/#7-formularios","text":"Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas.","title":"7. Formularios"},{"location":"7_formularios/#71-formularios","text":"Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad (Ataques XSS) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito. Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan que trabajan con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting. Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establecer una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico sea la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models \u00e7 from django.urls import reverse class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio.","title":"7.1 Formularios"},{"location":"7_formularios/#72-actualizar-formularios","text":"Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. Nota.- Si se sigue usando el contexto de la vista tal y como se dej\u00f3 al final del tema previo, se tendr\u00e1 el contexto anything_you_want que habr\u00e1 que eliminar para volver a usar los habituales object y post . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego heredarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. Tengase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas.","title":"7.2 Actualizar Formularios"},{"location":"7_formularios/#73-borrar-la-vista","text":"El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota: se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que tambi\u00e9n lo proporciona DetailView . - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ]","title":"7.3 Borrar la vista"},{"location":"7_formularios/#74-tests","text":"Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_get_absolute_url(self): self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_create_view(self): response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades.","title":"7.4 Tests"},{"location":"7_formularios/#75-conclusion","text":"En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7.5 Conclusi\u00f3n"},{"location":"8_cuentas_de_usuarios/","text":"8. Cuentas de Usuarios La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado. Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos 8.1. Login Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML y se especifica el m\u00e9todo POST ya que se est\u00e1n enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar un ataque XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n de \"enviar\". En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente. 8.2. Actualizado de la homepage Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n prominente. M\u00e1s adelante se le pordr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in.</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso. 8.3. Enlace para Logout Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'desconexi\u00f3n' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la view necesaria proporciona aplicaci\u00f3n de autentificaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' 8.4. Inscripci\u00f3n Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: acounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views import generic class SignUpView(generic.CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso de UserCreationForm incorporado y la plantilla a\u00fan no creada en signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi <nombre de usuario> . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Pero prometo que con el tiempo empezar\u00e1n a tener m\u00e1s sentido. 8.5. Git (blog) $ git commit -m 'A\u00f1ade formulario y cuentas de usuario' Crear un nuevo repo en GitHub al que puedes llamar como quieras. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master 8.6. Configuraci\u00f3n de Heroku Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master 8.7. Despliegue en Heroku (blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En su editor de texto abra settings.py . A\u00f1ade whitenoise al INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n al MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1ade nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse como lo siguiente. FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1 8.8. Conclusi\u00f3n Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se ha ocupado de los muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8. Cuentas de Usuarios"},{"location":"8_cuentas_de_usuarios/#8-cuentas-de-usuarios","text":"La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado. Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos","title":"8. Cuentas de Usuarios"},{"location":"8_cuentas_de_usuarios/#81-login","text":"Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML y se especifica el m\u00e9todo POST ya que se est\u00e1n enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar un ataque XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n de \"enviar\". En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente.","title":"8.1. Login"},{"location":"8_cuentas_de_usuarios/#82-actualizado-de-la-homepage","text":"Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n prominente. M\u00e1s adelante se le pordr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in.</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso.","title":"8.2. Actualizado de la homepage"},{"location":"8_cuentas_de_usuarios/#83-enlace-para-logout","text":"Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'desconexi\u00f3n' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la view necesaria proporciona aplicaci\u00f3n de autentificaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home'","title":"8.3. Enlace para Logout"},{"location":"8_cuentas_de_usuarios/#84-inscripcion","text":"Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: acounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views import generic class SignUpView(generic.CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso de UserCreationForm incorporado y la plantilla a\u00fan no creada en signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi <nombre de usuario> . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Pero prometo que con el tiempo empezar\u00e1n a tener m\u00e1s sentido.","title":"8.4. Inscripci\u00f3n"},{"location":"8_cuentas_de_usuarios/#85-git","text":"(blog) $ git commit -m 'A\u00f1ade formulario y cuentas de usuario' Crear un nuevo repo en GitHub al que puedes llamar como quieras. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master","title":"8.5. Git"},{"location":"8_cuentas_de_usuarios/#86-configuracion-de-heroku","text":"Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master","title":"8.6. Configuraci\u00f3n de Heroku"},{"location":"8_cuentas_de_usuarios/#87-despliegue-en-heroku","text":"(blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En su editor de texto abra settings.py . A\u00f1ade whitenoise al INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n al MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1ade nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse como lo siguiente. FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1","title":"8.7. Despliegue en Heroku"},{"location":"8_cuentas_de_usuarios/#88-conclusion","text":"Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se ha ocupado de los muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8.8. Conclusi\u00f3n"},{"location":"9_modelo_de_usuario_personalizado/","text":"9. Modelo de usuario personalizado La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adiendo un campo de edad- utilizar un modelo de usuario personalizado desde el principio lo hace bastante f\u00e1cil. Pero si no se crea un modelo de usuario personalizado, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil. Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos de Django recomiendan. Utiliza el complejo AbstractBaseUser cuando si s\u00f3lo se utilizamos AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables. Hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ). 9.1. Setup $ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado antes de hacerlo, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django. 9.2 Modelo de usuario personalizado La creaci\u00f3n de nuestro modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age crear nuevos formularios para UserCreation y UserChangeForm actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0) 9.3. Formularios Hay dos formas de interactuar con el nuevo modelo de Usuario Personalizado Cuando un usuario se registra para una nueva cuenta en nuestro sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationFrom y UserChangeform . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se est\u00e1 el modelo al CustomUser y usando los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo de edad adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de Usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos de email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate 9.4. Superusuario Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escriba el siguiente comando y pase a trav\u00e9s de las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar. 9.5. Conclusi\u00f3n Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Peri\u00f3dico .","title":"9. Modelo de Usuario Personalizado"},{"location":"9_modelo_de_usuario_personalizado/#9-modelo-de-usuario-personalizado","text":"La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adiendo un campo de edad- utilizar un modelo de usuario personalizado desde el principio lo hace bastante f\u00e1cil. Pero si no se crea un modelo de usuario personalizado, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil. Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos de Django recomiendan. Utiliza el complejo AbstractBaseUser cuando si s\u00f3lo se utilizamos AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables. Hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ).","title":"9. Modelo de usuario personalizado"},{"location":"9_modelo_de_usuario_personalizado/#91-setup","text":"$ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado antes de hacerlo, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django.","title":"9.1. Setup"},{"location":"9_modelo_de_usuario_personalizado/#92-modelo-de-usuario-personalizado","text":"La creaci\u00f3n de nuestro modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age crear nuevos formularios para UserCreation y UserChangeForm actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0)","title":"9.2 Modelo de usuario personalizado"},{"location":"9_modelo_de_usuario_personalizado/#93-formularios","text":"Hay dos formas de interactuar con el nuevo modelo de Usuario Personalizado Cuando un usuario se registra para una nueva cuenta en nuestro sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationFrom y UserChangeform . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se est\u00e1 el modelo al CustomUser y usando los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo de edad adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de Usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos de email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate","title":"9.3. Formularios"},{"location":"9_modelo_de_usuario_personalizado/#94-superusuario","text":"Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escriba el siguiente comando y pase a trav\u00e9s de las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar.","title":"9.4. Superusuario"},{"location":"9_modelo_de_usuario_personalizado/#95-conclusion","text":"Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Peri\u00f3dico .","title":"9.5. Conclusi\u00f3n"}]}