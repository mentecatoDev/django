{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Django Introducci\u00f3n Configuraci\u00f3n Inicial Hello World app Pages app Message Board app Blog app Formularios Cuentas de Usuarios Modelo de Usuario Personalizado Autenticaci\u00f3n de Usuarios Bootstrap","title":"Django"},{"location":"#django","text":"","title":"Django"},{"location":"#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"#configuracion-inicial","text":"","title":"Configuraci\u00f3n Inicial"},{"location":"#hello-world-app","text":"","title":"Hello World app"},{"location":"#pages-app","text":"","title":"Pages app"},{"location":"#message-board-app","text":"","title":"Message Board app"},{"location":"#blog-app","text":"","title":"Blog app"},{"location":"#formularios","text":"","title":"Formularios"},{"location":"#cuentas-de-usuarios","text":"","title":"Cuentas de Usuarios"},{"location":"#modelo-de-usuario-personalizado","text":"","title":"Modelo de Usuario Personalizado"},{"location":"#autenticacion-de-usuarios","text":"","title":"Autenticaci\u00f3n de Usuarios"},{"location":"#bootstrap","text":"","title":"Bootstrap"},{"location":"10_autenticacion_de_usuarios/","text":"10. Autenticaci\u00f3n de usuarios 10.1. Plantillas Por defecto, el cargador de plantillas de Django busca plantillas en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html en usuarios tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero un enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que eso es lo que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Si se piensa en lo que sucede cuando se inicia o cierra sesi\u00f3n en un sitio, se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar a los usuarios en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block contente %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf- \"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} URLs En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias. Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include from django.views.generic.base import TemplateView urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar a los users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser . La p\u00e1gina de inicio se desconect\u00f3 Ahora estamos en la p\u00e1gina de inicio de la sesi\u00f3n. Adelante, haz clic en el enlace de acceso y usa tus credenciales de superusuario. Admin Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En pripio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new Reg\u00edstrate con una nueva cuenta de usuario. He nombrado a mi testuser con una direcci\u00f3n de correo electr\u00f3nico de testuser @email.com . Si luego volvemos a la p\u00e1gina de administraci\u00f3n y nos registramos con nuestra cuenta de superusuario para hacerlo, los tres usuarios son ahora evidentes. -El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera. Conclusi\u00f3n Hasta ahora nuestra aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro, login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar para el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10. Autenticaci\u00f3n de Usuarios"},{"location":"10_autenticacion_de_usuarios/#10-autenticacion-de-usuarios","text":"","title":"10. Autenticaci\u00f3n de usuarios"},{"location":"10_autenticacion_de_usuarios/#101-plantillas","text":"Por defecto, el cargador de plantillas de Django busca plantillas en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html en usuarios tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero un enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que eso es lo que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Si se piensa en lo que sucede cuando se inicia o cierra sesi\u00f3n en un sitio, se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar a los usuarios en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block contente %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf- \"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %}","title":"10.1. Plantillas"},{"location":"10_autenticacion_de_usuarios/#urls","text":"En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias. Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include from django.views.generic.base import TemplateView urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar a los users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser . La p\u00e1gina de inicio se desconect\u00f3 Ahora estamos en la p\u00e1gina de inicio de la sesi\u00f3n. Adelante, haz clic en el enlace de acceso y usa tus credenciales de superusuario.","title":"URLs"},{"location":"10_autenticacion_de_usuarios/#admin","text":"Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En pripio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new Reg\u00edstrate con una nueva cuenta de usuario. He nombrado a mi testuser con una direcci\u00f3n de correo electr\u00f3nico de testuser @email.com . Si luego volvemos a la p\u00e1gina de administraci\u00f3n y nos registramos con nuestra cuenta de superusuario para hacerlo, los tres usuarios son ahora evidentes. -El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera.","title":"Admin"},{"location":"10_autenticacion_de_usuarios/#conclusion","text":"Hasta ahora nuestra aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro, login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar para el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"Conclusi\u00f3n"},{"location":"11_bootstrap/","text":"11. Bootstrap El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n. 11.1. Pages app Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente no se escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar podemos y debemos crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas. Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'pages', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con nuestra la nueva url y vista. 11.2. Pruebas Hay dos momentos ideales para a\u00f1adir pruebas Antes de escribir cualquier c\u00f3digo (test-driven-development) Inmediatamente despu\u00e9s de que hayas a\u00f1adido una nueva funcionalidad y lo tengas claro en tu mente. Actualmente nuestro proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. El login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirnos al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 la p\u00e1gina utiliza el nombre de la url correcta en la vista se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test 11.3. Bootstrap Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: Se pueden descargar todos los archivos y servirlos localmente Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: la p\u00e1gina de inicio inicio de sesi\u00f3n cierre de sesi\u00f3n registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico que se ve mal es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ... 11.4. Formulario de inscripci\u00f3n \u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra aqu\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hat tres opciones: anular el help_text existente ocultar el help_text reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users', 'pages', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap ' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si nuestro bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ... 11.5. Pr\u00f3ximos pasos El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11. Bootstrap"},{"location":"11_bootstrap/#11-bootstrap","text":"El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n.","title":"11. Bootstrap"},{"location":"11_bootstrap/#111-pages-app","text":"Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente no se escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar podemos y debemos crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas. Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'pages', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con nuestra la nueva url y vista.","title":"11.1. Pages app"},{"location":"11_bootstrap/#112-pruebas","text":"Hay dos momentos ideales para a\u00f1adir pruebas Antes de escribir cualquier c\u00f3digo (test-driven-development) Inmediatamente despu\u00e9s de que hayas a\u00f1adido una nueva funcionalidad y lo tengas claro en tu mente. Actualmente nuestro proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. El login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirnos al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 la p\u00e1gina utiliza el nombre de la url correcta en la vista se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test","title":"11.2. Pruebas"},{"location":"11_bootstrap/#113-bootstrap","text":"Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: Se pueden descargar todos los archivos y servirlos localmente Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: la p\u00e1gina de inicio inicio de sesi\u00f3n cierre de sesi\u00f3n registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico que se ve mal es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ...","title":"11.3. Bootstrap"},{"location":"11_bootstrap/#114-formulario-de-inscripcion","text":"\u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra aqu\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hat tres opciones: anular el help_text existente ocultar el help_text reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users', 'pages', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap ' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si nuestro bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ...","title":"11.4. Formulario de inscripci\u00f3n"},{"location":"11_bootstrap/#115-proximos-pasos","text":"El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11.5. Pr\u00f3ximos pasos"},{"location":"12/","text":"Chapter : Password Change and Reset In this chapter we will complete the authorization flow of our Newspaper app by adding password change and reset functionality. Users will be able to change their current password or, if they\u2019ve forgotten it, to reset it via email. Just as Django comes with built-in views and urls for login and logout, so too it also comes with views/urls for both password change and reset. We\u2019ll go through the default versions first and then learn how to customize them with our own Bootstrap- powered templates and email service. Password Change Letting users change their passwords is a common feature on many websites. Django provides a default implementation that already works at this stage. To try it out first click on the \u201clog in\u201d button to make sure you\u2019re logged in. Then navigate to the \u201cPassword change\u201d page at http://127.0.0.1:8000/users/password_change/.227 Chapter 11: Password Change and Reset Password change Enter in both your old password and then a new one. Then click the \u201cChange My Password\u201d button. You\u2019ll be redirected to the \u201cPassword change successful\u201d page located at: http://127.0.0.1:8000/users/password_change/done/. Password change doneChapter 11: Password Change and Reset 228 Customizing password change Let\u2019s customize these two password change pages so that they match the look and feel of our Newspaper site. Because Django already has created the views and URLs for us, we only need to add new templates. On the command line create two new template files in the registration folder. Command Line (news) $ touch templates/registration/password_change_form.html (news) $ touch templates/registration/password_change_done.html Update password_change_form.html with the following code. Code {% extends 'base.html' %} {% block title %}Password Change{% endblock %} {% block content %} Password change Please enter your old password, for security's sake, and then enter your ne\\ w password twice so we can verify you typed it in correctly. {% csrf_token %} {{ form.as_p }} Chapter 11: Password Change and Reset 229 {% endblock %} At the top we extend base.html and set our page title. Because we used \u201cblock\u201d titles in our base.html file we can override them here. The form uses POST since we\u2019re sending data and a csrf_token for security reasons. By using form.as_p we\u2019re simply displaying in paragraphs the content of the default password reset form. And finally we include a submit button that uses Bootstrap\u2019s btn btn-success styling to make it green. Go ahead and refresh the page at http://127.0.0.1:8000/users/password_change/ to see our changes. New password change form Next up is the password_change_done template.Chapter 11: Password Change and Reset 230 Code {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} Password change successful Your password was changed. {% endblock content %} It also extends base.html and includes a new title. However there\u2019s no form on the page, just new text. The new page is at http://127.0.0.1:8000/users/password_change/done/. New password change done That wasn\u2019t too bad, right? Certainly it was a lot less work than creating everything from scratch, especially all the code around securely updating a user\u2019s password. Next up is our password reset functionality.Chapter 11: Password Change and Reset 231 Password reset Password reset handles the common case of users forgetting their passwords. The steps are very similar to configuring password change, as we just did. Django already provides a default implementation that we will use and then customize the templates so it matches the rest of our site. The only configuration required is telling Django how to send emails. After all, a user can only reset a password if they have access to the email linked to the account. In production we\u2019ll use the email service SendGrid to actually send the emails but for testing purposes we can rely on Django\u2019s console backend setting which outputs the email text to our command line console instead. At the bottom of the settings.py file make the following one-line change. Code newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' And we\u2019re all set! Django will take care of all the rest for us. Let\u2019s try it out. Navigate to http://127.0.0.1:8000/users/password_reset/ to view the default pass- word reset page.Chapter 11: Password Change and Reset 232 Default password reset page Make sure the email address you enter matches one of your user accounts. Upon submission you\u2019ll then be redirected to the password reset done page at: http://127.0.0.1:8000/users/password_reset/done/. Default password reset done page Which says to check our email. Since we\u2019ve told Django to send emails to the command line console, the email text will now be there. This is what I see in my console.233 Chapter 11: Password Change and Reset Command Line Content-Type: text/plain; charset=\"utf- \" MIME-Version: . Content-Transfer-Encoding: bit Subject: Password reset on . . . : From: webmaster@localhost To: will@wsvincent.com Date: Thu, Mar : Message-ID: < . : - . @ . . . .in-addr.arpa> You're receiving this email because you requested a password reset for your user\\ account at . . . : . Please go to the following page and choose a new password: http:// . . . : /users/reset/MQ/ up- c db ead / Your username, in case you've forgotten: wsv Thanks for using our site! The . . . : team Your email text should be identical except for three lines: \u2022 the \u201cTo\u201d on the sixth line contains the email address of the user \u2022 the URL link contains a secure token that Django randomly generates for us and can be used only onceChapter 11: Password Change and Reset 234 \u2022 Django helpfully reminds us of our username We will customize all of the email default text shortly but for now focus on finding the link provided. In the message above mine is: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/ Enter this link into your web browser and you\u2019ll be redirected to the \u201cchange password page\u201d. Default change password page Now enter in a new password and click on the \u201cChange my password\u201d button. The final step is you\u2019ll be redirected to the \u201cPassword reset complete\u201d page.Chapter 11: Password Change and Reset 235 Default password reset complete To confirm everything worked, click on the \u201cLog in\u201d link and use your new password. It should work. Custom Templates As with \u201cPassword change\u201d we only need to create new templates to customize the look and feel of password reset. Create four new template files. Command Line (news) $ touch templates/registration/password_reset_form.html (news) $ touch templates/registration/password_reset_done.html (news) $ touch templates/registration/password_reset_confirm.html (news) $ touch templates/registration/password_reset_complete.html Start with the password reset form which is password_reset_form.html .Chapter 11: Password Change and Reset 236 Code {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} Forgot your password? Enter your email address below, and we'll email instructions for setting a ne\\ w one. {% csrf_token %} {{ form.as_p }} {% endblock %} At the top we extend base.html and set our page title. Because we used \u201cblock\u201d titles in our base.html file we can override them here. The form uses POST since we\u2019re sending data and a csrf_token for security reasons. By using form.as_p we\u2019re simply displaying in paragraphs the content of the default password reset form. Finally we include a submit button and use Bootstrap\u2019s btn btn-success styling to make it green. If you navigate to http://127.0.0.1:8000/users/password_reset/ and refresh the page you can see our new page.237 Chapter 11: Password Change and Reset New password reset Now we can update the other three pages. Each takes the same form of extending base.html , a new title, new content text, and for \u201cpassword reset confirm\u201d an updated form as well. Code {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} Check your inbox. We've emailed you instructions for setting your password. You should receiv\\ e the email shortly! {% endblock %} Confirm the changes by going to http://127.0.0.1:8000/users/password_reset/done/.238 Chapter 11: Password Change and Reset New reset done Next the password reset confirm page. Code {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} Set a new password! {% csrf_token %} {{ form.as_p }} {% endblock %} In the command line grab the URL link from the email outputted to the console\u2013 mine was http:// . . . : see the following. /users/reset/MQ/ up- c db ead / \u2013and you\u2019ll239 Chapter 11: Password Change and Reset New set password Finally here is the password reset complete code. Code {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} Password reset complete Your new password has been set. You can log in now on the log in page . {% endblock %} You can view it at http://127.0.0.1:8000/users/reset/done/.Chapter 11: Password Change and Reset 240 New password reset complete Users can now reset their account password! Conclusion In the next chapter we will connect our Newspaper app to the email service SendGrid to actually send our automated emails to users as opposed to outputting them in our command line console.","title":"12"},{"location":"12/#newspaper_projectsettingspy","text":"EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' And we\u2019re all set! Django will take care of all the rest for us. Let\u2019s try it out. Navigate to http://127.0.0.1:8000/users/password_reset/ to view the default pass- word reset page.Chapter 11: Password Change and Reset 232 Default password reset page Make sure the email address you enter matches one of your user accounts. Upon submission you\u2019ll then be redirected to the password reset done page at: http://127.0.0.1:8000/users/password_reset/done/. Default password reset done page Which says to check our email. Since we\u2019ve told Django to send emails to the command line console, the email text will now be there. This is what I see in my console.233 Chapter 11: Password Change and Reset Command Line Content-Type: text/plain; charset=\"utf- \" MIME-Version: . Content-Transfer-Encoding: bit Subject: Password reset on . . . : From: webmaster@localhost To: will@wsvincent.com Date: Thu, Mar : Message-ID: < . : - . @ . . . .in-addr.arpa> You're receiving this email because you requested a password reset for your user\\ account at . . . : . Please go to the following page and choose a new password: http:// . . . : /users/reset/MQ/ up- c db ead / Your username, in case you've forgotten: wsv Thanks for using our site! The . . . : team Your email text should be identical except for three lines: \u2022 the \u201cTo\u201d on the sixth line contains the email address of the user \u2022 the URL link contains a secure token that Django randomly generates for us and can be used only onceChapter 11: Password Change and Reset 234 \u2022 Django helpfully reminds us of our username We will customize all of the email default text shortly but for now focus on finding the link provided. In the message above mine is: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/ Enter this link into your web browser and you\u2019ll be redirected to the \u201cchange password page\u201d. Default change password page Now enter in a new password and click on the \u201cChange my password\u201d button. The final step is you\u2019ll be redirected to the \u201cPassword reset complete\u201d page.Chapter 11: Password Change and Reset 235 Default password reset complete To confirm everything worked, click on the \u201cLog in\u201d link and use your new password. It should work. Custom Templates As with \u201cPassword change\u201d we only need to create new templates to customize the look and feel of password reset. Create four new template files. Command Line (news) $ touch templates/registration/password_reset_form.html (news) $ touch templates/registration/password_reset_done.html (news) $ touch templates/registration/password_reset_confirm.html (news) $ touch templates/registration/password_reset_complete.html Start with the password reset form which is password_reset_form.html .Chapter 11: Password Change and Reset 236 Code {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %}","title":"newspaper_project/settings.py"},{"location":"13/","text":"Chapter : Email At this point you may be feeling a little overwhelmed by all the user authentication configuration we\u2019ve done up to this point. That\u2019s normal. After all, we haven\u2019t even created any core Newspaper app features yet! Everything has been about setting up custom user accounts and the rest. The upside to Django\u2019s approach is that it is incredibly easy to customize any piece of our website. The downside is Django requires a bit more out-of-the-box code than some competing web frameworks. As you become more and more experienced in web development, the wisdom of Django\u2019s approach will ring true. Now we want to have our emails be actually sent to users, not just outputted to our command line console. We need to signup for an account at SendGrid and update our settings.py files. Django will take care of the rest. Ready? SendGrid SendGrid is a popular service for sending transactional emails so we\u2019ll use it. Django doesn\u2019t care what service you choose though; you can just as easily use MailGun or any other service of your choice. On the SendGrid homepage click on the large blue button for \u201cSee Plans and Pricing\u201d.242 Chapter 12: Email SendGrid homepage On the next page scroll down slightly and look on the left side for the \u201cTry for Free\u201d button. SendGrid provides a free tier we can use although they make it somewhat difficult to find.243 Chapter 12: Email SendGrid pricing Sign up for your free account on the next page.244 Chapter 12: Email SendGrid new account Make sure that the email account you use for SendGrid is not the same email account you have for your superuser account on the Newspaper project or there can be weird errors. After confirming your new account via email\u2013that\u2019s kinda meta, no?\u2013you\u2019ll be asked to login and taken to your SendGrid dashboard page.245 Chapter 12: Email SendGrid loggedin Now we can configure our Django code in the settings.py file. First we update the email backend to use SMTP. Code newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Then right below it add the following five lines of email configuration. Note that ideally you should store secure information like your password in environment variables, but we won\u2019t here to keep things simple.Chapter 12: Email 246 Code newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = EMAIL_USE_TLS = True Make sure to use enter your own SendGrid username for EMAIL_HOST_USER and password for EMAIL_HOST_PASSWORD . That\u2019s it. We\u2019re done! Navigate to the password reset form again at: http://127.0.0.1:8000/users/password_reset/ You should receive an email in your inbox! The text will be exactly the same as that outputted to our command line console previously. Custom emails The current email text isn\u2019t very personal, is it? Let\u2019s change things. At this point I could just show you what steps to take, but I think it\u2019s helpful if I can explain how I figured out how to do this. After all, you want to be able to customize all parts of Django as needed. In this case, I knew what text Django was using by default but it wasn\u2019t clear where in the Django source code it was written. And since all of Django\u2019s source code is available on Github we can can just search it.247 Chapter 12: Email Github Django Use the Github search bar and enter a few words from the email text. If you type in \u201cYou\u2019re receiving this email because\u201d you\u2019ll end up at this Github search page. Github search The first result is the one we want. It shows the code is located at django/contrib/ad- min/templates/registration/password_reset_email.html . That means in the contrib app the file we want is called password_reset_email.html .248 Chapter 12: Email Here is that default text from the Django source code. Code {% load i n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password res\\ et for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb =uid token=to\\ ken %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Let\u2019s change it. We need to create a new password_reset_email.html file in our registration folder. Command Line (news) $ touch templates/registration/password_reset_email.html Then use the following code which tweaks what Django provided by default.Chapter 12: Email 249 Code {% load i n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make th\\ is request, you can safely ignore this email. Otherwise, click the button below \\ to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb =uid token=to\\ ken %} {% endblock %} {% endautoescape %} This code might look a little scary so let\u2019s break it down line-by-line. Up top we load the template tag i18n which means this text is eligible to be translated into multiple languages. Django has robust internationalization support though covering it is beyond the scope of this book. We\u2019re greeting the user by name thanks to user.get_username . Then we use the built- in reset_link block to include the custom URL link. You can read more about Django\u2019s password management approach in the official docs. Let\u2019s also update the email\u2019s subject title. To do this we\u2019ll create a new file tem- plates/registration/password_reset_subject.txt .Chapter 12: Email 250 Command Line (news) $ touch templates/registration/password_reset_subject.txt Then add the following line of code to the password_reset_subject.txt file. Please reset your password And we\u2019re all set. Go ahead and try out our new flow again by entering a new password at http://127.0.0.1:8000/users/password_reset/. Then check your email and it will have our new content and subject. Conclusion We\u2019ve now finished implementing a complete user authentication flow. Users can sign up for a new account, login, logout, change their password, and reset their password. It\u2019s time to build out our actual Newspaper app.","title":"13"},{"location":"13/#newspaper_projectsettingspy","text":"EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Then right below it add the following five lines of email configuration. Note that ideally you should store secure information like your password in environment variables, but we won\u2019t here to keep things simple.Chapter 12: Email 246 Code","title":"newspaper_project/settings.py"},{"location":"13/#newspaper_projectsettingspy_1","text":"EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = EMAIL_USE_TLS = True Make sure to use enter your own SendGrid username for EMAIL_HOST_USER and password for EMAIL_HOST_PASSWORD . That\u2019s it. We\u2019re done! Navigate to the password reset form again at: http://127.0.0.1:8000/users/password_reset/ You should receive an email in your inbox! The text will be exactly the same as that outputted to our command line console previously. Custom emails The current email text isn\u2019t very personal, is it? Let\u2019s change things. At this point I could just show you what steps to take, but I think it\u2019s helpful if I can explain how I figured out how to do this. After all, you want to be able to customize all parts of Django as needed. In this case, I knew what text Django was using by default but it wasn\u2019t clear where in the Django source code it was written. And since all of Django\u2019s source code is available on Github we can can just search it.247 Chapter 12: Email Github Django Use the Github search bar and enter a few words from the email text. If you type in \u201cYou\u2019re receiving this email because\u201d you\u2019ll end up at this Github search page. Github search The first result is the one we want. It shows the code is located at django/contrib/ad- min/templates/registration/password_reset_email.html . That means in the contrib app the file we want is called password_reset_email.html .248 Chapter 12: Email Here is that default text from the Django source code. Code {% load i n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password res\\ et for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb =uid token=to\\ ken %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Let\u2019s change it. We need to create a new password_reset_email.html file in our registration folder. Command Line (news) $ touch templates/registration/password_reset_email.html Then use the following code which tweaks what Django provided by default.Chapter 12: Email 249 Code {% load i n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make th\\ is request, you can safely ignore this email. Otherwise, click the button below \\ to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb =uid token=to\\ ken %} {% endblock %} {% endautoescape %} This code might look a little scary so let\u2019s break it down line-by-line. Up top we load the template tag i18n which means this text is eligible to be translated into multiple languages. Django has robust internationalization support though covering it is beyond the scope of this book. We\u2019re greeting the user by name thanks to user.get_username . Then we use the built- in reset_link block to include the custom URL link. You can read more about Django\u2019s password management approach in the official docs. Let\u2019s also update the email\u2019s subject title. To do this we\u2019ll create a new file tem- plates/registration/password_reset_subject.txt .Chapter 12: Email 250 Command Line (news) $ touch templates/registration/password_reset_subject.txt Then add the following line of code to the password_reset_subject.txt file. Please reset your password And we\u2019re all set. Go ahead and try out our new flow again by entering a new password at http://127.0.0.1:8000/users/password_reset/. Then check your email and it will have our new content and subject. Conclusion We\u2019ve now finished implementing a complete user authentication flow. Users can sign up for a new account, login, logout, change their password, and reset their password. It\u2019s time to build out our actual Newspaper app.","title":"newspaper_project/settings.py"},{"location":"14/","text":"Chapter : Newspaper app It\u2019s time to build out our Newspaper app. We\u2019ll have an articles page where journalists can post articles, set up permissions so only the author of an article can edit or delete it, and finally add the ability for other users to write comments on each article which will introduce the concept of foreign keys. Articles app To start create an articles app and define our database models. There are no hard and fast rules around what to name your apps except that you can\u2019t use the name of a built-in app. If you look at the INSTALLED_APPS section of settings.py you can see which app names are off-limits: admin , auth , contenttypes , sessions , messages , and staticfiles . A general rule of thumb is to use the plural of an app name\u2013 posts , payments , users , etc.\u2013unless doing so is obviously wrong as in the common case of blog where the singular makes more sense. Start by creating our new articles app. Command Line (news) $ python manage.py startapp articles Then add it to our INSTALLED_APPS and update the time zone since we\u2019ll be timestamp- ing our articles. You can find your time zone in this Wikipedia list. For example, I live in Boston, MA which is in the Eastern time zone of the United States. Therefore my entry is America/New_York .Chapter 13: Newspaper app 252 Code newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', rd Party 'crispy_forms', Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'America/New_York' Next up we define our database model which contains four fields: title , body , date , and author . Note that we\u2019re letting Django automatically set the time and date based on our TIME_ZONE setting. For the author field we want to reference our custom user model 'users.CustomUser' which we set in the settings.py file as AUTH_USER_MODEL . Therefore if we import settings we can refer to it as settings.AUTH_USER_MODEL . We also implement the best practices of defining a get_absolute_url from the beginning and a str method for viewing the model in our admin interface.253 Chapter 13: Newspaper app Code articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length= ) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def str (self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Since we have a brand new app and model, it\u2019s time to make a new migration file and then apply it to the database.Chapter 13: Newspaper app 254 Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate At this point I like to jump into the admin to play around with the model before building out the urls/views/templates needed to actually display the data on the website. But first we need to update admin.py so our new app is displayed. Code articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Now we start the server. Command Line (news) $ python manage.py runserver Navigate to http://127.0.0.1:8000/admin/ and log in.255 Chapter 13: Newspaper app Admin page If you click on \u201cArticles\u201d at the top of the page we can enter in some sample data. You\u2019ll likely have three users available at this point: your superuser , testuser , and testuser accounts. Use your superuser account as the author of all three articles.256 Chapter 13: Newspaper app Admin articles add page I\u2019ve added three new articles as you can see on the updated Articles page.257 Chapter 13: Newspaper app Admin three articles If you click on an individual article you will see that the title , body , and author are displayed but not the date . That\u2019s because the date was automatically added by Django for us and therefore can\u2019t be changed in the admin. We could make the date editable\u2013 in more complex apps it\u2019s common to have both a created_at and updated_at field\u2013but to keep things simple we\u2019ll just have the date be set upon creation by Django for us for now. Even though date is not displayed here we will still be able to access it in our templates so it can be displayed on web pages. URLs and Views The next step is to configure our URLs and views. Let\u2019s have our articles appear at articles/ . Import include on the second line and add a URL pattern for articles in our project-level urls.py file.Chapter 13: Newspaper app 258 Code newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Next we create an articles/urls.py file. Command Line (news) $ touch articles/urls.py Then populate it with our routes. Let\u2019s start with the page to list all articles at articles/ which will use the view ArticleListView .Chapter 13: Newspaper app 259 Code articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Now create our view using the built-in generic ListView from Django. Code articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' The only two fields we need to specify are the model Article and our template name which will be article_list.html . The last step is to create our template. We can make an empty file from the command line.Chapter 13: Newspaper app 260 Command Line (news) $ touch templates/article_list.html Bootstrap has a built-in component called Cards that we can customize for our individual articles. Recall that ListView returns an object called object_list which we can iterate over using a for loop. Within each article we display the title, body, author, and date. We can even provide links to \u201cedit\u201d and \u201cdelete\u201d functionality that we haven\u2019t built yet. Code {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} {{ article.title }} \u00b7 by {{ article.author }} | {{ article.date }} {{ article.body }} Edit | Delete 261 Chapter 13: Newspaper app {% endfor %} {% endblock content %} Spin up the server again with python manage.py runserver and check out our page at http://127.0.0.1:8000/articles/. Articles page Not bad eh? If we wanted to get fancy we could create a custom template filter so that the date outputted is shown in seconds, minutes, or days. This can be done with some if/else logic and Django\u2019s date options but we won\u2019t implement it here.262 Chapter 13: Newspaper app Edit/Delete How do we add edit and delete options? We need new urls, views, and templates. Let\u2019s start with the urls. We can take advantage of the fact that Django automatically adds a primary key to each database. Therefore our first article with a primary key of will be at articles/ /edit/ and the delete route will be at articles/ /delete/ . Code articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path(' /edit/', views.ArticleUpdateView.as_view(), name='article_edit'), new path(' /', views.ArticleDetailView.as_view(), name='article_detail'), new path(' /delete/', views.ArticleDeleteView.as_view(), name='article_delete'), new ] Now write up our views which will use Django\u2019s generic class-based views for DetailView , UpdateView and DeleteView . We specify which fields can be updated\u2013 title and body \u2013and where to redirect the user after deleting an article: article_list .Chapter 13: Newspaper app Code articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' 263Chapter 13: Newspaper app 264 success_url = reverse_lazy('article_list') Finally we need to add our new templates. Stop the server with Control+c and type the following. Command Line (news) $ touch templates/article_detail.html (news) $ touch templates/article_edit.html (news) $ touch templates/article_delete.html We\u2019ll start with the details page which will display the title, date, body, and author with links to edit and delete. It will also link back to all articles. Recall that the Django templating language\u2019s url tag wants the URL name and then any arguments passed in. The name of our edit route is article_edit and we need to pass in its primary key article.pk . The delete route name is article_delete and it also needs a primary key article.pk . Our articles page is a ListView so it does not need any additional arguments passed in. Code {% extends 'base.html' %} {% block content %} {{ object.title }} by {{ object.author }} | {{ object.date }} {{ object.body }} Chapter 13: Newspaper app 265 Edit | Delete Back to All Articles . {% endblock content %} For the edit and delete pages we can use Bootstrap\u2019s button styling to make the edit button light blue and the delete button red. Code {% extends 'base.html' %} {% block content %} Edit {% csrf_token %} {{ form.as_p }} Update {% endblock %}Chapter 13: Newspaper app 266 Code {% extends 'base.html' %} {% block content %} Delete {% csrf_token %} Are you sure you want to delete \"{{ article.title }}\"? Confirm {% endblock %} As a final step we can add the edit and delete links to our lists page at the div class for card-footer... . These will be the same as those added to the detail page. Code ... Edit | Delete ... Ok, we\u2019re ready to view our work. Start up the server with python manage.py run- server and navigate to articles page at http://127.0.0.1:8000/articles/. Click on the link for \u201cedit\u201d on the first article and you\u2019ll be redirected to: http://127.0.0.1:8000/articles/1/edit/267 Chapter 13: Newspaper app Edit page If you update the \u201ctitle\u201d field and click update you\u2019ll be redirected to the detail page which shows the new change. Detail page If you click on the \u201cDelete\u201d link you\u2019ll be redirected to the delete page.268 Chapter 13: Newspaper app Delete page Press the scary red button for \u201cDelete\u201d and you\u2019ll be redirected to the articles page which now only has two entries. Articles page two entries Create page The final step is a create page for new articles which we can do with Django\u2019s CreateView . Our three steps are to create a view, url, and template. This flow shouldChapter 13: Newspaper app 269 feel pretty familiar by now. In our views file add CreateView to the imports at the top and make a new class ArticleCreateView that specifies our model, template, and the fields available. Code articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... Note that our fields has author since we want to associate a new article with an author, however once an article has been created we do not want a user to be able to change the author which is why ArticleUpdateView only has the fields ['title', 'body',] . Update our urls file with the new route for the view.Chapter 13: Newspaper app 270 Code articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Then quit the server Control+c to create a new template named article_new.html . Command Line (news) $ touch templates/article_new.html And update it with the following HTML code. Code {% extends 'base.html' %} {% block content %} New article {% csrf_token %} {{ form.as_p }} Save {% endblock %} As a final step we should add a link to creating new articles in our nav so it is accessible everywhere on the site to logged-in users.Chapter 13: Newspaper app 271 Code ... Newspaper {% if user.is_authenticated %} + New {% endif %} ... And why not use Bootstrap to improve our original homepage now too? We can update templates/home.html as follows.Chapter 13: Newspaper app 272 Code {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} Newspaper app A Newspaper website built with Django. View All Articles {% endblock %} We\u2019re all done. Let\u2019s just confirm everything works as expected. Start up the server again python manage.py runserver and navigate to our homepage at: http://127.0.0.1:8000/.273 Chapter 13: Newspaper app Homepage with new link in nav Click on the link for \u201c+ New\u201d in the top nav and you\u2019ll be redirected to our create page.274 Chapter 13: Newspaper app Create page Go ahead and create a new article. Then click on the \u201cSave\u201d button. You will be redirected to the detail page. Why? Because in our models.py file we set the get_- absolute_url method to article_detail . This is a good approach because if we later change the url pattern for the detail page to, say, articles/details/ / , the redirect will still work. Whatever route is associated with article_detail will be used; there is no hardcoding of the route itself.275 Chapter 13: Newspaper app Detail page Note also that the primary key here is in the URL. Even though we\u2019re only displaying three articles right now, Django doesn\u2019t reorder the primary keys just because we deleted one. In practice, most real-world sites don\u2019t actually delete anything; instead they \u201chide\u201d deleted fields since this makes it easier to maintain the integrity of a database and gives the option to \u201cundelete\u201d later on if needed. With our current approach once something is deleted it\u2019s gone for good! Click on the link for \u201cAll Articles\u201d to see our new /articles page.276 Chapter 13: Newspaper app Updated articles page There\u2019s our new article on the bottom as expected. Conclusion We have created a dedicated articles app with CRUD functionality. But there are no permissions or authorizations yet, which means anyone can do anything! A logged-out user can visit all URLs and any logged-in user can make edits or deletes to an existing article, even one that\u2019s not their own! In the next chapter we will add permissions and authorizations to our project to fix this.","title":"14"},{"location":"14/#newspaper_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles',","title":"newspaper_project/settings.py"},{"location":"14/#local","text":"'users', 'pages', 'articles', # new ] TIME_ZONE = 'America/New_York' Next up we define our database model which contains four fields: title , body , date , and author . Note that we\u2019re letting Django automatically set the time and date based on our TIME_ZONE setting. For the author field we want to reference our custom user model 'users.CustomUser' which we set in the settings.py file as AUTH_USER_MODEL . Therefore if we import settings we can refer to it as settings.AUTH_USER_MODEL . We also implement the best practices of defining a get_absolute_url from the beginning and a str method for viewing the model in our admin interface.253 Chapter 13: Newspaper app Code","title":"Local"},{"location":"14/#articlesmodelspy","text":"from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length= ) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def str (self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Since we have a brand new app and model, it\u2019s time to make a new migration file and then apply it to the database.Chapter 13: Newspaper app 254 Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate At this point I like to jump into the admin to play around with the model before building out the urls/views/templates needed to actually display the data on the website. But first we need to update admin.py so our new app is displayed. Code","title":"articles/models.py"},{"location":"14/#articlesadminpy","text":"from django.contrib import admin from . import models admin.site.register(models.Article) Now we start the server. Command Line (news) $ python manage.py runserver Navigate to http://127.0.0.1:8000/admin/ and log in.255 Chapter 13: Newspaper app Admin page If you click on \u201cArticles\u201d at the top of the page we can enter in some sample data. You\u2019ll likely have three users available at this point: your superuser , testuser , and testuser accounts. Use your superuser account as the author of all three articles.256 Chapter 13: Newspaper app Admin articles add page I\u2019ve added three new articles as you can see on the updated Articles page.257 Chapter 13: Newspaper app Admin three articles If you click on an individual article you will see that the title , body , and author are displayed but not the date . That\u2019s because the date was automatically added by Django for us and therefore can\u2019t be changed in the admin. We could make the date editable\u2013 in more complex apps it\u2019s common to have both a created_at and updated_at field\u2013but to keep things simple we\u2019ll just have the date be set upon creation by Django for us for now. Even though date is not displayed here we will still be able to access it in our templates so it can be displayed on web pages. URLs and Views The next step is to configure our URLs and views. Let\u2019s have our articles appear at articles/ . Import include on the second line and add a URL pattern for articles in our project-level urls.py file.Chapter 13: Newspaper app 258 Code","title":"articles/admin.py"},{"location":"14/#newspaper_projecturlspy","text":"from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Next we create an articles/urls.py file. Command Line (news) $ touch articles/urls.py Then populate it with our routes. Let\u2019s start with the page to list all articles at articles/ which will use the view ArticleListView .Chapter 13: Newspaper app 259 Code","title":"newspaper_project/urls.py"},{"location":"14/#articlesurlspy","text":"from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Now create our view using the built-in generic ListView from Django. Code","title":"articles/urls.py"},{"location":"14/#articlesviewspy","text":"from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' The only two fields we need to specify are the model Article and our template name which will be article_list.html . The last step is to create our template. We can make an empty file from the command line.Chapter 13: Newspaper app 260 Command Line (news) $ touch templates/article_list.html Bootstrap has a built-in component called Cards that we can customize for our individual articles. Recall that ListView returns an object called object_list which we can iterate over using a for loop. Within each article we display the title, body, author, and date. We can even provide links to \u201cedit\u201d and \u201cdelete\u201d functionality that we haven\u2019t built yet. Code {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} {{ article.title }} \u00b7 by {{ article.author }} | {{ article.date }} {{ article.body }} Edit | Delete 261 Chapter 13: Newspaper app {% endfor %} {% endblock content %} Spin up the server again with python manage.py runserver and check out our page at http://127.0.0.1:8000/articles/. Articles page Not bad eh? If we wanted to get fancy we could create a custom template filter so that the date outputted is shown in seconds, minutes, or days. This can be done with some if/else logic and Django\u2019s date options but we won\u2019t implement it here.262 Chapter 13: Newspaper app Edit/Delete How do we add edit and delete options? We need new urls, views, and templates. Let\u2019s start with the urls. We can take advantage of the fact that Django automatically adds a primary key to each database. Therefore our first article with a primary key of will be at articles/ /edit/ and the delete route will be at articles/ /delete/ . Code","title":"articles/views.py"},{"location":"14/#articlesurlspy_1","text":"from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path(' /edit/', views.ArticleUpdateView.as_view(), name='article_edit'),","title":"articles/urls.py"},{"location":"14/#new","text":"path(' /', views.ArticleDetailView.as_view(), name='article_detail'),","title":"new"},{"location":"14/#new_1","text":"path(' /delete/', views.ArticleDeleteView.as_view(), name='article_delete'),","title":"new"},{"location":"14/#new_2","text":"] Now write up our views which will use Django\u2019s generic class-based views for DetailView , UpdateView and DeleteView . We specify which fields can be updated\u2013 title and body \u2013and where to redirect the user after deleting an article: article_list .Chapter 13: Newspaper app Code","title":"new"},{"location":"14/#articlesviewspy_1","text":"from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' 263Chapter 13: Newspaper app 264 success_url = reverse_lazy('article_list') Finally we need to add our new templates. Stop the server with Control+c and type the following. Command Line (news) $ touch templates/article_detail.html (news) $ touch templates/article_edit.html (news) $ touch templates/article_delete.html We\u2019ll start with the details page which will display the title, date, body, and author with links to edit and delete. It will also link back to all articles. Recall that the Django templating language\u2019s url tag wants the URL name and then any arguments passed in. The name of our edit route is article_edit and we need to pass in its primary key article.pk . The delete route name is article_delete and it also needs a primary key article.pk . Our articles page is a ListView so it does not need any additional arguments passed in. Code {% extends 'base.html' %} {% block content %}","title":"articles/views.py"},{"location":"14/#articlesviewspy_2","text":"... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... Note that our fields has author since we want to associate a new article with an author, however once an article has been created we do not want a user to be able to change the author which is why ArticleUpdateView only has the fields ['title', 'body',] . Update our urls file with the new route for the view.Chapter 13: Newspaper app 270 Code","title":"articles/views.py"},{"location":"14/#articlesurlspy_2","text":"... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Then quit the server Control+c to create a new template named article_new.html . Command Line (news) $ touch templates/article_new.html And update it with the following HTML code. Code {% extends 'base.html' %} {% block content %}","title":"articles/urls.py"},{"location":"15/","text":"Chapter : Permissions and Authorization There are several issues with our current Newspaper website. For one thing we want our newspaper to be financially sustainable. With more time we could add a payments app to charge for access, but for now we will require a user to log in to view any articles. This is known as authorization. It\u2019s common to set different rules around who is authorized to view areas of your site. Note that this is different than authentication which is the process of registering and logging-in users. Authorization restricts access; authentication enables a user signup and login flow. As a mature web framework, Django has built-in functionality for authorization that we can quickly use. In this chapter we\u2019ll limit access to various pages only to logged-in users. We will also add permissions so that only the author of an article can update or delete it; right now any user can! Improved CreateView At present the author on a new article can be set to any user. Instead it should be automatically set to the current user. Then we will set permissions on edit/delete so that only the author of an article can make such changes. The default CreateView provides a lot of functionality for us but in order to set the current user to author we will need to customize it. We will remove author from the fields and instead set it automatically via the form_valid method.Chapter 14: Permissions and Authorization 278 Code articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... How did I know I could update CreateView like this? The answer is I looked at the source code and used Google. Generic class-based views are amazing for starting new projects but when you want to customize them, it is necessary roll up your sleeves and start to understand what\u2019s going on under the hood. The more you use and customize built-in views, the more comfortable you will become making customizations like this. Chances are whatever you are trying to do has already been solved somewhere, either within Django itself or on a forum like Stack Overflow. Don\u2019t be afraid to ask for help! Now reload the browser and try clicking on the \u201c+ New\u201d link in the top nav. It will redirect to the updated create page where author is no longer a field. If you create a new article and then go into the admin you will see it is automatically set to the current logged-in user.Chapter 14: Permissions and Authorization 279 New article link Authorizations There are multiple issues around the lack of authorizations in our current project. Obviously we would like to restrict access to only users so we have the option of one day charging readers to our newspaper. But beyond that, any random logged-out user who knows the correct URL can access any part of the site. Consider what would happen if a logged-out user tried to create a new article? To try it out, click on your username in the upper right corner of the nav bar, then select \u201cLog out\u201d from the dropdown options. The \u201c+ New\u201d link disappears from the nav bar but what happens if you go to it directly: http://127.0.0.1:8000/articles/new/? The page is still there.Chapter 14: Permissions and Authorization Logged out new Now try to create a new article with a title and body. Click on the \u201cSave\u201d button. Create page error 280Chapter 14: Permissions and Authorization 281 An error. This is because our model expects an author field which is linked to the current logged-in user. But since we are not logged in, there\u2019s no author, and therefore the submission fails. Mixins We clearly want to set some authorizations so only logged-in users can access the site. To do this we can use a mixin, which is a special kind of multiple inheritance that Django uses to avoid duplicate code and allow for customization. For example, the built-in generic ListView needs a way to return a template. But so does DetailView and in fact almost every other view. Rather than repeat the same code in each big generic view, Django breaks out this functionality into a \u201cmixin\u201d known as TemplateRespon- seMixin. Both ListView and DetailView use this mixin to render the proper template. If you read the Django source code, which is freely available on Github, you\u2019ll see mixins used all over the place. To restrict view access to only logged in users, Django has a LoginRequired mixin that we can use. It\u2019s powerful and extremely concise. Within the existing articles/views.py file import it at the top and then add Login- RequiredMixin to our ArticleCreateView . Make sure that the mixin is to the left of ListView so it will be read first. We want the ListView to already know we intend to restrict access. And that\u2019s it! We\u2019re done.282 Chapter 14: Permissions and Authorization Code articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Now return to the URL for creating new messages at http://127.0.0.1:8000/articles/new/ and you\u2019ll see the following error: Error page What\u2019s happening? Django has automatically redirected us to the default location for the login page which is at /accounts/login however if you recall, in our project-level URLs we are using users/ as our route. That\u2019s why our login page is at users/login . So how do we tell our ArticleCreateView about this? If you look at the documentation for LoginRequired mixin it tells us the answer. We can add a login_url to override the default parameter. We\u2019re using the named URL of our login route here login .Chapter 14: Permissions and Authorization 283 Code articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Try the link for creating new messages again: http://127.0.0.1:8000/articles/new/. It now redirects users to the login page. Just as we desired! Updating views Now we see that restricting view access is just a matter of adding LoginRequiredMixin at the beginning of all existing views and specifying the correct login_url . Let\u2019s update the rest of our articles views since we don\u2019t want a user to be able to create, read, update, or delete a message if they aren\u2019t logged in. The complete views.py file should now look like this:Chapter 14: Permissions and Authorization Code articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' 284Chapter 14: Permissions and Authorization 285 class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Go ahead and play around with the site to confirm that the login redirects now work as expected. If you need help recalling what the proper URLs are, log in first and write down the URLs for each of the routes for create, edit, delete, and all articles. Conclusion Our Newspaper app is almost done. We have our articles properly configured, have set permissions and authorizations, user authentication is in good shape. The last item is to add the ability for fellow logged-in users to leave comments which we\u2019ll cover in the next chapter.","title":"15"},{"location":"15/#articlesviewspy","text":"... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... How did I know I could update CreateView like this? The answer is I looked at the source code and used Google. Generic class-based views are amazing for starting new projects but when you want to customize them, it is necessary roll up your sleeves and start to understand what\u2019s going on under the hood. The more you use and customize built-in views, the more comfortable you will become making customizations like this. Chances are whatever you are trying to do has already been solved somewhere, either within Django itself or on a forum like Stack Overflow. Don\u2019t be afraid to ask for help! Now reload the browser and try clicking on the \u201c+ New\u201d link in the top nav. It will redirect to the updated create page where author is no longer a field. If you create a new article and then go into the admin you will see it is automatically set to the current logged-in user.Chapter 14: Permissions and Authorization 279 New article link Authorizations There are multiple issues around the lack of authorizations in our current project. Obviously we would like to restrict access to only users so we have the option of one day charging readers to our newspaper. But beyond that, any random logged-out user who knows the correct URL can access any part of the site. Consider what would happen if a logged-out user tried to create a new article? To try it out, click on your username in the upper right corner of the nav bar, then select \u201cLog out\u201d from the dropdown options. The \u201c+ New\u201d link disappears from the nav bar but what happens if you go to it directly: http://127.0.0.1:8000/articles/new/? The page is still there.Chapter 14: Permissions and Authorization Logged out new Now try to create a new article with a title and body. Click on the \u201cSave\u201d button. Create page error 280Chapter 14: Permissions and Authorization 281 An error. This is because our model expects an author field which is linked to the current logged-in user. But since we are not logged in, there\u2019s no author, and therefore the submission fails. Mixins We clearly want to set some authorizations so only logged-in users can access the site. To do this we can use a mixin, which is a special kind of multiple inheritance that Django uses to avoid duplicate code and allow for customization. For example, the built-in generic ListView needs a way to return a template. But so does DetailView and in fact almost every other view. Rather than repeat the same code in each big generic view, Django breaks out this functionality into a \u201cmixin\u201d known as TemplateRespon- seMixin. Both ListView and DetailView use this mixin to render the proper template. If you read the Django source code, which is freely available on Github, you\u2019ll see mixins used all over the place. To restrict view access to only logged in users, Django has a LoginRequired mixin that we can use. It\u2019s powerful and extremely concise. Within the existing articles/views.py file import it at the top and then add Login- RequiredMixin to our ArticleCreateView . Make sure that the mixin is to the left of ListView so it will be read first. We want the ListView to already know we intend to restrict access. And that\u2019s it! We\u2019re done.282 Chapter 14: Permissions and Authorization Code","title":"articles/views.py"},{"location":"15/#articlesviewspy_1","text":"from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Now return to the URL for creating new messages at http://127.0.0.1:8000/articles/new/ and you\u2019ll see the following error: Error page What\u2019s happening? Django has automatically redirected us to the default location for the login page which is at /accounts/login however if you recall, in our project-level URLs we are using users/ as our route. That\u2019s why our login page is at users/login . So how do we tell our ArticleCreateView about this? If you look at the documentation for LoginRequired mixin it tells us the answer. We can add a login_url to override the default parameter. We\u2019re using the named URL of our login route here login .Chapter 14: Permissions and Authorization 283 Code","title":"articles/views.py"},{"location":"15/#articlesviewspy_2","text":"... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Try the link for creating new messages again: http://127.0.0.1:8000/articles/new/. It now redirects users to the login page. Just as we desired! Updating views Now we see that restricting view access is just a matter of adding LoginRequiredMixin at the beginning of all existing views and specifying the correct login_url . Let\u2019s update the rest of our articles views since we don\u2019t want a user to be able to create, read, update, or delete a message if they aren\u2019t logged in. The complete views.py file should now look like this:Chapter 14: Permissions and Authorization Code","title":"articles/views.py"},{"location":"15/#articlesviewspy_3","text":"from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' 284Chapter 14: Permissions and Authorization 285 class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Go ahead and play around with the site to confirm that the login redirects now work as expected. If you need help recalling what the proper URLs are, log in first and write down the URLs for each of the routes for create, edit, delete, and all articles. Conclusion Our Newspaper app is almost done. We have our articles properly configured, have set permissions and authorizations, user authentication is in good shape. The last item is to add the ability for fellow logged-in users to leave comments which we\u2019ll cover in the next chapter.","title":"articles/views.py"},{"location":"16/","text":"Chapter : Comments There are two ways we could add comments to our Newspaper site. The first is to create a dedicated comments app and link it to articles, however that seems like over-engineering at this point. Instead we can simply add an additional model called Comment to our articles app and link it to the Article model through a foreign key. By the end of this chapter users will have the ability to leave comments on any other users articles. Model To start we can add another table to our existing database called Comment . This model will have a many-to-one foreign key relationship to Article : one article can have many comments, but not the other way around. Traditionally the name of the foreign key field is simply the model it links to, so this field will be called article . The other two fields will be comment and author . Open up the file articles/models.py and underneath the existing code add the following.287 Chapter 15: Comments Code articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length= ) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def str (self): return self.comment def get_absolute_url(self): return reverse('article_list') Our Comment model also has a str method and a get_absolute_url method that returns to the main articles/ page. Since we\u2019ve updated our models it\u2019s time to make a new migration file and then apply it. Note that by adding articles at the end of each command\u2013which is optional\u2013we are specifying we want to use just the articles app here. This is a good habit to use. For example, what if we made changes to models in two different apps? If we did not specify an app, then both apps\u2019 changes would be incorporated in the same migrations file which makes it harder, in the future, to debug errors. Keep each migration as small and contained as possible.Chapter 15: Comments 288 Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate Admin After making a new model it\u2019s good to play around with it in the admin app before displaying it on our actual website. Add Comment to our admin.py file so it will be visible. Code articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) Then start up the server with python manage.py runserver and navigate to our main page http://127.0.0.1:8000/admin/289 Chapter 15: Comments Admin page with Comments Under our app \u201cArticles\u201d you\u2019ll see our two tables: Comments and Articles. Click on the \u201c+ Add\u201d next to Comments. You\u2019ll see that under Article is a dropdown of exiting articles, same thing for Author, and there is a text field next to Comment.290 Chapter 15: Comments Admin Comments Select an Article, write a comment, and then select an author that is not your superuser, perhaps testuser as I\u2019ve done in the picture. Then click on the \u201cSave\u201d button. You should next see your comment on the \u201cComments\u201d page.291 Chapter 15: Comments Admin Comment One At this point we could add an additional admin field so we\u2019d see the comment and the article on this page. But wouldn\u2019t it be better to just see all Comment models related to a single Post model? It turns out we can with a Django admin feature called inlines which displays foreign key relationships in a nice, visual way. There are two main inline views used: TabularInline and StackedInline. The only dif- ference between the two is the template for displaying information. In a TabularInline all model fields appear on one line while in a StackedInline each field has its own line. We\u2019ll implement both so you can decide which one you prefer. Update articles/admin.py as follows in your text editor.Chapter 15: Comments 292 Code articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Now go back to the main admin page at http://127.0.0.1:8000/admin/ and click on \u201cArticles.\u201d Select the article which you just added a comment for which was \u201cLocal news\u201d in my case.293 Chapter 15: Comments Admin change page Better right! We can see and modify all our related articles and comments in one place. Personally though I prefer using TabularInline as it shows more information in less space. To switch to to it we only need to change our CommentInline from admin.StackedInline to admin.TabularInline .Chapter 15: Comments 294 Code articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Refresh the admin page and you\u2019ll see the new change: all fields for each model are displayed on the same line.295 Chapter 15: Comments TabularInline page Much better. Now we need to update our template to display comments. Template Since Comment lives within our existing articles app we only need to update the existing templates for article_list.html and article_detail.html to display our new content. We don\u2019t have to create new templates and mess around with urls and views. What we want to do is display all comments related to a specific article. This is called a \u201cquery\u201d as we\u2019re asking the database for a specific bit of information. In our case, working with a foreign key, we want to follow a relationship backward: for each Article look up related Comment models.Chapter 15: Comments 296 Django has a built-in syntax we can use known as FOO_set where FOO is the lowercased source model name. So for our Article model we can use article_set to access all instances of the model. But personally I strongly dislike this syntax as I find it confusing and non-intuitive. A better approach is to add a related_name attribute to our model which lets us explicitly set the name of this reverse relationship instead. Let\u2019s do that. To start add a related_name attribute to our Comment model. A good default is to name it the plural of the model holding the ForeignKey. Code articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Since we just made a change to our database model we need to create a migrations file and update the database. Stop the local server with Control+c and execute the following two commands. Then spin up the server again as we will be using it shortly.Chapter 15: Comments 297 Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Understanding queries takes some time so don\u2019t be concerned if the idea of reverse relationships is confusing. I\u2019ll show you how to implement the code as desired. And once you\u2019ve mastered these basic cases you can explore how to filter your querysets in great detail so they return exactly the information you want. In our article_list.html file we can add our comments to the card-footer . Note that I\u2019ve moved our edit and delete links up into card-body . To access each comment we\u2019re calling article.comments.all which means first look at the article model, then comments which is the related name of the entire Comment model, and select all included. It can take a little while to become accustomed to this syntax for referencing foreign key data in a template! Code {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} {{ article.title }} \u00b7 by {{ article.author }} | {{ article.date }} {{ article.body }} Edit | Delete {% for comment in article.comments.all %} {{ comment.author }} \u00b7 {{ comment }} {% endfor %} {% endfor %} {% endblock content %} If you refresh the articles page at http://127.0.0.1:8000/articles/ we can see our new comment displayed on the page.299 Chapter 15: Comments Articles page with comments Yoohoo! It works. We can see both comments listed underneath the initial message. Conclusion With more time we would focus on forms now so a user could write a new article directly on the articles/ page as well as add comments too. But the main focus of this chapter is to demonstrate how foreign key relationships work in Django. Our Newspaper app is now complete. It has a robust user authentication flow including the use of email for password resets. We are also using a custom user model so if we want to add additional fields to our CustomUser model it is as simple as addingChapter 15: Comments 300 an additional field. We already have an age field for all users that is currently being set to by default. If we wanted to, we could add an age dropdown to the signup form and restrict user access only to users over age 13. Or we could offer discounts to users over age 65. Whatever we want to do to our CustomUser model is an option. Most of web development follows the same patterns and by using a web framework like Django 99% of what we want in terms of functionality is either already included or only a small customization of an existing feature away.","title":"16"},{"location":"16/#articlesmodelspy","text":"... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length= ) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def str (self): return self.comment def get_absolute_url(self): return reverse('article_list') Our Comment model also has a str method and a get_absolute_url method that returns to the main articles/ page. Since we\u2019ve updated our models it\u2019s time to make a new migration file and then apply it. Note that by adding articles at the end of each command\u2013which is optional\u2013we are specifying we want to use just the articles app here. This is a good habit to use. For example, what if we made changes to models in two different apps? If we did not specify an app, then both apps\u2019 changes would be incorporated in the same migrations file which makes it harder, in the future, to debug errors. Keep each migration as small and contained as possible.Chapter 15: Comments 288 Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate Admin After making a new model it\u2019s good to play around with it in the admin app before displaying it on our actual website. Add Comment to our admin.py file so it will be visible. Code","title":"articles/models.py"},{"location":"16/#articlesadminpy","text":"from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) Then start up the server with python manage.py runserver and navigate to our main page http://127.0.0.1:8000/admin/289 Chapter 15: Comments Admin page with Comments Under our app \u201cArticles\u201d you\u2019ll see our two tables: Comments and Articles. Click on the \u201c+ Add\u201d next to Comments. You\u2019ll see that under Article is a dropdown of exiting articles, same thing for Author, and there is a text field next to Comment.290 Chapter 15: Comments Admin Comments Select an Article, write a comment, and then select an author that is not your superuser, perhaps testuser as I\u2019ve done in the picture. Then click on the \u201cSave\u201d button. You should next see your comment on the \u201cComments\u201d page.291 Chapter 15: Comments Admin Comment One At this point we could add an additional admin field so we\u2019d see the comment and the article on this page. But wouldn\u2019t it be better to just see all Comment models related to a single Post model? It turns out we can with a Django admin feature called inlines which displays foreign key relationships in a nice, visual way. There are two main inline views used: TabularInline and StackedInline. The only dif- ference between the two is the template for displaying information. In a TabularInline all model fields appear on one line while in a StackedInline each field has its own line. We\u2019ll implement both so you can decide which one you prefer. Update articles/admin.py as follows in your text editor.Chapter 15: Comments 292 Code","title":"articles/admin.py"},{"location":"16/#articlesadminpy_1","text":"from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Now go back to the main admin page at http://127.0.0.1:8000/admin/ and click on \u201cArticles.\u201d Select the article which you just added a comment for which was \u201cLocal news\u201d in my case.293 Chapter 15: Comments Admin change page Better right! We can see and modify all our related articles and comments in one place. Personally though I prefer using TabularInline as it shows more information in less space. To switch to to it we only need to change our CommentInline from admin.StackedInline to admin.TabularInline .Chapter 15: Comments 294 Code","title":"articles/admin.py"},{"location":"16/#articlesadminpy_2","text":"from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Refresh the admin page and you\u2019ll see the new change: all fields for each model are displayed on the same line.295 Chapter 15: Comments TabularInline page Much better. Now we need to update our template to display comments. Template Since Comment lives within our existing articles app we only need to update the existing templates for article_list.html and article_detail.html to display our new content. We don\u2019t have to create new templates and mess around with urls and views. What we want to do is display all comments related to a specific article. This is called a \u201cquery\u201d as we\u2019re asking the database for a specific bit of information. In our case, working with a foreign key, we want to follow a relationship backward: for each Article look up related Comment models.Chapter 15: Comments 296 Django has a built-in syntax we can use known as FOO_set where FOO is the lowercased source model name. So for our Article model we can use article_set to access all instances of the model. But personally I strongly dislike this syntax as I find it confusing and non-intuitive. A better approach is to add a related_name attribute to our model which lets us explicitly set the name of this reverse relationship instead. Let\u2019s do that. To start add a related_name attribute to our Comment model. A good default is to name it the plural of the model holding the ForeignKey. Code","title":"articles/admin.py"},{"location":"16/#articlesmodelspy_1","text":"... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Since we just made a change to our database model we need to create a migrations file and update the database. Stop the local server with Control+c and execute the following two commands. Then spin up the server again as we will be using it shortly.Chapter 15: Comments 297 Command Line (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Understanding queries takes some time so don\u2019t be concerned if the idea of reverse relationships is confusing. I\u2019ll show you how to implement the code as desired. And once you\u2019ve mastered these basic cases you can explore how to filter your querysets in great detail so they return exactly the information you want. In our article_list.html file we can add our comments to the card-footer . Note that I\u2019ve moved our edit and delete links up into card-body . To access each comment we\u2019re calling article.comments.all which means first look at the article model, then comments which is the related name of the entire Comment model, and select all included. It can take a little while to become accustomed to this syntax for referencing foreign key data in a template! Code {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} {{ article.title }} \u00b7 by {{ article.author }} | {{ article.date }} {{ article.body }} Edit | Delete {% for comment in article.comments.all %} {{ comment.author }} \u00b7 {{ comment }} {% endfor %} {% endfor %} {% endblock content %} If you refresh the articles page at http://127.0.0.1:8000/articles/ we can see our new comment displayed on the page.299 Chapter 15: Comments Articles page with comments Yoohoo! It works. We can see both comments listed underneath the initial message. Conclusion With more time we would focus on forms now so a user could write a new article directly on the articles/ page as well as add comments too. But the main focus of this chapter is to demonstrate how foreign key relationships work in Django. Our Newspaper app is now complete. It has a robust user authentication flow including the use of email for password resets. We are also using a custom user model so if we want to add additional fields to our CustomUser model it is as simple as addingChapter 15: Comments 300 an additional field. We already have an age field for all users that is currently being set to by default. If we wanted to, we could add an age dropdown to the signup form and restrict user access only to users over age 13. Or we could offer discounts to users over age 65. Whatever we want to do to our CustomUser model is an option. Most of web development follows the same patterns and by using a web framework like Django 99% of what we want in terms of functionality is either already included or only a small customization of an existing feature away.","title":"articles/models.py"},{"location":"17/","text":"Conclusion Congratulations on finishing Django for Beginners! After starting from absolute zero we\u2019ve now built five different web applications from scratch. And we\u2019ve covered all the major features of Django: templates, views, urls, users, models, security, testing, and deployment. You now have the knowledge to go off and build your own modern websites with Django. As with any new skill, it\u2019s important to practice and apply what you\u2019ve just learned. The CRUD functionality in our Blog and Newspaper sites is common in many, many other web applications. For example, can you make a Todo List web application? You already have all the tools you need. Web development is a very deep field and there\u2019s still much more to learn about what Django has to offer. For example a more advanced Django project would likely use multiple settings files, environment variables, and PostgreSQL locally instead of SQLite. It might even use third-party packages like django-allauth for social authentication, django-debug-toolbar for debugging, and django-extensions for extra goodies. The best way to learn more about Django and web development in general is to think of a project you want to build and then step-by-step learn what you need to complete it. An additional resource that may help is DjangoX, which is a real-world starter project that features social authentication and more. You can also sign up for the Django for Beginners newsletter for periodic updates on new content and discounts on future books. And a final resource is my own personal website, wsvincent.com, which is regularly updated and features articles on some of these advanced techniques already:Conclusion 302 \u2022 Django Social Authentication \u2022 Django Login Mega-Tutorial \u2022 Django, PostgreSQL, and Docker \u2022 Django Rest Framework Tutorial \u2022 Django Rest Framework with React Django Resources To continue learning Django, I recommend working through the following free online tutorials: \u2022 Official Polls Tutorial \u2022 Django Girls Tutorial \u2022 MDN: Django Web Framework \u2022 A Complete Beginner\u2019s Guide to Django I also strongly recommend Two Scoops of Django 1.11: Best Practices for the Django Web Framework, which is the current best-practices bible for Django developers. Python Books If you\u2019re new to Python, there are several excellent books available for beginners to advanced Pythonistas: \u2022 Python Crash Course is a fantastic introduction to Python that also walks you through three real-world projects, including a Django application. \u2022 Think Python introduces Python and computer science fundamentals at the same time.Conclusion 303 \u2022 Automate the Boring Stuff is another great guide to learning and using Python in real-world settings. \u2022 The Hitchhiker\u2019s Guide to Python covers best practices in Python programming. \u2022 Python Tricks demonstrates how to write Pythonic code. \u2022 Effective Python is an excellent guide not just to Python but programming in general. \u2022 Fluent Python is amazing and provides a deep understanding of the Python language. Blogs to Follow These sites provide regular, high-quality writings on Python and web development. \u2022 Real Python \u2022 Dan Bader \u2022 Trey Hunner \u2022 Full Stack Python \u2022 Ned Batchelder \u2022 Armin Ronacher \u2022 Kenneth Reitz \u2022 Daniel Greenfeld Feedback If you\u2019ve made it through the entire book, I\u2019d love to hear your thoughts. What did you like or dislike? What areas were especially difficult? And what new content would you like to see? I can be reached at will@wsvincent.com.","title":"17"},{"location":"1_introduccion/","text":"1 Introducci\u00f3n Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv 1.1 Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\" La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas. 1.2 Por qu\u00e9 unos apuntes Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS 1.3 Estructura 1.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1. Introducci\u00f3n"},{"location":"1_introduccion/#1-introduccion","text":"Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv","title":"1 Introducci\u00f3n"},{"location":"1_introduccion/#11-por-que-django-comes-with-the-box-o-batteries-included","text":"La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas.","title":"1.1 Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\""},{"location":"1_introduccion/#12-por-que-unos-apuntes","text":"Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS","title":"1.2 Por qu\u00e9 unos apuntes"},{"location":"1_introduccion/#13-estructura","text":"1.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1.3 Estructura"},{"location":"2_configuracion_inicial/","text":"2 Configuraci\u00f3n inicial Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto 2.1 La l\u00ednea de comandos Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line 2.2 Instalar Python 3 Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes 2.3 Entornos Virtuales Ver: Entornos Virtuales 2.4 Instalaci\u00f3n de Django $ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual 2.5.1 Cambiando la IP de escucha y el puerto De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n. Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). Una descripci\u00f3n m\u00e1s detallada del servidor se puede encontrar aqu\u00ed . 2.5 Instalar Git $ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\" 2.6 Editores de texto Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm 2.7 Conclusi\u00f3n","title":"2. Configuraci\u00f3n Inicial"},{"location":"2_configuracion_inicial/#2-configuracion-inicial","text":"Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto","title":"2 Configuraci\u00f3n inicial"},{"location":"2_configuracion_inicial/#21-la-linea-de-comandos","text":"Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line","title":"2.1 La l\u00ednea de comandos"},{"location":"2_configuracion_inicial/#22-instalar-python-3","text":"Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes","title":"2.2 Instalar Python 3"},{"location":"2_configuracion_inicial/#23-entornos-virtuales","text":"Ver: Entornos Virtuales","title":"2.3 Entornos Virtuales"},{"location":"2_configuracion_inicial/#24-instalacion-de-django","text":"$ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual","title":"2.4 Instalaci\u00f3n de Django"},{"location":"2_configuracion_inicial/#251-cambiando-la-ip-de-escucha-y-el-puerto","text":"De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n. Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). Una descripci\u00f3n m\u00e1s detallada del servidor se puede encontrar aqu\u00ed .","title":"2.5.1 Cambiando la IP de escucha y el puerto"},{"location":"2_configuracion_inicial/#25-instalar-git","text":"$ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\"","title":"2.5 Instalar Git"},{"location":"2_configuracion_inicial/#26-editores-de-texto","text":"Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm","title":"2.6 Editores de texto"},{"location":"2_configuracion_inicial/#27-conclusion","text":"","title":"2.7 Conclusi\u00f3n"},{"location":"3_hello_world_app/","text":"3 Hello World app Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\" 3.1 Configuraci\u00f3n inicial $ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000 3.2 Crear una app Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. Para incluir la app en el proyecto se necesita a;adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig class est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. 3.3 Vistas (Views) y configurariones de URL's (URLConfs) En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template Se empieza actualizando el fichero views.py FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py \u00e7 # pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. 3.4 Resumen 1.- CREAR APP (helloworld) $ python manage.py startapp pages 2.- INFORMAR DE LA NUEVA APP FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... 3.- CREAR LA VISTA FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") 4.- CREAR EL FICHERO DE RUTAS DE LA APP FICHERO: pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] 5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"3. Hello World app"},{"location":"3_hello_world_app/#3-hello-world-app","text":"Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\"","title":"3 Hello World app"},{"location":"3_hello_world_app/#31-configuracion-inicial","text":"$ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000","title":"3.1 Configuraci\u00f3n inicial"},{"location":"3_hello_world_app/#32-crear-una-app","text":"Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. Para incluir la app en el proyecto se necesita a;adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig class est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia.","title":"3.2 Crear una app"},{"location":"3_hello_world_app/#33-vistas-views-y-configurariones-de-urls-urlconfs","text":"En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template Se empieza actualizando el fichero views.py FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py \u00e7 # pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto.","title":"3.3 Vistas (Views) y configurariones de URL's (URLConfs)"},{"location":"3_hello_world_app/#34-resumen","text":"","title":"3.4 Resumen"},{"location":"3_hello_world_app/#1-crear-app","text":"(helloworld) $ python manage.py startapp pages","title":"1.- CREAR APP"},{"location":"3_hello_world_app/#2-informar-de-la-nueva-app","text":"FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ...","title":"2.- INFORMAR DE LA NUEVA APP"},{"location":"3_hello_world_app/#3-crear-la-vista","text":"FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\")","title":"3.- CREAR LA VISTA"},{"location":"3_hello_world_app/#4-crear-el-fichero-de-rutas-de-la-app","text":"FICHERO: pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ]","title":"4.- CREAR EL FICHERO DE RUTAS DE LA APP"},{"location":"3_hello_world_app/#5-incluir-el-fichero-de-rutas-de-la-app-en-el-principal","text":"FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL"},{"location":"4_pages_app/","text":"4 Pages app 4.1 Objetivos Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates) 4.2 Configuraci\u00f3n inicial Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py # pages_project/settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... Arrancar servidor (pages) $ python manage.py runserver 4.3 Plantillas (Templates) Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta - Ruta (URL).- Controla la ruta inicial - Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. - Plantilla (Template).- Contiene el HTML. 4.3.1 D\u00f3nde colocar el directorio de plantillas Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... \u00e7 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista 4.4 Vistas basadas en clases (Class-Based Views) Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView . 1.4.5 URLs El \u00faltimo paso es actualizar los URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio. 4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\" Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Conectar la vista con la ruta FICHERO: pages/urls.py from django.urls import path \u00e7 from .views import HomePageView, AboutPageView urlpatterns = [ \u00e7 path('about/', AboutPageView.as_view(), name='about'), path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about 4.7 Extendiendo Plantillas El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} <h1>Homepage</h1> {% endblock content %} FICHERO: templates/about.html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %} 4.8 Tests Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code,200) Se usa SimpleTestCase ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos TestCase . Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. Para ejecutar los tests: (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK 4.9 Git, GitHub, GitLab y Bitbucket (pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial' 4.10 Local vs Producci\u00f3n C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo. 4.11 Heroku Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com 4.11 Ficheros adicionales Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco \"*\", que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master 4.12 Despliegue Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create (pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git A\u00f1adir un \u201chook\u201d para Heroku dentro de git Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349 Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1 Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/. 4.13 Conclusi\u00f3n Plantillas Vistas basadas en clases URLConfs Tests b\u00e1sicos Heroku","title":"4. Pages app"},{"location":"4_pages_app/#4-pages-app","text":"","title":"4 Pages app"},{"location":"4_pages_app/#41-objetivos","text":"Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates)","title":"4.1 Objetivos"},{"location":"4_pages_app/#42-configuracion-inicial","text":"Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py # pages_project/settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... Arrancar servidor (pages) $ python manage.py runserver","title":"4.2 Configuraci\u00f3n inicial"},{"location":"4_pages_app/#43-plantillas-templates","text":"Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta - Ruta (URL).- Controla la ruta inicial - Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. - Plantilla (Template).- Contiene el HTML.","title":"4.3 Plantillas (Templates)"},{"location":"4_pages_app/#431-donde-colocar-el-directorio-de-plantillas","text":"Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... \u00e7 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista","title":"4.3.1 D\u00f3nde colocar el directorio de plantillas"},{"location":"4_pages_app/#44-vistas-basadas-en-clases-class-based-views","text":"Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView .","title":"4.4 Vistas basadas en clases (Class-Based Views)"},{"location":"4_pages_app/#145-urls","text":"El \u00faltimo paso es actualizar los URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio.","title":"1.4.5 URLs"},{"location":"4_pages_app/#46-anadir-una-pagina-acerca-de","text":"Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Conectar la vista con la ruta FICHERO: pages/urls.py from django.urls import path \u00e7 from .views import HomePageView, AboutPageView urlpatterns = [ \u00e7 path('about/', AboutPageView.as_view(), name='about'), path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about","title":"4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\""},{"location":"4_pages_app/#47-extendiendo-plantillas","text":"El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} <h1>Homepage</h1> {% endblock content %} FICHERO: templates/about.html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %}","title":"4.7 Extendiendo Plantillas"},{"location":"4_pages_app/#48-tests","text":"Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code,200) Se usa SimpleTestCase ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos TestCase . Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. Para ejecutar los tests: (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK","title":"4.8 Tests"},{"location":"4_pages_app/#49-git-github-gitlab-y-bitbucket","text":"(pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial'","title":"4.9 Git, GitHub, GitLab y Bitbucket"},{"location":"4_pages_app/#410-local-vs-produccion","text":"C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo.","title":"4.10 Local vs Producci\u00f3n"},{"location":"4_pages_app/#411-heroku","text":"Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com","title":"4.11 Heroku"},{"location":"4_pages_app/#411-ficheros-adicionales","text":"Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco \"*\", que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master","title":"4.11 Ficheros adicionales"},{"location":"4_pages_app/#412-despliegue","text":"Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku","title":"4.12 Despliegue"},{"location":"4_pages_app/#crear-una-nueva-aplicacion-de-heroku-desde-la-linea-de-comandos-con-heroku-create","text":"(pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git","title":"Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create"},{"location":"4_pages_app/#anadir-un-hook-para-heroku-dentro-de-git","text":"Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349","title":"A\u00f1adir un \u201chook\u201d para Heroku dentro de git"},{"location":"4_pages_app/#configurar-la-aplicacion-para-ignorar-los-archivos-estaticos","text":"Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master","title":"Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos"},{"location":"4_pages_app/#iniciar-el-servidor-de-heroku-para-que-la-aplicacion-este-activa","text":"Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1","title":"Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa"},{"location":"4_pages_app/#visitar-la-aplicacion-en-la-url-proporcionada-por-heroku","text":"Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/.","title":"Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku"},{"location":"4_pages_app/#413-conclusion","text":"Plantillas Vistas basadas en clases URLConfs Tests b\u00e1sicos Heroku","title":"4.13 Conclusi\u00f3n"},{"location":"5_message_board_app/","text":"5. Message Board app Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os. 5.1. Setup Inicial Crear un nuevo directorio para nuestro c\u00f3digo en el Escritorio llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ cd ~/Desktop $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'posts', ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 ahora un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver 5.2. Crear un modelo de base de datos Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos. FICHERO: posts/models.py # posts/models.py from django.db import models # Create your models here Django importa un m\u00f3dulo models para ayudarnos a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. - Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual podemos hacer de la siguiente manera: FICHERO: post/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() . 5.3. Activando modelos Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS. Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos aplicaciones separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones. 5.4. Django Admin Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py # posts/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() \u00e7 def __str__(self): \u00e7 \"\"\"A string representation of the model.\"\"\" \u00e7 return self.text[:50] Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos str() a todos los modelos para aumentar la legibilidad. 5.5. Views/Templates/URLs Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs . 5.5.1. Vista Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla. Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla. 5.4.2. Plantilla Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial' 5.6. Tests Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post=Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: \"just a test\" Ejecutar test_text_content , para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id en el modelo de Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase \u00e7 from django.urls import reverse from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') \u00e7 class HomePageViewTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='this is another test') \u00e7 def test_view_url_exists_at_proper_location(self): \u00e7 resp = self.client.get('/') \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_url_by_name(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_uses_correct_template(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 self.assertTemplateUsed(resp, 'home.html') Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests' 5.7. GitHub Subir el proyecto... 5.8. Heroku configuration Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py 5.8.1. Actualizar Pipfile.lock Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock 5.8.2. Crear Procfile Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile 5.8.3. Instalar gunicorn Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn 5.8.4. Actualizar settings.py Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master 5.9. Despliegue en Heroku Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n. 5.10. Conclusi\u00f3n Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5. Message Board app"},{"location":"5_message_board_app/#5-message-board-app","text":"Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os.","title":"5. Message Board app"},{"location":"5_message_board_app/#51-setup-inicial","text":"Crear un nuevo directorio para nuestro c\u00f3digo en el Escritorio llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ cd ~/Desktop $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'posts', ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 ahora un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver","title":"5.1. Setup Inicial"},{"location":"5_message_board_app/#52-crear-un-modelo-de-base-de-datos","text":"Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos. FICHERO: posts/models.py # posts/models.py from django.db import models # Create your models here Django importa un m\u00f3dulo models para ayudarnos a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. - Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual podemos hacer de la siguiente manera: FICHERO: post/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() .","title":"5.2. Crear un modelo de base de datos"},{"location":"5_message_board_app/#53-activando-modelos","text":"Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS. Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos aplicaciones separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones.","title":"5.3. Activando modelos"},{"location":"5_message_board_app/#54-django-admin","text":"Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py # posts/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() \u00e7 def __str__(self): \u00e7 \"\"\"A string representation of the model.\"\"\" \u00e7 return self.text[:50] Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos str() a todos los modelos para aumentar la legibilidad.","title":"5.4. Django Admin"},{"location":"5_message_board_app/#55-viewstemplatesurls","text":"Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs .","title":"5.5. Views/Templates/URLs"},{"location":"5_message_board_app/#551-vista","text":"Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla. Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla.","title":"5.5.1. Vista"},{"location":"5_message_board_app/#542-plantilla","text":"Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial'","title":"5.4.2. Plantilla"},{"location":"5_message_board_app/#56-tests","text":"Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post=Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: \"just a test\" Ejecutar test_text_content , para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id en el modelo de Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase \u00e7 from django.urls import reverse from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') \u00e7 class HomePageViewTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='this is another test') \u00e7 def test_view_url_exists_at_proper_location(self): \u00e7 resp = self.client.get('/') \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_url_by_name(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_uses_correct_template(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 self.assertTemplateUsed(resp, 'home.html') Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests'","title":"5.6. Tests"},{"location":"5_message_board_app/#57-github","text":"Subir el proyecto...","title":"5.7. GitHub"},{"location":"5_message_board_app/#58-heroku-configuration","text":"Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py","title":"5.8. Heroku configuration"},{"location":"5_message_board_app/#581-actualizar-pipfilelock","text":"Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock","title":"5.8.1. Actualizar Pipfile.lock"},{"location":"5_message_board_app/#582-crear-procfile","text":"Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile","title":"5.8.2. Crear Procfile"},{"location":"5_message_board_app/#583-instalar-gunicorn","text":"Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn","title":"5.8.3. Instalar gunicorn"},{"location":"5_message_board_app/#584-actualizar-settingspy","text":"Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master","title":"5.8.4. Actualizar settings.py"},{"location":"5_message_board_app/#59-despliegue-en-heroku","text":"Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n.","title":"5.9. Despliegue en Heroku"},{"location":"5_message_board_app/#510-conclusion","text":"Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5.10. Conclusi\u00f3n"},{"location":"6_blog_app/","text":"6. Blog app Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos. 6.1. Configuraci\u00f3n inicial Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'blog', # new ] 6.2. Modelos de Bases de Datos Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User es para el modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada. 6.3. Admin 6.3.1. Para acceder a los datos: Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde esta nuevo modelo Post? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios 6.4 URLs (blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ] 6.5. Views FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' 6.6. Templates (blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno? 6.7. Ficheros est\u00e1ticos Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: satic/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load staticfiles %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\" rel=\"\\stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; } 6.8. Individual blog pages Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3 Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . El pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando vayamos a la p\u00e1gina de entrada individual para nuestro primer post, podemos esperar que su patr\u00f3n de direcci\u00f3n sea post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un lugar de confusi\u00f3n muy com\u00fan para los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk . 6.9. Tests FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test 6.10. Git Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit' 6.11. Conclusi\u00f3n Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6. Blog app"},{"location":"6_blog_app/#6-blog-app","text":"Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos.","title":"6. Blog app"},{"location":"6_blog_app/#61-configuracion-inicial","text":"Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'blog', # new ]","title":"6.1. Configuraci\u00f3n inicial"},{"location":"6_blog_app/#62-modelos-de-bases-de-datos","text":"Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User es para el modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada.","title":"6.2. Modelos de Bases de Datos"},{"location":"6_blog_app/#63-admin","text":"","title":"6.3. Admin"},{"location":"6_blog_app/#631-para-acceder-a-los-datos","text":"Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde esta nuevo modelo Post? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios","title":"6.3.1. Para acceder a los datos:"},{"location":"6_blog_app/#64-urls","text":"(blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ]","title":"6.4 URLs"},{"location":"6_blog_app/#65-views","text":"FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html'","title":"6.5. Views"},{"location":"6_blog_app/#66-templates","text":"(blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno?","title":"6.6. Templates"},{"location":"6_blog_app/#67-ficheros-estaticos","text":"Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: satic/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load staticfiles %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\" rel=\"\\stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; }","title":"6.7. Ficheros est\u00e1ticos"},{"location":"6_blog_app/#68-individual-blog-pages","text":"Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3 Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . El pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando vayamos a la p\u00e1gina de entrada individual para nuestro primer post, podemos esperar que su patr\u00f3n de direcci\u00f3n sea post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un lugar de confusi\u00f3n muy com\u00fan para los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk .","title":"6.8. Individual blog pages"},{"location":"6_blog_app/#69-tests","text":"FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test","title":"6.9. Tests"},{"location":"6_blog_app/#610-git","text":"Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit'","title":"6.10. Git"},{"location":"6_blog_app/#611-conclusion","text":"Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6.11. Conclusi\u00f3n"},{"location":"7_formularios/","text":"7. Formularios Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas. 7.1 Formularios Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad (Ataques XSS) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito. Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan que trabajan con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load staticfiles %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting. Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establece una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico es la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models \u00e7 from django.urls import reverse class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio. 7.2 Actualizar Formularios Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . (blog) $ touch templates/post_edit.html FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego subclasificarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. Tengase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... -Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . - Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas. 7.3 Borrar la vista El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. (blog) $ touch templates/post_delete.html FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota: se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que tambi\u00e9n lo proporciona DetailView . - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ] 7.4 Tests Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_get_absolute_url(self): self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_post_create_view(self): response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades. 7.5 Conclusi\u00f3n En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7. Formularios"},{"location":"7_formularios/#7-formularios","text":"Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas.","title":"7. Formularios"},{"location":"7_formularios/#71-formularios","text":"Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad (Ataques XSS) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito. Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan que trabajan con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load staticfiles %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting. Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establece una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico es la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models \u00e7 from django.urls import reverse class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio.","title":"7.1 Formularios"},{"location":"7_formularios/#72-actualizar-formularios","text":"Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . (blog) $ touch templates/post_edit.html FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego subclasificarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. Tengase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... -Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . - Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas.","title":"7.2 Actualizar Formularios"},{"location":"7_formularios/#73-borrar-la-vista","text":"El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. (blog) $ touch templates/post_delete.html FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota: se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que tambi\u00e9n lo proporciona DetailView . - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ]","title":"7.3 Borrar la vista"},{"location":"7_formularios/#74-tests","text":"Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_get_absolute_url(self): self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_post_create_view(self): response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades.","title":"7.4 Tests"},{"location":"7_formularios/#75-conclusion","text":"En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7.5 Conclusi\u00f3n"},{"location":"8_cuentas_de_usuarios/","text":"8. Cuentas de Usuarios La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado. Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos 8.1. Login Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML y se especifica el m\u00e9todo POST ya que se est\u00e1n enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar un ataque XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n de \"enviar\". En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente. 8.2. Actualizado de la homepage Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n prominente. M\u00e1s adelante se le pordr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in.</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso. 8.3. Enlace para Logout Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'desconexi\u00f3n' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la view necesaria proporciona aplicaci\u00f3n de autentificaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' 8.4. Inscripci\u00f3n Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: acounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views import generic class SignUpView(generic.CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso de UserCreationForm incorporado y la plantilla a\u00fan no creada en signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi <nombre de usuario> . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Pero prometo que con el tiempo empezar\u00e1n a tener m\u00e1s sentido. 8.5. Git (blog) $ git commit -m 'A\u00f1ade formulario y cuentas de usuario' Crear un nuevo repo en GitHub al que puedes llamar como quieras. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master 8.6. Configuraci\u00f3n de Heroku Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master 8.7. Despliegue en Heroku (blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En su editor de texto abra settings.py . A\u00f1ade whitenoise al INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n al MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1ade nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse como lo siguiente. FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1 8.8. Conclusi\u00f3n Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se ha ocupado de los muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8. Cuentas de Usuarios"},{"location":"8_cuentas_de_usuarios/#8-cuentas-de-usuarios","text":"La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado. Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos","title":"8. Cuentas de Usuarios"},{"location":"8_cuentas_de_usuarios/#81-login","text":"Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML y se especifica el m\u00e9todo POST ya que se est\u00e1n enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar un ataque XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n de \"enviar\". En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente.","title":"8.1. Login"},{"location":"8_cuentas_de_usuarios/#82-actualizado-de-la-homepage","text":"Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n prominente. M\u00e1s adelante se le pordr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in.</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso.","title":"8.2. Actualizado de la homepage"},{"location":"8_cuentas_de_usuarios/#83-enlace-para-logout","text":"Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'desconexi\u00f3n' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la view necesaria proporciona aplicaci\u00f3n de autentificaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home'","title":"8.3. Enlace para Logout"},{"location":"8_cuentas_de_usuarios/#84-inscripcion","text":"Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: acounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views import generic class SignUpView(generic.CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso de UserCreationForm incorporado y la plantilla a\u00fan no creada en signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi <nombre de usuario> . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Pero prometo que con el tiempo empezar\u00e1n a tener m\u00e1s sentido.","title":"8.4. Inscripci\u00f3n"},{"location":"8_cuentas_de_usuarios/#85-git","text":"(blog) $ git commit -m 'A\u00f1ade formulario y cuentas de usuario' Crear un nuevo repo en GitHub al que puedes llamar como quieras. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master","title":"8.5. Git"},{"location":"8_cuentas_de_usuarios/#86-configuracion-de-heroku","text":"Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master","title":"8.6. Configuraci\u00f3n de Heroku"},{"location":"8_cuentas_de_usuarios/#87-despliegue-en-heroku","text":"(blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En su editor de texto abra settings.py . A\u00f1ade whitenoise al INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n al MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1ade nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse como lo siguiente. FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1","title":"8.7. Despliegue en Heroku"},{"location":"8_cuentas_de_usuarios/#88-conclusion","text":"Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se ha ocupado de los muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8.8. Conclusi\u00f3n"},{"location":"9_modelo_de_usuario_personalizado/","text":"9. Modelo de usuario personalizado La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adiendo un campo de edad- utilizar un modelo de usuario personalizado desde el principio lo hace bastante f\u00e1cil. Pero si no se crea un modelo de usuario personalizado, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil. Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos de Django recomiendan. Utiliza el complejo AbstractBaseUser cuando si s\u00f3lo se utilizamos AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables. Hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ). 9.1. Setup $ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado antes de hacerlo, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django. 9.2 Modelo de usuario personalizado La creaci\u00f3n de nuestro modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age crear nuevos formularios para UserCreation y UserChangeForm actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0) 9.3. Formularios Hay dos formas de interactuar con el nuevo modelo de Usuario Personalizado Cuando un usuario se registra para una nueva cuenta en nuestro sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationFrom y UserChangeform . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se est\u00e1 el modelo al CustomUser y usando los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo de edad adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de Usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos de email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate 9.4. Superusuario Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escriba el siguiente comando y pase a trav\u00e9s de las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar. 9.5. Conclusi\u00f3n Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Peri\u00f3dico .","title":"9. Modelo de Usuario Personalizado"},{"location":"9_modelo_de_usuario_personalizado/#9-modelo-de-usuario-personalizado","text":"La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adiendo un campo de edad- utilizar un modelo de usuario personalizado desde el principio lo hace bastante f\u00e1cil. Pero si no se crea un modelo de usuario personalizado, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil. Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos de Django recomiendan. Utiliza el complejo AbstractBaseUser cuando si s\u00f3lo se utilizamos AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables. Hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ).","title":"9. Modelo de usuario personalizado"},{"location":"9_modelo_de_usuario_personalizado/#91-setup","text":"$ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado antes de hacerlo, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django.","title":"9.1. Setup"},{"location":"9_modelo_de_usuario_personalizado/#92-modelo-de-usuario-personalizado","text":"La creaci\u00f3n de nuestro modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age crear nuevos formularios para UserCreation y UserChangeForm actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0)","title":"9.2 Modelo de usuario personalizado"},{"location":"9_modelo_de_usuario_personalizado/#93-formularios","text":"Hay dos formas de interactuar con el nuevo modelo de Usuario Personalizado Cuando un usuario se registra para una nueva cuenta en nuestro sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationFrom y UserChangeform . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se est\u00e1 el modelo al CustomUser y usando los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo de edad adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de Usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos de email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate","title":"9.3. Formularios"},{"location":"9_modelo_de_usuario_personalizado/#94-superusuario","text":"Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escriba el siguiente comando y pase a trav\u00e9s de las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar.","title":"9.4. Superusuario"},{"location":"9_modelo_de_usuario_personalizado/#95-conclusion","text":"Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Peri\u00f3dico .","title":"9.5. Conclusi\u00f3n"}]}