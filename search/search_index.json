{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Django Introducci\u00f3n Configuraci\u00f3n Inicial Hello World app","title":"Django"},{"location":"#django","text":"","title":"Django"},{"location":"#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"#configuracion-inicial","text":"","title":"Configuraci\u00f3n Inicial"},{"location":"#hello-world-app","text":"","title":"Hello World app"},{"location":"1_introduccion/","text":"1 Introducci\u00f3n Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv 1.1 Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\" La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas. 1.2 Por qu\u00e9 unos apuntes Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS 1.3 Estructura 1.Configuraci\u00f3n inicial Django 2.2 (3.0.2?) Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1. Introducci\u00f3n"},{"location":"1_introduccion/#1-introduccion","text":"Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv","title":"1 Introducci\u00f3n"},{"location":"1_introduccion/#11-por-que-django-comes-with-the-box-o-batteries-included","text":"La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas.","title":"1.1 Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\""},{"location":"1_introduccion/#12-por-que-unos-apuntes","text":"Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS","title":"1.2 Por qu\u00e9 unos apuntes"},{"location":"1_introduccion/#13-estructura","text":"1.Configuraci\u00f3n inicial Django 2.2 (3.0.2?) Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1.3 Estructura"},{"location":"2_configuracion_inicial/","text":"2 Configuraci\u00f3n inicial Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 2.2 (3.0.2) Python 3.8 Git Editor de texto 2.1 La l\u00ednea de comandos Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line 2.2 Instalar Python 3 Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes 2.3 Entornos Virtuales Ver: https://mentecatodev.github.io/intermezzo/entornos_virtuales/ 2.4 Instalaci\u00f3n de Django $ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual 2.5 Instalar Git $ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\" 2.6 Editores de texto Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm 2.7 Conclusi\u00f3n","title":"2. Configuraci\u00f3n Inicial"},{"location":"2_configuracion_inicial/#2-configuracion-inicial","text":"Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 2.2 (3.0.2) Python 3.8 Git Editor de texto","title":"2 Configuraci\u00f3n inicial"},{"location":"2_configuracion_inicial/#21-la-linea-de-comandos","text":"Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line","title":"2.1 La l\u00ednea de comandos"},{"location":"2_configuracion_inicial/#22-instalar-python-3","text":"Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes","title":"2.2 Instalar Python 3"},{"location":"2_configuracion_inicial/#23-entornos-virtuales","text":"Ver: https://mentecatodev.github.io/intermezzo/entornos_virtuales/","title":"2.3 Entornos Virtuales"},{"location":"2_configuracion_inicial/#24-instalacion-de-django","text":"$ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual","title":"2.4 Instalaci\u00f3n de Django"},{"location":"2_configuracion_inicial/#25-instalar-git","text":"$ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\"","title":"2.5 Instalar Git"},{"location":"2_configuracion_inicial/#26-editores-de-texto","text":"Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm","title":"2.6 Editores de texto"},{"location":"2_configuracion_inicial/#27-conclusion","text":"","title":"2.7 Conclusi\u00f3n"},{"location":"3_hello_world_app/","text":"3 Hello World app Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\" 3.1 Configuraci\u00f3n inicial $ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000 3.2 Crear una app Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. 3.3 Vistas (Views) y configurariones de URL's (URLConfs) En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template Se empieza actualizando el fichero views.py FICHERO: views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n URLpattern tiene tres partes Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en la URLpattern como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. 3.4 Resumen 1.- CREAR APP (helloworld) $ python manage.py startapp pages 2.- INFORMAR DE LA NUEVA APP FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... 3.- CREAR LA VISTA FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") 4.- CREAR EL FICHERO DE RUTAS DE LA APP FICHERO: pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ] 5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"3. Hello World app"},{"location":"3_hello_world_app/#3-hello-world-app","text":"Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\"","title":"3 Hello World app"},{"location":"3_hello_world_app/#31-configuracion-inicial","text":"$ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000","title":"3.1 Configuraci\u00f3n inicial"},{"location":"3_hello_world_app/#32-crear-una-app","text":"Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia.","title":"3.2 Crear una app"},{"location":"3_hello_world_app/#33-vistas-views-y-configurariones-de-urls-urlconfs","text":"En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template Se empieza actualizando el fichero views.py FICHERO: views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n URLpattern tiene tres partes Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en la URLpattern como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto.","title":"3.3 Vistas (Views) y configurariones de URL's (URLConfs)"},{"location":"3_hello_world_app/#34-resumen","text":"","title":"3.4 Resumen"},{"location":"3_hello_world_app/#1-crear-app","text":"(helloworld) $ python manage.py startapp pages","title":"1.- CREAR APP"},{"location":"3_hello_world_app/#2-informar-de-la-nueva-app","text":"FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ...","title":"2.- INFORMAR DE LA NUEVA APP"},{"location":"3_hello_world_app/#3-crear-la-vista","text":"FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\")","title":"3.- CREAR LA VISTA"},{"location":"3_hello_world_app/#4-crear-el-fichero-de-rutas-de-la-app","text":"FICHERO: pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ]","title":"4.- CREAR EL FICHERO DE RUTAS DE LA APP"},{"location":"3_hello_world_app/#5-incluir-el-fichero-de-rutas-de-la-app-en-el-principal","text":"FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL"}]}