{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Django \u00bfPor qu\u00e9 Django? Introducci\u00f3n Configuraci\u00f3n Inicial Hello World app Pages app Message Board app Blog app Formularios Cuentas de Usuarios Modelo de Usuario Personalizado Autenticaci\u00f3n de Usuarios Bootstrap Cambio y Restauraci\u00f3n de contrase\u00f1as Email Newspaper app Permisos y Autorizaci\u00f3n Comentarios","title":"Django"},{"location":"#django","text":"","title":"Django"},{"location":"#por-que-django","text":"","title":"\u00bfPor qu\u00e9 Django?"},{"location":"#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"#configuracion-inicial","text":"","title":"Configuraci\u00f3n Inicial"},{"location":"#hello-world-app","text":"","title":"Hello World app"},{"location":"#pages-app","text":"","title":"Pages app"},{"location":"#message-board-app","text":"","title":"Message Board app"},{"location":"#blog-app","text":"","title":"Blog app"},{"location":"#formularios","text":"","title":"Formularios"},{"location":"#cuentas-de-usuarios","text":"","title":"Cuentas de Usuarios"},{"location":"#modelo-de-usuario-personalizado","text":"","title":"Modelo de Usuario Personalizado"},{"location":"#autenticacion-de-usuarios","text":"","title":"Autenticaci\u00f3n de Usuarios"},{"location":"#bootstrap","text":"","title":"Bootstrap"},{"location":"#cambio-y-restauracion-de-contrasenas","text":"","title":"Cambio y Restauraci\u00f3n de contrase\u00f1as"},{"location":"#email","text":"","title":"Email"},{"location":"#newspaper-app","text":"","title":"Newspaper app"},{"location":"#permisos-y-autorizacion","text":"","title":"Permisos y Autorizaci\u00f3n"},{"location":"#comentarios","text":"","title":"Comentarios"},{"location":"10_autenticacion_de_usuarios/","text":"10. Autenticaci\u00f3n de usuarios 10.1. Plantillas Por defecto, el cargador de plantillas de Django busca plantillas en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html en usuarios tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero un enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que eso es lo que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Si se piensa en lo que sucede cuando se inicia o cierra sesi\u00f3n en un sitio, se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar a los usuarios en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block contente %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} 10.2. URLs En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias. Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include from django.views.generic.base import TemplateView urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar a los users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser . 10.3. Admin Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En principio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera. 10.4. Conclusi\u00f3n Hasta ahora nuestra aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro , login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar para el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10. Autenticaci\u00f3n de Usuarios"},{"location":"10_autenticacion_de_usuarios/#10-autenticacion-de-usuarios","text":"","title":"10. Autenticaci\u00f3n de usuarios"},{"location":"10_autenticacion_de_usuarios/#101-plantillas","text":"Por defecto, el cargador de plantillas de Django busca plantillas en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html en usuarios tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero un enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que eso es lo que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Si se piensa en lo que sucede cuando se inicia o cierra sesi\u00f3n en un sitio, se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar a los usuarios en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block contente %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %}","title":"10.1. Plantillas"},{"location":"10_autenticacion_de_usuarios/#102-urls","text":"En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias. Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include from django.views.generic.base import TemplateView urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar a los users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser .","title":"10.2. URLs"},{"location":"10_autenticacion_de_usuarios/#103-admin","text":"Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En principio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera.","title":"10.3. Admin"},{"location":"10_autenticacion_de_usuarios/#104-conclusion","text":"Hasta ahora nuestra aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro , login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar para el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10.4. Conclusi\u00f3n"},{"location":"11_bootstrap/","text":"11. Bootstrap El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n. 11.1. Pages app Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente no se escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar podemos y debemos crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas. Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'pages', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con nuestra la nueva url y vista. 11.2. Pruebas Hay dos momentos ideales para a\u00f1adir pruebas Antes de escribir cualquier c\u00f3digo (test-driven-development) Inmediatamente despu\u00e9s de que hayas a\u00f1adido una nueva funcionalidad y lo tengas claro en tu mente. Actualmente nuestro proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. El login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirnos al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 la p\u00e1gina utiliza el nombre de la url correcta en la vista se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test 11.3. Bootstrap Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: Se pueden descargar todos los archivos y servirlos localmente Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: la p\u00e1gina de inicio inicio de sesi\u00f3n cierre de sesi\u00f3n registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico que se ve mal es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ... 11.4. Formulario de inscripci\u00f3n \u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra aqu\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hat tres opciones: anular el help_text existente ocultar el help_text reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users', 'pages', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap ' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si nuestro bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ... 11.5. Pr\u00f3ximos pasos El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11. Bootstrap"},{"location":"11_bootstrap/#11-bootstrap","text":"El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n.","title":"11. Bootstrap"},{"location":"11_bootstrap/#111-pages-app","text":"Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente no se escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar podemos y debemos crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas. Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'pages', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con nuestra la nueva url y vista.","title":"11.1. Pages app"},{"location":"11_bootstrap/#112-pruebas","text":"Hay dos momentos ideales para a\u00f1adir pruebas Antes de escribir cualquier c\u00f3digo (test-driven-development) Inmediatamente despu\u00e9s de que hayas a\u00f1adido una nueva funcionalidad y lo tengas claro en tu mente. Actualmente nuestro proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. El login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirnos al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 la p\u00e1gina utiliza el nombre de la url correcta en la vista se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test","title":"11.2. Pruebas"},{"location":"11_bootstrap/#113-bootstrap","text":"Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: Se pueden descargar todos los archivos y servirlos localmente Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: la p\u00e1gina de inicio inicio de sesi\u00f3n cierre de sesi\u00f3n registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico que se ve mal es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ...","title":"11.3. Bootstrap"},{"location":"11_bootstrap/#114-formulario-de-inscripcion","text":"\u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra aqu\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hat tres opciones: anular el help_text existente ocultar el help_text reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users', 'pages', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap ' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si nuestro bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ...","title":"11.4. Formulario de inscripci\u00f3n"},{"location":"11_bootstrap/#115-proximos-pasos","text":"El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11.5. Pr\u00f3ximos pasos"},{"location":"12_cambio_y_restauracion_de_contrasenas/","text":"12. Cambio y restauraci\u00f3n de contrase\u00f1as As\u00ed como Django viene con vistas y urls incorporadas para el inicio y el cierre de sesi\u00f3n, tambi\u00e9n viene con vistas/urls para el cambio y el restablecimiento de la contrase\u00f1a. 12.1. Cambio de contrase\u00f1a Django proporciona una implementaci\u00f3n predeterminada que ya funciona para este cometido. Para probarlo, hacer clic en el bot\u00f3n \"Login\" para asegurar que se ha iniciado sesi\u00f3n. Luego navegar a la p\u00e1gina \"Password change\" en http://127.0.0.1:8000/users/password_change/ Introducir la antigua contrase\u00f1a y luego una nueva. Luego hacer clic en el bot\u00f3n \"Change My Password\". Ser\u00e1 redirigido a la p\u00e1gina \"Password change successful\" ubicada en: http://127.0.0.1:8000/users/password_change/done/. 12.2. Personalizar el cambio de contrase\u00f1a Se van a personalizar estas dos p\u00e1ginas de cambio de contrase\u00f1a para que coincidan con el aspecto y la sensaci\u00f3n del sitio del peri\u00f3dico. Dado que Django ya ha creado las vistas y las URL, s\u00f3lo hay que a\u00f1adir nuevas plantillas. Crear dos nuevos archivos de plantillas en la carpeta de registro. (noticias) $ plantillas t\u00e1ctiles/registro/cambio de contrase\u00f1a_formulario.html (noticias) $ plantillas de toque/registro/cambio de contrase\u00f1a_hecho.html Actualiza password_change_form.html con el siguiente c\u00f3digo. FICHERO: plantillas/registro/password_change.html {% extends 'base.html' %} {% block tile %}Password Change{% endblock %} {% block content %} <h1>Password change</h1> <p>Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que se usan t\u00edtulos \"bloques\" en el archivo base.html se pueden anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Usando form.as_p estamos simplemente mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de contrase\u00f1a por defecto. Y finalmente incluimos un bot\u00f3n de env\u00edo que usa el estilo btn btn-success de Bootstrap para que sea verde. Lo siguiente es la plantilla password_change_done . FICHERO: templates/registration/password_change_done.html {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} <h1>Password change successful</h1> <p>Your password was changed.</p> {% endblock content %} Tambi\u00e9n se extiende base.html y se incluye un nuevo t\u00edtulo. Sin embargo, no hay ning\u00fan formulario en la p\u00e1gina, s\u00f3lo texto nuevo. La nueva p\u00e1gina est\u00e1 en http://127.0.0.1:8000/users/password_change/done/. Restablecer la contrase\u00f1a La \u00fanica configuraci\u00f3n que se requiere es decirle a Django c\u00f3mo enviar los correos electr\u00f3nicos. Despu\u00e9s de todo, un usuario s\u00f3lo puede restablecer una contrase\u00f1a si se tiene acceso al correo electr\u00f3nico vinculado a la cuenta. En la producci\u00f3n se usar\u00e1 el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos, pero para fines de prueba se puede confiar en la configuraci\u00f3n del backend de la consola de Django que env\u00eda el texto del correo electr\u00f3nico a la consola de l\u00ednea de comandos en su lugar. En la parte inferior del archivo settings.py hacer el siguiente cambio de una l\u00ednea. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Listo. Django se encargar\u00e1 del resto. Probarlo desde http://127.0.0.1:8000/users/password_reset/. Asegurar que la direcci\u00f3n de correo electr\u00f3nico coincida con una de las cuentas de usuario. Una vez enviado, ser\u00e1 redirigido a la p\u00e1gina de restablecimiento de contrase\u00f1a en: http://127.0.0.1:8000/users/password_reset/done/. Que dice que revise nuestro correo electr\u00f3nico. Ya que le hemos dicho a Django que env\u00ede correos electr\u00f3nicos a la consola de la l\u00ednea de comando, el texto del correo electr\u00f3nico estar\u00e1 ahora all\u00ed. Esto es lo que se muestra por la consola. Content-Type: text/plain; charset=\"utf-8\" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Password reset on 127.0.0.1:8000 From: webmaster@localhost To: will@wsvincent.com Date: Thu,22 Mar 2018 20:31:48 -0000 Message-ID: <152175070807.39206.18266082938043731152@1.0.0.127.in-addr.arpa> You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000. Please go to the following page and choose a new password: http://127.0.0.1:8000/user/reset/MQ/4up-678712c114db2ead7780/ Your username, in case you've forgotten: wsv Thanks for using our site! The 127.0.0.1:8000 team El texto del correo electr\u00f3nico debe ser id\u00e9ntico excepto por tres l\u00edneas: el \"Para\" en la sexta l\u00ednea contiene la direcci\u00f3n de correo electr\u00f3nico del usuario el enlace URL contiene una se\u00f1al segura que Django genera aleatoriamente y puede ser usada s\u00f3lo una vez Django nos recuerda amablemente nuestro nombre de usuario El enlace proporcionado: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/, nos redirigir\u00e1 a la \"change password page\". Introducir una nueva contrase\u00f1a y hacer clic en el bot\u00f3n \"Change my password\". El paso final es que ser redirigido a la p\u00e1gina de \"Password reset complete\". Restablecimiento completo de la contrase\u00f1a predeterminada Comprobar que todo ha funcionado, hacer clic en el enlace \"Log in\" y usar la nueva contrase\u00f1a. 12.. Plantillas personalizadas S\u00f3lo hay que crear nuevas plantillas para personalizar el el aspecto y la sensaci\u00f3n del restablecimiento de la contrase\u00f1a. Crear cuatro nuevos archivos de plantilla. (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reset_form.html (noticias) $ plantillas de toque/registro/contrase\u00f1a_reset_done.html (noticias) $ plantillas de toque/registro/confirmaci\u00f3n_contrase\u00f1a.html (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reinicio_completo.html Se empieza con el formulario de restablecimiento de contrase\u00f1a que es password_reset_form.html . FICHERO: plantillas/registro/contrase\u00f1a_reset_form.html {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} <h1>Forgot your password?</h1> <p>Enter your email address below, and we'll email instructions for setting a new one.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Send me instructions!\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que usamos t\u00edtulos \"block\" en el base.html se puede anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Al usar form.as_p simplemente se est\u00e1 mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de la contrase\u00f1a predeterminada. Finalmente se incluye un enviar el bot\u00f3n y se usa el estilo de Bootstrap btn btn-success para hacerlo verde. Ahora se puede actualizar las otras tres p\u00e1ginas. Cada una tiene la misma forma de extender base.html , un nuevo t\u00edtulo, un nuevo texto de contenido, y para \"password reset confirm\" una actualizaci\u00f3n tambi\u00e9n. FICHERO: templates/registration/password_reset_done.html {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} <h1>Check your inbox.</h1> <p>We've emailed you instructions for setting your password. You should receive the email shortly!</p> {% endblock %} Confirmar los cambios en http://127.0.0.1:8000/users/password_reset/done/ A continuaci\u00f3n, la p\u00e1gina de confirmaci\u00f3n del restablecimiento de la contrase\u00f1a. FICHERO: templates/registration/password_reset_confirm.html {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} <h1>Set a new password!</h1> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} Abrir la linea de comandos y tomar el enlace URL del correo electr\u00f3nico enviado a la consola. Finalmente aqu\u00ed est\u00e1 el c\u00f3digo completo para reestablecer la password. FICHERO: templates/registration/password_reset_complete.html {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} <h1>Password reset complete</h1> <p>Your new password has been set. You can log in now on the <a href=\"{% url 'login' %}\">log in page</a>.</p> {% endblock %} Conclusi\u00f3n En el pr\u00f3ximo cap\u00edtulo conectaremos nuestra aplicaci\u00f3n para peri\u00f3dicos con el servicio de correo electr\u00f3nico SendGrid para enviar realmente nuestros correos electr\u00f3nicos automatizados a los usuarios, en lugar de emitirlos en nuestra consola de l\u00ednea de comandos.","title":"12. Cambio y Restauraci\u00f3n de Contrase\u00f1as"},{"location":"12_cambio_y_restauracion_de_contrasenas/#12-cambio-y-restauracion-de-contrasenas","text":"As\u00ed como Django viene con vistas y urls incorporadas para el inicio y el cierre de sesi\u00f3n, tambi\u00e9n viene con vistas/urls para el cambio y el restablecimiento de la contrase\u00f1a.","title":"12. Cambio y restauraci\u00f3n de contrase\u00f1as"},{"location":"12_cambio_y_restauracion_de_contrasenas/#121-cambio-de-contrasena","text":"Django proporciona una implementaci\u00f3n predeterminada que ya funciona para este cometido. Para probarlo, hacer clic en el bot\u00f3n \"Login\" para asegurar que se ha iniciado sesi\u00f3n. Luego navegar a la p\u00e1gina \"Password change\" en http://127.0.0.1:8000/users/password_change/ Introducir la antigua contrase\u00f1a y luego una nueva. Luego hacer clic en el bot\u00f3n \"Change My Password\". Ser\u00e1 redirigido a la p\u00e1gina \"Password change successful\" ubicada en: http://127.0.0.1:8000/users/password_change/done/.","title":"12.1. Cambio de contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#122-personalizar-el-cambio-de-contrasena","text":"Se van a personalizar estas dos p\u00e1ginas de cambio de contrase\u00f1a para que coincidan con el aspecto y la sensaci\u00f3n del sitio del peri\u00f3dico. Dado que Django ya ha creado las vistas y las URL, s\u00f3lo hay que a\u00f1adir nuevas plantillas. Crear dos nuevos archivos de plantillas en la carpeta de registro. (noticias) $ plantillas t\u00e1ctiles/registro/cambio de contrase\u00f1a_formulario.html (noticias) $ plantillas de toque/registro/cambio de contrase\u00f1a_hecho.html Actualiza password_change_form.html con el siguiente c\u00f3digo. FICHERO: plantillas/registro/password_change.html {% extends 'base.html' %} {% block tile %}Password Change{% endblock %} {% block content %} <h1>Password change</h1> <p>Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que se usan t\u00edtulos \"bloques\" en el archivo base.html se pueden anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Usando form.as_p estamos simplemente mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de contrase\u00f1a por defecto. Y finalmente incluimos un bot\u00f3n de env\u00edo que usa el estilo btn btn-success de Bootstrap para que sea verde. Lo siguiente es la plantilla password_change_done . FICHERO: templates/registration/password_change_done.html {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} <h1>Password change successful</h1> <p>Your password was changed.</p> {% endblock content %} Tambi\u00e9n se extiende base.html y se incluye un nuevo t\u00edtulo. Sin embargo, no hay ning\u00fan formulario en la p\u00e1gina, s\u00f3lo texto nuevo. La nueva p\u00e1gina est\u00e1 en http://127.0.0.1:8000/users/password_change/done/.","title":"12.2. Personalizar el cambio de contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#restablecer-la-contrasena","text":"La \u00fanica configuraci\u00f3n que se requiere es decirle a Django c\u00f3mo enviar los correos electr\u00f3nicos. Despu\u00e9s de todo, un usuario s\u00f3lo puede restablecer una contrase\u00f1a si se tiene acceso al correo electr\u00f3nico vinculado a la cuenta. En la producci\u00f3n se usar\u00e1 el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos, pero para fines de prueba se puede confiar en la configuraci\u00f3n del backend de la consola de Django que env\u00eda el texto del correo electr\u00f3nico a la consola de l\u00ednea de comandos en su lugar. En la parte inferior del archivo settings.py hacer el siguiente cambio de una l\u00ednea. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Listo. Django se encargar\u00e1 del resto. Probarlo desde http://127.0.0.1:8000/users/password_reset/. Asegurar que la direcci\u00f3n de correo electr\u00f3nico coincida con una de las cuentas de usuario. Una vez enviado, ser\u00e1 redirigido a la p\u00e1gina de restablecimiento de contrase\u00f1a en: http://127.0.0.1:8000/users/password_reset/done/. Que dice que revise nuestro correo electr\u00f3nico. Ya que le hemos dicho a Django que env\u00ede correos electr\u00f3nicos a la consola de la l\u00ednea de comando, el texto del correo electr\u00f3nico estar\u00e1 ahora all\u00ed. Esto es lo que se muestra por la consola. Content-Type: text/plain; charset=\"utf-8\" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Password reset on 127.0.0.1:8000 From: webmaster@localhost To: will@wsvincent.com Date: Thu,22 Mar 2018 20:31:48 -0000 Message-ID: <152175070807.39206.18266082938043731152@1.0.0.127.in-addr.arpa> You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000. Please go to the following page and choose a new password: http://127.0.0.1:8000/user/reset/MQ/4up-678712c114db2ead7780/ Your username, in case you've forgotten: wsv Thanks for using our site! The 127.0.0.1:8000 team El texto del correo electr\u00f3nico debe ser id\u00e9ntico excepto por tres l\u00edneas: el \"Para\" en la sexta l\u00ednea contiene la direcci\u00f3n de correo electr\u00f3nico del usuario el enlace URL contiene una se\u00f1al segura que Django genera aleatoriamente y puede ser usada s\u00f3lo una vez Django nos recuerda amablemente nuestro nombre de usuario El enlace proporcionado: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/, nos redirigir\u00e1 a la \"change password page\". Introducir una nueva contrase\u00f1a y hacer clic en el bot\u00f3n \"Change my password\". El paso final es que ser redirigido a la p\u00e1gina de \"Password reset complete\". Restablecimiento completo de la contrase\u00f1a predeterminada Comprobar que todo ha funcionado, hacer clic en el enlace \"Log in\" y usar la nueva contrase\u00f1a.","title":"Restablecer la contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#12-plantillas-personalizadas","text":"S\u00f3lo hay que crear nuevas plantillas para personalizar el el aspecto y la sensaci\u00f3n del restablecimiento de la contrase\u00f1a. Crear cuatro nuevos archivos de plantilla. (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reset_form.html (noticias) $ plantillas de toque/registro/contrase\u00f1a_reset_done.html (noticias) $ plantillas de toque/registro/confirmaci\u00f3n_contrase\u00f1a.html (noticias) $ plantillas t\u00e1ctiles/registro/contrase\u00f1a_reinicio_completo.html Se empieza con el formulario de restablecimiento de contrase\u00f1a que es password_reset_form.html . FICHERO: plantillas/registro/contrase\u00f1a_reset_form.html {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} <h1>Forgot your password?</h1> <p>Enter your email address below, and we'll email instructions for setting a new one.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Send me instructions!\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que usamos t\u00edtulos \"block\" en el base.html se puede anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Al usar form.as_p simplemente se est\u00e1 mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de la contrase\u00f1a predeterminada. Finalmente se incluye un enviar el bot\u00f3n y se usa el estilo de Bootstrap btn btn-success para hacerlo verde. Ahora se puede actualizar las otras tres p\u00e1ginas. Cada una tiene la misma forma de extender base.html , un nuevo t\u00edtulo, un nuevo texto de contenido, y para \"password reset confirm\" una actualizaci\u00f3n tambi\u00e9n. FICHERO: templates/registration/password_reset_done.html {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} <h1>Check your inbox.</h1> <p>We've emailed you instructions for setting your password. You should receive the email shortly!</p> {% endblock %} Confirmar los cambios en http://127.0.0.1:8000/users/password_reset/done/ A continuaci\u00f3n, la p\u00e1gina de confirmaci\u00f3n del restablecimiento de la contrase\u00f1a. FICHERO: templates/registration/password_reset_confirm.html {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} <h1>Set a new password!</h1> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} Abrir la linea de comandos y tomar el enlace URL del correo electr\u00f3nico enviado a la consola. Finalmente aqu\u00ed est\u00e1 el c\u00f3digo completo para reestablecer la password. FICHERO: templates/registration/password_reset_complete.html {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} <h1>Password reset complete</h1> <p>Your new password has been set. You can log in now on the <a href=\"{% url 'login' %}\">log in page</a>.</p> {% endblock %}","title":"12.. Plantillas personalizadas"},{"location":"12_cambio_y_restauracion_de_contrasenas/#conclusion","text":"En el pr\u00f3ximo cap\u00edtulo conectaremos nuestra aplicaci\u00f3n para peri\u00f3dicos con el servicio de correo electr\u00f3nico SendGrid para enviar realmente nuestros correos electr\u00f3nicos automatizados a los usuarios, en lugar de emitirlos en nuestra consola de l\u00ednea de comandos.","title":"Conclusi\u00f3n"},{"location":"13_email/","text":"12. Correo electr\u00f3nico Ahora se quiere que los correos electr\u00f3nicos se env\u00eden realmente a los usuarios, no s\u00f3lo a la consola de l\u00ednea de comandos. Se precisa de una SendGrid y actualizar los archivos settings.py . Django se encargar\u00e1 del resto. 12.1. SendGrid SendGrid es un servicio popular para el env\u00edo de e-mails transaccionales, as\u00ed que lo usaremos. A Django no le importa el servicio que se elija; se puede usar MailGun o cualquier otro servicio con la misma facilidad. En la p\u00e1gina de inicio de SendGrid , haga clic en el gran bot\u00f3n azul para \"See Plans and Pricing\". En la siguiente p\u00e1gina, desplarse ligeramente hacia abajo y buscar en el lado izquierdo el bot\u00f3n \"Try for Free\". SendGrid proporciona un nivel gratuito que se puede utilizar, aunque lo hace un poco dif\u00edcil de encontrar. Registrarse para obtener su cuenta gratuita en la siguiente p\u00e1gina. Asegurarse de que la cuenta de correo electr\u00f3nico que se utiliza para SendGrid no sea la misma cuenta de correo electr\u00f3nico que tiene para la cuenta de superusuario en el proyecto de Newspaper o pueden suceder errores extra\u00f1os. Luego de confirmar su nueva cuenta a trav\u00e9s de un correo electr\u00f3nico, se pedir\u00e1 que ingrese y se lo llevar\u00e1 a la p\u00e1gina del panel de control de SendGrid . Ahora podemos configurar el c\u00f3digo Django en el archivo settings.py . Primero se actualizar\u00e1 el backend de correo electr\u00f3nico para usar SMTP. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Luego, justo debajo, agregar las siguientes cinco l\u00edneas de configuraci\u00f3n de correo electr\u00f3nico. Tener en cuenta que lo ideal ser\u00eda almacenar informaci\u00f3n segura como la contrase\u00f1a en variables de entorno, pero no estamos aqu\u00ed para mantener las cosas simples. FICHERO: newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = 587 EMAIL_USE_TLS = True Aseg\u00fararse de usar el nombre de usuario SendGrid para EMAIL_HOST_USER y la contrase\u00f1a de EMAIL_HOST_PASSWORD. Eso es todo. Correos electr\u00f3nicos personalizados Utiliza la barra de b\u00fasqueda de Github e introduce algunas palabras del texto del correo electr\u00f3nico. Si se escribe \"You're receiving this email because\" se terminar\u00e1 en una p\u00e1gina muy concreta de Github. El primer resultado es el que queremos. Muestra que el c\u00f3digo se encuentra en django/contrib/admin/templates/registration/password_reset_email.html . Eso significa que en la app contrib el archivo que queremos se llama password_reset_email.html . Aqu\u00ed est\u00e1 el texto por defecto del c\u00f3digo fuente de Django. {% load i18n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Para cambiarlo, se necesita crear un nuevo archivo password_reset_email.html en la carpeta registration . (news) $ touch templates/registration/password_reset_email.html Usar el siguiente c\u00f3digo que ajusta lo que Django proporcion\u00f3 por defecto. FICHERO: templates/registration/password_reset_email.html {% load i18n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make this request, you can safely ignore this email. Otherwise, click the button below to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% endautoescape %} Arriba se carga la etiqueta de la plantilla i18n lo que significa que este texto puede ser traducido a varios idiomas. Django tiene un s\u00f3lido soporte de internacionalizaci\u00f3n aunque cubrirlo est\u00e1 fuera de nuestro alcance, por ahora. Se saluda al usuario por su nombre gracias a user.get_username . Luego se usa el bloque reset_link incorporado para incluir el enlace URL personalizado. Tambi\u00e9n se actualiza el t\u00edtulo del asunto del correo electr\u00f3nico. Para ello, se crea un nuevo archivo templates/registration/password_reset_subject.txt . (news) $ touch templates/registration/password_reset_subject.txt Luego agregar la siguiente l\u00ednea de c\u00f3digo al archivo password_reset_subject.txt . Please reset your password Conclusi\u00f3n Se ha terminado de implementar un flujo de autenticaci\u00f3n de usuario completo. Los usuarios pueden ingresar una nueva cuenta, iniciar sesi\u00f3n, cerrar sesi\u00f3n, cambiar contrase\u00f1a y restablecerla.","title":"13. Email"},{"location":"13_email/#12-correo-electronico","text":"Ahora se quiere que los correos electr\u00f3nicos se env\u00eden realmente a los usuarios, no s\u00f3lo a la consola de l\u00ednea de comandos. Se precisa de una SendGrid y actualizar los archivos settings.py . Django se encargar\u00e1 del resto.","title":"12. Correo electr\u00f3nico"},{"location":"13_email/#121-sendgrid","text":"SendGrid es un servicio popular para el env\u00edo de e-mails transaccionales, as\u00ed que lo usaremos. A Django no le importa el servicio que se elija; se puede usar MailGun o cualquier otro servicio con la misma facilidad. En la p\u00e1gina de inicio de SendGrid , haga clic en el gran bot\u00f3n azul para \"See Plans and Pricing\". En la siguiente p\u00e1gina, desplarse ligeramente hacia abajo y buscar en el lado izquierdo el bot\u00f3n \"Try for Free\". SendGrid proporciona un nivel gratuito que se puede utilizar, aunque lo hace un poco dif\u00edcil de encontrar. Registrarse para obtener su cuenta gratuita en la siguiente p\u00e1gina. Asegurarse de que la cuenta de correo electr\u00f3nico que se utiliza para SendGrid no sea la misma cuenta de correo electr\u00f3nico que tiene para la cuenta de superusuario en el proyecto de Newspaper o pueden suceder errores extra\u00f1os. Luego de confirmar su nueva cuenta a trav\u00e9s de un correo electr\u00f3nico, se pedir\u00e1 que ingrese y se lo llevar\u00e1 a la p\u00e1gina del panel de control de SendGrid . Ahora podemos configurar el c\u00f3digo Django en el archivo settings.py . Primero se actualizar\u00e1 el backend de correo electr\u00f3nico para usar SMTP. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Luego, justo debajo, agregar las siguientes cinco l\u00edneas de configuraci\u00f3n de correo electr\u00f3nico. Tener en cuenta que lo ideal ser\u00eda almacenar informaci\u00f3n segura como la contrase\u00f1a en variables de entorno, pero no estamos aqu\u00ed para mantener las cosas simples. FICHERO: newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = 587 EMAIL_USE_TLS = True Aseg\u00fararse de usar el nombre de usuario SendGrid para EMAIL_HOST_USER y la contrase\u00f1a de EMAIL_HOST_PASSWORD. Eso es todo.","title":"12.1. SendGrid"},{"location":"13_email/#correos-electronicos-personalizados","text":"Utiliza la barra de b\u00fasqueda de Github e introduce algunas palabras del texto del correo electr\u00f3nico. Si se escribe \"You're receiving this email because\" se terminar\u00e1 en una p\u00e1gina muy concreta de Github. El primer resultado es el que queremos. Muestra que el c\u00f3digo se encuentra en django/contrib/admin/templates/registration/password_reset_email.html . Eso significa que en la app contrib el archivo que queremos se llama password_reset_email.html . Aqu\u00ed est\u00e1 el texto por defecto del c\u00f3digo fuente de Django. {% load i18n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Para cambiarlo, se necesita crear un nuevo archivo password_reset_email.html en la carpeta registration . (news) $ touch templates/registration/password_reset_email.html Usar el siguiente c\u00f3digo que ajusta lo que Django proporcion\u00f3 por defecto. FICHERO: templates/registration/password_reset_email.html {% load i18n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make this request, you can safely ignore this email. Otherwise, click the button below to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% endautoescape %} Arriba se carga la etiqueta de la plantilla i18n lo que significa que este texto puede ser traducido a varios idiomas. Django tiene un s\u00f3lido soporte de internacionalizaci\u00f3n aunque cubrirlo est\u00e1 fuera de nuestro alcance, por ahora. Se saluda al usuario por su nombre gracias a user.get_username . Luego se usa el bloque reset_link incorporado para incluir el enlace URL personalizado. Tambi\u00e9n se actualiza el t\u00edtulo del asunto del correo electr\u00f3nico. Para ello, se crea un nuevo archivo templates/registration/password_reset_subject.txt . (news) $ touch templates/registration/password_reset_subject.txt Luego agregar la siguiente l\u00ednea de c\u00f3digo al archivo password_reset_subject.txt . Please reset your password","title":"Correos electr\u00f3nicos personalizados"},{"location":"13_email/#conclusion","text":"Se ha terminado de implementar un flujo de autenticaci\u00f3n de usuario completo. Los usuarios pueden ingresar una nueva cuenta, iniciar sesi\u00f3n, cerrar sesi\u00f3n, cambiar contrase\u00f1a y restablecerla.","title":"Conclusi\u00f3n"},{"location":"14_newspaper_app/","text":"14. Newspaper app Habr\u00e1 una p\u00e1gina de art\u00edculos en la que los periodistas podr\u00e1n publicar art\u00edculos, establecer permisos para que s\u00f3lo el autor de un art\u00edculo pueda editarlo o borrarlo, y finalmente a\u00f1adir la posibilidad de que otros usuarios escriban comentarios en cada art\u00edculo, lo que introducir\u00e1 el concepto de claves externas . 14.1. Articles app No hay reglas r\u00edgidas sobre c\u00f3mo llamar a las aplicaciones, excepto que no se puede usar el nombre de una aplicaci\u00f3n incorporada. Una regla general es usar el plural del nombre de una aplicaci\u00f3n - posts , payments , users , etc.- a menos que hacerlo sea obviamente incorrecto como en el caso com\u00fan de blog donde el singular tiene m\u00e1s sentido. Crear la aplicaci\u00f3n para los nuevos art\u00edculos. (news) $ python manage.py startapp articles A\u00f1adirla a INSTALLED_APPS y actualizar la zona horaria ya que se marcar\u00e1 la hora de los art\u00edculos. Para averiguar la zona horaria correspondiente: >>> from pytz import all_timezones, common_timezones >>> 'Europe/Madrid' in all_timezones True FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd Party 'crispy_forms', # Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'Europe/Madrid' Se define el modelo de base de datos con cuatro campos: title , body , date , y author . Para el campo autor se har\u00e1 referencia al modelo de usuario personalizado users.CustomUser que se ha establecido en el archivo settings.py como AUTH_USER_MODEL . Por lo tanto, si se importa la configuraci\u00f3n podemos referirnos a ella como settings.AUTH_USER_MODEL . Tambi\u00e9n se implementa la 'buena mejores pr\u00e1ctica' de definir un get_absolute_url desde el principio y un m\u00e9todo __str__ para ver el modelo en la interfaz de administraci\u00f3n. FICHERO: articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length=255) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Como se tiene una nueva aplicaci\u00f3n y modelo, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo a la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate En este punto es conveniente ir a la administraci\u00f3n para jugar con el modelo antes de construir las urls/vistas/plantillas necesarias para mostrar los datos en el sitio web. Pero primero necesitamos actualizar admin.py para que se muestre la nueva aplicaci\u00f3n. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Iniciar el servidor, ir a la p\u00e1gina de administraci\u00f3n y a\u00f1adir algunos art\u00edculos de ejemplo. No se podr\u00e1 a\u00f1adir la fecha porque fue a\u00f1adida autom\u00e1ticamente por Django en nuestro nombre y no puede ser cambiada en la administraci\u00f3n. Se podr\u00e1 hacer que la fecha sea editable -en aplicaciones m\u00e1s complejas es com\u00fan tener un campo created_at y updated_at - pero para mantener las cosas simples, por ahora s\u00f3lo se tendr\u00e1 date establecida por Django al momento de la creaci\u00f3n. 14.2. URLs y Vistas Vamos a hacer que los art\u00edculos aparezcan en articles/ . FICHERO: # newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Crear ahora la vista usando la gen\u00e9rica ListView de Django. FICHERO: # articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' Los dos \u00fanicos campos que se necesitan especificar son el modelo de art\u00edculo y el nombre de la plantilla que ser\u00e1 article_list.html . El \u00faltimo paso es crear la plantilla. Bootstrap tiene un componente incorporado llamado Cards que se puede personalizar para los art\u00edculos individuales. Recordar que ListView devuelve un objeto llamado object_list que se puede iterar con un bucle for. Dentro de cada art\u00edculo se muestra el t\u00edtulo, el cuerpo, el autor y la fecha. Incluso se proporcionan enlaces a las funciones de \"editar\" y \"borrar\" que a\u00fan no se han construido. FICHERO: templates/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> {{ article.body }} </div> <div class=\"card-footer text-center text-muted\"> <a href=\"#\">Edit</a> | <a href=\"#\">Delete</a> </div> </div> <br /> {% endfor %} {% endblock content %} Arracar el servidor y consultar la p\u00e1gina articles/ 14.3. Editar/Borrar Se necesitan nuevas urls, vistas y plantillas. Se puede aprovechar el hecho de que Django a\u00f1ade autom\u00e1ticamente una clave primaria a cada base de datos. Por lo tanto, el primer art\u00edculo con una clave primaria de 1 estar\u00e1 en articles/1/edit/ y la ruta de borrado estar\u00e1 en articles/1/delete/ . FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path('<int:pk>/edit/',views.ArticleUpdateView.as_view(), name='article_edit'),# new path('<int:pk>/', views.ArticleDetailView.as_view(), name='article_detail'), # new path('<int:pk>/delete/', views.ArticleDeleteView.as_view(), name='article_delete'), # new ] Ahora se escribir\u00e1n las vistas que usar\u00e1n las vistas gen\u00e9ricas basadas en clases de Django para DetailView , UpdateView y DeleteView . Especificamos qu\u00e9 campos pueden ser actualizados - title y body - y d\u00f3nde redirigir al usuario despu\u00e9s de borrar un art\u00edculo: article_list . FICHERO: articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') Finalmente se necesita a\u00f1adir las nuevas plantillas. Se empezar\u00e1 con la p\u00e1gina de detalles que mostrar\u00e1 el t\u00edtulo, la fecha, el cuerpo y el autor con enlaces para editar y borrar. Tambi\u00e9n enlazar\u00e1 hacia atr\u00e1s con todos los art\u00edculos. El nombre de la ruta de edici\u00f3n es article_edit y tenemos que pasarle su clave principal article.pk . El nombre de la ruta de borrado es article_delete y tambi\u00e9n necesita una clave primaria article.pk . La p\u00e1gina de art\u00edculos es una ListView por lo que no necesita que se le pase ning\u00fan argumento adicional. FICHERO: templates/article_detail.html {% extends 'base.html' %} {% block content %} <div class=\"article-entry\"> <h2>{{ object.title }}</h2> <p>by {{ object.author }} | {{ object.date }}</p> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a></p> <p>Back to <a href=\"{% url 'article_list' %}\">All Articles</a>.</p> {% endblock content %} Para las p\u00e1ginas de edici\u00f3n y borrado se puede usar el estilo del bot\u00f3n de Bootstrap para hacer que el bot\u00f3n de edici\u00f3n sea azul claro y el de borrado rojo. FICHERO: templates/article_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-info ml-2\" type=\"submit\">Update</button> </form> {% endblock %} FICHERO: templates/article_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ article.title }}\"?</p> <button class=\"btn btn-danger ml- \" type=\"submit\">Confirm</button> </form> {% endblock %} Como paso final se a\u00f1aden los enlaces de edici\u00f3n y borrado a la p\u00e1gina de listas en la clase div para el card-foot . Ser\u00e1n los mismos que los a\u00f1adidos a la p\u00e1gina detalle. FICHERO: templates/article_list.html ... <div class=\"card-footer text-center text-muted\"> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> ... Arrancar el servidor e ir a la p\u00e1gina de articles/ y pulsar sobre Edit . Si se actualiza el campo \"t\u00edtulo\" y se hace clic en actualizar, el usuario ser\u00e1 redirigido a la p\u00e1gina de detalles que mostrar\u00e1 el nuevo cambio. Si se hace clic en el enlace Delete el usuario ser\u00e1 redirigido a la p\u00e1gina de borrado. Si se presiona el aterrador bot\u00f3n rojo Confirm el usuario ser\u00e1 redirigido a la p\u00e1gina de art\u00edculos donde ahora habr\u00e1 una entrada menos. 00000000000000000000000000000000000000000000000000000000000000000000000000000 14.Crear la page El paso final es una p\u00e1gina de creaci\u00f3n de nuevos art\u00edculos que podemos hacer con el CreateView de Django. Nuestros tres pasos son crear una vista, una url y una plantilla. Este flujo ya deber\u00eda resultar bastante familiar. En nuestro archivo de vistas agregamos CreateView a las importaciones de la parte superior y hacemos una nueva clase ArticleCreateView que especifica nuestro modelo, plantilla y los campos disponibles. FICHERO: articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... N\u00f3tese que nuestros campos tienen autor ya que queremos asociar un nuevo art\u00edculo con un autor, sin embargo una vez que un art\u00edculo ha sido creado no queremos que un usuario pueda cambiar el autor, por lo que ArticleUpdateView s\u00f3lo tiene los campos ['title', 'body',] . Actualizar nuestro archivo de urls con la nueva ruta para la vista. FICHERO: articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Luego, salga del servidor Control+c para crear una nueva plantilla llamada article_new.html . (news) $ touch templates/article_new.html Y actualizarlo con el siguiente c\u00f3digo HTML. FICHERO: templates/article_new.html {% extends 'base.html' %} {% block content %} <h1>New article</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-success ml- \" type=\"submit\">Save</button> </form> {% endblock %} Como paso final deber\u00edamos a\u00f1adir un enlace para crear nuevos art\u00edculos en nuestro navegador para que sea accesible en todas partes del sitio para los usuarios registrados. FICHERO: templates/base.html ... <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb- \"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> {% if user.is_authenticated %} <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"><a href=\"{% url 'article_new' %}\">+ New</a></li> </ul> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-tar\\ get=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-\\ label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> ... \u00bfY por qu\u00e9 no usar Bootstrap para mejorar nuestra p\u00e1gina web original ahora tambi\u00e9n? Podemos actualizar plantillas/home.html como sigue. FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} <div class=\"jumbotron\"> <h1 class=\"display- \">Newspaper app</h1> <p class=\"lead\">A Newspaper website built with Django.</p> <p class=\"lead\"> <a class=\"btn btn-primary btn-lg\" href=\"{% url 'article_list' %}\" role=\"butt\\ on\">View All Articles</a> </p> </div> {% endblock %} Ya hemos terminado. Vamos a confirmar que todo funciona como se esperaba. Arranca el servidor de nuevo python manage.py runserver y navega a nuestra p\u00e1gina web en: http://127.0.0.1:8000/.273 P\u00e1gina principal con nuevo enlace en la navegaci\u00f3n Haz clic en el enlace \"+ Nuevo\" en la parte superior del navegador y ser\u00e1s redirigido a nuestra p\u00e1gina de creaci\u00f3n. Crear p\u00e1gina Adelante, crea un nuevo art\u00edculo. Luego haz clic en el bot\u00f3n \"Guardar\". Ser\u00e1s redirigido a la p\u00e1gina de detalles. \u00bfPor qu\u00e9? Porque en nuestro archivo models.py establecemos el m\u00e9todo get_-absolute_url en article_detail . Este es un buen enfoque porque si m\u00e1s tarde cambiamos el patr\u00f3n de url de la p\u00e1gina de detalles a, digamos, art\u00edculos/detalles/ / , la redirecci\u00f3n seguir\u00e1 funcionando. Se utilizar\u00e1 cualquier ruta asociada a article_detail; no hay c\u00f3digo duro de la ruta en s\u00ed. P\u00e1gina de detalles Tengan en cuenta tambi\u00e9n que la clave principal aqu\u00ed est\u00e1 en el URL. Aunque s\u00f3lo estamos mostrando tres art\u00edculos ahora mismo, Django no reordena las claves primarias s\u00f3lo porque hayamos borrado una. En la pr\u00e1ctica, la mayor\u00eda de los sitios del mundo real no borran nada; en su lugar, \"ocultan\" los campos borrados, ya que esto facilita el mantenimiento de la integridad de una base de datos y da la opci\u00f3n de \"recuperar\" m\u00e1s adelante si es necesario. Con nuestro enfoque actual, una vez que algo se borra, \u00a1se va para siempre! Haga clic en el enlace de \"Todos los art\u00edculos\" para ver nuestra nueva p\u00e1gina de art\u00edculos. P\u00e1gina de art\u00edculos actualizada Hay un nuevo art\u00edculo en la parte inferior como se esperaba. Conclusi\u00f3n... Hemos creado una aplicaci\u00f3n de art\u00edculos dedicados con la funcionalidad de CRUD. Pero a\u00fan no hay permisos o autorizaciones, lo que significa que cualquiera puede hacer cualquier cosa. Un usuario desconectado puede visitar todas las URLs y cualquier usuario conectado puede editar o eliminar un art\u00edculo existente, \u00a1incluso uno que no sea suyo! En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos permisos y autorizaciones a nuestro proyecto para arreglar esto.","title":"14. Newspaper app"},{"location":"14_newspaper_app/#14-newspaper-app","text":"Habr\u00e1 una p\u00e1gina de art\u00edculos en la que los periodistas podr\u00e1n publicar art\u00edculos, establecer permisos para que s\u00f3lo el autor de un art\u00edculo pueda editarlo o borrarlo, y finalmente a\u00f1adir la posibilidad de que otros usuarios escriban comentarios en cada art\u00edculo, lo que introducir\u00e1 el concepto de claves externas .","title":"14. Newspaper app"},{"location":"14_newspaper_app/#141-articles-app","text":"No hay reglas r\u00edgidas sobre c\u00f3mo llamar a las aplicaciones, excepto que no se puede usar el nombre de una aplicaci\u00f3n incorporada. Una regla general es usar el plural del nombre de una aplicaci\u00f3n - posts , payments , users , etc.- a menos que hacerlo sea obviamente incorrecto como en el caso com\u00fan de blog donde el singular tiene m\u00e1s sentido. Crear la aplicaci\u00f3n para los nuevos art\u00edculos. (news) $ python manage.py startapp articles A\u00f1adirla a INSTALLED_APPS y actualizar la zona horaria ya que se marcar\u00e1 la hora de los art\u00edculos. Para averiguar la zona horaria correspondiente: >>> from pytz import all_timezones, common_timezones >>> 'Europe/Madrid' in all_timezones True FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd Party 'crispy_forms', # Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'Europe/Madrid' Se define el modelo de base de datos con cuatro campos: title , body , date , y author . Para el campo autor se har\u00e1 referencia al modelo de usuario personalizado users.CustomUser que se ha establecido en el archivo settings.py como AUTH_USER_MODEL . Por lo tanto, si se importa la configuraci\u00f3n podemos referirnos a ella como settings.AUTH_USER_MODEL . Tambi\u00e9n se implementa la 'buena mejores pr\u00e1ctica' de definir un get_absolute_url desde el principio y un m\u00e9todo __str__ para ver el modelo en la interfaz de administraci\u00f3n. FICHERO: articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length=255) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Como se tiene una nueva aplicaci\u00f3n y modelo, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo a la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate En este punto es conveniente ir a la administraci\u00f3n para jugar con el modelo antes de construir las urls/vistas/plantillas necesarias para mostrar los datos en el sitio web. Pero primero necesitamos actualizar admin.py para que se muestre la nueva aplicaci\u00f3n. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Iniciar el servidor, ir a la p\u00e1gina de administraci\u00f3n y a\u00f1adir algunos art\u00edculos de ejemplo. No se podr\u00e1 a\u00f1adir la fecha porque fue a\u00f1adida autom\u00e1ticamente por Django en nuestro nombre y no puede ser cambiada en la administraci\u00f3n. Se podr\u00e1 hacer que la fecha sea editable -en aplicaciones m\u00e1s complejas es com\u00fan tener un campo created_at y updated_at - pero para mantener las cosas simples, por ahora s\u00f3lo se tendr\u00e1 date establecida por Django al momento de la creaci\u00f3n.","title":"14.1. Articles app"},{"location":"14_newspaper_app/#142-urls-y-vistas","text":"Vamos a hacer que los art\u00edculos aparezcan en articles/ . FICHERO: # newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Crear ahora la vista usando la gen\u00e9rica ListView de Django. FICHERO: # articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' Los dos \u00fanicos campos que se necesitan especificar son el modelo de art\u00edculo y el nombre de la plantilla que ser\u00e1 article_list.html . El \u00faltimo paso es crear la plantilla. Bootstrap tiene un componente incorporado llamado Cards que se puede personalizar para los art\u00edculos individuales. Recordar que ListView devuelve un objeto llamado object_list que se puede iterar con un bucle for. Dentro de cada art\u00edculo se muestra el t\u00edtulo, el cuerpo, el autor y la fecha. Incluso se proporcionan enlaces a las funciones de \"editar\" y \"borrar\" que a\u00fan no se han construido. FICHERO: templates/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> {{ article.body }} </div> <div class=\"card-footer text-center text-muted\"> <a href=\"#\">Edit</a> | <a href=\"#\">Delete</a> </div> </div> <br /> {% endfor %} {% endblock content %} Arracar el servidor y consultar la p\u00e1gina articles/","title":"14.2. URLs y Vistas"},{"location":"14_newspaper_app/#143-editarborrar","text":"Se necesitan nuevas urls, vistas y plantillas. Se puede aprovechar el hecho de que Django a\u00f1ade autom\u00e1ticamente una clave primaria a cada base de datos. Por lo tanto, el primer art\u00edculo con una clave primaria de 1 estar\u00e1 en articles/1/edit/ y la ruta de borrado estar\u00e1 en articles/1/delete/ . FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path('<int:pk>/edit/',views.ArticleUpdateView.as_view(), name='article_edit'),# new path('<int:pk>/', views.ArticleDetailView.as_view(), name='article_detail'), # new path('<int:pk>/delete/', views.ArticleDeleteView.as_view(), name='article_delete'), # new ] Ahora se escribir\u00e1n las vistas que usar\u00e1n las vistas gen\u00e9ricas basadas en clases de Django para DetailView , UpdateView y DeleteView . Especificamos qu\u00e9 campos pueden ser actualizados - title y body - y d\u00f3nde redirigir al usuario despu\u00e9s de borrar un art\u00edculo: article_list . FICHERO: articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') Finalmente se necesita a\u00f1adir las nuevas plantillas. Se empezar\u00e1 con la p\u00e1gina de detalles que mostrar\u00e1 el t\u00edtulo, la fecha, el cuerpo y el autor con enlaces para editar y borrar. Tambi\u00e9n enlazar\u00e1 hacia atr\u00e1s con todos los art\u00edculos. El nombre de la ruta de edici\u00f3n es article_edit y tenemos que pasarle su clave principal article.pk . El nombre de la ruta de borrado es article_delete y tambi\u00e9n necesita una clave primaria article.pk . La p\u00e1gina de art\u00edculos es una ListView por lo que no necesita que se le pase ning\u00fan argumento adicional. FICHERO: templates/article_detail.html {% extends 'base.html' %} {% block content %} <div class=\"article-entry\"> <h2>{{ object.title }}</h2> <p>by {{ object.author }} | {{ object.date }}</p> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a></p> <p>Back to <a href=\"{% url 'article_list' %}\">All Articles</a>.</p> {% endblock content %} Para las p\u00e1ginas de edici\u00f3n y borrado se puede usar el estilo del bot\u00f3n de Bootstrap para hacer que el bot\u00f3n de edici\u00f3n sea azul claro y el de borrado rojo. FICHERO: templates/article_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-info ml-2\" type=\"submit\">Update</button> </form> {% endblock %} FICHERO: templates/article_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ article.title }}\"?</p> <button class=\"btn btn-danger ml- \" type=\"submit\">Confirm</button> </form> {% endblock %} Como paso final se a\u00f1aden los enlaces de edici\u00f3n y borrado a la p\u00e1gina de listas en la clase div para el card-foot . Ser\u00e1n los mismos que los a\u00f1adidos a la p\u00e1gina detalle. FICHERO: templates/article_list.html ... <div class=\"card-footer text-center text-muted\"> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> ... Arrancar el servidor e ir a la p\u00e1gina de articles/ y pulsar sobre Edit . Si se actualiza el campo \"t\u00edtulo\" y se hace clic en actualizar, el usuario ser\u00e1 redirigido a la p\u00e1gina de detalles que mostrar\u00e1 el nuevo cambio. Si se hace clic en el enlace Delete el usuario ser\u00e1 redirigido a la p\u00e1gina de borrado. Si se presiona el aterrador bot\u00f3n rojo Confirm el usuario ser\u00e1 redirigido a la p\u00e1gina de art\u00edculos donde ahora habr\u00e1 una entrada menos. 00000000000000000000000000000000000000000000000000000000000000000000000000000","title":"14.3. Editar/Borrar"},{"location":"14_newspaper_app/#14crear-la-page","text":"El paso final es una p\u00e1gina de creaci\u00f3n de nuevos art\u00edculos que podemos hacer con el CreateView de Django. Nuestros tres pasos son crear una vista, una url y una plantilla. Este flujo ya deber\u00eda resultar bastante familiar. En nuestro archivo de vistas agregamos CreateView a las importaciones de la parte superior y hacemos una nueva clase ArticleCreateView que especifica nuestro modelo, plantilla y los campos disponibles. FICHERO: articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... N\u00f3tese que nuestros campos tienen autor ya que queremos asociar un nuevo art\u00edculo con un autor, sin embargo una vez que un art\u00edculo ha sido creado no queremos que un usuario pueda cambiar el autor, por lo que ArticleUpdateView s\u00f3lo tiene los campos ['title', 'body',] . Actualizar nuestro archivo de urls con la nueva ruta para la vista. FICHERO: articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Luego, salga del servidor Control+c para crear una nueva plantilla llamada article_new.html . (news) $ touch templates/article_new.html Y actualizarlo con el siguiente c\u00f3digo HTML. FICHERO: templates/article_new.html {% extends 'base.html' %} {% block content %} <h1>New article</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-success ml- \" type=\"submit\">Save</button> </form> {% endblock %} Como paso final deber\u00edamos a\u00f1adir un enlace para crear nuevos art\u00edculos en nuestro navegador para que sea accesible en todas partes del sitio para los usuarios registrados. FICHERO: templates/base.html ... <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb- \"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> {% if user.is_authenticated %} <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"><a href=\"{% url 'article_new' %}\">+ New</a></li> </ul> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-tar\\ get=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-\\ label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> ... \u00bfY por qu\u00e9 no usar Bootstrap para mejorar nuestra p\u00e1gina web original ahora tambi\u00e9n? Podemos actualizar plantillas/home.html como sigue. FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} <div class=\"jumbotron\"> <h1 class=\"display- \">Newspaper app</h1> <p class=\"lead\">A Newspaper website built with Django.</p> <p class=\"lead\"> <a class=\"btn btn-primary btn-lg\" href=\"{% url 'article_list' %}\" role=\"butt\\ on\">View All Articles</a> </p> </div> {% endblock %} Ya hemos terminado. Vamos a confirmar que todo funciona como se esperaba. Arranca el servidor de nuevo python manage.py runserver y navega a nuestra p\u00e1gina web en: http://127.0.0.1:8000/.273 P\u00e1gina principal con nuevo enlace en la navegaci\u00f3n Haz clic en el enlace \"+ Nuevo\" en la parte superior del navegador y ser\u00e1s redirigido a nuestra p\u00e1gina de creaci\u00f3n. Crear p\u00e1gina Adelante, crea un nuevo art\u00edculo. Luego haz clic en el bot\u00f3n \"Guardar\". Ser\u00e1s redirigido a la p\u00e1gina de detalles. \u00bfPor qu\u00e9? Porque en nuestro archivo models.py establecemos el m\u00e9todo get_-absolute_url en article_detail . Este es un buen enfoque porque si m\u00e1s tarde cambiamos el patr\u00f3n de url de la p\u00e1gina de detalles a, digamos, art\u00edculos/detalles/ / , la redirecci\u00f3n seguir\u00e1 funcionando. Se utilizar\u00e1 cualquier ruta asociada a article_detail; no hay c\u00f3digo duro de la ruta en s\u00ed. P\u00e1gina de detalles Tengan en cuenta tambi\u00e9n que la clave principal aqu\u00ed est\u00e1 en el URL. Aunque s\u00f3lo estamos mostrando tres art\u00edculos ahora mismo, Django no reordena las claves primarias s\u00f3lo porque hayamos borrado una. En la pr\u00e1ctica, la mayor\u00eda de los sitios del mundo real no borran nada; en su lugar, \"ocultan\" los campos borrados, ya que esto facilita el mantenimiento de la integridad de una base de datos y da la opci\u00f3n de \"recuperar\" m\u00e1s adelante si es necesario. Con nuestro enfoque actual, una vez que algo se borra, \u00a1se va para siempre! Haga clic en el enlace de \"Todos los art\u00edculos\" para ver nuestra nueva p\u00e1gina de art\u00edculos. P\u00e1gina de art\u00edculos actualizada Hay un nuevo art\u00edculo en la parte inferior como se esperaba.","title":"14.Crear la page"},{"location":"14_newspaper_app/#conclusion","text":"Hemos creado una aplicaci\u00f3n de art\u00edculos dedicados con la funcionalidad de CRUD. Pero a\u00fan no hay permisos o autorizaciones, lo que significa que cualquiera puede hacer cualquier cosa. Un usuario desconectado puede visitar todas las URLs y cualquier usuario conectado puede editar o eliminar un art\u00edculo existente, \u00a1incluso uno que no sea suyo! En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos permisos y autorizaciones a nuestro proyecto para arreglar esto.","title":"Conclusi\u00f3n..."},{"location":"15_permisos_y_autorizacion/","text":"15. Permisos y Autorizaci\u00f3n Si se quiere que el peri\u00f3dico sea financieramente sostenible se podr\u00eda a\u00f1adir una app de pagos para cobrar por el acceso, para lo que se requiere un proceso de autorizaci\u00f3n , diferente al proceso de autenticaci\u00f3n . La autorizaci\u00f3n restringe el acceso; la autenticaci\u00f3n permite el flujo de registro e inicio de sesi\u00f3n de un usuario. Django incorpora una funcionalidad de autorizaci\u00f3n que se puede utilizar r\u00e1pidamente. 15.1. CreateView mejorado Se van a establecer permisos de edici\u00f3n/borrado para que s\u00f3lo el autor de un art\u00edculo pueda hacer tales cambios. Se va a eliminar el autor de los campos y en su lugar se establecer\u00e1 autom\u00e1ticamente a trav\u00e9s del m\u00e9todo form_valid . FICHERO: articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... Las vistas gen\u00e9ricas basadas en clases son incre\u00edbles para empezar nuevos proyectos, pero cuando se quieren personalizar, es necesario arremangarse y empezar a entender lo que pasa bajo el cap\u00f3. Lo m\u00e1s probable es que lo que est\u00e1s intentando hacer ya haya sido resuelto en alg\u00fan lugar, ya sea dentro de Django mismo o en un foro como Stack Overflow. No tengas miedo de pedir ayuda! Ahora el autor ya no es un campo a rellenar si se crea un nuevo art\u00edculo y sino que se establece autom\u00e1ticamente seg\u00fan el usuario actual conectado. 15.2. Autorizaciones Hay m\u00faltiples problemas en torno a la falta de autorizaciones en nuestro proyecto actual. Nos gustar\u00eda restringir el acceso s\u00f3lo a los usuarios para tener la opci\u00f3n de cobrar un d\u00eda a los lectores de nuestro peri\u00f3dico. Cualquier usuario desconectado al azar que conozca la URL correcta puede acceder a cualquier parte del sitio. 15.3. Mixins Hay que establecer algunas autorizaciones para que s\u00f3lo los usuarios registrados puedan acceder al sitio. Para ello se puede utilizar un mixin , que es un tipo especial de herencia m\u00faltiple que Django utiliza para evitar la duplicaci\u00f3n de c\u00f3digo y permitir la personalizaci\u00f3n . Por ejemplo, el ListView gen\u00e9rico incorporado necesita una forma de devolver una plantilla. Pero tambi\u00e9n lo hace DetailView y, de hecho, casi todas las dem\u00e1s vistas. En lugar de repetir el mismo c\u00f3digo en cada gran vista gen\u00e9rica, Django descompone esta funcionalidad en una \"mezcla\" conocida como TemplateResponseMixin . Tanto la ListView como la DetailView usan esta mezcla para mostrar la plantilla adecuada. Para restringir el acceso a la vista a s\u00f3lo los usuarios conectados, Django tiene un mixin LoginRequired que se puede utilizar. FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Regresar a la URL para crear nuevos mensajes en http://127.0.0.1:8000/articles/new/ y se ver\u00e1 un error: Django se ha redirigido autom\u00e1ticamente a la ubicaci\u00f3n por defecto de la p\u00e1gina de inicio de sesi\u00f3n que est\u00e1 en /accounts/login , sin embargo, en los URLs a nivel de proyecto se usa usando users/ como ruta. Por eso la p\u00e1gina de acceso est\u00e1 en users/login . Entonces, \u00bfc\u00f3mo se informa a ArticleCreateView sobre esto? La respuesta est\u00e1 en la documentaci\u00f3n para LoginRequired mixin. Se puede agregar ua ruta login_url para anular el par\u00e1metro por defecto. Se usa la URL con nombre de la ruta login . FICHERO: articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Probar el enlace para crear nuevos mensajes de nuevo: http://127.0.0.1:8000/articles/new/. Ahora redirige a los usuarios a la p\u00e1gina de acceso. Tal como se deseaba. 15.4 Actualizando las vistas Restringir el acceso a las vistas es s\u00f3lo cuesti\u00f3n de a\u00f1adir LoginRequiredMixin al principio de todas las vistas existentes y especificar el login_url correcto. Actualizar el resto de las vistas de los art\u00edculos ya que no se desea que un usuario pueda crear, leer, actualizar o borrar un mensaje si no est\u00e1 conectado. El archivo completo views.py deber\u00eda tener ahora este aspecto: FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Jugar con el sitio para confirmar que las redirecciones de acceso ahora funcionan como se esperaba. Conclusi\u00f3n La aplicaci\u00f3n para el peri\u00f3dico est\u00e1 casi terminada. Art\u00edculos correctamente configurados Establecidos permisos y autorizaciones La autentificaci\u00f3n de los usuarios est\u00e1 en buen estado. Queda: A\u00f1adir la posibilidad de que otros usuarios conectados dejen comentarios","title":"15. Permisos y Autorizaci\u00f3n"},{"location":"15_permisos_y_autorizacion/#15-permisos-y-autorizacion","text":"Si se quiere que el peri\u00f3dico sea financieramente sostenible se podr\u00eda a\u00f1adir una app de pagos para cobrar por el acceso, para lo que se requiere un proceso de autorizaci\u00f3n , diferente al proceso de autenticaci\u00f3n . La autorizaci\u00f3n restringe el acceso; la autenticaci\u00f3n permite el flujo de registro e inicio de sesi\u00f3n de un usuario. Django incorpora una funcionalidad de autorizaci\u00f3n que se puede utilizar r\u00e1pidamente.","title":"15. Permisos y Autorizaci\u00f3n"},{"location":"15_permisos_y_autorizacion/#151-createview-mejorado","text":"Se van a establecer permisos de edici\u00f3n/borrado para que s\u00f3lo el autor de un art\u00edculo pueda hacer tales cambios. Se va a eliminar el autor de los campos y en su lugar se establecer\u00e1 autom\u00e1ticamente a trav\u00e9s del m\u00e9todo form_valid . FICHERO: articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... Las vistas gen\u00e9ricas basadas en clases son incre\u00edbles para empezar nuevos proyectos, pero cuando se quieren personalizar, es necesario arremangarse y empezar a entender lo que pasa bajo el cap\u00f3. Lo m\u00e1s probable es que lo que est\u00e1s intentando hacer ya haya sido resuelto en alg\u00fan lugar, ya sea dentro de Django mismo o en un foro como Stack Overflow. No tengas miedo de pedir ayuda! Ahora el autor ya no es un campo a rellenar si se crea un nuevo art\u00edculo y sino que se establece autom\u00e1ticamente seg\u00fan el usuario actual conectado.","title":"15.1. CreateView mejorado"},{"location":"15_permisos_y_autorizacion/#152-autorizaciones","text":"Hay m\u00faltiples problemas en torno a la falta de autorizaciones en nuestro proyecto actual. Nos gustar\u00eda restringir el acceso s\u00f3lo a los usuarios para tener la opci\u00f3n de cobrar un d\u00eda a los lectores de nuestro peri\u00f3dico. Cualquier usuario desconectado al azar que conozca la URL correcta puede acceder a cualquier parte del sitio.","title":"15.2. Autorizaciones"},{"location":"15_permisos_y_autorizacion/#153-mixins","text":"Hay que establecer algunas autorizaciones para que s\u00f3lo los usuarios registrados puedan acceder al sitio. Para ello se puede utilizar un mixin , que es un tipo especial de herencia m\u00faltiple que Django utiliza para evitar la duplicaci\u00f3n de c\u00f3digo y permitir la personalizaci\u00f3n . Por ejemplo, el ListView gen\u00e9rico incorporado necesita una forma de devolver una plantilla. Pero tambi\u00e9n lo hace DetailView y, de hecho, casi todas las dem\u00e1s vistas. En lugar de repetir el mismo c\u00f3digo en cada gran vista gen\u00e9rica, Django descompone esta funcionalidad en una \"mezcla\" conocida como TemplateResponseMixin . Tanto la ListView como la DetailView usan esta mezcla para mostrar la plantilla adecuada. Para restringir el acceso a la vista a s\u00f3lo los usuarios conectados, Django tiene un mixin LoginRequired que se puede utilizar. FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Regresar a la URL para crear nuevos mensajes en http://127.0.0.1:8000/articles/new/ y se ver\u00e1 un error: Django se ha redirigido autom\u00e1ticamente a la ubicaci\u00f3n por defecto de la p\u00e1gina de inicio de sesi\u00f3n que est\u00e1 en /accounts/login , sin embargo, en los URLs a nivel de proyecto se usa usando users/ como ruta. Por eso la p\u00e1gina de acceso est\u00e1 en users/login . Entonces, \u00bfc\u00f3mo se informa a ArticleCreateView sobre esto? La respuesta est\u00e1 en la documentaci\u00f3n para LoginRequired mixin. Se puede agregar ua ruta login_url para anular el par\u00e1metro por defecto. Se usa la URL con nombre de la ruta login . FICHERO: articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Probar el enlace para crear nuevos mensajes de nuevo: http://127.0.0.1:8000/articles/new/. Ahora redirige a los usuarios a la p\u00e1gina de acceso. Tal como se deseaba.","title":"15.3. Mixins"},{"location":"15_permisos_y_autorizacion/#154-actualizando-las-vistas","text":"Restringir el acceso a las vistas es s\u00f3lo cuesti\u00f3n de a\u00f1adir LoginRequiredMixin al principio de todas las vistas existentes y especificar el login_url correcto. Actualizar el resto de las vistas de los art\u00edculos ya que no se desea que un usuario pueda crear, leer, actualizar o borrar un mensaje si no est\u00e1 conectado. El archivo completo views.py deber\u00eda tener ahora este aspecto: FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Jugar con el sitio para confirmar que las redirecciones de acceso ahora funcionan como se esperaba.","title":"15.4 Actualizando las vistas"},{"location":"15_permisos_y_autorizacion/#conclusion","text":"La aplicaci\u00f3n para el peri\u00f3dico est\u00e1 casi terminada. Art\u00edculos correctamente configurados Establecidos permisos y autorizaciones La autentificaci\u00f3n de los usuarios est\u00e1 en buen estado. Queda: A\u00f1adir la posibilidad de que otros usuarios conectados dejen comentarios","title":"Conclusi\u00f3n"},{"location":"16_comentarios/","text":"16. Comentarios Dos maneras: Crear una aplicaci\u00f3n de comentarios dedicada y enlazarla a los art\u00edculos (sobreingenier\u00eda en este momento). A\u00f1adir un modelo adicional llamado Comment a la aplicaci\u00f3n de art\u00edculos y enlazarlo al modelo de Art\u00edculo a trav\u00e9s de una clave externa. Los usuarios tambi\u00e9n tendr\u00e1n la posibilidad de dejar comentarios en los art\u00edculos de cualquier otro usuario. 16.1. Modelo A\u00f1adir otra tabla a nuestra base de datos existente llamada Comment . Tendr\u00e1 una relaci\u00f3n muchos a uno de clave primaria con Article : un art\u00edculo puede tener muchos comentarios, pero no al rev\u00e9s. Tradicionalmente el nombre del campo de la clave for\u00e1nea es simplemente el modelo con el que se vincula, por lo que este campo se llamar\u00e1 article . Los otros dos campos ser\u00e1n comment y author . FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length=140) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.comment def get_absolute_url(self): return reverse('article_list') El modelo Comment tiene un m\u00e9todo __str__ y un m\u00e9todo get_absolute_url que regresa a la p\u00e1gina principal articles/ . Ya que se han actualizado los modelos, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo. Al a\u00f1adir articles al final de cada comando, lo cual es opcional, estamos especificando que queremos usar s\u00f3lo la aplicaci\u00f3n de art\u00edculos. Esto es un buen h\u00e1bito. Por ejemplo, \u00bfqu\u00e9 pasar\u00eda si se hicieran cambios en los modelos de dos aplicaciones diferentes? Si no especificamos una aplicaci\u00f3n, entonces los cambios de ambas aplicaciones se incorporar\u00e1n en el mismo archivo de migraciones, lo que hace m\u00e1s dif\u00edcil, en el futuro, depurar los errores. Mant\u00e9ngase cada migraci\u00f3n tan peque\u00f1a y contenida como sea posible. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate 16.4 Admin Despu\u00e9s de crear un nuevo modelo es bueno jugar con \u00e9l en la aplicaci\u00f3n de administraci\u00f3n antes de mostrarlo en el sitio web real. A\u00f1adir el Comment al archivo admin.py para que sea visible. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) En este punto se podr\u00edamos a\u00f1adir un campo de administraci\u00f3n adicional para ver el comentario y el art\u00edculo en la p\u00e1gina de administraci\u00f3n de Django. \u00bfPero no ser\u00eda mejor ver todos los modelos de Comment relacionados con un solo modelo Post ? Resulta que s\u00ed, con una funci\u00f3n de administraci\u00f3n de Django llamada inlines que muestra las relaciones de claves externas de una manera m\u00e1s visual y agradable. Hay dos vistas inlines principales: TabularInline y StackedInline . La \u00fanica diferencia entre las dos es el modelo para mostrar la informaci\u00f3n. En una TabularInline todos los campos del modelo aparecen en una l\u00ednea mientras que en una StackedInline cada campo tiene su propia l\u00ednea. Se implementar\u00e1n las dos para decidir cu\u00e1l se prefiere FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Se pueden ver y modificar todos los art\u00edculos y comentarios relacionados en un solo lugar. En caso de usar TabularInline se muestra m\u00e1s informaci\u00f3n en menos espacio. Para cambiar a \u00e9l s\u00f3lo hay que cambiar CommentInline de admin.StackedInline a admin.TabularInline . FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Ver lo cambios en la p\u00e1gina de administraci\u00f3n de Django: todos los campos de cada modelo se muestran en la misma l\u00ednea. 16.5. Plantilla Dado que Comment vive dentro de la app articles existente, s\u00f3lo necesitamos actualizar las plantillas existentes para article_list.html y article_detail.html para mostrar el nuevo contenido. No hay que crear nuevas plantillas y jugar con las urls y las vistas. Lo que se quiere hacer es mostrar todos los comentarios relacionados con un art\u00edculo espec\u00edfico. Esto se llama \"query\" ya que estamos pidiendo a la base de datos una informaci\u00f3n espec\u00edfica. En este caso, al trabajar con una clave rof\u00e1nea, se busca seguir una relaci\u00f3n hacia atr\u00e1s: para cada Article buscar modelos de Comment relacionados. Django tiene una sintaxis incorporada que se puede usar conocida como FOO_set donde FOO es el nombre del modelo fuente en min\u00fasculas. As\u00ed que para el modelo de Article se puede usar article_set para acceder a todas las instancias del modelo. Esta sintaxis es un poco confusa y no intuitiva. Un mejor enfoque es a\u00f1adir un atributo related_name al modelo que permita establecer expl\u00edcitamente el nombre de esta relaci\u00f3n inversa en su lugar. Hag\u00e1moslo. Para empezar, agregar un atributo related_name al modelo de comentarios. Un buen valor por defecto es nombrarlo en el plural del modelo que contiene la clave for\u00e1nea. FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Como se acaba de hacer un cambio en el modelo de base de datos, se necesita crear un archivo de migraciones y actualizar la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Entender las consultas lleva alg\u00fan tiempo, as\u00ed que no preocuparse si la idea de las relaciones inversas es confusa. Y una vez que se dominen estos casos b\u00e1sicos, se puede explorar c\u00f3mo filtrar consultas con gran detalle para que devuelvan exactamente la informaci\u00f3n que se desea. En el archivo article_list.html se pueden a\u00f1adir los comentarios a card-footer . Notar que se han movido los enlaces de edici\u00f3n y borrado a card-body . Para acceder a cada comentario se llama a article.comments.all lo que significa que primero se mira el modelo article , luego comment que es el nombre relacionado a todo el modelo Comment , y se selecciona all included . \u00a1Puede llevar un poco de tiempo acostumbrarse a esta sintaxis para referenciar datos de claves for\u00e1neas en una plantilla! FICHERO: template/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> <p>{{ article.body }}</p> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> <div class=\"card-footer\"> {% for comment in article.comments.all %} <p> <span class=\"font-weight-bold\">{{ comment.author }} &middot;</span> {{ comment }} </p> {% endfor %} </div> </div> <br /> {% endfor %} {% endblock content %} Conclusi\u00f3n Con m\u00e1s tiempo habr\u00eda que centrarse en los formularios para que un usuario pueda escribir un nuevo art\u00edculo directamente en la p\u00e1gina de art\u00edculos, as\u00ed como a\u00f1adir tambi\u00e9n comentarios. Pero el principal objetivo de este cap\u00edtulo es demostrar c\u00f3mo funcionan las relaciones de clave for\u00e1nea en Django. La aplicaci\u00f3n para el peri\u00f3dico ya est\u00e1 completa. Tiene un flujo de autenticaci\u00f3n de usuario robusto, incluyendo el uso del correo electr\u00f3nico para el restablecimiento de la contrase\u00f1a. Tambi\u00e9n se utiliza un modelo de usuario personalizado, por lo que si se quiere a\u00f1adir campos adicionales al modelo de usuario personalizado es tan sencillo como a\u00f1adir un campo adicional. Ya tenemos un campo de edad para todos los usuarios que est\u00e1 siendo configurado por defecto. Se podr\u00eda a\u00f1adir un desplegable de edad al formulario de registro y restringir el acceso de los usuarios s\u00f3lo a los mayores de 13 a\u00f1os. O se podr\u00eda ofrecer descuentos a los usuarios mayores de 65 a\u00f1os. Lo que se quiera hacer con el modelo de usuario personalizado es una opci\u00f3n. La mayor parte del desarrollo web sigue los mismos patrones y al utilizar un framework como Django el 99% de lo que se quiera en t\u00e9rminos de funcionalidad ya est\u00e1 incluido o s\u00f3lo falta una peque\u00f1a personalizaci\u00f3n de alguna funci\u00f3n existente.","title":"16. Comentarios"},{"location":"16_comentarios/#16-comentarios","text":"Dos maneras: Crear una aplicaci\u00f3n de comentarios dedicada y enlazarla a los art\u00edculos (sobreingenier\u00eda en este momento). A\u00f1adir un modelo adicional llamado Comment a la aplicaci\u00f3n de art\u00edculos y enlazarlo al modelo de Art\u00edculo a trav\u00e9s de una clave externa. Los usuarios tambi\u00e9n tendr\u00e1n la posibilidad de dejar comentarios en los art\u00edculos de cualquier otro usuario.","title":"16. Comentarios"},{"location":"16_comentarios/#161-modelo","text":"A\u00f1adir otra tabla a nuestra base de datos existente llamada Comment . Tendr\u00e1 una relaci\u00f3n muchos a uno de clave primaria con Article : un art\u00edculo puede tener muchos comentarios, pero no al rev\u00e9s. Tradicionalmente el nombre del campo de la clave for\u00e1nea es simplemente el modelo con el que se vincula, por lo que este campo se llamar\u00e1 article . Los otros dos campos ser\u00e1n comment y author . FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length=140) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.comment def get_absolute_url(self): return reverse('article_list') El modelo Comment tiene un m\u00e9todo __str__ y un m\u00e9todo get_absolute_url que regresa a la p\u00e1gina principal articles/ . Ya que se han actualizado los modelos, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo. Al a\u00f1adir articles al final de cada comando, lo cual es opcional, estamos especificando que queremos usar s\u00f3lo la aplicaci\u00f3n de art\u00edculos. Esto es un buen h\u00e1bito. Por ejemplo, \u00bfqu\u00e9 pasar\u00eda si se hicieran cambios en los modelos de dos aplicaciones diferentes? Si no especificamos una aplicaci\u00f3n, entonces los cambios de ambas aplicaciones se incorporar\u00e1n en el mismo archivo de migraciones, lo que hace m\u00e1s dif\u00edcil, en el futuro, depurar los errores. Mant\u00e9ngase cada migraci\u00f3n tan peque\u00f1a y contenida como sea posible. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate","title":"16.1. Modelo"},{"location":"16_comentarios/#164-admin","text":"Despu\u00e9s de crear un nuevo modelo es bueno jugar con \u00e9l en la aplicaci\u00f3n de administraci\u00f3n antes de mostrarlo en el sitio web real. A\u00f1adir el Comment al archivo admin.py para que sea visible. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) En este punto se podr\u00edamos a\u00f1adir un campo de administraci\u00f3n adicional para ver el comentario y el art\u00edculo en la p\u00e1gina de administraci\u00f3n de Django. \u00bfPero no ser\u00eda mejor ver todos los modelos de Comment relacionados con un solo modelo Post ? Resulta que s\u00ed, con una funci\u00f3n de administraci\u00f3n de Django llamada inlines que muestra las relaciones de claves externas de una manera m\u00e1s visual y agradable. Hay dos vistas inlines principales: TabularInline y StackedInline . La \u00fanica diferencia entre las dos es el modelo para mostrar la informaci\u00f3n. En una TabularInline todos los campos del modelo aparecen en una l\u00ednea mientras que en una StackedInline cada campo tiene su propia l\u00ednea. Se implementar\u00e1n las dos para decidir cu\u00e1l se prefiere FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Se pueden ver y modificar todos los art\u00edculos y comentarios relacionados en un solo lugar. En caso de usar TabularInline se muestra m\u00e1s informaci\u00f3n en menos espacio. Para cambiar a \u00e9l s\u00f3lo hay que cambiar CommentInline de admin.StackedInline a admin.TabularInline . FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Ver lo cambios en la p\u00e1gina de administraci\u00f3n de Django: todos los campos de cada modelo se muestran en la misma l\u00ednea.","title":"16.4 Admin"},{"location":"16_comentarios/#165-plantilla","text":"Dado que Comment vive dentro de la app articles existente, s\u00f3lo necesitamos actualizar las plantillas existentes para article_list.html y article_detail.html para mostrar el nuevo contenido. No hay que crear nuevas plantillas y jugar con las urls y las vistas. Lo que se quiere hacer es mostrar todos los comentarios relacionados con un art\u00edculo espec\u00edfico. Esto se llama \"query\" ya que estamos pidiendo a la base de datos una informaci\u00f3n espec\u00edfica. En este caso, al trabajar con una clave rof\u00e1nea, se busca seguir una relaci\u00f3n hacia atr\u00e1s: para cada Article buscar modelos de Comment relacionados. Django tiene una sintaxis incorporada que se puede usar conocida como FOO_set donde FOO es el nombre del modelo fuente en min\u00fasculas. As\u00ed que para el modelo de Article se puede usar article_set para acceder a todas las instancias del modelo. Esta sintaxis es un poco confusa y no intuitiva. Un mejor enfoque es a\u00f1adir un atributo related_name al modelo que permita establecer expl\u00edcitamente el nombre de esta relaci\u00f3n inversa en su lugar. Hag\u00e1moslo. Para empezar, agregar un atributo related_name al modelo de comentarios. Un buen valor por defecto es nombrarlo en el plural del modelo que contiene la clave for\u00e1nea. FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Como se acaba de hacer un cambio en el modelo de base de datos, se necesita crear un archivo de migraciones y actualizar la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Entender las consultas lleva alg\u00fan tiempo, as\u00ed que no preocuparse si la idea de las relaciones inversas es confusa. Y una vez que se dominen estos casos b\u00e1sicos, se puede explorar c\u00f3mo filtrar consultas con gran detalle para que devuelvan exactamente la informaci\u00f3n que se desea. En el archivo article_list.html se pueden a\u00f1adir los comentarios a card-footer . Notar que se han movido los enlaces de edici\u00f3n y borrado a card-body . Para acceder a cada comentario se llama a article.comments.all lo que significa que primero se mira el modelo article , luego comment que es el nombre relacionado a todo el modelo Comment , y se selecciona all included . \u00a1Puede llevar un poco de tiempo acostumbrarse a esta sintaxis para referenciar datos de claves for\u00e1neas en una plantilla! FICHERO: template/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> <p>{{ article.body }}</p> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> <div class=\"card-footer\"> {% for comment in article.comments.all %} <p> <span class=\"font-weight-bold\">{{ comment.author }} &middot;</span> {{ comment }} </p> {% endfor %} </div> </div> <br /> {% endfor %} {% endblock content %}","title":"16.5. Plantilla"},{"location":"16_comentarios/#conclusion","text":"Con m\u00e1s tiempo habr\u00eda que centrarse en los formularios para que un usuario pueda escribir un nuevo art\u00edculo directamente en la p\u00e1gina de art\u00edculos, as\u00ed como a\u00f1adir tambi\u00e9n comentarios. Pero el principal objetivo de este cap\u00edtulo es demostrar c\u00f3mo funcionan las relaciones de clave for\u00e1nea en Django. La aplicaci\u00f3n para el peri\u00f3dico ya est\u00e1 completa. Tiene un flujo de autenticaci\u00f3n de usuario robusto, incluyendo el uso del correo electr\u00f3nico para el restablecimiento de la contrase\u00f1a. Tambi\u00e9n se utiliza un modelo de usuario personalizado, por lo que si se quiere a\u00f1adir campos adicionales al modelo de usuario personalizado es tan sencillo como a\u00f1adir un campo adicional. Ya tenemos un campo de edad para todos los usuarios que est\u00e1 siendo configurado por defecto. Se podr\u00eda a\u00f1adir un desplegable de edad al formulario de registro y restringir el acceso de los usuarios s\u00f3lo a los mayores de 13 a\u00f1os. O se podr\u00eda ofrecer descuentos a los usuarios mayores de 65 a\u00f1os. Lo que se quiera hacer con el modelo de usuario personalizado es una opci\u00f3n. La mayor parte del desarrollo web sigue los mismos patrones y al utilizar un framework como Django el 99% de lo que se quiera en t\u00e9rminos de funcionalidad ya est\u00e1 incluido o s\u00f3lo falta una peque\u00f1a personalizaci\u00f3n de alguna funci\u00f3n existente.","title":"Conclusi\u00f3n"},{"location":"17_conclusion/","text":"Conclusi\u00f3n \u00a1Felicidades por terminar Django para principiantes! Despu\u00e9s de empezar desde cero, hemos construido cinco aplicaciones web diferentes desde cero. Y hemos cubierto todas las caracter\u00edsticas principales de Django: plantillas, vistas, urls, usuarios, modelos, seguridad, pruebas y despliegue. Ahora tienes el conocimiento para salir y construir tus propios sitios web modernos con Django. Como con cualquier habilidad nueva, es importante practicar y aplicar lo que acabas de aprender. La funcionalidad de CRUD en nuestros sitios de blog y peri\u00f3dicos es com\u00fan en muchas, muchas otras aplicaciones web. Por ejemplo, \u00bfpuedes hacer una aplicaci\u00f3n web de Todo List? Ya tienes todas las herramientas que necesitas. El desarrollo web es un campo muy profundo y todav\u00eda hay mucho m\u00e1s que aprender sobre lo que Django tiene que ofrecer. Por ejemplo, un proyecto Django m\u00e1s avanzado probablemente usar\u00eda m\u00faltiples archivos de configuraci\u00f3n, variables de entorno y PostgreSQL localmente en lugar de SQLite. Incluso podr\u00eda utilizar paquetes de terceros como django-allauth para la autenticaci\u00f3n social, django-debug-toolbar para la depuraci\u00f3n, y django-extensions para las ventajas adicionales. La mejor manera de aprender m\u00e1s sobre Django y el desarrollo web en general es pensar en un proyecto que quieras construir y luego aprender paso a paso lo que necesitas para completarlo. Un recurso adicional que puede ayudarte es DjangoX, que es un proyecto de inicio en el mundo real que cuenta con autenticaci\u00f3n social y m\u00e1s. Tambi\u00e9n puedes suscribirte al bolet\u00edn de Django para principiantes para recibir actualizaciones peri\u00f3dicas sobre nuevos contenidos y descuentos en futuros libros. Y un \u00faltimo recurso es mi propio sitio web personal, wsvincent.com, que se actualiza regularmente y ya presenta art\u00edculos sobre algunas de estas t\u00e9cnicas avanzadas: Autenticaci\u00f3n social Django Mega-tutorial de acceso a Django Django, PostgreSQL y Docker Tutorial del marco de descanso de Django Marco de descanso de Django con React Recursos de Django Para continuar aprendiendo Django, recomiendo trabajar a trav\u00e9s de los siguientes tutoriales gratuitos en l\u00ednea: - Tutorial de encuestas oficiales - Tutorial de las chicas de Django - MDN: Marco Web Django - Una completa gu\u00eda para principiantes de Django Tambi\u00e9n recomiendo encarecidamente Two Scoops of Django 1.11: Best Practices for the Django Web Framework, que es la actual biblia de mejores pr\u00e1cticas para los desarrolladores de Django. Libros de Python Si eres nuevo en Python, hay varios libros excelentes disponibles para principiantes y avanzados Pythonistas: - Python Crash Course es una fant\u00e1stica introducci\u00f3n a Python que tambi\u00e9n te lleva a trav\u00e9s de tres proyectos del mundo real, incluyendo una aplicaci\u00f3n de Django. - Think Python introduce los fundamentos de Python y de la inform\u00e1tica en el al mismo tiempo. - Automatizar las cosas aburridas es otra gran gu\u00eda para aprender y usar Python en el mundo real. - La Gu\u00eda del autoestopista para Python cubre las mejores pr\u00e1cticas en la programaci\u00f3n de Python. - Python Tricks demuestra c\u00f3mo escribir c\u00f3digo python. - Effective Python es una excelente gu\u00eda no s\u00f3lo para Python sino para la programaci\u00f3n en general. - Fluent Python es asombroso y proporciona un profundo entendimiento del lenguaje Python. Blogs a seguir Estos sitios proporcionan escritos regulares de alta calidad sobre Python y el desarrollo de la web. - Real Python - Dan Bader - Trey Hunner - Pila completa de pit\u00f3n - Ned Batchelder - Armin Ronacher - Kenneth Reitz - Daniel Greenfeld Comentarios Si has conseguido terminar el libro entero, me encantar\u00eda escuchar tus pensamientos. \u00bfQu\u00e9 te gust\u00f3 o no te gust\u00f3? \u00bfQu\u00e9 \u00e1reas fueron especialmente dif\u00edciles? \u00bfY qu\u00e9 nuevo contenido te gustar\u00eda ver? Me pueden contactar en will@wsvincent.com.","title":"Conclusi\u00f3n"},{"location":"17_conclusion/#conclusion","text":"\u00a1Felicidades por terminar Django para principiantes! Despu\u00e9s de empezar desde cero, hemos construido cinco aplicaciones web diferentes desde cero. Y hemos cubierto todas las caracter\u00edsticas principales de Django: plantillas, vistas, urls, usuarios, modelos, seguridad, pruebas y despliegue. Ahora tienes el conocimiento para salir y construir tus propios sitios web modernos con Django. Como con cualquier habilidad nueva, es importante practicar y aplicar lo que acabas de aprender. La funcionalidad de CRUD en nuestros sitios de blog y peri\u00f3dicos es com\u00fan en muchas, muchas otras aplicaciones web. Por ejemplo, \u00bfpuedes hacer una aplicaci\u00f3n web de Todo List? Ya tienes todas las herramientas que necesitas. El desarrollo web es un campo muy profundo y todav\u00eda hay mucho m\u00e1s que aprender sobre lo que Django tiene que ofrecer. Por ejemplo, un proyecto Django m\u00e1s avanzado probablemente usar\u00eda m\u00faltiples archivos de configuraci\u00f3n, variables de entorno y PostgreSQL localmente en lugar de SQLite. Incluso podr\u00eda utilizar paquetes de terceros como django-allauth para la autenticaci\u00f3n social, django-debug-toolbar para la depuraci\u00f3n, y django-extensions para las ventajas adicionales. La mejor manera de aprender m\u00e1s sobre Django y el desarrollo web en general es pensar en un proyecto que quieras construir y luego aprender paso a paso lo que necesitas para completarlo. Un recurso adicional que puede ayudarte es DjangoX, que es un proyecto de inicio en el mundo real que cuenta con autenticaci\u00f3n social y m\u00e1s. Tambi\u00e9n puedes suscribirte al bolet\u00edn de Django para principiantes para recibir actualizaciones peri\u00f3dicas sobre nuevos contenidos y descuentos en futuros libros. Y un \u00faltimo recurso es mi propio sitio web personal, wsvincent.com, que se actualiza regularmente y ya presenta art\u00edculos sobre algunas de estas t\u00e9cnicas avanzadas: Autenticaci\u00f3n social Django Mega-tutorial de acceso a Django Django, PostgreSQL y Docker Tutorial del marco de descanso de Django Marco de descanso de Django con React Recursos de Django Para continuar aprendiendo Django, recomiendo trabajar a trav\u00e9s de los siguientes tutoriales gratuitos en l\u00ednea: - Tutorial de encuestas oficiales - Tutorial de las chicas de Django - MDN: Marco Web Django - Una completa gu\u00eda para principiantes de Django Tambi\u00e9n recomiendo encarecidamente Two Scoops of Django 1.11: Best Practices for the Django Web Framework, que es la actual biblia de mejores pr\u00e1cticas para los desarrolladores de Django. Libros de Python Si eres nuevo en Python, hay varios libros excelentes disponibles para principiantes y avanzados Pythonistas: - Python Crash Course es una fant\u00e1stica introducci\u00f3n a Python que tambi\u00e9n te lleva a trav\u00e9s de tres proyectos del mundo real, incluyendo una aplicaci\u00f3n de Django. - Think Python introduce los fundamentos de Python y de la inform\u00e1tica en el al mismo tiempo. - Automatizar las cosas aburridas es otra gran gu\u00eda para aprender y usar Python en el mundo real. - La Gu\u00eda del autoestopista para Python cubre las mejores pr\u00e1cticas en la programaci\u00f3n de Python. - Python Tricks demuestra c\u00f3mo escribir c\u00f3digo python. - Effective Python es una excelente gu\u00eda no s\u00f3lo para Python sino para la programaci\u00f3n en general. - Fluent Python es asombroso y proporciona un profundo entendimiento del lenguaje Python. Blogs a seguir Estos sitios proporcionan escritos regulares de alta calidad sobre Python y el desarrollo de la web. - Real Python - Dan Bader - Trey Hunner - Pila completa de pit\u00f3n - Ned Batchelder - Armin Ronacher - Kenneth Reitz - Daniel Greenfeld Comentarios Si has conseguido terminar el libro entero, me encantar\u00eda escuchar tus pensamientos. \u00bfQu\u00e9 te gust\u00f3 o no te gust\u00f3? \u00bfQu\u00e9 \u00e1reas fueron especialmente dif\u00edciles? \u00bfY qu\u00e9 nuevo contenido te gustar\u00eda ver? Me pueden contactar en will@wsvincent.com.","title":"Conclusi\u00f3n"},{"location":"18_docker/","text":"18. Docker La configuraci\u00f3n adecuada de un entorno de desarrollo local sigue siendo un gran reto a pesar de todos los otros avances de la programaci\u00f3n moderna. Simplemente hay demasiadas variables: diferentes ordenadores , sistemas operativos , versiones de lenguajes y frameworks , opciones de entornos virtuales , y as\u00ed sucesivamente. Cuando se a\u00f1ade el reto de trabajar en equipo en un entorno en el que todos necesitan tener la misma configuraci\u00f3n, el problema se magnifica. En los \u00faltimos a\u00f1os ha surgido una soluci\u00f3n: Docker . Aunque s\u00f3lo tiene unos pocos a\u00f1os, Docker se ha convertido r\u00e1pidamente en la opci\u00f3n por defecto para muchos desarrolladores que trabajan en proyectos a nivel de producci\u00f3n. Con Docker finalmente es posible reproducir un entorno de producci\u00f3n de forma fiel y fiable localmente, desde la versi\u00f3n adecuada de Python hasta la instalaci\u00f3n de Django a la par de ejecutar servicios adicionales como una base de datos a nivel de producci\u00f3n. Esto significa que ya no es importante si se desarrolla en un equipo Linux, Mac o Windows. Todo funciona dentro del mismo Docker. Docker tambi\u00e9n facilita exponencialmente la colaboraci\u00f3n en equipo. Atr\u00e1s quedaron los d\u00edas de compartir archivos README largos y obsoletos para a\u00f1adir un nuevo desarrollador a un proyecto de grupo. En lugar de eso, con Docker s\u00f3lo se tienen que compartir dos archivos: Dockerfile y docker-compose.yml y el desarrollador puede tener la confianza de que su entorno de desarrollo local es exactamente igual que el del resto del equipo . Docker no es una tecnolog\u00eda perfecta. Todav\u00eda es relativamente nueva y compleja bajo el cap\u00f3; a\u00fan est\u00e1 en desarrollo activo. Pero aspira a la promesa de una pol\u00edtica coherente y a un entorno de desarrollo compartible, que pueda ejecutarse localmente en cualquier ordenador o desplegado en cualquier servidor, lo que lo convierte en una opci\u00f3n s\u00f3lida. 18.1. \u00bfQu\u00e9 es Docker? Docker es una forma de aislar todo un sistema operativo a trav\u00e9s de contenedores Linux que son un tipo de virtualizaci\u00f3n. La virtualizaci\u00f3n tiene sus ra\u00edces en los inicios de la inform\u00e1tica cuando las computadoras grandes y caras eran la norma. \u00bfC\u00f3mo podr\u00edan varios programadores utilizar la misma m\u00e1quina?. La respuesta fue la virtualizaci\u00f3n y espec\u00edficamente las m\u00e1quinas virtuales que son copias completas de un sistema inform\u00e1tico desde el sistema operativo en adelante. Cuando se alquila un espacio en un proveedor de cloud computing como Amazon Web Services (AWS) normalmente no se proporciona una pieza de hardware dedicada. En lugar de eso, se comparte un servidor f\u00edsico con otros clientes. Pero como cada cliente tiene su propio sistema virtual que se ejecuta en el servidor, le parece que tiene el suyo propio. Esta tecnolog\u00eda es la que hace posible a\u00f1adir o eliminar servidores de un servicio de cloud de forma r\u00e1pida y sencilla. Se trata en gran medida de software entre bastidores, no de hardware real. \u00bfCu\u00e1l es el inconveniente de una m\u00e1quina virtual? Tama\u00f1o y velocidad. Un sistema operativo hu\u00e9sped t\u00edpico ( guest ) puede ocupar f\u00e1cilmente hasta 700MB de tama\u00f1o. As\u00ed que si un servidor f\u00edsico soporta tres m\u00e1quinas virtuales, eso es al menos 2,1 GB de espacio en disco ocupado junto con el resto de necesidades para otros recursos como CPU y memoria. Al entrar en Docker, la idea clave es que la mayor\u00eda de los ordenadores dependen del mismo sistema operativo Linux . \u00bfY si virtualizamos desde la capa de Linux hacia arriba? \u00bfNo proporcionar\u00eda eso una forma m\u00e1s r\u00e1pida y ligera de duplicar gran parte de la misma funcionalidad? La respuesta es s\u00ed. Y en los \u00faltimos a\u00f1os los contenedores Linux se han vuelto muy populares. Para la mayor\u00eda de las aplicaciones -especialmente las aplicaciones web- una m\u00e1quina virtual proporciona mucho m\u00e1s recursos de los que se necesitan y un contenedor es m\u00e1s que suficiente. Esto, fundamentalmente, es Docker: \u00a1una forma de implementar contenedores Linux! Una analog\u00eda que podemos usar es la de los edificios y los apartamentos. Las m\u00e1quinas virtuales son como viviendas: edificios independientes con su propia infraestructura, incluida la fontaner\u00eda y calefacci\u00f3n, as\u00ed como cocina, ba\u00f1os, dormitorios, etc. Los contenedores Docker son como los apartamentos: comparten una infraestructura com\u00fan como la fontaner\u00eda y la calefacci\u00f3n, pero vienen en varios tama\u00f1os que se ajustan a las necesidades exactas de un propietario. 18.2. Contenedores vs. Entornos Virtuales Como programador de Python se debe estar familiarizado con el concepto de entornos virtuales que son una forma de aislar los paquetes Python. Gracias al entorno virtual, una computadora puede ejecutar m\u00faltiples proyectos localmente. Por ejemplo, el Proyecto A podr\u00eda usar Python 3.4 y Django 1.11 entre otras dependencias; mientras que el Proyecto B usa Python 3.8 y Django 2.2. Configurando un entorno virtual dedicado en cada proyecto se puede gestionar estos diferentes paquetes de software sin contaminar nuestro entorno global. Hay una peque\u00f1a confusi\u00f3n derivada de que hay m\u00faltiples herramientas en este momento para implementar un entorno virtual: desde virtualenv , venv a Pipenv , pero fundamentalmente todas hacen lo mismo. La mayor distinci\u00f3n entre los entornos virtuales y Docker es que los entornos virtuales s\u00f3lo pueden aislar paquetes Python. No pueden aislar a los no-Python como una base de datos PostgreSQL o MySQL. Y siguen dependiendo del sistema global; de la instalaci\u00f3n de Python a nivel de sistema (en otras palabras, de su ordenador). Los entornos virtuales apuntan a una instalaci\u00f3n Python existente; no contienen Python en s\u00ed mismos . Los contenedores Linux van un paso m\u00e1s all\u00e1 y a\u00edslan todo el sistema operativo , no s\u00f3lo las partes de Python. En otras palabras, instalaremos el propio Python dentro de Docker, as\u00ed como se instalar\u00e1 y ejecutar\u00e1 en \u00e9l la base de datos a nivel de producci\u00f3n. Docker en s\u00ed mismo es un tema complejo y no se va a profundizar tanto en \u00e9l, sin embargo, es importante comprender sus antecedentes y componentes clave. Si quieres aprender m\u00e1s sobre \u00e9l puedes acceder a diferentes cursos de los que dispones en la plataforma de OpenWebinars . 18.3. Instalar Docker Ok, suficiente teor\u00eda. Empecemos a usar Docker y Django juntos. El primer paso es registrarse en Docker Hub para obtener una cuenta gratuita y luego instalar la aplicaci\u00f3n de escritorio Docker en nuestra m\u00e1quina local: Docker para Linux Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker Docker para Mac Docker para Windows Esta descarga puede tomarse alg\u00fan tiempo ya que es un archivo grande. Una vez que Docker se haya terminado de instalar, podemos confirmar que se est\u00e1 ejecutando la versi\u00f3n correcta escribiendo docker --version en la l\u00ednea de comandos. Debe ser al menos la versi\u00f3n 18. $ docker --version Docker versi\u00f3n 19.03.5-ce, build 633a0ea838 Docker se utiliza a menudo con una herramienta adicional, Docker Compose , para ayudar a automatizar los comandos. Docker Compose se incluye con las descargas de Mac y Windows, pero si se est\u00e1 en Linux, tendr\u00e1 que a\u00f1adirse manualmente. Puede hacerse ejecutando el comando sudo pip install docker-compose despu\u00e9s de que la instalaci\u00f3n de Docker haya finalizado. Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker-compose . (Si surgen problemas con alg\u00fan fichero ya instalado en el sistema, borrar todos aquellos ficheros que est\u00e9n involucrados y proceder con la instalaci\u00f3n como se indica) 18.4. Docker, Hola Mundo Docker se env\u00eda con su propia imagen de \"Hello, World\" que es un primer paso \u00fatil para comprobar la instalaci\u00f3n. Introducir en la l\u00ednea de comandos el comando docker run hello-world . Esto descargar\u00e1 una imagen Docker oficial y luego se ejecutar\u00e1 dentro de un contenedor. Se discutir\u00e1 sobre las im\u00e1genes y los contenedores en breve. $ docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:b8ba256769a0ac28dd126d584e0a2011cd2877f3f76e093a7ae560f2a5301c00 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ El comando docker info nos permite inspeccionar Docker. Contendr\u00e1 una gran cantidad de informaci\u00f3n, pero si nos centramos en las l\u00edneas superiores tenemos 1 contenedor que se detenido y 1 imagen. $ docker info Client: Debug Mode: false Server: Containers: 1 Running: 0 Paused: 0 Stopped: 1 Images: 1 ... 18.5. Django, Hola mundo Ahora vamos a crear un proyecto de Django \"Hello, World\" que se ejecuta localmente en nuestro ordenador y luego lo moveremos por completo dentro de Docker para que se pueda ver c\u00f3mo encajan todas las piezas. El primer paso es elegir una ubicaci\u00f3n para nuestro c\u00f3digo. Esto puede ser en cualquier parte del ordenador pero si se est\u00e1 en Linux, una ubicaci\u00f3n f\u00e1cil de encontrar es el Escritorio . Desde la l\u00ednea de comandos navegamos hasta el Escritorio y creamos un directorio code para todos los ejemplos: $ cd ~/Desktop $ mkdir code && cd code Luego creeamos un directorio hello donde instalaremos Django usando Pipenv que crea un archivo Pipfile y un archivo Pipfile.lock. Activamos el entorno virtual con el comando shell . $ mkdir hello && cd hello pipenv install django==2.2.7 $ pipenv shell (hello) $ Si se necesita ayuda para instalar Pipenv o Python 3, se pueden encontrar m\u00e1s detalles aqu\u00ed . Ahora podemos usar el comando startproject para crear un nuevo proyecto de Django llamado hello_project . A\u00f1adir un punto, . , al final del comando es un paso opcional pero muchos desarrolladores de Django lo hacen. Sin el punto, Django a\u00f1ade un directorio adicional al proyecto; con el . , esto no ocurre. Por \u00faltimo, utilice el comando migrate para inicializar la base de datos e iniciar la web local con el comando runserver . (hola) $ django-admin startproject hello_project . (hola) $ python manage.py migrate (hola) $ python manage.py runserver Suponiendo que todo ha funcionado correctamente, ahora deber\u00edamos poder navegar para ver el la p\u00e1gica de bienvenida de Django en http://127.0.0.1:8000/ en su navegador web. 18.6. Pages App Ahora haremos una p\u00e1gina de inicio simple creando una pages app espec\u00edfica para ello. Parar el servidor local escribiendo Control+c y luego usar el comando startapp a\u00f1adiendo el nombre de la pages que se desee. (hola) $ python manage.py startapp pages Django instala autom\u00e1ticamente un nuevo directorio de p\u00e1ginas y varios archivos para nosotros. Pero incluso aunque la app ha sido creada, nuestro hello_project no la reconocer\u00e1 hasta que la a\u00f1adamos a la configuraci\u00f3n de INSTALLED_APPS de archivo hello_project/settings.py . Django carga las apps de arriba a abajo, por lo que, en general, es una buena pr\u00e1ctica a\u00f1adir las nuevas aplicaciones debajo de las aplicaciones incorporadas en las que pueden confiar, tales como admin , auth , y todas las aplicaciones restantes. T\u00e9ngase en cuenta que si bien es posible simplemente escribir el nombre de la app, pages , es mejor escribir la pages.apps.apps.PagesConfig completa lo que abre m\u00e1s posibilidades en la configuraci\u00f3n de las apps. # hello_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'pages.apps.apps.PagesConfig', # nuevo ] Ahora podemos establecer la ruta URL para la app pages . Ya que queremos que nuestro mensaje aparezca en la p\u00e1gina de inicio usaremos la cadena vac\u00eda '' . No olvidar a\u00f1adir la importaci\u00f3n de include en la segunda l\u00ednea tambi\u00e9n. # hello_project/urls.py from django.contrib import admin from django.urls import path, include # nuevo urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # nuevo ] En lugar de crear una plantilla en este punto, podemos simplemente codificar un mensaje en nuestra capa de la vista pages/views.py que producir\u00e1 la cadena Hello, World! . # pages/views.py from django.http import HttpResponse def home_page_view(request): return HttpResponse('Hello, World!') \u00bfQu\u00e9 es lo siguiente? El \u00faltimo paso es crear un archivo urls.py dentro de la app pages y enlazarlo to home_page_view . Si se encuentra en un ordenador Mac o Linux, el comando touch se puede usar desde la l\u00ednea de comandos para crear nuevos archivos. En Windows habr\u00e1 que crear el nuevo archivo con un editor de texto. (hola) $ touch pages/urls.py En el editor de texto importar path en la primera l\u00ednea, a\u00f1adir la home_page_view , y colocar su ruta para otra vez ser la cadena vac\u00eda ''. N\u00f3tese que tambi\u00e9n provee un nombre opcional, home , para esta ruta lo cual es una buena pr\u00e1ctica. # pages/urls.py from django.urls import path from .views import home_page_view urlpatterns = [ path('', home_page_view, name='home') ] El flujo completo de nuestra p\u00e1gina web Django es el siguiente: cuando un usuario va a su homepage ser\u00e1 primero encaminado a hello_project/urls.py luego a pages/urls.py y finalmente dirigido a la home_page_view que devuelve la cadena Hello, World! El trabajo para una p\u00e1gina de inicio b\u00e1sica ha terminado. Iniciemos de nuevo el servidor local. (hola) $ python manage.py runserver Si se actualiza el navegador web en http://127.0.0.1:8000/, ahora saldr\u00e1 nuestro deseado mensaje. Ahora es el momento de cambiar a Docker. Detengamos de nuevo el servidor local con Ctrl+C y salgamos de nuestro entorno virtual, que ya no necesitamos, escribiendo exit . (hello) $ exit $ \u00bfC\u00f3mo sabemos que nuestro entorno virtual ya no est\u00e1 activo? No habr\u00e1 un par\u00e9ntesis alrededor del nombre de directorio en el prompt. Cualquier comando Django normal que se intente ejecutar en este punto fallar\u00e1. Por ejemplo, probar python manage.py runserver para ver lo que ocurre. $ python manage.py runserver File \"./manage.py\", line 14 ) from exc ^ SyntaxError: invalid syntax Esto significa que estamos totalmente fuera del entorno virtual y preparados para Docker. 18.7. Im\u00e1genes, Contenedores y el \"Docker Host\" Una imagen Docker es una instant\u00e1nea en el tiempo de lo que contiene un proyecto. Est\u00e1 representado por un Dockerfile y es literalmente una lista de instrucciones que deben ser construidas/ejecutadas. Un contenedor Docker es una instancia en ejecuci\u00f3n de una imagen. Para continuar con la analog\u00eda de nuestro apartamento de antes, la imagen es el plano o conjunto de planos del apartamento; el contenedor es el edificio real totalmente construido. El tercer concepto central es el Docker host , que es el sistema operativo subyacente. Es posible tener varios contenedores ejecut\u00e1ndose dentro de un mismo Docker host . Cuando nos referimos a c\u00f3digo o procesos que se ejecutan en el Docker, significa que se ejecutan en el Docker host . Creemos nuestro primer Dockerfile para ver toda esta teor\u00eda en acci\u00f3n. $ touch Dockerfile Dentro del Dockerfile agregamos el siguiente c\u00f3digo que recorreremos l\u00ednea por l\u00ednea m\u00e1s abajo. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Los Dockerfiles se leen de arriba hacia abajo cuando se crea una imagen. La primera instrucci\u00f3n debe ser el comando FROM que nos permite importar una imagen base que usar, en nuestro caso Python 3.8 . Luego usamos el comando ENV para establecer dos variables de entorno: PYTHONUNBUFFERED asegura que la salida de nuestra consola se vea familiar y que no est\u00e9 almacenada en un b\u00fafer de Docker, lo cual no queremos PYTHONDONTWRITEBYTECODE significa que Python no intentar\u00e1 escribir archivos .pyc , que tampoco deseamos A continuaci\u00f3n usamos WORKDIR para establecer una ruta de directorio de trabajo por defecto dentro de nuestra imagen llamada code que es donde guardaremos nuestro c\u00f3digo. Si no lo hicimos, entonces cada vez que queramos ejecutar comandos dentro de nuestro contenedor tendr\u00edamos que escribir una ruta muy larga. En su lugar, Docker asumir\u00e1 que queremos ejecutar todos los comandos desde este directorio. Para nuestras dependencias estamos usando pipenv , as\u00ed que copiamos tanto el archivo Pipfile como el archivo Pipfile.lock en el directorio /code/ en Docker. Vale la pena tomarse un momento para explicar por qu\u00e9 pipenv crea un Pipfile.lock . El concepto de bloqueo de archivos no es exclusivo de Python o Pipenv; de hecho ya est\u00e1 presente en los gestores de paquetes de los lenguajes de programaci\u00f3n m\u00e1s modernos: Gemfile.lock en Ruby, yarn.lock en JavaScript, composer.lock en PHP, etc. Pipenv fue el primer proyecto popular en incorporarlos en la paqueter\u00eda de Python. La ventaja de un archivo de bloqueo es que esto conduce a una construcci\u00f3n determinista: no importa cu\u00e1ntas veces se instalen los paquetes de software, se obtendr\u00e1 el mismo resultado. Sin un fichero lock que \"bloquee\" las dependencias y su orden, no se cumplir\u00eda necesariamente. Lo que significa que dos miembros del equipo que instalan la misma lista de software pueden tener instalaciones de construcci\u00f3n ligeramente diferentes. Cuando estamos trabajando con Docker donde hay c\u00f3digo tanto local en nuestro ordenador como tambi\u00e9n dentro de Docker, el potencial de conflictos de Pipfile.lock surge cuando se actualizan paquetes de software. Siguiendo adelante usamos el comando RUN para instalar primero pipenv y luego pipenv install para instalar los paquetes de software listados en nuestro Pipfile.lock, actualmente s\u00f3lo Django. Es un es importante a\u00f1adir tambi\u00e9n el indicador --system , ya que por defecto Pipenv buscar\u00e1 el par\u00e1metro en el que instalar cualquier paquete, pero como estamos dentro de Docker ahora, t\u00e9cnicamente no hay ning\u00fan entorno virtual. En cierto modo, el contenedor Docker es nuestro entorno virtual y mucho m\u00e1s. As\u00ed que debemos usar la bandera --system para asegurarnos de que nuestros paquestes est\u00e1n disponibles en todo el Docker para nosotros. Como paso final copiamos el resto de nuestro c\u00f3digo local en el directorio /code/ dentro de Docker. \u00bfPor qu\u00e9 copiamos el c\u00f3digo local dos veces, primero el Pipfile y Pipfile.lock y luego el resto? La raz\u00f3n es que las im\u00e1genes se crean en base a instrucciones de arriba hacia abajo por lo que queremos que las cosas que cambian a menudo -como nuestro c\u00f3digo local- sea el \u00faltimo. De esta manera s\u00f3lo tenemos que regenerar esa parte de la imagen ante un cambio y no se reinstala todo cada vez que lo haya. Como el software de los paquetes contenidos en nuestros Pipfile y Pipfile.lock cambian con poca frecuencia, implica que no tiene sentido copiarlos e instalarlos antes. Nuestras instrucciones de imagen ya est\u00e1n hechas, as\u00ed que vamos a construir la imagen usando el comando docker build . . El punto . indica que el directorio actual es donde se debe ejecutar el comando comando. Se genera una gran cantidad de texto en pantalla; s\u00f3lo se incluye las dos primeras l\u00edneas y las tres \u00faltimas. $ docker build . Sending build context to Docker daemon 154.1kB Step 1/7 : FROM python:3.8 ... Step 7/7 : COPY . /code/ ---> a48b2acb1fcc Successfully built a48b2acb1fcc Pasando a lo siguiente, ahora necesitamos crear un archivo docker-composition.yml para controlar c\u00f3mo ejecutar el comando que ser\u00e1 construido en base a nuestra imagen de Dockerfile . $ touch docker-compose.yml Contendr\u00e1 el siguiente c\u00f3digo version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 En la l\u00ednea superior se especifica la versi\u00f3n m\u00e1s reciente de Docker Compose que es actualmente 3.7 (no confundir con la versi\u00f3n de Python que puede ser bien parecida) A continuaci\u00f3n, especificamos qu\u00e9 services (o contenedores) queremos que funcionen en nuestro \"Docker host\". Es posible tener varios services funcionando, pero por ahora s\u00f3lo tenemos uno para el servidor web . Especificaremos c\u00f3mo construir el contenedor diciendo, \"Busca el directorio en curso . el Dockerfile \" . Luego, dentro del contenedor, ejecute el comando para arrancar el servidor local. El montaje de los vol\u00famenes sincroniza autom\u00e1ticamente el sistema de archivos Docker con nuestro sistema de archivos local. \u00a1Esto significa que no tenemos que reconstruir la imagen cada vez que cambiamos un solo fichero!. Por \u00faltimo especificamos los puertos ( ports ) a exponer dentro de Docker que solo ser\u00e1 el 8000, que es el puerto Django por defecto. Si es la primera vez que utiliza Docker, es muy probable que se est\u00e9 muy confundido en este momento. No hay motivo de preocupaci\u00f3n. Crearemos m\u00faltiples im\u00e1genes y contenedores Docker y, con la pr\u00e1ctica, el flujo comenzar\u00e1 a tener m\u00e1s sentido. Se ver\u00e1 como se usan archivos Dockerfile y docker-composition.yml muy similares en cada uno de los proyectos. El paso final es ejecutar nuestro contenedor Docker usando el comando docker-compose up . Este comando resultar\u00e1 en otro largo flujo de texto de salida en la l\u00ednea de comandos. $ docker-compose up Creating network \"hello_default\" with the default driver Building web Step 1/7 : FROM python:3.8 ... Creating hello_web_1 ... done Attaching to hello_web_1 web_1 | Performing system checks... web_1 | web_1 | System check identified no issues (0 silenced). web_1 | September 20, 2019 - 17:21:57 web_1 | Django version 2.2.5, using settings 'hello_project.settings' web_1 | Starting development server at http://0.0.0.0:8000/ web_1 | Quit the server with CONTROL-C. Para confirmar que realmente funcion\u00f3, volveremos a poner http://127.0.0.1:8000/ en el navegador web. Actualizaremos la p\u00e1gina y aparecer\u00e1 la p\u00e1gina \"Hello, World\". Django se est\u00e1 ejecutando ahora puramente dentro de un contenedor Docker. No estamos trabajando dentro de un entorno virtual local. No ejecutamos el comando runserver . Todo nuestro c\u00f3digo y nuestro servidor Django se est\u00e1 ejecutando desde dentro de un Docker aut\u00f3nomo. !Todo un \u00e9xito! Detendremos el contenedor con Ctrl+C y adem\u00e1s escribiremos docker-compose down . Los contenedores absorben una gran cantidad de memoria, as\u00ed que es una buena idea detenerlos de esta manera cuando hayamos terminado de usarlos. Los contenedores se han concebido para ser est\u00e1ticos (no pueden cambiar), por lo que utilizamos volumes para copiar nuestro c\u00f3digo en sitios donde si que pueda guardarse. $ docker-compose down Removing hello_web_1 ... done Removing network hello_default","title":"18. Docker"},{"location":"18_docker/#18-docker","text":"La configuraci\u00f3n adecuada de un entorno de desarrollo local sigue siendo un gran reto a pesar de todos los otros avances de la programaci\u00f3n moderna. Simplemente hay demasiadas variables: diferentes ordenadores , sistemas operativos , versiones de lenguajes y frameworks , opciones de entornos virtuales , y as\u00ed sucesivamente. Cuando se a\u00f1ade el reto de trabajar en equipo en un entorno en el que todos necesitan tener la misma configuraci\u00f3n, el problema se magnifica. En los \u00faltimos a\u00f1os ha surgido una soluci\u00f3n: Docker . Aunque s\u00f3lo tiene unos pocos a\u00f1os, Docker se ha convertido r\u00e1pidamente en la opci\u00f3n por defecto para muchos desarrolladores que trabajan en proyectos a nivel de producci\u00f3n. Con Docker finalmente es posible reproducir un entorno de producci\u00f3n de forma fiel y fiable localmente, desde la versi\u00f3n adecuada de Python hasta la instalaci\u00f3n de Django a la par de ejecutar servicios adicionales como una base de datos a nivel de producci\u00f3n. Esto significa que ya no es importante si se desarrolla en un equipo Linux, Mac o Windows. Todo funciona dentro del mismo Docker. Docker tambi\u00e9n facilita exponencialmente la colaboraci\u00f3n en equipo. Atr\u00e1s quedaron los d\u00edas de compartir archivos README largos y obsoletos para a\u00f1adir un nuevo desarrollador a un proyecto de grupo. En lugar de eso, con Docker s\u00f3lo se tienen que compartir dos archivos: Dockerfile y docker-compose.yml y el desarrollador puede tener la confianza de que su entorno de desarrollo local es exactamente igual que el del resto del equipo . Docker no es una tecnolog\u00eda perfecta. Todav\u00eda es relativamente nueva y compleja bajo el cap\u00f3; a\u00fan est\u00e1 en desarrollo activo. Pero aspira a la promesa de una pol\u00edtica coherente y a un entorno de desarrollo compartible, que pueda ejecutarse localmente en cualquier ordenador o desplegado en cualquier servidor, lo que lo convierte en una opci\u00f3n s\u00f3lida.","title":"18. Docker"},{"location":"18_docker/#181-que-es-docker","text":"Docker es una forma de aislar todo un sistema operativo a trav\u00e9s de contenedores Linux que son un tipo de virtualizaci\u00f3n. La virtualizaci\u00f3n tiene sus ra\u00edces en los inicios de la inform\u00e1tica cuando las computadoras grandes y caras eran la norma. \u00bfC\u00f3mo podr\u00edan varios programadores utilizar la misma m\u00e1quina?. La respuesta fue la virtualizaci\u00f3n y espec\u00edficamente las m\u00e1quinas virtuales que son copias completas de un sistema inform\u00e1tico desde el sistema operativo en adelante. Cuando se alquila un espacio en un proveedor de cloud computing como Amazon Web Services (AWS) normalmente no se proporciona una pieza de hardware dedicada. En lugar de eso, se comparte un servidor f\u00edsico con otros clientes. Pero como cada cliente tiene su propio sistema virtual que se ejecuta en el servidor, le parece que tiene el suyo propio. Esta tecnolog\u00eda es la que hace posible a\u00f1adir o eliminar servidores de un servicio de cloud de forma r\u00e1pida y sencilla. Se trata en gran medida de software entre bastidores, no de hardware real. \u00bfCu\u00e1l es el inconveniente de una m\u00e1quina virtual? Tama\u00f1o y velocidad. Un sistema operativo hu\u00e9sped t\u00edpico ( guest ) puede ocupar f\u00e1cilmente hasta 700MB de tama\u00f1o. As\u00ed que si un servidor f\u00edsico soporta tres m\u00e1quinas virtuales, eso es al menos 2,1 GB de espacio en disco ocupado junto con el resto de necesidades para otros recursos como CPU y memoria. Al entrar en Docker, la idea clave es que la mayor\u00eda de los ordenadores dependen del mismo sistema operativo Linux . \u00bfY si virtualizamos desde la capa de Linux hacia arriba? \u00bfNo proporcionar\u00eda eso una forma m\u00e1s r\u00e1pida y ligera de duplicar gran parte de la misma funcionalidad? La respuesta es s\u00ed. Y en los \u00faltimos a\u00f1os los contenedores Linux se han vuelto muy populares. Para la mayor\u00eda de las aplicaciones -especialmente las aplicaciones web- una m\u00e1quina virtual proporciona mucho m\u00e1s recursos de los que se necesitan y un contenedor es m\u00e1s que suficiente. Esto, fundamentalmente, es Docker: \u00a1una forma de implementar contenedores Linux! Una analog\u00eda que podemos usar es la de los edificios y los apartamentos. Las m\u00e1quinas virtuales son como viviendas: edificios independientes con su propia infraestructura, incluida la fontaner\u00eda y calefacci\u00f3n, as\u00ed como cocina, ba\u00f1os, dormitorios, etc. Los contenedores Docker son como los apartamentos: comparten una infraestructura com\u00fan como la fontaner\u00eda y la calefacci\u00f3n, pero vienen en varios tama\u00f1os que se ajustan a las necesidades exactas de un propietario.","title":"18.1. \u00bfQu\u00e9 es Docker?"},{"location":"18_docker/#182-contenedores-vs-entornos-virtuales","text":"Como programador de Python se debe estar familiarizado con el concepto de entornos virtuales que son una forma de aislar los paquetes Python. Gracias al entorno virtual, una computadora puede ejecutar m\u00faltiples proyectos localmente. Por ejemplo, el Proyecto A podr\u00eda usar Python 3.4 y Django 1.11 entre otras dependencias; mientras que el Proyecto B usa Python 3.8 y Django 2.2. Configurando un entorno virtual dedicado en cada proyecto se puede gestionar estos diferentes paquetes de software sin contaminar nuestro entorno global. Hay una peque\u00f1a confusi\u00f3n derivada de que hay m\u00faltiples herramientas en este momento para implementar un entorno virtual: desde virtualenv , venv a Pipenv , pero fundamentalmente todas hacen lo mismo. La mayor distinci\u00f3n entre los entornos virtuales y Docker es que los entornos virtuales s\u00f3lo pueden aislar paquetes Python. No pueden aislar a los no-Python como una base de datos PostgreSQL o MySQL. Y siguen dependiendo del sistema global; de la instalaci\u00f3n de Python a nivel de sistema (en otras palabras, de su ordenador). Los entornos virtuales apuntan a una instalaci\u00f3n Python existente; no contienen Python en s\u00ed mismos . Los contenedores Linux van un paso m\u00e1s all\u00e1 y a\u00edslan todo el sistema operativo , no s\u00f3lo las partes de Python. En otras palabras, instalaremos el propio Python dentro de Docker, as\u00ed como se instalar\u00e1 y ejecutar\u00e1 en \u00e9l la base de datos a nivel de producci\u00f3n. Docker en s\u00ed mismo es un tema complejo y no se va a profundizar tanto en \u00e9l, sin embargo, es importante comprender sus antecedentes y componentes clave. Si quieres aprender m\u00e1s sobre \u00e9l puedes acceder a diferentes cursos de los que dispones en la plataforma de OpenWebinars .","title":"18.2. Contenedores vs. Entornos Virtuales"},{"location":"18_docker/#183-instalar-docker","text":"Ok, suficiente teor\u00eda. Empecemos a usar Docker y Django juntos. El primer paso es registrarse en Docker Hub para obtener una cuenta gratuita y luego instalar la aplicaci\u00f3n de escritorio Docker en nuestra m\u00e1quina local: Docker para Linux Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker Docker para Mac Docker para Windows Esta descarga puede tomarse alg\u00fan tiempo ya que es un archivo grande. Una vez que Docker se haya terminado de instalar, podemos confirmar que se est\u00e1 ejecutando la versi\u00f3n correcta escribiendo docker --version en la l\u00ednea de comandos. Debe ser al menos la versi\u00f3n 18. $ docker --version Docker versi\u00f3n 19.03.5-ce, build 633a0ea838 Docker se utiliza a menudo con una herramienta adicional, Docker Compose , para ayudar a automatizar los comandos. Docker Compose se incluye con las descargas de Mac y Windows, pero si se est\u00e1 en Linux, tendr\u00e1 que a\u00f1adirse manualmente. Puede hacerse ejecutando el comando sudo pip install docker-compose despu\u00e9s de que la instalaci\u00f3n de Docker haya finalizado. Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker-compose . (Si surgen problemas con alg\u00fan fichero ya instalado en el sistema, borrar todos aquellos ficheros que est\u00e9n involucrados y proceder con la instalaci\u00f3n como se indica)","title":"18.3. Instalar Docker"},{"location":"18_docker/#184-docker-hola-mundo","text":"Docker se env\u00eda con su propia imagen de \"Hello, World\" que es un primer paso \u00fatil para comprobar la instalaci\u00f3n. Introducir en la l\u00ednea de comandos el comando docker run hello-world . Esto descargar\u00e1 una imagen Docker oficial y luego se ejecutar\u00e1 dentro de un contenedor. Se discutir\u00e1 sobre las im\u00e1genes y los contenedores en breve. $ docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:b8ba256769a0ac28dd126d584e0a2011cd2877f3f76e093a7ae560f2a5301c00 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ El comando docker info nos permite inspeccionar Docker. Contendr\u00e1 una gran cantidad de informaci\u00f3n, pero si nos centramos en las l\u00edneas superiores tenemos 1 contenedor que se detenido y 1 imagen. $ docker info Client: Debug Mode: false Server: Containers: 1 Running: 0 Paused: 0 Stopped: 1 Images: 1 ...","title":"18.4. Docker, Hola Mundo"},{"location":"18_docker/#185-django-hola-mundo","text":"Ahora vamos a crear un proyecto de Django \"Hello, World\" que se ejecuta localmente en nuestro ordenador y luego lo moveremos por completo dentro de Docker para que se pueda ver c\u00f3mo encajan todas las piezas. El primer paso es elegir una ubicaci\u00f3n para nuestro c\u00f3digo. Esto puede ser en cualquier parte del ordenador pero si se est\u00e1 en Linux, una ubicaci\u00f3n f\u00e1cil de encontrar es el Escritorio . Desde la l\u00ednea de comandos navegamos hasta el Escritorio y creamos un directorio code para todos los ejemplos: $ cd ~/Desktop $ mkdir code && cd code Luego creeamos un directorio hello donde instalaremos Django usando Pipenv que crea un archivo Pipfile y un archivo Pipfile.lock. Activamos el entorno virtual con el comando shell . $ mkdir hello && cd hello pipenv install django==2.2.7 $ pipenv shell (hello) $ Si se necesita ayuda para instalar Pipenv o Python 3, se pueden encontrar m\u00e1s detalles aqu\u00ed . Ahora podemos usar el comando startproject para crear un nuevo proyecto de Django llamado hello_project . A\u00f1adir un punto, . , al final del comando es un paso opcional pero muchos desarrolladores de Django lo hacen. Sin el punto, Django a\u00f1ade un directorio adicional al proyecto; con el . , esto no ocurre. Por \u00faltimo, utilice el comando migrate para inicializar la base de datos e iniciar la web local con el comando runserver . (hola) $ django-admin startproject hello_project . (hola) $ python manage.py migrate (hola) $ python manage.py runserver Suponiendo que todo ha funcionado correctamente, ahora deber\u00edamos poder navegar para ver el la p\u00e1gica de bienvenida de Django en http://127.0.0.1:8000/ en su navegador web.","title":"18.5. Django, Hola mundo"},{"location":"18_docker/#186-pages-app","text":"Ahora haremos una p\u00e1gina de inicio simple creando una pages app espec\u00edfica para ello. Parar el servidor local escribiendo Control+c y luego usar el comando startapp a\u00f1adiendo el nombre de la pages que se desee. (hola) $ python manage.py startapp pages Django instala autom\u00e1ticamente un nuevo directorio de p\u00e1ginas y varios archivos para nosotros. Pero incluso aunque la app ha sido creada, nuestro hello_project no la reconocer\u00e1 hasta que la a\u00f1adamos a la configuraci\u00f3n de INSTALLED_APPS de archivo hello_project/settings.py . Django carga las apps de arriba a abajo, por lo que, en general, es una buena pr\u00e1ctica a\u00f1adir las nuevas aplicaciones debajo de las aplicaciones incorporadas en las que pueden confiar, tales como admin , auth , y todas las aplicaciones restantes. T\u00e9ngase en cuenta que si bien es posible simplemente escribir el nombre de la app, pages , es mejor escribir la pages.apps.apps.PagesConfig completa lo que abre m\u00e1s posibilidades en la configuraci\u00f3n de las apps. # hello_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'pages.apps.apps.PagesConfig', # nuevo ] Ahora podemos establecer la ruta URL para la app pages . Ya que queremos que nuestro mensaje aparezca en la p\u00e1gina de inicio usaremos la cadena vac\u00eda '' . No olvidar a\u00f1adir la importaci\u00f3n de include en la segunda l\u00ednea tambi\u00e9n. # hello_project/urls.py from django.contrib import admin from django.urls import path, include # nuevo urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # nuevo ] En lugar de crear una plantilla en este punto, podemos simplemente codificar un mensaje en nuestra capa de la vista pages/views.py que producir\u00e1 la cadena Hello, World! . # pages/views.py from django.http import HttpResponse def home_page_view(request): return HttpResponse('Hello, World!') \u00bfQu\u00e9 es lo siguiente? El \u00faltimo paso es crear un archivo urls.py dentro de la app pages y enlazarlo to home_page_view . Si se encuentra en un ordenador Mac o Linux, el comando touch se puede usar desde la l\u00ednea de comandos para crear nuevos archivos. En Windows habr\u00e1 que crear el nuevo archivo con un editor de texto. (hola) $ touch pages/urls.py En el editor de texto importar path en la primera l\u00ednea, a\u00f1adir la home_page_view , y colocar su ruta para otra vez ser la cadena vac\u00eda ''. N\u00f3tese que tambi\u00e9n provee un nombre opcional, home , para esta ruta lo cual es una buena pr\u00e1ctica. # pages/urls.py from django.urls import path from .views import home_page_view urlpatterns = [ path('', home_page_view, name='home') ] El flujo completo de nuestra p\u00e1gina web Django es el siguiente: cuando un usuario va a su homepage ser\u00e1 primero encaminado a hello_project/urls.py luego a pages/urls.py y finalmente dirigido a la home_page_view que devuelve la cadena Hello, World! El trabajo para una p\u00e1gina de inicio b\u00e1sica ha terminado. Iniciemos de nuevo el servidor local. (hola) $ python manage.py runserver Si se actualiza el navegador web en http://127.0.0.1:8000/, ahora saldr\u00e1 nuestro deseado mensaje. Ahora es el momento de cambiar a Docker. Detengamos de nuevo el servidor local con Ctrl+C y salgamos de nuestro entorno virtual, que ya no necesitamos, escribiendo exit . (hello) $ exit $ \u00bfC\u00f3mo sabemos que nuestro entorno virtual ya no est\u00e1 activo? No habr\u00e1 un par\u00e9ntesis alrededor del nombre de directorio en el prompt. Cualquier comando Django normal que se intente ejecutar en este punto fallar\u00e1. Por ejemplo, probar python manage.py runserver para ver lo que ocurre. $ python manage.py runserver File \"./manage.py\", line 14 ) from exc ^ SyntaxError: invalid syntax Esto significa que estamos totalmente fuera del entorno virtual y preparados para Docker.","title":"18.6. Pages App"},{"location":"18_docker/#187-imagenes-contenedores-y-el-docker-host","text":"Una imagen Docker es una instant\u00e1nea en el tiempo de lo que contiene un proyecto. Est\u00e1 representado por un Dockerfile y es literalmente una lista de instrucciones que deben ser construidas/ejecutadas. Un contenedor Docker es una instancia en ejecuci\u00f3n de una imagen. Para continuar con la analog\u00eda de nuestro apartamento de antes, la imagen es el plano o conjunto de planos del apartamento; el contenedor es el edificio real totalmente construido. El tercer concepto central es el Docker host , que es el sistema operativo subyacente. Es posible tener varios contenedores ejecut\u00e1ndose dentro de un mismo Docker host . Cuando nos referimos a c\u00f3digo o procesos que se ejecutan en el Docker, significa que se ejecutan en el Docker host . Creemos nuestro primer Dockerfile para ver toda esta teor\u00eda en acci\u00f3n. $ touch Dockerfile Dentro del Dockerfile agregamos el siguiente c\u00f3digo que recorreremos l\u00ednea por l\u00ednea m\u00e1s abajo. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Los Dockerfiles se leen de arriba hacia abajo cuando se crea una imagen. La primera instrucci\u00f3n debe ser el comando FROM que nos permite importar una imagen base que usar, en nuestro caso Python 3.8 . Luego usamos el comando ENV para establecer dos variables de entorno: PYTHONUNBUFFERED asegura que la salida de nuestra consola se vea familiar y que no est\u00e9 almacenada en un b\u00fafer de Docker, lo cual no queremos PYTHONDONTWRITEBYTECODE significa que Python no intentar\u00e1 escribir archivos .pyc , que tampoco deseamos A continuaci\u00f3n usamos WORKDIR para establecer una ruta de directorio de trabajo por defecto dentro de nuestra imagen llamada code que es donde guardaremos nuestro c\u00f3digo. Si no lo hicimos, entonces cada vez que queramos ejecutar comandos dentro de nuestro contenedor tendr\u00edamos que escribir una ruta muy larga. En su lugar, Docker asumir\u00e1 que queremos ejecutar todos los comandos desde este directorio. Para nuestras dependencias estamos usando pipenv , as\u00ed que copiamos tanto el archivo Pipfile como el archivo Pipfile.lock en el directorio /code/ en Docker. Vale la pena tomarse un momento para explicar por qu\u00e9 pipenv crea un Pipfile.lock . El concepto de bloqueo de archivos no es exclusivo de Python o Pipenv; de hecho ya est\u00e1 presente en los gestores de paquetes de los lenguajes de programaci\u00f3n m\u00e1s modernos: Gemfile.lock en Ruby, yarn.lock en JavaScript, composer.lock en PHP, etc. Pipenv fue el primer proyecto popular en incorporarlos en la paqueter\u00eda de Python. La ventaja de un archivo de bloqueo es que esto conduce a una construcci\u00f3n determinista: no importa cu\u00e1ntas veces se instalen los paquetes de software, se obtendr\u00e1 el mismo resultado. Sin un fichero lock que \"bloquee\" las dependencias y su orden, no se cumplir\u00eda necesariamente. Lo que significa que dos miembros del equipo que instalan la misma lista de software pueden tener instalaciones de construcci\u00f3n ligeramente diferentes. Cuando estamos trabajando con Docker donde hay c\u00f3digo tanto local en nuestro ordenador como tambi\u00e9n dentro de Docker, el potencial de conflictos de Pipfile.lock surge cuando se actualizan paquetes de software. Siguiendo adelante usamos el comando RUN para instalar primero pipenv y luego pipenv install para instalar los paquetes de software listados en nuestro Pipfile.lock, actualmente s\u00f3lo Django. Es un es importante a\u00f1adir tambi\u00e9n el indicador --system , ya que por defecto Pipenv buscar\u00e1 el par\u00e1metro en el que instalar cualquier paquete, pero como estamos dentro de Docker ahora, t\u00e9cnicamente no hay ning\u00fan entorno virtual. En cierto modo, el contenedor Docker es nuestro entorno virtual y mucho m\u00e1s. As\u00ed que debemos usar la bandera --system para asegurarnos de que nuestros paquestes est\u00e1n disponibles en todo el Docker para nosotros. Como paso final copiamos el resto de nuestro c\u00f3digo local en el directorio /code/ dentro de Docker. \u00bfPor qu\u00e9 copiamos el c\u00f3digo local dos veces, primero el Pipfile y Pipfile.lock y luego el resto? La raz\u00f3n es que las im\u00e1genes se crean en base a instrucciones de arriba hacia abajo por lo que queremos que las cosas que cambian a menudo -como nuestro c\u00f3digo local- sea el \u00faltimo. De esta manera s\u00f3lo tenemos que regenerar esa parte de la imagen ante un cambio y no se reinstala todo cada vez que lo haya. Como el software de los paquetes contenidos en nuestros Pipfile y Pipfile.lock cambian con poca frecuencia, implica que no tiene sentido copiarlos e instalarlos antes. Nuestras instrucciones de imagen ya est\u00e1n hechas, as\u00ed que vamos a construir la imagen usando el comando docker build . . El punto . indica que el directorio actual es donde se debe ejecutar el comando comando. Se genera una gran cantidad de texto en pantalla; s\u00f3lo se incluye las dos primeras l\u00edneas y las tres \u00faltimas. $ docker build . Sending build context to Docker daemon 154.1kB Step 1/7 : FROM python:3.8 ... Step 7/7 : COPY . /code/ ---> a48b2acb1fcc Successfully built a48b2acb1fcc Pasando a lo siguiente, ahora necesitamos crear un archivo docker-composition.yml para controlar c\u00f3mo ejecutar el comando que ser\u00e1 construido en base a nuestra imagen de Dockerfile . $ touch docker-compose.yml Contendr\u00e1 el siguiente c\u00f3digo version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 En la l\u00ednea superior se especifica la versi\u00f3n m\u00e1s reciente de Docker Compose que es actualmente 3.7 (no confundir con la versi\u00f3n de Python que puede ser bien parecida) A continuaci\u00f3n, especificamos qu\u00e9 services (o contenedores) queremos que funcionen en nuestro \"Docker host\". Es posible tener varios services funcionando, pero por ahora s\u00f3lo tenemos uno para el servidor web . Especificaremos c\u00f3mo construir el contenedor diciendo, \"Busca el directorio en curso . el Dockerfile \" . Luego, dentro del contenedor, ejecute el comando para arrancar el servidor local. El montaje de los vol\u00famenes sincroniza autom\u00e1ticamente el sistema de archivos Docker con nuestro sistema de archivos local. \u00a1Esto significa que no tenemos que reconstruir la imagen cada vez que cambiamos un solo fichero!. Por \u00faltimo especificamos los puertos ( ports ) a exponer dentro de Docker que solo ser\u00e1 el 8000, que es el puerto Django por defecto. Si es la primera vez que utiliza Docker, es muy probable que se est\u00e9 muy confundido en este momento. No hay motivo de preocupaci\u00f3n. Crearemos m\u00faltiples im\u00e1genes y contenedores Docker y, con la pr\u00e1ctica, el flujo comenzar\u00e1 a tener m\u00e1s sentido. Se ver\u00e1 como se usan archivos Dockerfile y docker-composition.yml muy similares en cada uno de los proyectos. El paso final es ejecutar nuestro contenedor Docker usando el comando docker-compose up . Este comando resultar\u00e1 en otro largo flujo de texto de salida en la l\u00ednea de comandos. $ docker-compose up Creating network \"hello_default\" with the default driver Building web Step 1/7 : FROM python:3.8 ... Creating hello_web_1 ... done Attaching to hello_web_1 web_1 | Performing system checks... web_1 | web_1 | System check identified no issues (0 silenced). web_1 | September 20, 2019 - 17:21:57 web_1 | Django version 2.2.5, using settings 'hello_project.settings' web_1 | Starting development server at http://0.0.0.0:8000/ web_1 | Quit the server with CONTROL-C. Para confirmar que realmente funcion\u00f3, volveremos a poner http://127.0.0.1:8000/ en el navegador web. Actualizaremos la p\u00e1gina y aparecer\u00e1 la p\u00e1gina \"Hello, World\". Django se est\u00e1 ejecutando ahora puramente dentro de un contenedor Docker. No estamos trabajando dentro de un entorno virtual local. No ejecutamos el comando runserver . Todo nuestro c\u00f3digo y nuestro servidor Django se est\u00e1 ejecutando desde dentro de un Docker aut\u00f3nomo. !Todo un \u00e9xito! Detendremos el contenedor con Ctrl+C y adem\u00e1s escribiremos docker-compose down . Los contenedores absorben una gran cantidad de memoria, as\u00ed que es una buena idea detenerlos de esta manera cuando hayamos terminado de usarlos. Los contenedores se han concebido para ser est\u00e1ticos (no pueden cambiar), por lo que utilizamos volumes para copiar nuestro c\u00f3digo en sitios donde si que pueda guardarse. $ docker-compose down Removing hello_web_1 ... done Removing network hello_default","title":"18.7. Im\u00e1genes, Contenedores y el \"Docker Host\""},{"location":"19_ postgresql/","text":"19. PostgreSQL Una de las diferencias m\u00e1s inmediatas entre trabajar en una \"aplicaci\u00f3n de juguete\" en Django y una aplicaci\u00f3n lista para producci\u00f3n es la base de datos. Django se suministra con SQLite como opci\u00f3n predeterminada para el desarrollo local porque es peque\u00f1a, r\u00e1pida y basada en archivos, lo que la hace f\u00e1cil de usar. No se requiere ninguna instalaci\u00f3n o configuraci\u00f3n adicional. Sin embargo, esta comodidad tiene un coste. En general, SQLite no es una buena elecci\u00f3n de base de datos para sitios web profesionales. Por lo tanto, aunque est\u00e1 bien usar SQLite localmente mientras se hace un prototipo de una idea, es raro usar realmente SQLite como la base de datos en un proyecto de producci\u00f3n. Django se suministra con soporte incorporado para cuatro bases de datos : SQLite, PostgreSQL, MySQL y Oracle. Utilizaremos PostgreSQL en este libro ya que es la opci\u00f3n m\u00e1s popular para los desarrolladores de Django, sin embargo, la belleza del ORM de Django es que incluso si quisi\u00e9ramos utilizar MySQL u Oracle, el c\u00f3digo real de Django que escribamos ser\u00e1 casi id\u00e9ntico. El ORM de Django se encarga de la traducci\u00f3n del c\u00f3digo Python a las bases de datos por uno, lo cual es bastante sorprendente si se piensa. El reto de utilizar estas tres bases de datos es que cada una de ellas debe estar instalada y funcionar localmente si se quiere imitar fielmente un entorno de producci\u00f3n en la computadora local. \u00a1Y eso es lo que se quiere! Aunque Django se encarga de los detalles del cambio entre bases de datos, inevitablemente hay peque\u00f1os errores dif\u00edciles de detectar que pueden surgir si se utiliza SQLite para el desarrollo local, pero una base de datos diferente en producci\u00f3n. Por lo tanto, la mejor pr\u00e1ctica es usar la misma base de datos localmente y en producci\u00f3n. Se comenzar\u00e1 un nuevo proyecto Django con una base de datos SQLite y luego se pasar\u00e1 a Docker y PostgreSQL. 19.1. Empezando Crear un nuevo directorio postgresql para el nuevo c\u00f3digo. $ cd .. $ mkdir postgresql && cd postgresql Ahora instalar Django, iniciar el shell y crear un proyecto b\u00e1sico de Django llamado postgresql_-project . No olvidar el punto... \u00a1al final del comando! $ pipenv install django $ pipenv shell (postgresql) $ django-admin startproject postgresql_project . Hasta ahora todo bien. Ahora se puede migrar la base de datos para inicializarla y usar el servidor de ejecuci\u00f3n para iniciar el servidor local. NOTA Normalmente no se recomienda ejecutar la migraci\u00f3n en nuevos proyectos hasta que se haya configurado un modelo de usuario personalizado . De lo contrario, Django vincular\u00e1 la base de datos al modelo de usuario incorporado, que es dif\u00edcil de modificar m\u00e1s adelante en el proyecto. Se cubrir\u00e1 esto adecuadamente m\u00e1s adelante, pero se est\u00e1 aqu\u00ed principalmente con fines de demostraci\u00f3n, usar el modelo de usuario por defecto aqu\u00ed es una excepci\u00f3n por una vez. (postgresql) $ python manage.py migrate (postgresql) $ python manage.py runserver Confirmar que todo funciona navegando a http://127.0.0.1:8000 en el navegador. Puede que se necesite refrescar la p\u00e1gina, pero se deber\u00eda ver la conocida p\u00e1gina de bienvenida de Django. Detener el servidor local con <Control>+C y luego usar el comando ls para listar todos los archivos y directorios. (postresql) $ ls Pipfile Pipfile.lock db.sqlite3 manage.py postgresql_project 19.2. Docker Para pasar a Docker, primero hay que salir del entorno virtual y luego crear un Dockerfile y los archivos docker-compose.yml que controlar\u00e1n la imagen y el contenedor Docker respectivamente. (postgresql) $ exit $ touch Dockerfile $ touch docker-compose.yml El Dockerfile es el mismo del cap\u00edtulo anterior. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Go ahead and build the initial image now using the docker build . command. Did you notice that the Dockerfile built an image much faster this time around? That\u2019s because Docker looks locally on your computer first for a specific image. If it doesn\u2019t find an image locally it will then download it. And since many of these images were Chapter 2: PostgreSQL 33 already on the computer from the previous chapter, Docker didn\u2019t need to download them all again! Time now for the docker-compose.yml file which also matches what we saw previously in Chapter 1. docker-compose.yml version: '3.8' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 19.3. Modo Independiente Ahora se pondr\u00e1 en marcha el contenedor, pero esta vez en modo 'detached', lo que requiere la bandera -d o -detach . $ docker-compose up -d El modo independiente ejecuta los contenedores en background , lo que significa que se puede usar una unica consola de l\u00ednea de comandos sin necesidad de abrir una separada. Esto ahorra tener que cambiar constantemente entre dos pesta\u00f1as de l\u00ednea de comandos. La desventaja es que si/cuando hay un error, la salida no siempre ser\u00e1 visible. As\u00ed que si pantalla no coincide con lo descrito aqu\u00ed, probar a escribir los logs de docker-compose para ver la salida actual y depurar cualquier problema. Es probable que se vea una \"Warning: Image for service web was built because it did not already exists\" (Advertencia: La imagen para el servicio web se construy\u00f3 porque no exist\u00eda) al final del comando. Docker cre\u00f3 autom\u00e1ticamente una nueva imagen dentro del contenedor. Como se ver\u00e1 m\u00e1s adelante, es necesario a\u00f1adir la bandera --build para forzar la construcci\u00f3n de una imagen cuando se actualizan los paquetes de software porque, de forma predeterminada, Docker buscar\u00e1 una copia local en la cach\u00e9 del software y utilizar\u00e1 la que mejore el rendimiento. Para confirmar que las cosas funcionan correctamente, volver a http://127.0.0.1:8000/ en el navegador web. Como ahora se est\u00e1 trabajando dentro de Docker en lugar de hacerlo localmente, se debe preceder los comandos tradicionales con docker-compose exec [servicio] donde se especifica el nombre del servicio. Por ejemplo, para crear una cuenta de superusuario en lugar de escribir python manage.py createsuperuser , el comando actualizado se ver\u00eda ahora como la l\u00ednea de abajo, usando el servicio web. $ docker-compose exec web python manage.py createsuperuser Como nombre de usuario elegir sqliteadmin , sqliteadmin@email.com como direcci\u00f3n de correo electr\u00f3nico, y seleccionar una contrase\u00f1a a discreci\u00f3n. navegue directamente al administrador en http://127.0.0.1:8000/admin e inicie sesi\u00f3n. Ser\u00e1 redirigido a la p\u00e1gina principal del administrador. Notar en la esquina superior derecha que sqliteadmin es el nombre de usuario. Si se hace clic en el bot\u00f3n Users se llega a la p\u00e1gina de Usuarios donde se puede confirmar que s\u00f3lo se ha creado un usuario. Es importante destacar otro aspecto de Docker en este punto: hasta ahora se ha estado actualizando la base de datos, representada actualmente por el archivo db.sqlite3 , dentro de Docker. Eso significa que el archivo actual db.sqlite3 est\u00e1 cambiando cada vez. Y gracias a los vol\u00famenes montados en la configuraci\u00f3n docker-compose.yml cada cambio en el archivo ha sido copiado en un archivo db.sqlite3 en el ordenador local tambi\u00e9n. Se podr\u00eda salir de Docker, iniciar el shell, iniciar el servidor con python manage.py runserver , y ver exactamente el mismo inicio de sesi\u00f3n de administrador en este punto porque la base de datos subyacente SQLite es la misma. 19.4. PostgreSQL Ahora es el momento de cambiar a PostgreSQL, que requiere tres pasos adicionales: 1.- Instalar un adaptador de base de datos, psycopg2 , para que Python pueda hablar con PostgreSQL 2.- Actualizar la configuraci\u00f3n de la BASE DE DATOS en nuestro archivo settings.py 3.- Instalar y ejecutar PostgreSQL localmente \u00bfListo? Aqu\u00ed vamos. Detener el contenedor Docker en marcha con docker-compose down . $ docker-compose down Stopping postgresql_web_1 ... done Removing postgresql_web_1 ... done Removing network postgresql_default Entonces dentro del archivo docker-compose.yml agregar un nuevo servicio llamado db . Esto significa que habr\u00e1 dos servicios separados, cada uno un contenedor, corriendo dentro del host Docker: web para el servidor local de Django y db para la base de datos PostgreSQL. La versi\u00f3n PostgreSQL ser\u00e1 fijada a la \u00faltima versi\u00f3n, la 11. Si no se hubiera especificado un n\u00famero de versi\u00f3n y en su lugar se hubiera usado s\u00f3lo postgres , entonces seria descargada la \u00faltima versi\u00f3n de PostgreSQL aunque, en una fecha posterior, sea Postgres 12, que probablemente tenga requerimientos diferentes. Finalmente agregamos una l\u00ednea de dependencias al servicio web ya que literalmente depende de la base de datos a ejecutar. Esto significa que db se iniciar\u00e1 antes que web . FICHERO: docker-compose.yml version: '3.7' 38 services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 Ahora ejecutar docker-compose up -d que reconstruir\u00e1 la imagen y har\u00e1 ponerse en marcha a dos contenedores, uno ejecutando PostgreSQL dentro de db y el otro el servidor web Django. $ docker-compose up -d Creating network \"postgresql_default\" with the default driver ... Creating postgresql_db_1 ... done Creating postgresql_web_1 ... done Es importante se\u00f1alar en este punto que una base de datos de producci\u00f3n como PostgreSQL no est\u00e1 basada en archivos. Se ejecuta completamente dentro del servicio db y es ef\u00edmero; cuando se ejecuta docker-compose down todos los datos dentro de ella se perder\u00e1n. Esto contrasta con el c\u00f3digo en el contenedor web que tiene un montaje de vol\u00famenes para sincronizar el c\u00f3digo local y el de Docker. Pr\u00f3ximamente se aprender\u00e1 c\u00f3mo a\u00f1adir un montaje de vol\u00famenes para que en el servicio db persista la informaci\u00f3n de la base de datos. 19.5. Ajustes Con el editor de texto, abrir el archivo posgresql_project/settings.py y bajar hasta la configuraci\u00f3n de Bases de Datos. La configuraci\u00f3n actual es esta: Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } Por defecto, Django especifica sqlite3 como motor de la base de datos, le da el nombre de db.sqlite3 , y lo coloca en BASE_DIR que implica al directorio de nivel de proyecto. Dado que la estructura del directorio es a menudo un punto de confusi\u00f3n, \"nivel de proyecto\" significa el directorio superior del proyecto que contiene a postgresql_project , manage.py , Pipfile , Pipfile.lock , y el archivo db.slite3 . (postgresql) $ ls Dockerfile Pipfile.lock docker-compose.yml postgresql_project Pipfile db.sqlite3 manage.py Para cambiar a PostgreSQL actualizaremos la configuraci\u00f3n de ENGINE . PostgreSQL requiere un NOMBRE, USUARIO, CONTRASE\u00d1A, HOST y PUERTO. Para mayor comodidad, configuraremos los tres primeros a postgres, el HOST a db que es el nombre de nuestro servicio establecido en docker-compose.yml , y el PORT a 5432 que es el predeterminado Puerto PostgreSQL. Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': 5432 } } Se ver\u00e1 un error si se refresca la p\u00e1gina \u00bfQu\u00e9 es lo que est\u00e1 pasando? Dado que se est\u00e1 ejecutando Docker en modo detach con la bandera -d no est\u00e1 claro inmediatamente. Es hora de revisar los logs . $ docker-componer registros ... web_1 | django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 module: No module named 'psycopg2' Habr\u00e1 mucha salida pero en la parte inferior de la secci\u00f3n web_1 se ver\u00e1n las l\u00edneas de arriba que indican que a\u00fan no se ha instalado el driver psycopg2 . 19.5.Psycopg PostgreSQL es una base de datos que puede ser utilizada por casi cualquier lenguaje de programaci\u00f3n. Pero si se piensa, \u00bfc\u00f3mo un lenguaje de programaci\u00f3n, y todos ellos var\u00edan de alguna u otra menera, se conecta a la base de datos? \u00a1La respuesta es a trav\u00e9s de un adaptador de base de datos! Y eso es lo que es Psycopg , el adaptador de base de datos m\u00e1s popular para Python. Si quieres saber m\u00e1s sobre el funcionamiento de Psycopg, aqu\u00ed tienes un enlace a una descripci\u00f3n m\u00e1s completa en la p\u00e1gina oficial . Se puede instalar Pyscopg con Pipenv. En la l\u00ednea de comandos, introducir el siguiente comando para que se instale en nuestro host Docker. $ docker-compose exec web pipenv install psycopg2-binary==2.8.3 \u00bfPor qu\u00e9 instalarse dentro de Docker en vez de localmente, nos preguntamos? La respuesta corta es que instalar consistentemente nuevos paquetes de software dentro de Docker y luego reconstruir la imagen desde cero nos salvar\u00e1 de potenciales conflictos de Pipfile.lock . La generaci\u00f3n de Pipfile.lock depende en gran medida del sistema operativo que se utilice. Se ha especificado todo el sistema operativo en Docker, incluyendo el uso de Python 3.8. Pero si se instala psycopg2 localmente en el ordenador, que tiene un entorno diferente, el archivo Pipfile.lock resultante tambi\u00e9n ser\u00e1 diferente. Pero entonces el montaje de los vol\u00famenes en el archivo docker-compose.yml , que sincroniza autom\u00e1ticamente los sistemas de archivos locales y Docker, har\u00e1 que el Pipfile.lock local sobreescriba la versi\u00f3n dentro de Docker. As\u00ed que ahora nuestro contenedor Docker intenta ejecutar un archivo Pipfile.lock incorrecto. Una forma de evitar estos problemas es instalar sistem\u00e1ticamente nuevos paquetes de software en Docker en lugar de hacerlo localmente. Si ahora se actualiza la p\u00e1gina web..... se seguir\u00e1 viendo un error. Se revisan de nuevo los logs. $ docker-compose logs \u00a1Es lo mismo que antes! \u00bfPor qu\u00e9 sucede esto? Docker almacena autom\u00e1ticamente las im\u00e1genes a menos que algo cambie por razones de rendimiento. Se quiere que reconstruya autom\u00e1ticamente la imagen con el nuevo Pipfile y Pipfile.lock pero porque la \u00faltima l\u00ednea del Dockerfile es COPY . /code/ s\u00f3lo se copiar\u00e1n los archivos; la imagen subyacente no se reconstruir\u00e1 a s\u00ed misma a menos que la forcemos tambi\u00e9n. Esto puede hacerse a\u00f1adiendo la bandera --build . Reconsiderar: siempre que se agregue un nuevo paquete primero instalarlo dentro de Docker, detener los contenedores, forzar una reconstrucci\u00f3n de la imagen, y luego iniciar los contenedores de nuevo. $ docker-compose down $ docker-compose up -d --build Si se actualiza la p\u00e1gina principal de nuevo la p\u00e1gina de bienvenida de Django en http://127.0.0.1:8000/ \u00a1ahora funciona! Eso es porque Django se ha conectado con \u00e9xito a PostgreSQL a trav\u00e9s de Docker. 19.6. Nueva base de datos Sin embargo, ya que se est\u00e1 usando PostgreSQL ahora, no SQLite, la base de datos est\u00e1 vac\u00eda. Si se miran los registros actuales de nuevo escribiendo docker-compose logs se ver\u00e1n quejas como \"Tienes 15 migraciones no aplicadas\" . Para reforzar este punto visitar Admin en http://127.0.0.1:8000/admin/ e iniciar sesi\u00f3n. \u00bfFuncionar\u00e1 nuestra anterior cuenta de superusuario de sqliteadmin? \u00a1No! Vemos ProgrammingError at /admin que se queja de que auth_user ni siquiera existe porque a\u00fan no se ha hecho la migraci\u00f3n! Adem\u00e1s, tampoco se tiene un superusuario en la base de datos PostgreSQL. Para arreglar esta situaci\u00f3n se puede tanto migrar como crear un superusuario dentro de Docker que acceda a la base de datos PostgreSQL. $ docker-compose exec web python manage.py migrate $ docker-compose exec web python manage.py createsuperuser \u00bfC\u00f3mo se deber\u00eda llamar al superusuario? Usemos postgresadmin y para prop\u00f3sitos de prueba poner el correo electr\u00f3nico a postgresadmin@email.com y la contrase\u00f1a. En el navegador web navegar a la p\u00e1gina de administraci\u00f3n en http://127.0.0.1:8000/admin/ y entrar la informaci\u00f3n de acceso del nuevo superusuario. En la esquina superior derecha se muestra que estamos conectados con postgresadmin ahora no sqliteadmin. Tambi\u00e9n puede hacer clic en la pesta\u00f1a de Usuarios en la p\u00e1gina de inicio y visitar la secci\u00f3n de Usuarios para ver nuestro \u00fanico usuario es la nueva cuenta de superusuario. Recordar detener el contenedor en marcha con el docker-compose down . $ docker-compose down 19.7. Git Guardar los cambios de nuevo inicializando Git para este nuevo proyecto, a\u00f1adir los cambios, e incluir un mensaje de confirmaci\u00f3n. $ git init $ git status $ git add . $ git commit -m 'ch2' 19.8. Conclusi\u00f3n El objetivo de este cap\u00edtulo era demostrar c\u00f3mo Docker y PostgreSQL trabajan juntos en un proyecto de Django. Cambiar entre una base de datos SQLite y un PostgreSQL es un salto mental para muchos desarrolladores inicialmente. El punto clave es que con Docker ya no se necesita estar en un entorno virtual local. Docker es el nuevo entorno virtual... y la base de datos y m\u00e1s si se desea. El host de Docker esencialmente reemplaza al sistema operativo local y dentro de \u00e9l se pueden ejecutar m\u00faltiples contenedores, como para la aplicaci\u00f3n web y para la base de datos, que pueden ser aislados y ejecutados por separado.","title":"19. PostgreSQL"},{"location":"19_ postgresql/#19-postgresql","text":"Una de las diferencias m\u00e1s inmediatas entre trabajar en una \"aplicaci\u00f3n de juguete\" en Django y una aplicaci\u00f3n lista para producci\u00f3n es la base de datos. Django se suministra con SQLite como opci\u00f3n predeterminada para el desarrollo local porque es peque\u00f1a, r\u00e1pida y basada en archivos, lo que la hace f\u00e1cil de usar. No se requiere ninguna instalaci\u00f3n o configuraci\u00f3n adicional. Sin embargo, esta comodidad tiene un coste. En general, SQLite no es una buena elecci\u00f3n de base de datos para sitios web profesionales. Por lo tanto, aunque est\u00e1 bien usar SQLite localmente mientras se hace un prototipo de una idea, es raro usar realmente SQLite como la base de datos en un proyecto de producci\u00f3n. Django se suministra con soporte incorporado para cuatro bases de datos : SQLite, PostgreSQL, MySQL y Oracle. Utilizaremos PostgreSQL en este libro ya que es la opci\u00f3n m\u00e1s popular para los desarrolladores de Django, sin embargo, la belleza del ORM de Django es que incluso si quisi\u00e9ramos utilizar MySQL u Oracle, el c\u00f3digo real de Django que escribamos ser\u00e1 casi id\u00e9ntico. El ORM de Django se encarga de la traducci\u00f3n del c\u00f3digo Python a las bases de datos por uno, lo cual es bastante sorprendente si se piensa. El reto de utilizar estas tres bases de datos es que cada una de ellas debe estar instalada y funcionar localmente si se quiere imitar fielmente un entorno de producci\u00f3n en la computadora local. \u00a1Y eso es lo que se quiere! Aunque Django se encarga de los detalles del cambio entre bases de datos, inevitablemente hay peque\u00f1os errores dif\u00edciles de detectar que pueden surgir si se utiliza SQLite para el desarrollo local, pero una base de datos diferente en producci\u00f3n. Por lo tanto, la mejor pr\u00e1ctica es usar la misma base de datos localmente y en producci\u00f3n. Se comenzar\u00e1 un nuevo proyecto Django con una base de datos SQLite y luego se pasar\u00e1 a Docker y PostgreSQL.","title":"19. PostgreSQL"},{"location":"19_ postgresql/#191-empezando","text":"Crear un nuevo directorio postgresql para el nuevo c\u00f3digo. $ cd .. $ mkdir postgresql && cd postgresql Ahora instalar Django, iniciar el shell y crear un proyecto b\u00e1sico de Django llamado postgresql_-project . No olvidar el punto... \u00a1al final del comando! $ pipenv install django $ pipenv shell (postgresql) $ django-admin startproject postgresql_project . Hasta ahora todo bien. Ahora se puede migrar la base de datos para inicializarla y usar el servidor de ejecuci\u00f3n para iniciar el servidor local. NOTA Normalmente no se recomienda ejecutar la migraci\u00f3n en nuevos proyectos hasta que se haya configurado un modelo de usuario personalizado . De lo contrario, Django vincular\u00e1 la base de datos al modelo de usuario incorporado, que es dif\u00edcil de modificar m\u00e1s adelante en el proyecto. Se cubrir\u00e1 esto adecuadamente m\u00e1s adelante, pero se est\u00e1 aqu\u00ed principalmente con fines de demostraci\u00f3n, usar el modelo de usuario por defecto aqu\u00ed es una excepci\u00f3n por una vez. (postgresql) $ python manage.py migrate (postgresql) $ python manage.py runserver Confirmar que todo funciona navegando a http://127.0.0.1:8000 en el navegador. Puede que se necesite refrescar la p\u00e1gina, pero se deber\u00eda ver la conocida p\u00e1gina de bienvenida de Django. Detener el servidor local con <Control>+C y luego usar el comando ls para listar todos los archivos y directorios. (postresql) $ ls Pipfile Pipfile.lock db.sqlite3 manage.py postgresql_project","title":"19.1. Empezando"},{"location":"19_ postgresql/#192-docker","text":"Para pasar a Docker, primero hay que salir del entorno virtual y luego crear un Dockerfile y los archivos docker-compose.yml que controlar\u00e1n la imagen y el contenedor Docker respectivamente. (postgresql) $ exit $ touch Dockerfile $ touch docker-compose.yml El Dockerfile es el mismo del cap\u00edtulo anterior. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Go ahead and build the initial image now using the docker build . command. Did you notice that the Dockerfile built an image much faster this time around? That\u2019s because Docker looks locally on your computer first for a specific image. If it doesn\u2019t find an image locally it will then download it. And since many of these images were Chapter 2: PostgreSQL 33 already on the computer from the previous chapter, Docker didn\u2019t need to download them all again! Time now for the docker-compose.yml file which also matches what we saw previously in Chapter 1. docker-compose.yml version: '3.8' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000","title":"19.2. Docker"},{"location":"19_ postgresql/#193-modo-independiente","text":"Ahora se pondr\u00e1 en marcha el contenedor, pero esta vez en modo 'detached', lo que requiere la bandera -d o -detach . $ docker-compose up -d El modo independiente ejecuta los contenedores en background , lo que significa que se puede usar una unica consola de l\u00ednea de comandos sin necesidad de abrir una separada. Esto ahorra tener que cambiar constantemente entre dos pesta\u00f1as de l\u00ednea de comandos. La desventaja es que si/cuando hay un error, la salida no siempre ser\u00e1 visible. As\u00ed que si pantalla no coincide con lo descrito aqu\u00ed, probar a escribir los logs de docker-compose para ver la salida actual y depurar cualquier problema. Es probable que se vea una \"Warning: Image for service web was built because it did not already exists\" (Advertencia: La imagen para el servicio web se construy\u00f3 porque no exist\u00eda) al final del comando. Docker cre\u00f3 autom\u00e1ticamente una nueva imagen dentro del contenedor. Como se ver\u00e1 m\u00e1s adelante, es necesario a\u00f1adir la bandera --build para forzar la construcci\u00f3n de una imagen cuando se actualizan los paquetes de software porque, de forma predeterminada, Docker buscar\u00e1 una copia local en la cach\u00e9 del software y utilizar\u00e1 la que mejore el rendimiento. Para confirmar que las cosas funcionan correctamente, volver a http://127.0.0.1:8000/ en el navegador web. Como ahora se est\u00e1 trabajando dentro de Docker en lugar de hacerlo localmente, se debe preceder los comandos tradicionales con docker-compose exec [servicio] donde se especifica el nombre del servicio. Por ejemplo, para crear una cuenta de superusuario en lugar de escribir python manage.py createsuperuser , el comando actualizado se ver\u00eda ahora como la l\u00ednea de abajo, usando el servicio web. $ docker-compose exec web python manage.py createsuperuser Como nombre de usuario elegir sqliteadmin , sqliteadmin@email.com como direcci\u00f3n de correo electr\u00f3nico, y seleccionar una contrase\u00f1a a discreci\u00f3n. navegue directamente al administrador en http://127.0.0.1:8000/admin e inicie sesi\u00f3n. Ser\u00e1 redirigido a la p\u00e1gina principal del administrador. Notar en la esquina superior derecha que sqliteadmin es el nombre de usuario. Si se hace clic en el bot\u00f3n Users se llega a la p\u00e1gina de Usuarios donde se puede confirmar que s\u00f3lo se ha creado un usuario. Es importante destacar otro aspecto de Docker en este punto: hasta ahora se ha estado actualizando la base de datos, representada actualmente por el archivo db.sqlite3 , dentro de Docker. Eso significa que el archivo actual db.sqlite3 est\u00e1 cambiando cada vez. Y gracias a los vol\u00famenes montados en la configuraci\u00f3n docker-compose.yml cada cambio en el archivo ha sido copiado en un archivo db.sqlite3 en el ordenador local tambi\u00e9n. Se podr\u00eda salir de Docker, iniciar el shell, iniciar el servidor con python manage.py runserver , y ver exactamente el mismo inicio de sesi\u00f3n de administrador en este punto porque la base de datos subyacente SQLite es la misma.","title":"19.3. Modo Independiente"},{"location":"19_ postgresql/#194-postgresql","text":"Ahora es el momento de cambiar a PostgreSQL, que requiere tres pasos adicionales: 1.- Instalar un adaptador de base de datos, psycopg2 , para que Python pueda hablar con PostgreSQL 2.- Actualizar la configuraci\u00f3n de la BASE DE DATOS en nuestro archivo settings.py 3.- Instalar y ejecutar PostgreSQL localmente \u00bfListo? Aqu\u00ed vamos. Detener el contenedor Docker en marcha con docker-compose down . $ docker-compose down Stopping postgresql_web_1 ... done Removing postgresql_web_1 ... done Removing network postgresql_default Entonces dentro del archivo docker-compose.yml agregar un nuevo servicio llamado db . Esto significa que habr\u00e1 dos servicios separados, cada uno un contenedor, corriendo dentro del host Docker: web para el servidor local de Django y db para la base de datos PostgreSQL. La versi\u00f3n PostgreSQL ser\u00e1 fijada a la \u00faltima versi\u00f3n, la 11. Si no se hubiera especificado un n\u00famero de versi\u00f3n y en su lugar se hubiera usado s\u00f3lo postgres , entonces seria descargada la \u00faltima versi\u00f3n de PostgreSQL aunque, en una fecha posterior, sea Postgres 12, que probablemente tenga requerimientos diferentes. Finalmente agregamos una l\u00ednea de dependencias al servicio web ya que literalmente depende de la base de datos a ejecutar. Esto significa que db se iniciar\u00e1 antes que web . FICHERO: docker-compose.yml version: '3.7' 38 services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 Ahora ejecutar docker-compose up -d que reconstruir\u00e1 la imagen y har\u00e1 ponerse en marcha a dos contenedores, uno ejecutando PostgreSQL dentro de db y el otro el servidor web Django. $ docker-compose up -d Creating network \"postgresql_default\" with the default driver ... Creating postgresql_db_1 ... done Creating postgresql_web_1 ... done Es importante se\u00f1alar en este punto que una base de datos de producci\u00f3n como PostgreSQL no est\u00e1 basada en archivos. Se ejecuta completamente dentro del servicio db y es ef\u00edmero; cuando se ejecuta docker-compose down todos los datos dentro de ella se perder\u00e1n. Esto contrasta con el c\u00f3digo en el contenedor web que tiene un montaje de vol\u00famenes para sincronizar el c\u00f3digo local y el de Docker. Pr\u00f3ximamente se aprender\u00e1 c\u00f3mo a\u00f1adir un montaje de vol\u00famenes para que en el servicio db persista la informaci\u00f3n de la base de datos.","title":"19.4. PostgreSQL"},{"location":"19_ postgresql/#195-ajustes","text":"Con el editor de texto, abrir el archivo posgresql_project/settings.py y bajar hasta la configuraci\u00f3n de Bases de Datos. La configuraci\u00f3n actual es esta: Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } Por defecto, Django especifica sqlite3 como motor de la base de datos, le da el nombre de db.sqlite3 , y lo coloca en BASE_DIR que implica al directorio de nivel de proyecto. Dado que la estructura del directorio es a menudo un punto de confusi\u00f3n, \"nivel de proyecto\" significa el directorio superior del proyecto que contiene a postgresql_project , manage.py , Pipfile , Pipfile.lock , y el archivo db.slite3 . (postgresql) $ ls Dockerfile Pipfile.lock docker-compose.yml postgresql_project Pipfile db.sqlite3 manage.py Para cambiar a PostgreSQL actualizaremos la configuraci\u00f3n de ENGINE . PostgreSQL requiere un NOMBRE, USUARIO, CONTRASE\u00d1A, HOST y PUERTO. Para mayor comodidad, configuraremos los tres primeros a postgres, el HOST a db que es el nombre de nuestro servicio establecido en docker-compose.yml , y el PORT a 5432 que es el predeterminado Puerto PostgreSQL. Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': 5432 } } Se ver\u00e1 un error si se refresca la p\u00e1gina \u00bfQu\u00e9 es lo que est\u00e1 pasando? Dado que se est\u00e1 ejecutando Docker en modo detach con la bandera -d no est\u00e1 claro inmediatamente. Es hora de revisar los logs . $ docker-componer registros ... web_1 | django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 module: No module named 'psycopg2' Habr\u00e1 mucha salida pero en la parte inferior de la secci\u00f3n web_1 se ver\u00e1n las l\u00edneas de arriba que indican que a\u00fan no se ha instalado el driver psycopg2 .","title":"19.5. Ajustes"},{"location":"19_ postgresql/#195psycopg","text":"PostgreSQL es una base de datos que puede ser utilizada por casi cualquier lenguaje de programaci\u00f3n. Pero si se piensa, \u00bfc\u00f3mo un lenguaje de programaci\u00f3n, y todos ellos var\u00edan de alguna u otra menera, se conecta a la base de datos? \u00a1La respuesta es a trav\u00e9s de un adaptador de base de datos! Y eso es lo que es Psycopg , el adaptador de base de datos m\u00e1s popular para Python. Si quieres saber m\u00e1s sobre el funcionamiento de Psycopg, aqu\u00ed tienes un enlace a una descripci\u00f3n m\u00e1s completa en la p\u00e1gina oficial . Se puede instalar Pyscopg con Pipenv. En la l\u00ednea de comandos, introducir el siguiente comando para que se instale en nuestro host Docker. $ docker-compose exec web pipenv install psycopg2-binary==2.8.3 \u00bfPor qu\u00e9 instalarse dentro de Docker en vez de localmente, nos preguntamos? La respuesta corta es que instalar consistentemente nuevos paquetes de software dentro de Docker y luego reconstruir la imagen desde cero nos salvar\u00e1 de potenciales conflictos de Pipfile.lock . La generaci\u00f3n de Pipfile.lock depende en gran medida del sistema operativo que se utilice. Se ha especificado todo el sistema operativo en Docker, incluyendo el uso de Python 3.8. Pero si se instala psycopg2 localmente en el ordenador, que tiene un entorno diferente, el archivo Pipfile.lock resultante tambi\u00e9n ser\u00e1 diferente. Pero entonces el montaje de los vol\u00famenes en el archivo docker-compose.yml , que sincroniza autom\u00e1ticamente los sistemas de archivos locales y Docker, har\u00e1 que el Pipfile.lock local sobreescriba la versi\u00f3n dentro de Docker. As\u00ed que ahora nuestro contenedor Docker intenta ejecutar un archivo Pipfile.lock incorrecto. Una forma de evitar estos problemas es instalar sistem\u00e1ticamente nuevos paquetes de software en Docker en lugar de hacerlo localmente. Si ahora se actualiza la p\u00e1gina web..... se seguir\u00e1 viendo un error. Se revisan de nuevo los logs. $ docker-compose logs \u00a1Es lo mismo que antes! \u00bfPor qu\u00e9 sucede esto? Docker almacena autom\u00e1ticamente las im\u00e1genes a menos que algo cambie por razones de rendimiento. Se quiere que reconstruya autom\u00e1ticamente la imagen con el nuevo Pipfile y Pipfile.lock pero porque la \u00faltima l\u00ednea del Dockerfile es COPY . /code/ s\u00f3lo se copiar\u00e1n los archivos; la imagen subyacente no se reconstruir\u00e1 a s\u00ed misma a menos que la forcemos tambi\u00e9n. Esto puede hacerse a\u00f1adiendo la bandera --build . Reconsiderar: siempre que se agregue un nuevo paquete primero instalarlo dentro de Docker, detener los contenedores, forzar una reconstrucci\u00f3n de la imagen, y luego iniciar los contenedores de nuevo. $ docker-compose down $ docker-compose up -d --build Si se actualiza la p\u00e1gina principal de nuevo la p\u00e1gina de bienvenida de Django en http://127.0.0.1:8000/ \u00a1ahora funciona! Eso es porque Django se ha conectado con \u00e9xito a PostgreSQL a trav\u00e9s de Docker.","title":"19.5.Psycopg"},{"location":"19_ postgresql/#196-nueva-base-de-datos","text":"Sin embargo, ya que se est\u00e1 usando PostgreSQL ahora, no SQLite, la base de datos est\u00e1 vac\u00eda. Si se miran los registros actuales de nuevo escribiendo docker-compose logs se ver\u00e1n quejas como \"Tienes 15 migraciones no aplicadas\" . Para reforzar este punto visitar Admin en http://127.0.0.1:8000/admin/ e iniciar sesi\u00f3n. \u00bfFuncionar\u00e1 nuestra anterior cuenta de superusuario de sqliteadmin? \u00a1No! Vemos ProgrammingError at /admin que se queja de que auth_user ni siquiera existe porque a\u00fan no se ha hecho la migraci\u00f3n! Adem\u00e1s, tampoco se tiene un superusuario en la base de datos PostgreSQL. Para arreglar esta situaci\u00f3n se puede tanto migrar como crear un superusuario dentro de Docker que acceda a la base de datos PostgreSQL. $ docker-compose exec web python manage.py migrate $ docker-compose exec web python manage.py createsuperuser \u00bfC\u00f3mo se deber\u00eda llamar al superusuario? Usemos postgresadmin y para prop\u00f3sitos de prueba poner el correo electr\u00f3nico a postgresadmin@email.com y la contrase\u00f1a. En el navegador web navegar a la p\u00e1gina de administraci\u00f3n en http://127.0.0.1:8000/admin/ y entrar la informaci\u00f3n de acceso del nuevo superusuario. En la esquina superior derecha se muestra que estamos conectados con postgresadmin ahora no sqliteadmin. Tambi\u00e9n puede hacer clic en la pesta\u00f1a de Usuarios en la p\u00e1gina de inicio y visitar la secci\u00f3n de Usuarios para ver nuestro \u00fanico usuario es la nueva cuenta de superusuario. Recordar detener el contenedor en marcha con el docker-compose down . $ docker-compose down","title":"19.6. Nueva base de datos"},{"location":"19_ postgresql/#197-git","text":"Guardar los cambios de nuevo inicializando Git para este nuevo proyecto, a\u00f1adir los cambios, e incluir un mensaje de confirmaci\u00f3n. $ git init $ git status $ git add . $ git commit -m 'ch2'","title":"19.7. Git"},{"location":"19_ postgresql/#198-conclusion","text":"El objetivo de este cap\u00edtulo era demostrar c\u00f3mo Docker y PostgreSQL trabajan juntos en un proyecto de Django. Cambiar entre una base de datos SQLite y un PostgreSQL es un salto mental para muchos desarrolladores inicialmente. El punto clave es que con Docker ya no se necesita estar en un entorno virtual local. Docker es el nuevo entorno virtual... y la base de datos y m\u00e1s si se desea. El host de Docker esencialmente reemplaza al sistema operativo local y dentro de \u00e9l se pueden ejecutar m\u00faltiples contenedores, como para la aplicaci\u00f3n web y para la base de datos, que pueden ser aislados y ejecutados por separado.","title":"19.8. Conclusi\u00f3n"},{"location":"1_introduccion/","text":"1 Introducci\u00f3n 1.1. Introduciendo Django El gran software de c\u00f3digo abierto casi siempre se construye porque uno o m\u00e1s desarrolladores inteligentes ten\u00edan un problema que resolver y no hab\u00eda ninguna soluci\u00f3n viable o rentable disponible. Django no es una excepci\u00f3n. Adrian y Jacob hace tiempo que se retiraron del proyecto, pero los fundamentos de lo que los llev\u00f3 a crear Django siguen vivos. Es esta s\u00f3lida base de experiencia en el mundo real la que ha hecho a Django tan exitoso como lo es. En reconocimiento a su contribuci\u00f3n, es mejor que les dejemos presentar a Django con sus propias palabras (editado y reformateado a partir del libro original). 1.1.1. Por Adrian Holovaty y Jacob Kaplan-Moss (Diciembre 2009) En los primeros d\u00edas, los desarrolladores web escrib\u00edan cada p\u00e1gina a mano. Actualizar un sitio web significaba editar el HTML; un redise\u00f1o implicaba rehacer cada una de las p\u00e1ginas, una a una. A medida que los sitios web crec\u00edan y se volv\u00edan m\u00e1s ambiciosos, se hizo evidente r\u00e1pidamente que ese enfoque era tedioso, lento y, en \u00faltima instancia, insostenible. Un grupo de hackers emprendedores del Centro Nacional de Aplicaciones de Supercomputaci\u00f3n (la NCSA, donde se desarroll\u00f3 Mosaic, el primer navegador web gr\u00e1fico) resolvi\u00f3 este problema dejando que el servidor web generara programas externos que pudieran generar HTML de forma din\u00e1mica. Llamaron a este protocolo la Interfaz de Entrada Com\u00fan (CGI Common Gateway Interface), y cambi\u00f3 la web para siempre. Ahora es dif\u00edcil imaginar lo que debe haber sido una revelaci\u00f3n CGI: en lugar de tratar las p\u00e1ginas HTML como simples archivos en el disco, CGI permite pensar en sus p\u00e1ginas como recursos generados din\u00e1micamente a pedido. El desarrollo del CGI marc\u00f3 el comienzo de la primera generaci\u00f3n de sitios web din\u00e1micos. Sin embargo, el CGI tiene sus problemas: Los scripts CGI necesitan contener mucho c\u00f3digo repetitivo, dificultan la reutilizaci\u00f3n del c\u00f3digo, y pueden ser dif\u00edciles de escribir y entender para los desarrolladores novatos. PHP solucion\u00f3 muchos de estos problemas, y tom\u00f3 al mundo por asalto -ahora es la herramienta m\u00e1s popular usada para crear sitios web din\u00e1micos, y docenas de lenguajes similares (ASP, JSP, etc.) siguieron de cerca el dise\u00f1o de PHP. La mayor innovaci\u00f3n de PHP es su facilidad de uso: El c\u00f3digo PHP es simplemente incrustado en HTML plano; la curva de aprendizaje para alguien que ya conoce el HTML es extremadamente superficial. Pero PHP tiene sus propios problemas; su gran facilidad de uso fomenta un c\u00f3digo descuidado, repetitivo y mal concebido. Peor a\u00fan, PHP hace poco para proteger a los programadores de las vulnerabilidades de seguridad, por lo que muchos desarrolladores de PHP se encontraron aprendiendo sobre seguridad s\u00f3lo una vez que ya era demasiado tarde. Estas y otras frustraciones similares condujeron directamente al desarrollo de la actual cosecha de marcos de desarrollo web de tercera generaci\u00f3n. Con esta nueva explosi\u00f3n de desarrollo web viene otro aumento de la ambici\u00f3n; se espera que los desarrolladores web hagan m\u00e1s y m\u00e1s cada d\u00eda. Django fue inventado para satisfacer estas nuevas ambiciones. 1.2. La historia de Django Django creci\u00f3 org\u00e1nicamente a partir de aplicaciones del mundo real escritas por un equipo de desarrollo web en Lawrence, Kansas, USA. Naci\u00f3 en el oto\u00f1o de 2003, cuando los programadores web del peri\u00f3dico Lawrence Journal-World, Adrian Holovaty y Simon Willison , comenzaron a usar Python para construir aplicaciones. El equipo de World Online, responsable de la producci\u00f3n y mantenimiento de varios sitios de noticias locales, prosper\u00f3 en un entorno de desarrollo dictado por los plazos del periodismo. Para los sitios -incluyendo LJWorld.com, Lawrence.com y KUsports.com- los periodistas (y la direcci\u00f3n) exigieron que se a\u00f1adieran caracter\u00edsticas y se construyeran aplicaciones enteras en un horario intensamente r\u00e1pido, a menudo con s\u00f3lo un d\u00eda u hora de aviso. As\u00ed, Simon y Adrian desarrollaron un marco de desarrollo web que ahorraba tiempo por necesidad, era la \u00fanica manera en que pod\u00edan construir aplicaciones mantenibles bajo los plazos extremos. En el verano de 2005, despu\u00e9s de haber desarrollado este marco de trabajo hasta un punto en el que alimentaba eficientemente la mayor\u00eda de los sitios de World Online, el equipo, que ahora inclu\u00eda a Jacob Kaplan-Moss , decidi\u00f3 lanzar el marco de trabajo como software de c\u00f3digo abierto. Lo lanzaron en julio de 2005 y lo llamaron Django, en honor al guitarrista de jazz Django Reinhardt . A pesar de que Django ahora es un proyecto de c\u00f3digo abierto con colaboradores por todo el mundo, los desarrolladores originales de World Online todav\u00eda aportan una gu\u00eda centralizada para el crecimiento del framework, y World Online colabora con otros aspectos importantes tales como tiempo de trabajo, materiales de marketing, y hosting/ancho de banda para el Web site del framework (http://www.djangoproject.com/). Esta historia es relevante porque ayuda a explicar dos cosas clave. La primera es el \"punto dulce\" de Django. Debido a que Django naci\u00f3 en un entorno de noticias, ofrece varias caracter\u00edsticas (como su sitio de administraci\u00f3n) que son particularmente adecuadas para sitios de \"contenido\" como Amazon.com , craigslist.org y washingtonpost.com que ofrecen informaci\u00f3n din\u00e1mica y basada en bases de datos. No hay que desanimarse por eso, aunque Django es particularmente bueno para desarrollar ese tipo de sitios, eso no impide que sea una herramienta efectiva para construir cualquier tipo de sitio web din\u00e1mico. (Hay una diferencia entre ser particularmente eficaz en algo y ser ineficaz en otras cosas). La segunda cuesti\u00f3n a tener en cuenta es c\u00f3mo los or\u00edgenes de Django han dado forma a la cultura de su comunidad de c\u00f3digo abierto. Debido a que Django fue extra\u00eddo del c\u00f3digo del mundo real, en lugar de ser un ejercicio acad\u00e9mico o un producto comercial, est\u00e1 muy enfocado en resolver los problemas de desarrollo web que los propios desarrolladores de Django han afrontado -y contin\u00faan afrontando-. Como resultado, Django mismo se mejora activamente casi a diario. Los encargados de mantener el marco de trabajo tienen un gran inter\u00e9s en asegurarse de que Django ahorre tiempo a los desarrolladores, produzca aplicaciones f\u00e1ciles de mantener y funcione bien bajo carga. Django permite construir sitios profundos, din\u00e1micos e interesantes en un tiempo extremadamente corto. Django est\u00e1 dise\u00f1ado para permitir concentrarse en las partes divertidas e interesantes del trabajo mientras se alivia el dolor de las partes repetitivas. Al hacerlo, proporciona abstracciones de alto nivel de los patrones comunes de desarrollo web, atajos para tareas de programaci\u00f3n frecuentes y convenciones claras sobre c\u00f3mo resolver problemas. Al mismo tiempo, Django trata de mantenerse fuera del camino, dej\u00e1ndo trabajar fuera del \u00e1mbito del marco seg\u00fan sea necesario. Django hace que el desarrollo web sea mejor. Est\u00e1 dise\u00f1ado para moverse r\u00e1pidamente por muchos proyectos Django, y luego, en \u00faltima instancia, ense\u00f1ar todo lo que se necesita saber para dise\u00f1ar, desarrollar e implementar con \u00e9xito un sitio del que sentirse orgulloso. 1.3. The big picture Es dif\u00edcil empezar con Django porque es un proyecto muy grande, pero entender c\u00f3mo se unen todas las partes a un alto nivel, permite dominar Django mucho m\u00e1s r\u00e1pido. En el nivel m\u00e1s alto, Django es un marco de trabajo Modelo-Vista-Controlador - o MVC. MVC es un patr\u00f3n de dise\u00f1o de software que tiene como objetivo separar una aplicaci\u00f3n web en tres partes interconectadas: El modelo , que proporciona la interfaz con la base de datos que contiene los datos de la aplicaci\u00f3n La vista , que decide qu\u00e9 informaci\u00f3n presentar al usuario y recoge informaci\u00f3n del usuario El controlador , que gestiona la l\u00f3gica de negocio de la aplicaci\u00f3n y act\u00faa como un intermediario de informaci\u00f3n entre el modelo y la vista. Django utiliza una terminolog\u00eda ligeramente diferente en su aplicaci\u00f3n del MVC. En Django: El modelo es funcionalmente el mismo. El mapeo de objetos relacionales de Django (ORM - Object Relational Mapping ) proporciona la interfaz para la base de datos de la aplicaci\u00f3n. La plantilla proporciona la l\u00f3gica de visualizaci\u00f3n y es la interfaz entre el usuario y su aplicaci\u00f3n Django. La vista gestiona el grueso de las aplicaciones de proceso de datos, la l\u00f3gica de las aplicaciones y la mensajer\u00eda. El patr\u00f3n de dise\u00f1o de MVC se ha utilizado tanto para aplicaciones de escritorio como para aplicaciones web durante muchos a\u00f1os, por lo que hay un gran n\u00famero de variaciones en este tema, de las que Django no es una excepci\u00f3n. Si se desea profundizar un poco m\u00e1s en el patr\u00f3n de dise\u00f1o de MVC, s\u00f3lo se debe advertir que la gente puede ser muy apasionada sobre lo que es una interpretaci\u00f3n diferente de la misma cosa. Tomando prestada una cita del equipo de desarrollo de Django: \"Al final del d\u00eda, por supuesto, todo se reduce a hacer las cosas. Y, sin importar el nombre de las mismas, Django las hace de la manera m\u00e1s l\u00f3gica para nosotros.\" 1.3.1. Modelos Django Los modelos de Django proporcionan un mapeo de relaci\u00f3n de objetos (ORM) a la base de datos subyacente. El ORM es una poderosa t\u00e9cnica de programaci\u00f3n que facilita el trabajo con datos y bases de datos relacionales. La mayor\u00eda de las bases de datos comunes se programan con alguna forma de Lenguaje de Consulta Estructurado (SQL), sin embargo cada base de datos implementa el SQL a su manera. El SQL puede ser bastante complejo y dif\u00edcil de aprender. Una herramienta ORM, por otro lado, proporciona un simple mapeo entre un objeto (la 'O' en ORM) y la base de datos subyacente, sin que el programador necesite conocer la estructura de la base de datos, o requiera un SQL complejo para manipular y recuperar los datos. En Django, el modelo es el objeto que se asigna a la base de datos. Cuando se crea un modelo, Django crea una tabla correspondiente en la base de datos, sin tener que escribir una sola l\u00ednea de SQL. Django antepone al nombre de la tabla el nombre de la aplicaci\u00f3n Django. El modelo tambi\u00e9n vincula la informaci\u00f3n relacionada en la base de datos. En la figura, se crea un segundo modelo para hacer un seguimiento de los cursos en los que est\u00e1 inscrito un usuario. Repetir toda la informaci\u00f3n de los usuarios en la tabla yourapp_Course ir\u00eda en contra de los buenos principios de dise\u00f1o, por lo que en su lugar se crea una relaci\u00f3n (la 'R' en ORM) entre la tabla yourapp_Course y la tabla yourapp_UserProfile . Esta relaci\u00f3n se crea enlazando los modelos con una clave for\u00e1nea , es decir, el campo user_id en la tabla yourapp_Course es un campo clave que est\u00e1 enlazado con el campo id en la tabla for\u00e1nea yourapp_UserProfile . Esto es solo una simplificaci\u00f3n, pero es una visi\u00f3n general \u00fatil de c\u00f3mo el ORM de Django utiliza los datos del modelo para crear tablas de bases de datos. Las cosas se aclaran una vez que se tiene la oportunidad de construir modelos reales. 1.3.2. Bases de datos soportadas Django soporta oficialmente cuatro bases de datos: PostgreSQL MySQL SQLite Oracle Hay varias aplicaciones de terceros para conectarse a otras bases de datos, si es necesario conectarse a una base de datos con soporte no oficial. La preferencia de la mayor\u00eda de los desarrolladores de Django es PostgreSQL. MySQL tambi\u00e9n es un backend de base de datos bastante com\u00fan para Django. Instalar y configurar una base de datos no es una tarea para un principiante; afortunadamente, Django instala y configura SQLite de forma autom\u00e1tica. 1.3.2.1. \u00bfQu\u00e9 base de datos es mejor? Primero lo f\u00e1cil: SQLite es para el desarrollo y pruebas tempranas. No debe ser usado en producci\u00f3n. Nunca. La siguiente respuesta m\u00e1s f\u00e1cil: Oracle es para grandes corporaciones con grandes bolsillos. Es poco probable que se tenga que decidir si se utiliza Oracle a menos que se una gran empresa, y entonces puede se que esa sea la \u00fanica elecci\u00f3n. En cuanto a PostgreSQL y MySQL: Hay razones definitivas por las que PostgreSQL es una mejor base de datos que MySQL. Sin embargo, para cuando se tenga suficiente experiencia para entender por qu\u00e9, se estar\u00e1s en posici\u00f3n de juzgar m\u00e1s apropiadamente. La mayor\u00eda de las veces la elecci\u00f3n la habr\u00e1 hecho el cliente, su empleador o el anfitri\u00f3n de la web. Los programadores inteligentes evitan este tipo de argumentos: Utilizar PostgreSQL si se puede, de lo contrario MySQL tambi\u00e9n est\u00e1 bien. 1.3.3. Plantillas Django Una plantilla Django es un archivo de texto dise\u00f1ado para separar los datos de una aplicaci\u00f3n de la forma en que se presenta. En la mayor\u00eda de los casos, las plantillas Django son archivos de Lenguaje de Marcado de Hipertexto (HTML) para presentar los datos de la aplicaci\u00f3n en un navegador web, sin embargo, las plantillas Django no se limitan al HTML, sino que pueden utilizarse para presentar varios formatos de texto diferentes. El dise\u00f1o de las plantillas de Django se basa en varios principios b\u00e1sicos, sin embargo, tres son fundamentales: Un sistema de plantillas debe separar la l\u00f3gica del programa del dise\u00f1o. Las plantillas deben desalentar la redundancia: no te repitas (DRY Don't Repeat Yourself ). El sistema de plantillas debe ser seguro y a salvo de la ejecuci\u00f3n de c\u00f3digo en \u00e9l. 1.3.4. Separar la l\u00f3gica del dise\u00f1o El dise\u00f1o y la programaci\u00f3n web son dos disciplinas muy diferentes. En todos los proyectos, excepto en los m\u00e1s peque\u00f1os, el dise\u00f1o y la programaci\u00f3n no la hace el mismo equipo; en muchos casos, ni siquiera la misma compa\u00f1\u00eda. Cuando los creadores de Django consideraron por primera vez el dise\u00f1o del sistema de plantillas de Django, qued\u00f3 claro que los programadores y dise\u00f1adores de sitios web de Django deben ser capaces de trabajar de forma independiente. El resultado es un lenguaje de scripting de texto plano que utiliza tags para proporcionar una l\u00f3gica de presentaci\u00f3n para decidir qu\u00e9 contenido mostrar en la plantilla. Esto es m\u00e1s f\u00e1cil de entender con un simple ejemplo: <h1>Informaci\u00f3n de su pedido</h1> <p>Apreciado Sr. {{ person_name }},</p> Este podr\u00eda ser el primer par de l\u00edneas de una p\u00e1gina de confirmaci\u00f3n de pedido, que se muestra en un sitio web despu\u00e9s de que el usuario haya hecho una compra. Notar que la mayor\u00eda de este c\u00f3digo es HTML simple. La peque\u00f1a parte escrita en negrita en negrita es una etiqueta de variable de Django. Cuando esta plantilla se muestre en el navegador, la plantilla sustituir\u00e1 la variable person_name por el nombre que se le pase a la vista. Como se trata de texto plano y HTML, un dise\u00f1ador no necesita saber nada sobre Django para poder crear una plantilla Django. Todo lo que el dise\u00f1ador tiene que hacer es a\u00f1adir un marcador de posici\u00f3n (etiqueta de comentario HTML, por ejemplo), para que el programador lo sustituya por una etiqueta Django al codificar el sitio web. La otra gran ventaja de este enfoque es que, dado que la mayor parte de la plantilla es HTML simple, como programador, se puede crear un sitio web de buena apariencia sin un dise\u00f1ador: se puede descargar una plantilla HTML de Internet y agregar etiquetas de plantilla Django. Esto tambi\u00e9n funciona con las plantillas Bootstrap y los sitios pesados en parte front-end de JavaScript. 1.3.5. Don't Repeat Yourself (DRY) DRY es un t\u00e9rmino que aparece a menudo en el discurso de Django, ya que es uno de los principios fundamentales de Django. El principio DRY es particularmente evidente en c\u00f3mo Django utiliza la herencia de modelos . Para entender mejor c\u00f3mo la herencia de plantillas nos ayuda a minimizar la repetici\u00f3n y el c\u00f3digo redundante, vamos a examinar primero un dise\u00f1o t\u00edpico de p\u00e1gina web. Este dise\u00f1o de p\u00e1gina tiene una navegaci\u00f3n superior, una imagen de cabecera, un men\u00fa lateral izquierdo, el contenido principal de la p\u00e1gina y un pie de p\u00e1gina. Si s\u00f3lo se quisiera crear unas pocas p\u00e1ginas web, se podr\u00eda copiar la p\u00e1gina principal y simplemente cambiar el contenido y guardar cada p\u00e1gina diferente como un archivo HTML. El problema es que no s\u00f3lo estamos repitiendo mucho c\u00f3digo, sino que el mantenimiento de un sitio grande podr\u00eda salirse r\u00e1pidamente de control. \u00a1Se tendr\u00eda que hacer el cambio en cada una de las p\u00e1ginas del sitio!. Este problema se soluciona creando una plantilla principal que tiene el contenido com\u00fan a todo el sitio web y luego creando plantillas secundarias que heredan estas caracter\u00edsticas comunes y luego agregan cualquier contenido \u00fanico a la plantilla secundaria. Se habr\u00e1 notado que se incluy\u00f3 la navegaci\u00f3n de la barra lateral del hijo. Es com\u00fan que ciertas p\u00e1ginas de un sitio tengan una navegaci\u00f3n limitada, as\u00ed que no todas las p\u00e1ginas necesitar\u00e1n la navegaci\u00f3n lateral. Django tambi\u00e9n admite la herencia m\u00faltiple, por lo que, siguiendo con el ejemplo anterior, se podr\u00eda tener una plantilla hija que agregue s\u00f3lo la navegaci\u00f3n lateral al padre, y luego tener una tercera plantilla que herede de la hija y agregue el contenido. El \u00fanico l\u00edmite a la herencia de plantillas de Django es el pr\u00e1ctico: si tienen plantillas que heredan m\u00e1s de dos o tres niveles de profundidad, se deber\u00eda reevaluar el dise\u00f1o del sitio. 1.3.6. Seguridad en las Plantillas La filosof\u00eda de Django es que Internet ya es lo suficientemente insegura como para introducir m\u00e1s problemas de seguridad al permitir la ejecuci\u00f3n de c\u00f3digo dentro de las plantillas de las p\u00e1ginas web. La soluci\u00f3n de Django a las vulnerabilidades de seguridad de las plantillas es simple: la ejecuci\u00f3n de c\u00f3digo est\u00e1 prohibida en las plantillas . Las etiquetas de las plantillas de Django proporcionan s\u00f3lo l\u00f3gica de visualizaci\u00f3n, esto incluye: Mostrar variables : puede ser un texto simple como el nombre de un usuario, o datos m\u00e1s complejos como texto con formato HTML. Elegir el contenido que se va a mostrar : bas\u00e1ndose en comprobaciones l\u00f3gicas, por ejemplo, si un usuario est\u00e1 conectado, entonces mostrar el men\u00fa de usuario o el contenido de ese usuario. Iterar sobre las listas de datos : lo m\u00e1s frecuente es que se utilice para insertar informaci\u00f3n de la base de datos en las listas de HTML. Formateo de los datos : por ejemplo, formato de fecha, manipulaci\u00f3n de texto y otros filtros que act\u00faan sobre los datos. Cosas que no se pueden hacer en una plantilla Django: Ejecutar c\u00f3digo Python Asignar un valor a una variable Realizar la l\u00f3gica avanzada Las plantillas de Django tambi\u00e9n a\u00f1aden caracter\u00edsticas de seguridad adicionales como el escape autom\u00e1tico de todas las cadenas, Cross-Site Scripting y la protecci\u00f3n Cross-Site Request Forgery. Estos dos \u00faltimos temas van m\u00e1s all\u00e1 de un texto inicial, pero es \u00fatil comprender que las plantillas de Django son seguras de forma predeterminada, por lo que no hay que preocuparse de introducir problemas de seguridad en el sitio web de forma accidental. 1.3.7. Vistas de Django Las vistas de Django son los brokers de informaci\u00f3n de una aplicaci\u00f3n de Django. Una vista obtiene los datos de la base de datos (o de una fuente o servicio de datos externos) y los entrega a una plantilla. En el caso de una aplicaci\u00f3n web, la vista entrega el contenido de la p\u00e1gina web y las plantillas; en el caso de una API RESTful, este contenido podr\u00eda estar formateado adecuadamente en datos JSON. La vista toma decisiones sobre los datos que se entregan a la plantilla, ya sea actuando sobre la entrada del usuario o en respuesta a otra l\u00f3gica de negocio y procesos internos. Cada vista de Django realiza una funci\u00f3n espec\u00edfica y tiene una plantilla asociada. Las vistas est\u00e1n representadas por una funci\u00f3n Python, o un m\u00e9todo de una clase Python. En los inicios de Django, s\u00f3lo exist\u00edan vistas basadas en funciones, sin embargo, a medida que Django ha ido creciendo a lo largo de los a\u00f1os, los desarrolladores de Django a\u00f1adieron a Django vistas basadas en clases. Las vistas basadas en clases a\u00f1aden extensibilidad a las vistas de Django, as\u00ed como vistas incorporadas que hacen que la creaci\u00f3n de vistas comunes (como la visualizaci\u00f3n de una lista de art\u00edculos) sea m\u00e1s f\u00e1cil de implementar. No preocuparse demasiado por las diferencias entre las vistas basadas en funciones y las basadas en clases por ahora. Para aliviar la carga de los programadores, muchas tareas de visualizaci\u00f3n comunes tienen vistas incorporadas en Django. Hay cuatro vistas incorporadas basadas en funciones para mostrar las p\u00e1ginas de error: La vista 404 (page not found) La vista 500 (server error) La vista 403 (HTTP Forbidden) La vista de 400 (bad request) Tambi\u00e9n hay varias vistas basadas en clases para simplificar las tareas comunes de visualizaci\u00f3n. Entre ellas se incluyen: ListView para mostrar una lista de objetos de datos (por ejemplo, lista de todos los art\u00edculos) DetailView para mostrar un solo objeto (por ejemplo, un art\u00edculo individual) RedirectView redirige a otra URL FormView para mostrar un formulario Tambi\u00e9n se proporcionan vistas de fechas gen\u00e9ricas adicionales basadas en clases para mostrar colecciones de objetos de d\u00eda, semana, mes y a\u00f1o, como entradas de blog y art\u00edculos. 1.3.8. URLconf - Colocando todo junto Un sitio web no es de mucha utilidad si no se puede navegar por \u00e9l: hay que decirle a la vista qu\u00e9 mostrar en el navegador, en base a lo que el usuario ha solicitado. La navegaci\u00f3n en un sitio web Django es la misma que en cualquier otro sitio web: las p\u00e1ginas y otros contenidos se acceden a trav\u00e9s de la URL . Cuando un usuario hace clic en un enlace de un sitio web, se env\u00eda una solicitud de esa URL a Django. Una vez que Django recibe la URL solicitada, debe decidir qu\u00e9 vista se ocupar\u00e1 de la solicitud. El programador decide qu\u00e9 vista servir\u00e1 en qu\u00e9 URL creando una Configuraci\u00f3n de URL (URLconf para abreviar) en un archivo de Python llamado urls.py . Cuando Django encuentra una URL en urls.py que coincide con la URL solicitada, llama a la vista asociada a esa URL. La vista seleccionada entonces renderiza el contenido a una plantilla, seg\u00fan la l\u00f3gica de negocio de la vista y env\u00eda el contenido renderizado de vuelta al navegador para su visualizaci\u00f3n. Por supuesto, esto es una simplificaci\u00f3n: Django puede recoger datos mucho m\u00e1s complejos del navegador que una URL, y las vistas no s\u00f3lo representan p\u00e1ginas web. Tambi\u00e9n hay otra capa colch\u00f3n en Django que se sit\u00faa entre la solicitud del navegador y la respuesta de la vista (a la que Django llama, de forma bastante inteligente, \" middleware \") que permite hacer toneladas de cosas geniales con los datos. La clave aqu\u00ed es que, independientemente de lo complejo que sea un sitio web, este simple proceso subyace en toda la comunicaci\u00f3n entre Django, el navegador y el usuario final. As\u00ed que eso es todo en cuanto a nuestra mirada de alto nivel a la estructura de Django y de c\u00f3mo Django se comunica con el navegador para mostrar el contenido de su sitio. No preocuparse si se est\u00e1 todav\u00eda un poco confundido con todo esto. A medida que se va profundizando y se empieza a desarrollar aplicaciones reales de Django, se hace mucho m\u00e1s f\u00e1cil comprender c\u00f3mo funciona todo. 1.4. El plan Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv 1.4.1. Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\" La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas. 1.4.2. Por qu\u00e9 unos apuntes Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS 1.4.3 Estructura 1.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1. Introducci\u00f3n"},{"location":"1_introduccion/#1-introduccion","text":"","title":"1 Introducci\u00f3n"},{"location":"1_introduccion/#11-introduciendo-django","text":"El gran software de c\u00f3digo abierto casi siempre se construye porque uno o m\u00e1s desarrolladores inteligentes ten\u00edan un problema que resolver y no hab\u00eda ninguna soluci\u00f3n viable o rentable disponible. Django no es una excepci\u00f3n. Adrian y Jacob hace tiempo que se retiraron del proyecto, pero los fundamentos de lo que los llev\u00f3 a crear Django siguen vivos. Es esta s\u00f3lida base de experiencia en el mundo real la que ha hecho a Django tan exitoso como lo es. En reconocimiento a su contribuci\u00f3n, es mejor que les dejemos presentar a Django con sus propias palabras (editado y reformateado a partir del libro original).","title":"1.1. Introduciendo Django"},{"location":"1_introduccion/#111-por-adrian-holovaty-y-jacob-kaplan-moss-diciembre-2009","text":"En los primeros d\u00edas, los desarrolladores web escrib\u00edan cada p\u00e1gina a mano. Actualizar un sitio web significaba editar el HTML; un redise\u00f1o implicaba rehacer cada una de las p\u00e1ginas, una a una. A medida que los sitios web crec\u00edan y se volv\u00edan m\u00e1s ambiciosos, se hizo evidente r\u00e1pidamente que ese enfoque era tedioso, lento y, en \u00faltima instancia, insostenible. Un grupo de hackers emprendedores del Centro Nacional de Aplicaciones de Supercomputaci\u00f3n (la NCSA, donde se desarroll\u00f3 Mosaic, el primer navegador web gr\u00e1fico) resolvi\u00f3 este problema dejando que el servidor web generara programas externos que pudieran generar HTML de forma din\u00e1mica. Llamaron a este protocolo la Interfaz de Entrada Com\u00fan (CGI Common Gateway Interface), y cambi\u00f3 la web para siempre. Ahora es dif\u00edcil imaginar lo que debe haber sido una revelaci\u00f3n CGI: en lugar de tratar las p\u00e1ginas HTML como simples archivos en el disco, CGI permite pensar en sus p\u00e1ginas como recursos generados din\u00e1micamente a pedido. El desarrollo del CGI marc\u00f3 el comienzo de la primera generaci\u00f3n de sitios web din\u00e1micos. Sin embargo, el CGI tiene sus problemas: Los scripts CGI necesitan contener mucho c\u00f3digo repetitivo, dificultan la reutilizaci\u00f3n del c\u00f3digo, y pueden ser dif\u00edciles de escribir y entender para los desarrolladores novatos. PHP solucion\u00f3 muchos de estos problemas, y tom\u00f3 al mundo por asalto -ahora es la herramienta m\u00e1s popular usada para crear sitios web din\u00e1micos, y docenas de lenguajes similares (ASP, JSP, etc.) siguieron de cerca el dise\u00f1o de PHP. La mayor innovaci\u00f3n de PHP es su facilidad de uso: El c\u00f3digo PHP es simplemente incrustado en HTML plano; la curva de aprendizaje para alguien que ya conoce el HTML es extremadamente superficial. Pero PHP tiene sus propios problemas; su gran facilidad de uso fomenta un c\u00f3digo descuidado, repetitivo y mal concebido. Peor a\u00fan, PHP hace poco para proteger a los programadores de las vulnerabilidades de seguridad, por lo que muchos desarrolladores de PHP se encontraron aprendiendo sobre seguridad s\u00f3lo una vez que ya era demasiado tarde. Estas y otras frustraciones similares condujeron directamente al desarrollo de la actual cosecha de marcos de desarrollo web de tercera generaci\u00f3n. Con esta nueva explosi\u00f3n de desarrollo web viene otro aumento de la ambici\u00f3n; se espera que los desarrolladores web hagan m\u00e1s y m\u00e1s cada d\u00eda. Django fue inventado para satisfacer estas nuevas ambiciones.","title":"1.1.1. Por Adrian Holovaty y Jacob Kaplan-Moss  (Diciembre 2009)"},{"location":"1_introduccion/#12-la-historia-de-django","text":"Django creci\u00f3 org\u00e1nicamente a partir de aplicaciones del mundo real escritas por un equipo de desarrollo web en Lawrence, Kansas, USA. Naci\u00f3 en el oto\u00f1o de 2003, cuando los programadores web del peri\u00f3dico Lawrence Journal-World, Adrian Holovaty y Simon Willison , comenzaron a usar Python para construir aplicaciones. El equipo de World Online, responsable de la producci\u00f3n y mantenimiento de varios sitios de noticias locales, prosper\u00f3 en un entorno de desarrollo dictado por los plazos del periodismo. Para los sitios -incluyendo LJWorld.com, Lawrence.com y KUsports.com- los periodistas (y la direcci\u00f3n) exigieron que se a\u00f1adieran caracter\u00edsticas y se construyeran aplicaciones enteras en un horario intensamente r\u00e1pido, a menudo con s\u00f3lo un d\u00eda u hora de aviso. As\u00ed, Simon y Adrian desarrollaron un marco de desarrollo web que ahorraba tiempo por necesidad, era la \u00fanica manera en que pod\u00edan construir aplicaciones mantenibles bajo los plazos extremos. En el verano de 2005, despu\u00e9s de haber desarrollado este marco de trabajo hasta un punto en el que alimentaba eficientemente la mayor\u00eda de los sitios de World Online, el equipo, que ahora inclu\u00eda a Jacob Kaplan-Moss , decidi\u00f3 lanzar el marco de trabajo como software de c\u00f3digo abierto. Lo lanzaron en julio de 2005 y lo llamaron Django, en honor al guitarrista de jazz Django Reinhardt . A pesar de que Django ahora es un proyecto de c\u00f3digo abierto con colaboradores por todo el mundo, los desarrolladores originales de World Online todav\u00eda aportan una gu\u00eda centralizada para el crecimiento del framework, y World Online colabora con otros aspectos importantes tales como tiempo de trabajo, materiales de marketing, y hosting/ancho de banda para el Web site del framework (http://www.djangoproject.com/). Esta historia es relevante porque ayuda a explicar dos cosas clave. La primera es el \"punto dulce\" de Django. Debido a que Django naci\u00f3 en un entorno de noticias, ofrece varias caracter\u00edsticas (como su sitio de administraci\u00f3n) que son particularmente adecuadas para sitios de \"contenido\" como Amazon.com , craigslist.org y washingtonpost.com que ofrecen informaci\u00f3n din\u00e1mica y basada en bases de datos. No hay que desanimarse por eso, aunque Django es particularmente bueno para desarrollar ese tipo de sitios, eso no impide que sea una herramienta efectiva para construir cualquier tipo de sitio web din\u00e1mico. (Hay una diferencia entre ser particularmente eficaz en algo y ser ineficaz en otras cosas). La segunda cuesti\u00f3n a tener en cuenta es c\u00f3mo los or\u00edgenes de Django han dado forma a la cultura de su comunidad de c\u00f3digo abierto. Debido a que Django fue extra\u00eddo del c\u00f3digo del mundo real, en lugar de ser un ejercicio acad\u00e9mico o un producto comercial, est\u00e1 muy enfocado en resolver los problemas de desarrollo web que los propios desarrolladores de Django han afrontado -y contin\u00faan afrontando-. Como resultado, Django mismo se mejora activamente casi a diario. Los encargados de mantener el marco de trabajo tienen un gran inter\u00e9s en asegurarse de que Django ahorre tiempo a los desarrolladores, produzca aplicaciones f\u00e1ciles de mantener y funcione bien bajo carga. Django permite construir sitios profundos, din\u00e1micos e interesantes en un tiempo extremadamente corto. Django est\u00e1 dise\u00f1ado para permitir concentrarse en las partes divertidas e interesantes del trabajo mientras se alivia el dolor de las partes repetitivas. Al hacerlo, proporciona abstracciones de alto nivel de los patrones comunes de desarrollo web, atajos para tareas de programaci\u00f3n frecuentes y convenciones claras sobre c\u00f3mo resolver problemas. Al mismo tiempo, Django trata de mantenerse fuera del camino, dej\u00e1ndo trabajar fuera del \u00e1mbito del marco seg\u00fan sea necesario. Django hace que el desarrollo web sea mejor. Est\u00e1 dise\u00f1ado para moverse r\u00e1pidamente por muchos proyectos Django, y luego, en \u00faltima instancia, ense\u00f1ar todo lo que se necesita saber para dise\u00f1ar, desarrollar e implementar con \u00e9xito un sitio del que sentirse orgulloso.","title":"1.2. La historia de Django"},{"location":"1_introduccion/#13-the-big-picture","text":"Es dif\u00edcil empezar con Django porque es un proyecto muy grande, pero entender c\u00f3mo se unen todas las partes a un alto nivel, permite dominar Django mucho m\u00e1s r\u00e1pido. En el nivel m\u00e1s alto, Django es un marco de trabajo Modelo-Vista-Controlador - o MVC. MVC es un patr\u00f3n de dise\u00f1o de software que tiene como objetivo separar una aplicaci\u00f3n web en tres partes interconectadas: El modelo , que proporciona la interfaz con la base de datos que contiene los datos de la aplicaci\u00f3n La vista , que decide qu\u00e9 informaci\u00f3n presentar al usuario y recoge informaci\u00f3n del usuario El controlador , que gestiona la l\u00f3gica de negocio de la aplicaci\u00f3n y act\u00faa como un intermediario de informaci\u00f3n entre el modelo y la vista. Django utiliza una terminolog\u00eda ligeramente diferente en su aplicaci\u00f3n del MVC. En Django: El modelo es funcionalmente el mismo. El mapeo de objetos relacionales de Django (ORM - Object Relational Mapping ) proporciona la interfaz para la base de datos de la aplicaci\u00f3n. La plantilla proporciona la l\u00f3gica de visualizaci\u00f3n y es la interfaz entre el usuario y su aplicaci\u00f3n Django. La vista gestiona el grueso de las aplicaciones de proceso de datos, la l\u00f3gica de las aplicaciones y la mensajer\u00eda. El patr\u00f3n de dise\u00f1o de MVC se ha utilizado tanto para aplicaciones de escritorio como para aplicaciones web durante muchos a\u00f1os, por lo que hay un gran n\u00famero de variaciones en este tema, de las que Django no es una excepci\u00f3n. Si se desea profundizar un poco m\u00e1s en el patr\u00f3n de dise\u00f1o de MVC, s\u00f3lo se debe advertir que la gente puede ser muy apasionada sobre lo que es una interpretaci\u00f3n diferente de la misma cosa. Tomando prestada una cita del equipo de desarrollo de Django: \"Al final del d\u00eda, por supuesto, todo se reduce a hacer las cosas. Y, sin importar el nombre de las mismas, Django las hace de la manera m\u00e1s l\u00f3gica para nosotros.\"","title":"1.3. The big picture"},{"location":"1_introduccion/#131-modelos-django","text":"Los modelos de Django proporcionan un mapeo de relaci\u00f3n de objetos (ORM) a la base de datos subyacente. El ORM es una poderosa t\u00e9cnica de programaci\u00f3n que facilita el trabajo con datos y bases de datos relacionales. La mayor\u00eda de las bases de datos comunes se programan con alguna forma de Lenguaje de Consulta Estructurado (SQL), sin embargo cada base de datos implementa el SQL a su manera. El SQL puede ser bastante complejo y dif\u00edcil de aprender. Una herramienta ORM, por otro lado, proporciona un simple mapeo entre un objeto (la 'O' en ORM) y la base de datos subyacente, sin que el programador necesite conocer la estructura de la base de datos, o requiera un SQL complejo para manipular y recuperar los datos. En Django, el modelo es el objeto que se asigna a la base de datos. Cuando se crea un modelo, Django crea una tabla correspondiente en la base de datos, sin tener que escribir una sola l\u00ednea de SQL. Django antepone al nombre de la tabla el nombre de la aplicaci\u00f3n Django. El modelo tambi\u00e9n vincula la informaci\u00f3n relacionada en la base de datos. En la figura, se crea un segundo modelo para hacer un seguimiento de los cursos en los que est\u00e1 inscrito un usuario. Repetir toda la informaci\u00f3n de los usuarios en la tabla yourapp_Course ir\u00eda en contra de los buenos principios de dise\u00f1o, por lo que en su lugar se crea una relaci\u00f3n (la 'R' en ORM) entre la tabla yourapp_Course y la tabla yourapp_UserProfile . Esta relaci\u00f3n se crea enlazando los modelos con una clave for\u00e1nea , es decir, el campo user_id en la tabla yourapp_Course es un campo clave que est\u00e1 enlazado con el campo id en la tabla for\u00e1nea yourapp_UserProfile . Esto es solo una simplificaci\u00f3n, pero es una visi\u00f3n general \u00fatil de c\u00f3mo el ORM de Django utiliza los datos del modelo para crear tablas de bases de datos. Las cosas se aclaran una vez que se tiene la oportunidad de construir modelos reales.","title":"1.3.1. Modelos Django"},{"location":"1_introduccion/#132-bases-de-datos-soportadas","text":"Django soporta oficialmente cuatro bases de datos: PostgreSQL MySQL SQLite Oracle Hay varias aplicaciones de terceros para conectarse a otras bases de datos, si es necesario conectarse a una base de datos con soporte no oficial. La preferencia de la mayor\u00eda de los desarrolladores de Django es PostgreSQL. MySQL tambi\u00e9n es un backend de base de datos bastante com\u00fan para Django. Instalar y configurar una base de datos no es una tarea para un principiante; afortunadamente, Django instala y configura SQLite de forma autom\u00e1tica.","title":"1.3.2. Bases de datos soportadas"},{"location":"1_introduccion/#1321-que-base-de-datos-es-mejor","text":"Primero lo f\u00e1cil: SQLite es para el desarrollo y pruebas tempranas. No debe ser usado en producci\u00f3n. Nunca. La siguiente respuesta m\u00e1s f\u00e1cil: Oracle es para grandes corporaciones con grandes bolsillos. Es poco probable que se tenga que decidir si se utiliza Oracle a menos que se una gran empresa, y entonces puede se que esa sea la \u00fanica elecci\u00f3n. En cuanto a PostgreSQL y MySQL: Hay razones definitivas por las que PostgreSQL es una mejor base de datos que MySQL. Sin embargo, para cuando se tenga suficiente experiencia para entender por qu\u00e9, se estar\u00e1s en posici\u00f3n de juzgar m\u00e1s apropiadamente. La mayor\u00eda de las veces la elecci\u00f3n la habr\u00e1 hecho el cliente, su empleador o el anfitri\u00f3n de la web. Los programadores inteligentes evitan este tipo de argumentos: Utilizar PostgreSQL si se puede, de lo contrario MySQL tambi\u00e9n est\u00e1 bien.","title":"1.3.2.1. \u00bfQu\u00e9 base de datos es mejor?"},{"location":"1_introduccion/#133-plantillas-django","text":"Una plantilla Django es un archivo de texto dise\u00f1ado para separar los datos de una aplicaci\u00f3n de la forma en que se presenta. En la mayor\u00eda de los casos, las plantillas Django son archivos de Lenguaje de Marcado de Hipertexto (HTML) para presentar los datos de la aplicaci\u00f3n en un navegador web, sin embargo, las plantillas Django no se limitan al HTML, sino que pueden utilizarse para presentar varios formatos de texto diferentes. El dise\u00f1o de las plantillas de Django se basa en varios principios b\u00e1sicos, sin embargo, tres son fundamentales: Un sistema de plantillas debe separar la l\u00f3gica del programa del dise\u00f1o. Las plantillas deben desalentar la redundancia: no te repitas (DRY Don't Repeat Yourself ). El sistema de plantillas debe ser seguro y a salvo de la ejecuci\u00f3n de c\u00f3digo en \u00e9l.","title":"1.3.3. Plantillas Django"},{"location":"1_introduccion/#134-separar-la-logica-del-diseno","text":"El dise\u00f1o y la programaci\u00f3n web son dos disciplinas muy diferentes. En todos los proyectos, excepto en los m\u00e1s peque\u00f1os, el dise\u00f1o y la programaci\u00f3n no la hace el mismo equipo; en muchos casos, ni siquiera la misma compa\u00f1\u00eda. Cuando los creadores de Django consideraron por primera vez el dise\u00f1o del sistema de plantillas de Django, qued\u00f3 claro que los programadores y dise\u00f1adores de sitios web de Django deben ser capaces de trabajar de forma independiente. El resultado es un lenguaje de scripting de texto plano que utiliza tags para proporcionar una l\u00f3gica de presentaci\u00f3n para decidir qu\u00e9 contenido mostrar en la plantilla. Esto es m\u00e1s f\u00e1cil de entender con un simple ejemplo: <h1>Informaci\u00f3n de su pedido</h1> <p>Apreciado Sr. {{ person_name }},</p> Este podr\u00eda ser el primer par de l\u00edneas de una p\u00e1gina de confirmaci\u00f3n de pedido, que se muestra en un sitio web despu\u00e9s de que el usuario haya hecho una compra. Notar que la mayor\u00eda de este c\u00f3digo es HTML simple. La peque\u00f1a parte escrita en negrita en negrita es una etiqueta de variable de Django. Cuando esta plantilla se muestre en el navegador, la plantilla sustituir\u00e1 la variable person_name por el nombre que se le pase a la vista. Como se trata de texto plano y HTML, un dise\u00f1ador no necesita saber nada sobre Django para poder crear una plantilla Django. Todo lo que el dise\u00f1ador tiene que hacer es a\u00f1adir un marcador de posici\u00f3n (etiqueta de comentario HTML, por ejemplo), para que el programador lo sustituya por una etiqueta Django al codificar el sitio web. La otra gran ventaja de este enfoque es que, dado que la mayor parte de la plantilla es HTML simple, como programador, se puede crear un sitio web de buena apariencia sin un dise\u00f1ador: se puede descargar una plantilla HTML de Internet y agregar etiquetas de plantilla Django. Esto tambi\u00e9n funciona con las plantillas Bootstrap y los sitios pesados en parte front-end de JavaScript.","title":"1.3.4. Separar la l\u00f3gica del dise\u00f1o"},{"location":"1_introduccion/#135-dont-repeat-yourself-dry","text":"DRY es un t\u00e9rmino que aparece a menudo en el discurso de Django, ya que es uno de los principios fundamentales de Django. El principio DRY es particularmente evidente en c\u00f3mo Django utiliza la herencia de modelos . Para entender mejor c\u00f3mo la herencia de plantillas nos ayuda a minimizar la repetici\u00f3n y el c\u00f3digo redundante, vamos a examinar primero un dise\u00f1o t\u00edpico de p\u00e1gina web. Este dise\u00f1o de p\u00e1gina tiene una navegaci\u00f3n superior, una imagen de cabecera, un men\u00fa lateral izquierdo, el contenido principal de la p\u00e1gina y un pie de p\u00e1gina. Si s\u00f3lo se quisiera crear unas pocas p\u00e1ginas web, se podr\u00eda copiar la p\u00e1gina principal y simplemente cambiar el contenido y guardar cada p\u00e1gina diferente como un archivo HTML. El problema es que no s\u00f3lo estamos repitiendo mucho c\u00f3digo, sino que el mantenimiento de un sitio grande podr\u00eda salirse r\u00e1pidamente de control. \u00a1Se tendr\u00eda que hacer el cambio en cada una de las p\u00e1ginas del sitio!. Este problema se soluciona creando una plantilla principal que tiene el contenido com\u00fan a todo el sitio web y luego creando plantillas secundarias que heredan estas caracter\u00edsticas comunes y luego agregan cualquier contenido \u00fanico a la plantilla secundaria. Se habr\u00e1 notado que se incluy\u00f3 la navegaci\u00f3n de la barra lateral del hijo. Es com\u00fan que ciertas p\u00e1ginas de un sitio tengan una navegaci\u00f3n limitada, as\u00ed que no todas las p\u00e1ginas necesitar\u00e1n la navegaci\u00f3n lateral. Django tambi\u00e9n admite la herencia m\u00faltiple, por lo que, siguiendo con el ejemplo anterior, se podr\u00eda tener una plantilla hija que agregue s\u00f3lo la navegaci\u00f3n lateral al padre, y luego tener una tercera plantilla que herede de la hija y agregue el contenido. El \u00fanico l\u00edmite a la herencia de plantillas de Django es el pr\u00e1ctico: si tienen plantillas que heredan m\u00e1s de dos o tres niveles de profundidad, se deber\u00eda reevaluar el dise\u00f1o del sitio.","title":"1.3.5. Don't Repeat Yourself (DRY)"},{"location":"1_introduccion/#136-seguridad-en-las-plantillas","text":"La filosof\u00eda de Django es que Internet ya es lo suficientemente insegura como para introducir m\u00e1s problemas de seguridad al permitir la ejecuci\u00f3n de c\u00f3digo dentro de las plantillas de las p\u00e1ginas web. La soluci\u00f3n de Django a las vulnerabilidades de seguridad de las plantillas es simple: la ejecuci\u00f3n de c\u00f3digo est\u00e1 prohibida en las plantillas . Las etiquetas de las plantillas de Django proporcionan s\u00f3lo l\u00f3gica de visualizaci\u00f3n, esto incluye: Mostrar variables : puede ser un texto simple como el nombre de un usuario, o datos m\u00e1s complejos como texto con formato HTML. Elegir el contenido que se va a mostrar : bas\u00e1ndose en comprobaciones l\u00f3gicas, por ejemplo, si un usuario est\u00e1 conectado, entonces mostrar el men\u00fa de usuario o el contenido de ese usuario. Iterar sobre las listas de datos : lo m\u00e1s frecuente es que se utilice para insertar informaci\u00f3n de la base de datos en las listas de HTML. Formateo de los datos : por ejemplo, formato de fecha, manipulaci\u00f3n de texto y otros filtros que act\u00faan sobre los datos. Cosas que no se pueden hacer en una plantilla Django: Ejecutar c\u00f3digo Python Asignar un valor a una variable Realizar la l\u00f3gica avanzada Las plantillas de Django tambi\u00e9n a\u00f1aden caracter\u00edsticas de seguridad adicionales como el escape autom\u00e1tico de todas las cadenas, Cross-Site Scripting y la protecci\u00f3n Cross-Site Request Forgery. Estos dos \u00faltimos temas van m\u00e1s all\u00e1 de un texto inicial, pero es \u00fatil comprender que las plantillas de Django son seguras de forma predeterminada, por lo que no hay que preocuparse de introducir problemas de seguridad en el sitio web de forma accidental.","title":"1.3.6. Seguridad en las Plantillas"},{"location":"1_introduccion/#137-vistas-de-django","text":"Las vistas de Django son los brokers de informaci\u00f3n de una aplicaci\u00f3n de Django. Una vista obtiene los datos de la base de datos (o de una fuente o servicio de datos externos) y los entrega a una plantilla. En el caso de una aplicaci\u00f3n web, la vista entrega el contenido de la p\u00e1gina web y las plantillas; en el caso de una API RESTful, este contenido podr\u00eda estar formateado adecuadamente en datos JSON. La vista toma decisiones sobre los datos que se entregan a la plantilla, ya sea actuando sobre la entrada del usuario o en respuesta a otra l\u00f3gica de negocio y procesos internos. Cada vista de Django realiza una funci\u00f3n espec\u00edfica y tiene una plantilla asociada. Las vistas est\u00e1n representadas por una funci\u00f3n Python, o un m\u00e9todo de una clase Python. En los inicios de Django, s\u00f3lo exist\u00edan vistas basadas en funciones, sin embargo, a medida que Django ha ido creciendo a lo largo de los a\u00f1os, los desarrolladores de Django a\u00f1adieron a Django vistas basadas en clases. Las vistas basadas en clases a\u00f1aden extensibilidad a las vistas de Django, as\u00ed como vistas incorporadas que hacen que la creaci\u00f3n de vistas comunes (como la visualizaci\u00f3n de una lista de art\u00edculos) sea m\u00e1s f\u00e1cil de implementar. No preocuparse demasiado por las diferencias entre las vistas basadas en funciones y las basadas en clases por ahora. Para aliviar la carga de los programadores, muchas tareas de visualizaci\u00f3n comunes tienen vistas incorporadas en Django. Hay cuatro vistas incorporadas basadas en funciones para mostrar las p\u00e1ginas de error: La vista 404 (page not found) La vista 500 (server error) La vista 403 (HTTP Forbidden) La vista de 400 (bad request) Tambi\u00e9n hay varias vistas basadas en clases para simplificar las tareas comunes de visualizaci\u00f3n. Entre ellas se incluyen: ListView para mostrar una lista de objetos de datos (por ejemplo, lista de todos los art\u00edculos) DetailView para mostrar un solo objeto (por ejemplo, un art\u00edculo individual) RedirectView redirige a otra URL FormView para mostrar un formulario Tambi\u00e9n se proporcionan vistas de fechas gen\u00e9ricas adicionales basadas en clases para mostrar colecciones de objetos de d\u00eda, semana, mes y a\u00f1o, como entradas de blog y art\u00edculos.","title":"1.3.7. Vistas de Django"},{"location":"1_introduccion/#138-urlconf-colocando-todo-junto","text":"Un sitio web no es de mucha utilidad si no se puede navegar por \u00e9l: hay que decirle a la vista qu\u00e9 mostrar en el navegador, en base a lo que el usuario ha solicitado. La navegaci\u00f3n en un sitio web Django es la misma que en cualquier otro sitio web: las p\u00e1ginas y otros contenidos se acceden a trav\u00e9s de la URL . Cuando un usuario hace clic en un enlace de un sitio web, se env\u00eda una solicitud de esa URL a Django. Una vez que Django recibe la URL solicitada, debe decidir qu\u00e9 vista se ocupar\u00e1 de la solicitud. El programador decide qu\u00e9 vista servir\u00e1 en qu\u00e9 URL creando una Configuraci\u00f3n de URL (URLconf para abreviar) en un archivo de Python llamado urls.py . Cuando Django encuentra una URL en urls.py que coincide con la URL solicitada, llama a la vista asociada a esa URL. La vista seleccionada entonces renderiza el contenido a una plantilla, seg\u00fan la l\u00f3gica de negocio de la vista y env\u00eda el contenido renderizado de vuelta al navegador para su visualizaci\u00f3n. Por supuesto, esto es una simplificaci\u00f3n: Django puede recoger datos mucho m\u00e1s complejos del navegador que una URL, y las vistas no s\u00f3lo representan p\u00e1ginas web. Tambi\u00e9n hay otra capa colch\u00f3n en Django que se sit\u00faa entre la solicitud del navegador y la respuesta de la vista (a la que Django llama, de forma bastante inteligente, \" middleware \") que permite hacer toneladas de cosas geniales con los datos. La clave aqu\u00ed es que, independientemente de lo complejo que sea un sitio web, este simple proceso subyace en toda la comunicaci\u00f3n entre Django, el navegador y el usuario final. As\u00ed que eso es todo en cuanto a nuestra mirada de alto nivel a la estructura de Django y de c\u00f3mo Django se comunica con el navegador para mostrar el contenido de su sitio. No preocuparse si se est\u00e1 todav\u00eda un poco confundido con todo esto. A medida que se va profundizando y se empieza a desarrollar aplicaciones reales de Django, se hace mucho m\u00e1s f\u00e1cil comprender c\u00f3mo funciona todo.","title":"1.3.8. URLconf - Colocando todo junto"},{"location":"1_introduccion/#14-el-plan","text":"Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv","title":"1.4. El plan"},{"location":"1_introduccion/#141-por-que-django-comes-with-the-box-o-batteries-included","text":"La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas.","title":"1.4.1. Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\""},{"location":"1_introduccion/#142-por-que-unos-apuntes","text":"Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS","title":"1.4.2. Por qu\u00e9 unos apuntes"},{"location":"1_introduccion/#143-estructura","text":"1.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 2.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 3.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 4.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test Bitbucker? Heroku? 5-7.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 8.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Custom user models\" 9.Autenticaci\u00f3n de usuarios 10.Bootstrap 11-12.Reseteo y cambio de contrase\u00f1as v\u00eda email 13-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n Estamos preparados para empezar a aprender programaci\u00f3n","title":"1.4.3 Estructura"},{"location":"2_configuracion_inicial/","text":"2 Configuraci\u00f3n inicial Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto 2.1 La l\u00ednea de comandos Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line 2.2 Instalar Python 3 Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes Python Path Python path es la lista de directorios del sistema en donde Python buscar\u00e1 cuando se use la sentencia import de Python. Por ejemplo, supongamos que el Python path tiene el valor ['', '/usr/lib/python2.4/site-packages', '/home/username/djcode/'] Si se ejecuta el c\u00f3digo Python from foo import bar , Python en primer lugar se va a buscar el m\u00f3dulo foo.py en el directorio actual. (La primera entrada en el Python path, una cadena de caracteres vac\u00eda, significa \"el directorio actual.\") Si ese archivo no existe, Python va a buscar el m\u00f3dulo en /usr/lib/python2.4/site-packages/foo.py . Si ese archivo no existe, entonces se probar\u00e1 en /home/username/djcode/foo.py . Finalmente, si ese archivo no existe, Python lanzar\u00e1 un ImportError . Si se quiere ver el valor del Python path, abrir un int\u00e9rprete interactivo de Python y escribir import sys , seguido de print(sys.path) . Generalmente no hay que preocuparse de asigarle valores al \"Python path\" \u2014 Python y Django se encargan autom\u00e1ticamente de hacer esas cosas entre bastidores. (Si se quiere curiosear, establecer el Python path es una de las cosas que hace el archivo manage.py ). 2.3 Entornos Virtuales Ver: Entornos Virtuales 2.4 Instalaci\u00f3n de Django $ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual 2.5.1. Cambiando la IP de escucha y el puerto De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n. Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). Una descripci\u00f3n m\u00e1s detallada del servidor se puede encontrar aqu\u00ed . 2.5. Instalar Git $ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\" 2.6. Editores de texto Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm 2.7. Conclusi\u00f3n","title":"2. Configuraci\u00f3n Inicial"},{"location":"2_configuracion_inicial/#2-configuracion-inicial","text":"Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto","title":"2 Configuraci\u00f3n inicial"},{"location":"2_configuracion_inicial/#21-la-linea-de-comandos","text":"Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line","title":"2.1 La l\u00ednea de comandos"},{"location":"2_configuracion_inicial/#22-instalar-python-3","text":"Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes Python Path Python path es la lista de directorios del sistema en donde Python buscar\u00e1 cuando se use la sentencia import de Python. Por ejemplo, supongamos que el Python path tiene el valor ['', '/usr/lib/python2.4/site-packages', '/home/username/djcode/'] Si se ejecuta el c\u00f3digo Python from foo import bar , Python en primer lugar se va a buscar el m\u00f3dulo foo.py en el directorio actual. (La primera entrada en el Python path, una cadena de caracteres vac\u00eda, significa \"el directorio actual.\") Si ese archivo no existe, Python va a buscar el m\u00f3dulo en /usr/lib/python2.4/site-packages/foo.py . Si ese archivo no existe, entonces se probar\u00e1 en /home/username/djcode/foo.py . Finalmente, si ese archivo no existe, Python lanzar\u00e1 un ImportError . Si se quiere ver el valor del Python path, abrir un int\u00e9rprete interactivo de Python y escribir import sys , seguido de print(sys.path) . Generalmente no hay que preocuparse de asigarle valores al \"Python path\" \u2014 Python y Django se encargan autom\u00e1ticamente de hacer esas cosas entre bastidores. (Si se quiere curiosear, establecer el Python path es una de las cosas que hace el archivo manage.py ).","title":"2.2 Instalar Python 3"},{"location":"2_configuracion_inicial/#23-entornos-virtuales","text":"Ver: Entornos Virtuales","title":"2.3 Entornos Virtuales"},{"location":"2_configuracion_inicial/#24-instalacion-de-django","text":"$ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual","title":"2.4 Instalaci\u00f3n de Django"},{"location":"2_configuracion_inicial/#251-cambiando-la-ip-de-escucha-y-el-puerto","text":"De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n. Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). Una descripci\u00f3n m\u00e1s detallada del servidor se puede encontrar aqu\u00ed .","title":"2.5.1. Cambiando la IP de escucha y el puerto"},{"location":"2_configuracion_inicial/#25-instalar-git","text":"$ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\"","title":"2.5. Instalar Git"},{"location":"2_configuracion_inicial/#26-editores-de-texto","text":"Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm","title":"2.6. Editores de texto"},{"location":"2_configuracion_inicial/#27-conclusion","text":"","title":"2.7. Conclusi\u00f3n"},{"location":"3_hello_world_app/","text":"3 Hello World app Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\" 3.1 Configuraci\u00f3n inicial $ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. Este archivo solo se usa en la fase de despliegue. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). Este archivo solo se usa en la fase de despliegue. manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000 3.2 Crear una app Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. Para incluir la app en el proyecto se necesita a\u00f1adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . DETALLE Tener en cuenta que dentro de cada aplicaci\u00f3n, Django crea un archivo, apps.py , que contiene una clase de configuraci\u00f3n con el nombre de la aplicaci\u00f3n. En este caso, la clase se llama PagesConfig . Para registrar nuestra aplicaci\u00f3n con Django, se necesita apuntar a la clase PagesConfig . PagesConfig por defecto contiene una \u00fanica opci\u00f3n de configuraci\u00f3n: el nombre de la aplicaci\u00f3n, en nuestro caso pages . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. DETALLE: settings.py El fichero settings.py se usa para configurar muchos otros ajustes, pero en este punto probablemente s\u00f3lo se querr\u00e1 cambiar la TIME_ZONE \u2014 \u00e9sta deber\u00eda ser igual a una cadena de la Lista de base de datos tz de time zones (la columna TZ column de la tabla contiene los valores que quieres). Cambiar la TIME_ZONE al valor de entre estas cadenas que sea apropiado para el uso horario que se requiera, por ejemplo: TIME_ZONE = 'Europe/Madrid' Hay otros dos otros ajustes que no se cambiar\u00e1n ahora, pero de los que se deber\u00eda ser consciente: SECRET_KEY . \u00c9sta es una clave secreta que se usa como parte de la estrategia de seguridad del sitio web de Django. Si no se va a proteger este c\u00f3digo durante el desarrollo, se necesitar\u00e1 usar un c\u00f3digo diferente (quiz\u00e1s leyendo de una variable de entorno o un fichero) cuando se ponga en producci\u00f3n. DEBUG . \u00c9sto habilita que los registros (logs) de depuraci\u00f3n se muestren en caso de error, en vez de las respuestas con los c\u00f3digos de estado HTTP. \u00c9ste deber\u00eda ajustarse a false en producci\u00f3n, ya que la informaci\u00f3n de depuraci\u00f3n es \u00fatil a los atacantes. En la configuraci\u00f3n de INSTALLED_APPS , en la parte superior del archivo, se encuentran los nombres de todas las aplicaciones que se activan en esta instancia de Django. Las aplicaciones pueden utilizarse en varios proyectos, y se pueden empaquetar y distribuir para que otros las utilicen en sus propios proyectos. De forma predeterminada, INSTALLED_APPS contiene las siguientes aplicaciones, todas ellas incluidas en Django: django.contrib.admin : El sitio de administraci\u00f3n. django.contrib.auth : Un sistema de autenticaci\u00f3n. django.contrib.contenttypes : Un marco de trabajo para los tipos de contenido. django.contrib.sessions : Un marco de trabajo de sesiones. django.contrib.messages : Un marco de mensajes. django.contrib.staticfiles : Un marco de trabajo para la gesti\u00f3n de archivos est\u00e1ticos. Estas aplicaciones se incluyen de forma predeterminada como una conveniencia para el caso com\u00fan. Sin embargo, algunas de estas aplicaciones utilizan al menos una tabla de la base de datos, por lo que se necesitan crear las tablas de la base de datos antes de poder utilizarlas. Para ello, hemos de hacer una migraci\u00f3n con el siguiente comando: python manage.py migrate El comando de migraci\u00f3n mira la configuraci\u00f3n de INSTALLED_APPS y crea las tablas de base de datos necesarias de acuerdo con la configuraci\u00f3n de la base de datos del archivo settings.py y las migraciones de bases de datos enviadas con cada aplicaci\u00f3n. Se cubrir\u00e1 m\u00e1s adelante. 3.3 Vistas (Views) y configurariones de URL's (URLConfs) En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template DETALLE: Una URLconf es como una tabla de contenido para un sitio web hecho con Django. B\u00e1sicamente, es un mapeo entre los patrones URL y las funciones de vista que deben ser llamadas por esos patrones URL. Es como decirle a Django, \"Para esta URL, llama a este c\u00f3digo, y para esta URL, llama a este otro c\u00f3digo\". Recordar que estas funciones de vista deben estar en el Python path. Se empieza actualizando el fichero views.py FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. DETALLE - Primero, se importa la clase HttpResponse , que vive en el m\u00f3dulo django.http . Se necesita importar esta clase porque se usa m\u00e1s tarde en el c\u00f3digo. A continuaci\u00f3n, se define una funci\u00f3n llamada homePageView - la funci\u00f3n de la vista. Cada funci\u00f3n view toma al menos un par\u00e1metro, llamado request por convenci\u00f3n. Se trata de un objeto que contiene informaci\u00f3n sobre la solicitud web actual que ha activado esta vista, y es una instancia de la clase django.http.HttpRequest . En este ejemplo, no se hace nada con la solicitud , pero debe ser el primer par\u00e1metro de la vista de todos modos. T\u00e9ngase en cuenta que el nombre de la funci\u00f3n de la vista no importa; no tiene que estar nombrada de una forma determinada para que Django la reconozca. Se le llama homePageView aqu\u00ed, porque ese nombre indica claramente lo esencial de la vista, pero tambi\u00e9n podr\u00eda llamarse hola_mundo_maravilloso_y_hermoso , o algo igualmente repugnante. En breve, se iluminar\u00e1 el camino de c\u00f3mo Django encuentra esta funci\u00f3n. La funci\u00f3n es una simple l\u00ednea que devuelve un objeto HttpResponse instanciado con el texto Hello, world! . La principal lecci\u00f3n aqu\u00ed es \u00e9sta: una vista es s\u00f3lo una funci\u00f3n Python que toma una HttpRequest como primer par\u00e1metro y devuelve una instancia de HttpResponse . Para que una funci\u00f3n Python sea una vista Django, debe hacer estas dos cosas. (Hay excepciones, pero se ver\u00e1n m\u00e1s tarde). Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py \u00e7 # pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . DETALLE Notemos que se pasa la funci\u00f3n de vista homePageView como un objeto sin llamar a la funci\u00f3n. Esto es una caracter\u00edstica de Python (y otros lenguajes din\u00e1micos): las funciones son objetos de primera clase, lo cual significa que se puede pasar como cualquier otra variable. \u00a1Qu\u00e9 bueno!, \u00bfno? FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. DETALLE: URLconfs y el acoplamiento d\u00e9bil Ahora es el momento de resaltar una parte clave de filosof\u00eda detr\u00e1s de las URLconf y detr\u00e1s de Django en general: el principio de acoplamiento d\u00e9bil (loose coupling). Para explicarlo de forma simple, el acoplamiento d\u00e9bil es una manera de dise\u00f1ar software aprovechando el valor de la importancia de que se puedan cambiar las piezas. Si dos piezas de c\u00f3digo est\u00e1n d\u00e9bilmente acopladas (loosely coupled) los cambios realizados sobre una de dichas piezas va a tener poco o ning\u00fan efecto sobre la otra. Las URLconfs de Django son un claro ejemplo de este principio en la pr\u00e1ctica. En una aplicaci\u00f3n Web de Django, la definici\u00f3n de la URL y la funci\u00f3n de vista que se llamar\u00e1 est\u00e1n d\u00e9bilmente acopladas; de esta manera, la decisi\u00f3n de cu\u00e1l debe ser la URL para una funci\u00f3n, y la implementaci\u00f3n de la funci\u00f3n misma, residen en dos lugares separados. Esto permite el desarrollo de una pieza sin afectar a la otra. En contraste, otras plataformas de desarrollo Web acoplan la URL con el programa. En las t\u00edpicas aplicaciones PHP, por ejemplo, la URL de la aplicaci\u00f3n es designada por d\u00f3nde se coloca el c\u00f3digo en el sistema de archivos. En versiones anteriores del framework Web Python CherryPy (http://www.cherrypy.org/) la URL de la aplicaci\u00f3n correspond\u00eda al nombre del m\u00e9todo donde resid\u00eda tu c\u00f3digo. Esto puede parecer un atajo conveniente en el corto plazo, pero puede tornarse inmanejable a largo plazo. Por ejemplo, consideremos una funci\u00f3n de vista que nos muestra la fecha y la hora actual. Si se quiere cambiar la URL de la aplicaci\u00f3n \u2014 digamos, mover desde algo como /time a /currenttime/ \u2014 se puede hacer un r\u00e1pido cambio en la URLconf, sin tener que preocuparse acerca de la implementaci\u00f3n subyacente de la funci\u00f3n. Similarmente, si se quiere cambiar la funci\u00f3n de la vista \u2014 alterando la l\u00f3gica de alguna manera \u2014 se puede hacer sin afectar la URL a la que est\u00e1 asociada la funci\u00f3n de vista. Adem\u00e1s, si se quiere exponer la funcionalidad de fecha actual en varias URL se podr\u00eda hacer editando el URLconf con cuidado, sin tener que tocar una sola l\u00ednea de c\u00f3digo de la vista. Eso es el acoplamiento d\u00e9bil en acci\u00f3n: una filosof\u00eda de desarrollo . 3.4 Resumen 1.- CREAR APP (helloworld) $ python manage.py startapp pages 2.- INFORMAR DE LA NUEVA APP FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ... 3.- CREAR LA VISTA FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") 4.- CREAR EL FICHERO DE RUTAS DE LA APP FICHERO: pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] 5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] 3.5. C\u00f3mo procesa una petici\u00f3n Django Se deben se\u00f1alar varias cosas en lo que hemos visto. Este es el detalle de lo que sucede cuando se ejecuta el servidor de desarrollo de Django y se hace una petici\u00f3n a una p\u00e1gina Web. El comando python manage.py runserver importa un archivo llamado settings.py desde el mismo directorio. Este archivo contiene todo tipo de configuraciones opcionales para esa instancia de Django en particular, pero una de las configuraciones m\u00e1s importantes es ROOT_URLCONF . La variable ROOT_URLCONF le dice a Django qu\u00e9 m\u00f3dulo de Python deber\u00eda usar para la URLconf de este sitio Web. settings.py que es generado autom\u00e1ticamente tiene un ROOT_URLCONF que apunta al urls.py generado autom\u00e1ticamente. Cuando llega una petici\u00f3n Django carga la URLconf apuntada por la variable ROOT_URLCONF . Luego comprueba cada uno de los patrones de URL en la URLconf en orden, comparando la URL solicitada con un patr\u00f3n a la vez, hasta que encuentra uno que coincida. Cuando lo encuentra, llama a la funci\u00f3n de vista asociada con ese patr\u00f3n, pasando un objeto HttpRequest como primer par\u00e1metro de la funci\u00f3n. La funci\u00f3n de vista es responsable de retornar un objeto HttpResponse . Una vez se conoce lo b\u00e1sico sobre c\u00f3mo hacer p\u00e1ginas Web con Django. Es muy sencillo, realmente s\u00f3lo hay que escribir funciones de vista y relacionarlas con URLs mediante URLconfs. Se podr\u00eda pensar que es lento enlazar URL's con funciones. 3.3.1. C\u00f3mo procesa una petici\u00f3n Django: Detalles completos Adem\u00e1s del mapeo directo de URLs con funciones vista que acabamos de describir, Django nos provee un poco m\u00e1s de flexibilidad en el procesamiento de peticiones. El flujo t\u00edpico \u2014 resoluci\u00f3n de URLconf a una funci\u00f3n de vista que retorna un HttpResponse \u2014 puede ser cortocircuitado o aumentado mediante middleware. Los secretos del middleware ser\u00e1n tratados en profundidad m\u00e1s adelante, pero un esquema ayudar\u00e1 conceptualmente a poner todas las piezas juntas. Cuando llega una petici\u00f3n HTTP desde el navegador, un manejador espec\u00edfico a cada servidor construye la HttpRequest , para pasarla a los componentes y maneja el flujo del procesamiento de la respuesta. El manejador luego llama a cualquier middleware de Petici\u00f3n o Vista disponible. Estos tipos de middleware son \u00fatiles para augmenting los objetos HttpRequest as\u00ed como tambi\u00e9n para proveer manejo especial a determinados tipos de peticiones. En el caso de que alguno de los mismos retornara un HttpResponse la vista no es invocada. Hasta a los mejores programadores se le escapan errores (bugs), pero el middleware de excepci\u00f3n ayuda a aplastarlos. Si una funci\u00f3n de vista lanza una excepci\u00f3n, el control pasa al middleware de Excepci\u00f3n. Si este middleware no retorna un HttpResponse , la excepci\u00f3n se vuelve a lanzar. Sin embargo, no todo est\u00e1 perdido. Django incluye vistas por omisi\u00f3n para respuestas amigables a errores 404 y 500. Finalmente, el middleware de respuesta es bueno para el procesamiento posterior a un HttpResponse justo antes de que se env\u00ede al navegador o haciendo una limpieza de recursos espec\u00edficos a una petici\u00f3n.","title":"3. Hello World app"},{"location":"3_hello_world_app/#3-hello-world-app","text":"Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\"","title":"3 Hello World app"},{"location":"3_hello_world_app/#31-configuracion-inicial","text":"$ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 helloworld_project \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py 1 directory, 7 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. Este archivo solo se usa en la fase de despliegue. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). Este archivo solo se usa en la fase de despliegue. manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000","title":"3.1 Configuraci\u00f3n inicial"},{"location":"3_hello_world_app/#32-crear-una-app","text":"Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 migrations \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta ( request/response ) de la app Aunque la app existe, Django no sabe nada de ella hasta que expl\u00edcitamente se la a\u00f1adimos. Para incluir la app en el proyecto se necesita a\u00f1adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . DETALLE Tener en cuenta que dentro de cada aplicaci\u00f3n, Django crea un archivo, apps.py , que contiene una clase de configuraci\u00f3n con el nombre de la aplicaci\u00f3n. En este caso, la clase se llama PagesConfig . Para registrar nuestra aplicaci\u00f3n con Django, se necesita apuntar a la clase PagesConfig . PagesConfig por defecto contiene una \u00fanica opci\u00f3n de configuraci\u00f3n: el nombre de la aplicaci\u00f3n, en nuestro caso pages . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. DETALLE: settings.py El fichero settings.py se usa para configurar muchos otros ajustes, pero en este punto probablemente s\u00f3lo se querr\u00e1 cambiar la TIME_ZONE \u2014 \u00e9sta deber\u00eda ser igual a una cadena de la Lista de base de datos tz de time zones (la columna TZ column de la tabla contiene los valores que quieres). Cambiar la TIME_ZONE al valor de entre estas cadenas que sea apropiado para el uso horario que se requiera, por ejemplo: TIME_ZONE = 'Europe/Madrid' Hay otros dos otros ajustes que no se cambiar\u00e1n ahora, pero de los que se deber\u00eda ser consciente: SECRET_KEY . \u00c9sta es una clave secreta que se usa como parte de la estrategia de seguridad del sitio web de Django. Si no se va a proteger este c\u00f3digo durante el desarrollo, se necesitar\u00e1 usar un c\u00f3digo diferente (quiz\u00e1s leyendo de una variable de entorno o un fichero) cuando se ponga en producci\u00f3n. DEBUG . \u00c9sto habilita que los registros (logs) de depuraci\u00f3n se muestren en caso de error, en vez de las respuestas con los c\u00f3digos de estado HTTP. \u00c9ste deber\u00eda ajustarse a false en producci\u00f3n, ya que la informaci\u00f3n de depuraci\u00f3n es \u00fatil a los atacantes. En la configuraci\u00f3n de INSTALLED_APPS , en la parte superior del archivo, se encuentran los nombres de todas las aplicaciones que se activan en esta instancia de Django. Las aplicaciones pueden utilizarse en varios proyectos, y se pueden empaquetar y distribuir para que otros las utilicen en sus propios proyectos. De forma predeterminada, INSTALLED_APPS contiene las siguientes aplicaciones, todas ellas incluidas en Django: django.contrib.admin : El sitio de administraci\u00f3n. django.contrib.auth : Un sistema de autenticaci\u00f3n. django.contrib.contenttypes : Un marco de trabajo para los tipos de contenido. django.contrib.sessions : Un marco de trabajo de sesiones. django.contrib.messages : Un marco de mensajes. django.contrib.staticfiles : Un marco de trabajo para la gesti\u00f3n de archivos est\u00e1ticos. Estas aplicaciones se incluyen de forma predeterminada como una conveniencia para el caso com\u00fan. Sin embargo, algunas de estas aplicaciones utilizan al menos una tabla de la base de datos, por lo que se necesitan crear las tablas de la base de datos antes de poder utilizarlas. Para ello, hemos de hacer una migraci\u00f3n con el siguiente comando: python manage.py migrate El comando de migraci\u00f3n mira la configuraci\u00f3n de INSTALLED_APPS y crea las tablas de base de datos necesarias de acuerdo con la configuraci\u00f3n de la base de datos del archivo settings.py y las migraciones de bases de datos enviadas con cada aplicaci\u00f3n. Se cubrir\u00e1 m\u00e1s adelante.","title":"3.2 Crear una app"},{"location":"3_hello_world_app/#33-vistas-views-y-configurariones-de-urls-urlconfs","text":"En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template DETALLE: Una URLconf es como una tabla de contenido para un sitio web hecho con Django. B\u00e1sicamente, es un mapeo entre los patrones URL y las funciones de vista que deben ser llamadas por esos patrones URL. Es como decirle a Django, \"Para esta URL, llama a este c\u00f3digo, y para esta URL, llama a este otro c\u00f3digo\". Recordar que estas funciones de vista deben estar en el Python path. Se empieza actualizando el fichero views.py FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\") B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello, World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. DETALLE - Primero, se importa la clase HttpResponse , que vive en el m\u00f3dulo django.http . Se necesita importar esta clase porque se usa m\u00e1s tarde en el c\u00f3digo. A continuaci\u00f3n, se define una funci\u00f3n llamada homePageView - la funci\u00f3n de la vista. Cada funci\u00f3n view toma al menos un par\u00e1metro, llamado request por convenci\u00f3n. Se trata de un objeto que contiene informaci\u00f3n sobre la solicitud web actual que ha activado esta vista, y es una instancia de la clase django.http.HttpRequest . En este ejemplo, no se hace nada con la solicitud , pero debe ser el primer par\u00e1metro de la vista de todos modos. T\u00e9ngase en cuenta que el nombre de la funci\u00f3n de la vista no importa; no tiene que estar nombrada de una forma determinada para que Django la reconozca. Se le llama homePageView aqu\u00ed, porque ese nombre indica claramente lo esencial de la vista, pero tambi\u00e9n podr\u00eda llamarse hola_mundo_maravilloso_y_hermoso , o algo igualmente repugnante. En breve, se iluminar\u00e1 el camino de c\u00f3mo Django encuentra esta funci\u00f3n. La funci\u00f3n es una simple l\u00ednea que devuelve un objeto HttpResponse instanciado con el texto Hello, world! . La principal lecci\u00f3n aqu\u00ed es \u00e9sta: una vista es s\u00f3lo una funci\u00f3n Python que toma una HttpRequest como primer par\u00e1metro y devuelve una instancia de HttpResponse . Para que una funci\u00f3n Python sea una vista Django, debe hacer estas dos cosas. (Hay excepciones, pero se ver\u00e1n m\u00e1s tarde). Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py \u00e7 # pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Un expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . DETALLE Notemos que se pasa la funci\u00f3n de vista homePageView como un objeto sin llamar a la funci\u00f3n. Esto es una caracter\u00edstica de Python (y otros lenguajes din\u00e1micos): las funciones son objetos de primera clase, lo cual significa que se puede pasar como cualquier otra variable. \u00a1Qu\u00e9 bueno!, \u00bfno? FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. DETALLE: URLconfs y el acoplamiento d\u00e9bil Ahora es el momento de resaltar una parte clave de filosof\u00eda detr\u00e1s de las URLconf y detr\u00e1s de Django en general: el principio de acoplamiento d\u00e9bil (loose coupling). Para explicarlo de forma simple, el acoplamiento d\u00e9bil es una manera de dise\u00f1ar software aprovechando el valor de la importancia de que se puedan cambiar las piezas. Si dos piezas de c\u00f3digo est\u00e1n d\u00e9bilmente acopladas (loosely coupled) los cambios realizados sobre una de dichas piezas va a tener poco o ning\u00fan efecto sobre la otra. Las URLconfs de Django son un claro ejemplo de este principio en la pr\u00e1ctica. En una aplicaci\u00f3n Web de Django, la definici\u00f3n de la URL y la funci\u00f3n de vista que se llamar\u00e1 est\u00e1n d\u00e9bilmente acopladas; de esta manera, la decisi\u00f3n de cu\u00e1l debe ser la URL para una funci\u00f3n, y la implementaci\u00f3n de la funci\u00f3n misma, residen en dos lugares separados. Esto permite el desarrollo de una pieza sin afectar a la otra. En contraste, otras plataformas de desarrollo Web acoplan la URL con el programa. En las t\u00edpicas aplicaciones PHP, por ejemplo, la URL de la aplicaci\u00f3n es designada por d\u00f3nde se coloca el c\u00f3digo en el sistema de archivos. En versiones anteriores del framework Web Python CherryPy (http://www.cherrypy.org/) la URL de la aplicaci\u00f3n correspond\u00eda al nombre del m\u00e9todo donde resid\u00eda tu c\u00f3digo. Esto puede parecer un atajo conveniente en el corto plazo, pero puede tornarse inmanejable a largo plazo. Por ejemplo, consideremos una funci\u00f3n de vista que nos muestra la fecha y la hora actual. Si se quiere cambiar la URL de la aplicaci\u00f3n \u2014 digamos, mover desde algo como /time a /currenttime/ \u2014 se puede hacer un r\u00e1pido cambio en la URLconf, sin tener que preocuparse acerca de la implementaci\u00f3n subyacente de la funci\u00f3n. Similarmente, si se quiere cambiar la funci\u00f3n de la vista \u2014 alterando la l\u00f3gica de alguna manera \u2014 se puede hacer sin afectar la URL a la que est\u00e1 asociada la funci\u00f3n de vista. Adem\u00e1s, si se quiere exponer la funcionalidad de fecha actual en varias URL se podr\u00eda hacer editando el URLconf con cuidado, sin tener que tocar una sola l\u00ednea de c\u00f3digo de la vista. Eso es el acoplamiento d\u00e9bil en acci\u00f3n: una filosof\u00eda de desarrollo .","title":"3.3 Vistas (Views) y configurariones de URL's (URLConfs)"},{"location":"3_hello_world_app/#34-resumen","text":"","title":"3.4 Resumen"},{"location":"3_hello_world_app/#1-crear-app","text":"(helloworld) $ python manage.py startapp pages","title":"1.- CREAR APP"},{"location":"3_hello_world_app/#2-informar-de-la-nueva-app","text":"FICHERO: settings.py ... INSTALLED_APPS = [ \u00e7 'pages.apps.PagesConfig', ...","title":"2.- INFORMAR DE LA NUEVA APP"},{"location":"3_hello_world_app/#3-crear-la-vista","text":"FICHERO: pages/views.py from django.shortcuts import render \u00e7 from django.http import HttpResponse # Create your views here. \u00e7 def homePageView(request): \u00e7 return HttpResponse(\"Hello, World!\")","title":"3.- CREAR LA VISTA"},{"location":"3_hello_world_app/#4-crear-el-fichero-de-rutas-de-la-app","text":"FICHERO: pages/urls.py \u00e7 from django.urls import path \u00e7 from .views import homePageView \u00e7 urlpatterns = [ \u00e7 path('', homePageView, name='home') \u00e7 ]","title":"4.- CREAR EL FICHERO DE RUTAS DE LA APP"},{"location":"3_hello_world_app/#5-incluir-el-fichero-de-rutas-de-la-app-en-el-principal","text":"FICHERO: helloworld_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('pages.urls')), ]","title":"5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL"},{"location":"3_hello_world_app/#35-como-procesa-una-peticion-django","text":"Se deben se\u00f1alar varias cosas en lo que hemos visto. Este es el detalle de lo que sucede cuando se ejecuta el servidor de desarrollo de Django y se hace una petici\u00f3n a una p\u00e1gina Web. El comando python manage.py runserver importa un archivo llamado settings.py desde el mismo directorio. Este archivo contiene todo tipo de configuraciones opcionales para esa instancia de Django en particular, pero una de las configuraciones m\u00e1s importantes es ROOT_URLCONF . La variable ROOT_URLCONF le dice a Django qu\u00e9 m\u00f3dulo de Python deber\u00eda usar para la URLconf de este sitio Web. settings.py que es generado autom\u00e1ticamente tiene un ROOT_URLCONF que apunta al urls.py generado autom\u00e1ticamente. Cuando llega una petici\u00f3n Django carga la URLconf apuntada por la variable ROOT_URLCONF . Luego comprueba cada uno de los patrones de URL en la URLconf en orden, comparando la URL solicitada con un patr\u00f3n a la vez, hasta que encuentra uno que coincida. Cuando lo encuentra, llama a la funci\u00f3n de vista asociada con ese patr\u00f3n, pasando un objeto HttpRequest como primer par\u00e1metro de la funci\u00f3n. La funci\u00f3n de vista es responsable de retornar un objeto HttpResponse . Una vez se conoce lo b\u00e1sico sobre c\u00f3mo hacer p\u00e1ginas Web con Django. Es muy sencillo, realmente s\u00f3lo hay que escribir funciones de vista y relacionarlas con URLs mediante URLconfs. Se podr\u00eda pensar que es lento enlazar URL's con funciones.","title":"3.5. C\u00f3mo procesa una petici\u00f3n Django"},{"location":"3_hello_world_app/#331-como-procesa-una-peticion-django-detalles-completos","text":"Adem\u00e1s del mapeo directo de URLs con funciones vista que acabamos de describir, Django nos provee un poco m\u00e1s de flexibilidad en el procesamiento de peticiones. El flujo t\u00edpico \u2014 resoluci\u00f3n de URLconf a una funci\u00f3n de vista que retorna un HttpResponse \u2014 puede ser cortocircuitado o aumentado mediante middleware. Los secretos del middleware ser\u00e1n tratados en profundidad m\u00e1s adelante, pero un esquema ayudar\u00e1 conceptualmente a poner todas las piezas juntas. Cuando llega una petici\u00f3n HTTP desde el navegador, un manejador espec\u00edfico a cada servidor construye la HttpRequest , para pasarla a los componentes y maneja el flujo del procesamiento de la respuesta. El manejador luego llama a cualquier middleware de Petici\u00f3n o Vista disponible. Estos tipos de middleware son \u00fatiles para augmenting los objetos HttpRequest as\u00ed como tambi\u00e9n para proveer manejo especial a determinados tipos de peticiones. En el caso de que alguno de los mismos retornara un HttpResponse la vista no es invocada. Hasta a los mejores programadores se le escapan errores (bugs), pero el middleware de excepci\u00f3n ayuda a aplastarlos. Si una funci\u00f3n de vista lanza una excepci\u00f3n, el control pasa al middleware de Excepci\u00f3n. Si este middleware no retorna un HttpResponse , la excepci\u00f3n se vuelve a lanzar. Sin embargo, no todo est\u00e1 perdido. Django incluye vistas por omisi\u00f3n para respuestas amigables a errores 404 y 500. Finalmente, el middleware de respuesta es bueno para el procesamiento posterior a un HttpResponse justo antes de que se env\u00ede al navegador o haciendo una limpieza de recursos espec\u00edficos a una petici\u00f3n.","title":"3.3.1. C\u00f3mo procesa una petici\u00f3n Django: Detalles completos"},{"location":"4_pages_app/","text":"4 Pages app 4.1 Objetivos Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates) 4.2 Configuraci\u00f3n inicial Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py ... INSTALLED_APPS = [ 'pages.apps.PagesConfig', # new ... Arrancar servidor (pages) $ python manage.py runserver 4.3 Plantillas (Templates) Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta - Ruta (URL).- Controla la ruta inicial - Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. - Plantilla (Template).- Contiene el HTML. 4.3.1 D\u00f3nde colocar el directorio de plantillas Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista 4.4 Vistas basadas en clases (Class-Based Views) Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView . 1.4.5 URLs El \u00faltimo paso es actualizar los URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio. 4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\" Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Conectar la vista con la ruta FICHERO: pages/urls.py from django.urls import path from .views import HomePageView, AboutPageView # new urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), # new path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about 4.7 Extendiendo Plantillas El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} <h1>Homepage</h1> {% endblock content %} FICHERO: templates/about.html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %} 4.8 Tests Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) Se usa SimpleTestCase ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos TestCase . Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. Para ejecutar los tests: (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK 4.9 Git, GitHub, GitLab y Bitbucket (pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial' 4.10 Local vs Producci\u00f3n C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo. 4.11 Heroku Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com 4.11 Ficheros adicionales Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco * , que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master 4.12 Despliegue Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create (pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git A\u00f1adir un \u201chook\u201d para Heroku dentro de git Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349 Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1 Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/. 4.13 Errores 404 En las URLconf anteriores, se han definido varios patrones URL. \u00bfQu\u00e9 pasar\u00eda si se solicita una URL diferente a las recogidas en URLconf? Para averiguarlo, probar ejecutar el servidor de desarrollo Django e intentar acceder a una p\u00e1gina Web como http://127.0.0.1:8000/hello/ o http://127.0.0.1:8000/does-not-exist/ . Se deber\u00eda ver el mensaje \"Page not found\" . (Es linda, \u00bfno? A la gente de Django seguro le gustan los colores pasteles). Django muestra este mensaje porque se solicit\u00f3 una URL que no est\u00e1 definida en URLconf. La utilidad de esta p\u00e1gina va m\u00e1s all\u00e1 del mensaje b\u00e1sico de error 404; nos dice tambi\u00e9n, qu\u00e9 URLconf utiliz\u00f3 Django y todos los patrones de esa URLconf . Con esa informaci\u00f3n, tendr\u00edamos que ser capaces de establecer porqu\u00e9 la URL solicitada lanz\u00f3 un error 404. Naturalmente, esta es informaci\u00f3n importante s\u00f3lo destinada al programador . Si esto fuera un sitio en producci\u00f3n alojado en Internet, no quisi\u00e9ramos mostrar esta informaci\u00f3n al p\u00fablico. Por esta raz\u00f3n, la p\u00e1gina \"Page not found\" s\u00f3lo se muestra si el proyecto en Django est\u00e1 en modo de depuraci\u00f3n ( debug mode ). Se explicar\u00e1 c\u00f3mo desactivar este modo m\u00e1s adelante. Por ahora, todos los proyectos est\u00e1n en modo de depuraci\u00f3n cuando se crean, y si el proyecto no lo estuviese, se retornar\u00eda una respuesta diferente.","title":"4. Pages app"},{"location":"4_pages_app/#4-pages-app","text":"","title":"4 Pages app"},{"location":"4_pages_app/#41-objetivos","text":"Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates)","title":"4.1 Objetivos"},{"location":"4_pages_app/#42-configuracion-inicial","text":"Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py ... INSTALLED_APPS = [ 'pages.apps.PagesConfig', # new ... Arrancar servidor (pages) $ python manage.py runserver","title":"4.2 Configuraci\u00f3n inicial"},{"location":"4_pages_app/#43-plantillas-templates","text":"Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta - Ruta (URL).- Controla la ruta inicial - Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. - Plantilla (Template).- Contiene el HTML.","title":"4.3 Plantillas (Templates)"},{"location":"4_pages_app/#431-donde-colocar-el-directorio-de-plantillas","text":"Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista","title":"4.3.1 D\u00f3nde colocar el directorio de plantillas"},{"location":"4_pages_app/#44-vistas-basadas-en-clases-class-based-views","text":"Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView .","title":"4.4 Vistas basadas en clases (Class-Based Views)"},{"location":"4_pages_app/#145-urls","text":"El \u00faltimo paso es actualizar los URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio.","title":"1.4.5 URLs"},{"location":"4_pages_app/#46-anadir-una-pagina-acerca-de","text":"Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Conectar la vista con la ruta FICHERO: pages/urls.py from django.urls import path from .views import HomePageView, AboutPageView # new urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), # new path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about","title":"4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\""},{"location":"4_pages_app/#47-extendiendo-plantillas","text":"El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} <h1>Homepage</h1> {% endblock content %} FICHERO: templates/about.html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %}","title":"4.7 Extendiendo Plantillas"},{"location":"4_pages_app/#48-tests","text":"Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) Se usa SimpleTestCase ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos TestCase . Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. Para ejecutar los tests: (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK","title":"4.8 Tests"},{"location":"4_pages_app/#49-git-github-gitlab-y-bitbucket","text":"(pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial'","title":"4.9 Git, GitHub, GitLab y Bitbucket"},{"location":"4_pages_app/#410-local-vs-produccion","text":"C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo.","title":"4.10 Local vs Producci\u00f3n"},{"location":"4_pages_app/#411-heroku","text":"Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com","title":"4.11 Heroku"},{"location":"4_pages_app/#411-ficheros-adicionales","text":"Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco * , que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master","title":"4.11 Ficheros adicionales"},{"location":"4_pages_app/#412-despliegue","text":"Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku","title":"4.12 Despliegue"},{"location":"4_pages_app/#crear-una-nueva-aplicacion-de-heroku-desde-la-linea-de-comandos-con-heroku-create","text":"(pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git","title":"Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create"},{"location":"4_pages_app/#anadir-un-hook-para-heroku-dentro-de-git","text":"Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349","title":"A\u00f1adir un \u201chook\u201d para Heroku dentro de git"},{"location":"4_pages_app/#configurar-la-aplicacion-para-ignorar-los-archivos-estaticos","text":"Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master","title":"Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos"},{"location":"4_pages_app/#iniciar-el-servidor-de-heroku-para-que-la-aplicacion-este-activa","text":"Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1","title":"Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa"},{"location":"4_pages_app/#visitar-la-aplicacion-en-la-url-proporcionada-por-heroku","text":"Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/.","title":"Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku"},{"location":"4_pages_app/#413-errores-404","text":"En las URLconf anteriores, se han definido varios patrones URL. \u00bfQu\u00e9 pasar\u00eda si se solicita una URL diferente a las recogidas en URLconf? Para averiguarlo, probar ejecutar el servidor de desarrollo Django e intentar acceder a una p\u00e1gina Web como http://127.0.0.1:8000/hello/ o http://127.0.0.1:8000/does-not-exist/ . Se deber\u00eda ver el mensaje \"Page not found\" . (Es linda, \u00bfno? A la gente de Django seguro le gustan los colores pasteles). Django muestra este mensaje porque se solicit\u00f3 una URL que no est\u00e1 definida en URLconf. La utilidad de esta p\u00e1gina va m\u00e1s all\u00e1 del mensaje b\u00e1sico de error 404; nos dice tambi\u00e9n, qu\u00e9 URLconf utiliz\u00f3 Django y todos los patrones de esa URLconf . Con esa informaci\u00f3n, tendr\u00edamos que ser capaces de establecer porqu\u00e9 la URL solicitada lanz\u00f3 un error 404. Naturalmente, esta es informaci\u00f3n importante s\u00f3lo destinada al programador . Si esto fuera un sitio en producci\u00f3n alojado en Internet, no quisi\u00e9ramos mostrar esta informaci\u00f3n al p\u00fablico. Por esta raz\u00f3n, la p\u00e1gina \"Page not found\" s\u00f3lo se muestra si el proyecto en Django est\u00e1 en modo de depuraci\u00f3n ( debug mode ). Se explicar\u00e1 c\u00f3mo desactivar este modo m\u00e1s adelante. Por ahora, todos los proyectos est\u00e1n en modo de depuraci\u00f3n cuando se crean, y si el proyecto no lo estuviese, se retornar\u00eda una respuesta diferente.","title":"4.13 Errores 404"},{"location":"5_message_board_app/","text":"5. Message Board app Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os. 5.1. Setup Inicial Crear un nuevo directorio para el c\u00f3digo llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'posts.apps.PostsConfig', # new ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver 5.2. Crear un modelo de base de datos Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos . FICHERO: posts/models.py # posts/models.py from django.db import models # Create your models here Django importa un m\u00f3dulo models para ayudar a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual se puede hacer de la siguiente manera: FICHERO: post/models.py from django.db import models class Post(models.Model): text = models.TextField() Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() . 5.3. Activando modelos Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS . Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos aplicaciones separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones. 5.4. Django Admin Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py # posts/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() \u00e7 def __str__(self): \u00e7 \"\"\"A string representation of the model.\"\"\" \u00e7 return self.text[:50] Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos str() a todos los modelos para aumentar la legibilidad. 5.5. Views/Templates/URLs Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs . 5.5.1. Vista Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla. Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla. 5.4.2. Plantilla Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial' 5.6. Tests Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post=Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: \"just a test\" Ejecutar test_text_content , para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id en el modelo de Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase \u00e7 from django.urls import reverse from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') \u00e7 class HomePageViewTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='this is another test') \u00e7 def test_view_url_exists_at_proper_location(self): \u00e7 resp = self.client.get('/') \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_url_by_name(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_uses_correct_template(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 self.assertTemplateUsed(resp, 'home.html') Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests' 5.7. GitHub Subir el proyecto... 5.8. Heroku configuration Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py 5.8.1. Actualizar Pipfile.lock Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock 5.8.2. Crear Procfile Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile 5.8.3. Instalar gunicorn Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn 5.8.4. Actualizar settings.py Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master 5.9. Despliegue en Heroku Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n. 5.10. Conclusi\u00f3n Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5. Message Board app"},{"location":"5_message_board_app/#5-message-board-app","text":"Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os.","title":"5. Message Board app"},{"location":"5_message_board_app/#51-setup-inicial","text":"Crear un nuevo directorio para el c\u00f3digo llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'posts.apps.PostsConfig', # new ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver","title":"5.1. Setup Inicial"},{"location":"5_message_board_app/#52-crear-un-modelo-de-base-de-datos","text":"Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos . FICHERO: posts/models.py # posts/models.py from django.db import models # Create your models here Django importa un m\u00f3dulo models para ayudar a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual se puede hacer de la siguiente manera: FICHERO: post/models.py from django.db import models class Post(models.Model): text = models.TextField() Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() .","title":"5.2. Crear un modelo de base de datos"},{"location":"5_message_board_app/#53-activando-modelos","text":"Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS . Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos aplicaciones separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones.","title":"5.3. Activando modelos"},{"location":"5_message_board_app/#54-django-admin","text":"Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py # posts/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() \u00e7 def __str__(self): \u00e7 \"\"\"A string representation of the model.\"\"\" \u00e7 return self.text[:50] Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos str() a todos los modelos para aumentar la legibilidad.","title":"5.4. Django Admin"},{"location":"5_message_board_app/#55-viewstemplatesurls","text":"Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs .","title":"5.5. Views/Templates/URLs"},{"location":"5_message_board_app/#551-vista","text":"Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla. Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla.","title":"5.5.1. Vista"},{"location":"5_message_board_app/#542-plantilla","text":"Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial'","title":"5.4.2. Plantilla"},{"location":"5_message_board_app/#56-tests","text":"Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post=Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: \"just a test\" Ejecutar test_text_content , para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id en el modelo de Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase \u00e7 from django.urls import reverse from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') \u00e7 class HomePageViewTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='this is another test') \u00e7 def test_view_url_exists_at_proper_location(self): \u00e7 resp = self.client.get('/') \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_url_by_name(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 def test_view_uses_correct_template(self): \u00e7 resp = self.client.get(reverse('home')) \u00e7 self.assertEqual(resp.status_code, 200) \u00e7 self.assertTemplateUsed(resp, 'home.html') Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests'","title":"5.6. Tests"},{"location":"5_message_board_app/#57-github","text":"Subir el proyecto...","title":"5.7. GitHub"},{"location":"5_message_board_app/#58-heroku-configuration","text":"Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py","title":"5.8. Heroku configuration"},{"location":"5_message_board_app/#581-actualizar-pipfilelock","text":"Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock","title":"5.8.1. Actualizar Pipfile.lock"},{"location":"5_message_board_app/#582-crear-procfile","text":"Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile","title":"5.8.2. Crear Procfile"},{"location":"5_message_board_app/#583-instalar-gunicorn","text":"Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn","title":"5.8.3. Instalar gunicorn"},{"location":"5_message_board_app/#584-actualizar-settingspy","text":"Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master","title":"5.8.4. Actualizar settings.py"},{"location":"5_message_board_app/#59-despliegue-en-heroku","text":"Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n.","title":"5.9. Despliegue en Heroku"},{"location":"5_message_board_app/#510-conclusion","text":"Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5.10. Conclusi\u00f3n"},{"location":"6_blog_app/","text":"6. Blog app Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos. 6.1. Configuraci\u00f3n inicial Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'blog', # new ] 6.2. Modelos de Bases de Datos Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User es para el modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada. 6.3. Admin 6.3.1. Para acceder a los datos: Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde esta nuevo modelo Post? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios 6.4 URLs (blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ] 6.5. Views FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' 6.6. Templates (blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno? 6.7. Ficheros est\u00e1ticos Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: static/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load static %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\" rel=\"\\stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; } 6.8. Individual blog pages Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3 Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . El pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando vayamos a la p\u00e1gina de entrada individual para nuestro primer post, podemos esperar que su patr\u00f3n de direcci\u00f3n sea post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un lugar de confusi\u00f3n muy com\u00fan para los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk . 6.9. Tests FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) t def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test 6.10. Git Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit' 6.11. Conclusi\u00f3n Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6. Blog app"},{"location":"6_blog_app/#6-blog-app","text":"Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos.","title":"6. Blog app"},{"location":"6_blog_app/#61-configuracion-inicial","text":"Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', \u00e7 'blog', # new ]","title":"6.1. Configuraci\u00f3n inicial"},{"location":"6_blog_app/#62-modelos-de-bases-de-datos","text":"Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User es para el modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada.","title":"6.2. Modelos de Bases de Datos"},{"location":"6_blog_app/#63-admin","text":"","title":"6.3. Admin"},{"location":"6_blog_app/#631-para-acceder-a-los-datos","text":"Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde esta nuevo modelo Post? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios","title":"6.3.1. Para acceder a los datos:"},{"location":"6_blog_app/#64-urls","text":"(blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ]","title":"6.4 URLs"},{"location":"6_blog_app/#65-views","text":"FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html'","title":"6.5. Views"},{"location":"6_blog_app/#66-templates","text":"(blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno?","title":"6.6. Templates"},{"location":"6_blog_app/#67-ficheros-estaticos","text":"Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: static/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load static %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\" rel=\"\\stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; }","title":"6.7. Ficheros est\u00e1ticos"},{"location":"6_blog_app/#68-individual-blog-pages","text":"Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3 Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . El pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando vayamos a la p\u00e1gina de entrada individual para nuestro primer post, podemos esperar que su patr\u00f3n de direcci\u00f3n sea post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un lugar de confusi\u00f3n muy com\u00fan para los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk .","title":"6.8. Individual blog pages"},{"location":"6_blog_app/#69-tests","text":"FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) t def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test","title":"6.9. Tests"},{"location":"6_blog_app/#610-git","text":"Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit'","title":"6.10. Git"},{"location":"6_blog_app/#611-conclusion","text":"Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6.11. Conclusi\u00f3n"},{"location":"7_formularios/","text":"7. Formularios Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas. 7.1 Formularios Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad (Ataques XSS) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito. Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan que trabajan con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting. Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establecer una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico sea la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models \u00e7 from django.urls import reverse class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio. 7.2 Actualizar Formularios Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. Nota.- Si se sigue usando el contexto de la vista tal y como se dej\u00f3 al final del tema previo, se tendr\u00e1 el contexto anything_you_want que habr\u00e1 que eliminar para volver a usar los habituales object y post . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego heredarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. Tengase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas. 7.3 Borrar la vista El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota: se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que tambi\u00e9n lo proporciona DetailView . - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ] 7.4 Tests Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_get_absolute_url(self): self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_create_view(self): response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades. 7.5 Conclusi\u00f3n En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7. Formularios"},{"location":"7_formularios/#7-formularios","text":"Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas.","title":"7. Formularios"},{"location":"7_formularios/#71-formularios","text":"Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad (Ataques XSS) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito. Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan que trabajan con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting. Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establecer una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico sea la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models \u00e7 from django.urls import reverse class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio.","title":"7.1 Formularios"},{"location":"7_formularios/#72-actualizar-formularios","text":"Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. Nota.- Si se sigue usando el contexto de la vista tal y como se dej\u00f3 al final del tema previo, se tendr\u00e1 el contexto anything_you_want que habr\u00e1 que eliminar para volver a usar los habituales object y post . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego heredarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. Tengase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas.","title":"7.2 Actualizar Formularios"},{"location":"7_formularios/#73-borrar-la-vista","text":"El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota: se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que tambi\u00e9n lo proporciona DetailView . - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ]","title":"7.3 Borrar la vista"},{"location":"7_formularios/#74-tests","text":"Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_get_absolute_url(self): self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_create_view(self): response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades.","title":"7.4 Tests"},{"location":"7_formularios/#75-conclusion","text":"En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7.5 Conclusi\u00f3n"},{"location":"8_cuentas_de_usuarios/","text":"8. Cuentas de Usuarios La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado. Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos 8.1. Login Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML y se especifica el m\u00e9todo POST ya que se est\u00e1n enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar un ataque XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n de \"enviar\". En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese que no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente. 8.2. Actualizado de la homepage Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n preeminente. M\u00e1s adelante se le podr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in.</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso. 8.3. Enlace para Logout Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'logout' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la vista necesaria proporciona una app de autenticaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' 8.4. Inscripci\u00f3n Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: accounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views import generic class SignUpView(generic.CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso de UserCreationForm incorporado y la plantilla a\u00fan no creada en signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi <nombre de usuario> . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Pero prometo que con el tiempo empezar\u00e1n a tener m\u00e1s sentido. 8.5. Git (blog) $ git commit -m 'A\u00f1ade formulario para crear cuentas de usuario' Crear un nuevo repo en GitHub al que puedes llamar como quieras. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master 8.6. Configuraci\u00f3n de Heroku Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: Procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master 8.7. Despliegue en Heroku (blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En su editor de texto abra settings.py . A\u00f1ade whitenoise al INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n al MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1ade nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse como lo siguiente. FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1 8.8. Conclusi\u00f3n Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se ha ocupado de los muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8. Cuentas de Usuarios"},{"location":"8_cuentas_de_usuarios/#8-cuentas-de-usuarios","text":"La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado. Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos","title":"8. Cuentas de Usuarios"},{"location":"8_cuentas_de_usuarios/#81-login","text":"Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML y se especifica el m\u00e9todo POST ya que se est\u00e1n enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar un ataque XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n de \"enviar\". En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese que no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente.","title":"8.1. Login"},{"location":"8_cuentas_de_usuarios/#82-actualizado-de-la-homepage","text":"Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n preeminente. M\u00e1s adelante se le podr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in.</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso.","title":"8.2. Actualizado de la homepage"},{"location":"8_cuentas_de_usuarios/#83-enlace-para-logout","text":"Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'logout' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la vista necesaria proporciona una app de autenticaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home'","title":"8.3. Enlace para Logout"},{"location":"8_cuentas_de_usuarios/#84-inscripcion","text":"Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: accounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views import generic class SignUpView(generic.CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso de UserCreationForm incorporado y la plantilla a\u00fan no creada en signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi <nombre de usuario> . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Pero prometo que con el tiempo empezar\u00e1n a tener m\u00e1s sentido.","title":"8.4. Inscripci\u00f3n"},{"location":"8_cuentas_de_usuarios/#85-git","text":"(blog) $ git commit -m 'A\u00f1ade formulario para crear cuentas de usuario' Crear un nuevo repo en GitHub al que puedes llamar como quieras. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master","title":"8.5. Git"},{"location":"8_cuentas_de_usuarios/#86-configuracion-de-heroku","text":"Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: Procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master","title":"8.6. Configuraci\u00f3n de Heroku"},{"location":"8_cuentas_de_usuarios/#87-despliegue-en-heroku","text":"(blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En su editor de texto abra settings.py . A\u00f1ade whitenoise al INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n al MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1ade nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse como lo siguiente. FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1","title":"8.7. Despliegue en Heroku"},{"location":"8_cuentas_de_usuarios/#88-conclusion","text":"Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se ha ocupado de los muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8.8. Conclusi\u00f3n"},{"location":"9_modelo_de_usuario_personalizado/","text":"9. Modelo de usuario personalizado La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adiendo un campo de edad- utilizar un modelo de usuario personalizado desde el principio lo hace bastante f\u00e1cil. Pero si no se crea un modelo de usuario personalizado, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil. Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos de Django recomiendan. Utiliza el complejo AbstractBaseUser cuando si s\u00f3lo se utilizamos AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables. Hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ). 9.1. Setup $ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado antes de hacerlo, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django. 9.2 Modelo de usuario personalizado La creaci\u00f3n de nuestro modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age Crear nuevos formularios para UserCreation y UserChangeForm Actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' # new FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0) 9.3. Formularios Hay dos formas de interactuar con el nuevo modelo de Usuario Personalizado Cuando un usuario se registra para una nueva cuenta en el sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationForm y UserChangeForm . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se usa el modelo CustomUser con los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo age adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de Usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos de email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate 9.4. Superusuario Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escriba el siguiente comando y pase a trav\u00e9s de las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar. 9.5. Conclusi\u00f3n Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Peri\u00f3dico .","title":"9. Modelo de Usuario Personalizado"},{"location":"9_modelo_de_usuario_personalizado/#9-modelo-de-usuario-personalizado","text":"La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adiendo un campo de edad- utilizar un modelo de usuario personalizado desde el principio lo hace bastante f\u00e1cil. Pero si no se crea un modelo de usuario personalizado, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil. Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos de Django recomiendan. Utiliza el complejo AbstractBaseUser cuando si s\u00f3lo se utilizamos AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables. Hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ).","title":"9. Modelo de usuario personalizado"},{"location":"9_modelo_de_usuario_personalizado/#91-setup","text":"$ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado antes de hacerlo, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django.","title":"9.1. Setup"},{"location":"9_modelo_de_usuario_personalizado/#92-modelo-de-usuario-personalizado","text":"La creaci\u00f3n de nuestro modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age Crear nuevos formularios para UserCreation y UserChangeForm Actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' # new FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0)","title":"9.2 Modelo de usuario personalizado"},{"location":"9_modelo_de_usuario_personalizado/#93-formularios","text":"Hay dos formas de interactuar con el nuevo modelo de Usuario Personalizado Cuando un usuario se registra para una nueva cuenta en el sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationForm y UserChangeForm . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se usa el modelo CustomUser con los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo age adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de Usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos de email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate","title":"9.3. Formularios"},{"location":"9_modelo_de_usuario_personalizado/#94-superusuario","text":"Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escriba el siguiente comando y pase a trav\u00e9s de las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar.","title":"9.4. Superusuario"},{"location":"9_modelo_de_usuario_personalizado/#95-conclusion","text":"Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Peri\u00f3dico .","title":"9.5. Conclusi\u00f3n"},{"location":"por_que_django/","text":"\u00bfPor qu\u00e9 Django? Esta es la primera pregunta que los no iniciados casi siempre se hace cuando se les presenta Django: \"\u00bfPor qu\u00e9 debo aprender Django?\" \"\u00bfQu\u00e9 tiene Django que lo hace mejor que el Marco X o el lenguaje Y para construir aplicaciones web?\" Buena pregunta. La programaci\u00f3n, como la mayor\u00eda de las actividades creativas, tiene a mucha gente dedicada que lleva sus pasiones al extremo. Es por esta raz\u00f3n que se debe desconfiar de las comparaciones entre este software y aquel. El resultado final es que todos los lenguajes de programaci\u00f3n y las herramientas y marcos construidos sobre ellos tienen puntos buenos y malos . Cuando se trata de comparar Django con otros frameworks web, la \u00fanica comparaci\u00f3n que vale la pena considerar es el pragmatismo vs. la perfecci\u00f3n. O para decirlo de otra manera, \u00bfquieres c\u00f3digo estable y mantenible que puedas entregar en un plazo determinado? \u00bfO quieres una caja de magia arcana y una plantilla que haga que los profesores de la universidad te quieran y los que la mantienen te odien al mismo tiempo? Django tiene sus asperezas, pero su enfoque pragm\u00e1tico para hacer las cosas es lo que realmente le destaca de la multitud. Django tiene muchos partidarios y unos cuantos enemigos, as\u00ed que no dudar en sacar conclusiones propias. Las 10 mejores razones de Django 1. Python Se puede decir que Python es el lenguaje de programaci\u00f3n m\u00e1s f\u00e1cil de aprender. Con su uso de construcciones de lenguaje natural (por ejemplo, disposici\u00f3n y sangr\u00eda parecida a la de un p\u00e1rrafo) y una sintaxis f\u00e1cil de aprender, Python hace que la comprensi\u00f3n de la estructura y el flujo de los programas sea significativamente m\u00e1s f\u00e1cil de aprender que otros lenguajes populares. Esto se pone de manifiesto en el hecho de que la mayor proporci\u00f3n de cursos de programaci\u00f3n introductoria en universidades e institutos de ense\u00f1anza superior utilizan ahora Python como el lenguaje elegido. Python es vers\u00e1til . Ejecuta sitios web y se utiliza en muchas aplicaciones de escritorio populares en PC y Mac. Tambi\u00e9n se puede encontrar en aplicaciones m\u00f3viles e incorporado en muchos dispositivos. Python tambi\u00e9n es un lenguaje de programaci\u00f3n popular para otras aplicaciones. Aprender Python casi seguro que servir\u00e1, sin importar la carrera que se elija. Python es popular . Google, una de las empresas m\u00e1s grandes del mundo, utiliza Python en muchas de sus aplicaciones. Tambi\u00e9n es usado ampliamente por programadores profesionales. Algunos datos interesantes de la encuesta de desarrolladores de Stack Overflow de 2017: Python es el segundo en crecimiento en los \u00faltimos cinco a\u00f1os, despu\u00e9s de node.js. PHP, Java y Ruby han disminuido en popularidad. Python es ahora m\u00e1s com\u00fan que PHP. Python es el lenguaje m\u00e1s buscado entre todos los desarrolladores, saltando cuatro lugares desde 2016 y superando a JavaScript en el primer lugar. Los trabajos en Python pagan mejor que los tradicionales trabajos de Microsoft (C#, C++, VBA y .NET). 2. Bater\u00edas incluidas Django hereda su filosof\u00eda de \"pilas incluidas\" de Python. Esto se interpreta a menudo como que Django incluye muchas cosas extra que probablemente no se necesiten, sin embargo, la mejor analog\u00eda es que, en lugar de tener que abrir el lenguaje para insertar energ\u00eda propia (bater\u00edas), s\u00f3lo hay que pulsar el interruptor y Django hace el resto. En t\u00e9rminos pr\u00e1cticos esto significa que Django implementa algunos procesos comunes, pero complejos, proporcionando herramientas y envoltorios simples para ocultar la complejidad sin comprometer la potencia. Las \"bater\u00edas\" de Django se encuentran en los contrib packages que son: admin .- La aplicaci\u00f3n de administraci\u00f3n de Django auth .- El marco de autenticaci\u00f3n de Django contenttypes .- Un marco para enganchar con los modelos Django flatpages .- Un marco para la gesti\u00f3n de las p\u00e1ginas de casos especiales, como las pol\u00edticas del sitio y los t\u00e9rminos y condiciones de uso gis .- A\u00f1ade capacidades geoespaciales a Django humanize .- A\u00f1ade filtros de plantilla para mejorar la legibilidad de los datos messages .- Un marco para la gesti\u00f3n de los mensajes basados en sesiones y cookies postgres .- Caracter\u00edsticas espec\u00edficas de la base de datos postgreSQL redirects .- Gesti\u00f3n de redirecciones sessions .- Un marco para la gesti\u00f3n de sesiones an\u00f3nimas sites .- Permite operar varios sitios web desde una sola instalaci\u00f3n sitemaps .- Implementa archivos sitemap XML syndication .- Un marco para generar feeds para la sindicaci\u00f3n Los contrib packages pueden ser un poco complejos, sin embargo, Django proporciona una s\u00f3lida lista de poderosos m\u00f3dulos incorporados para que no haya que crearlos. 3. No se interpone en tu camino Cuando creas una aplicaci\u00f3n Django, Django no agrega ning\u00fan tipo de funciones innecesarias. No hay importaciones obligatorias, no se requieren bibliotecas de terceros ni archivos de configuraci\u00f3n XML. Esto puede ser un poco aterrador cuando se crea un proyecto Django por primera vez, ya que las herramientas autom\u00e1ticas de Django ( startproject y startapp ) s\u00f3lo crean un archivo de configuraci\u00f3n b\u00e1sico, unas cuantas carpetas y algunos archivos de inicio casi vac\u00edos. Aunque esto pueda parecer algo malo, en realidad es un gran beneficio ya que Django proporciona una base s\u00f3lida sobre la que se puede construir de la forma que se quiera. El resultado es una mayor confianza en el c\u00f3digo ya que se sabe que lo que sea que est\u00e9 en la aplicaci\u00f3n, se ha puesto ah\u00ed. 4. Administraci\u00f3n incorporada Desde el principio, Django proporciona una interfaz de administraci\u00f3n ( admin ) para trabajar con los modelos y gestionar los usuarios, los permisos de usuario y los grupos. La interfaz del modelo reemplaza inmediatamente la necesidad de un programa de administraci\u00f3n de base de datos separado para todas las funciones de la base de datos, excepto las avanzadas. Con cambios muy simples en la configuraci\u00f3n de la administraci\u00f3n, se puede organizar los campos del modelo, mostrar y ocultar campos, clasificar, filtrar y organizar los datos para maximizar la eficiencia. El administrador tambi\u00e9n tiene una funci\u00f3n opcional de documentaci\u00f3n de modelos que proporciona una documentaci\u00f3n autom\u00e1tica de los mismos. La administraci\u00f3n de usuarios siempre es importante en un sitio Web moderno y Django proporciona todo lo que se espera: a\u00f1adir y modificar usuarios, cambiar contrase\u00f1as, crear grupos de usuarios, asignar permisos y comunicarse con los usuarios. Al igual que el resto de Django, el administrador tambi\u00e9n es personalizable y ampliable. Por ejemplo, se pueden anular las plantillas de visualizaci\u00f3n del administrador y a\u00f1adir nuevas funciones para tareas como la exportaci\u00f3n de los datos del modelo a un archivo delimitado por comas (CSV). 5. Escalable Django se basa en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC). Esto significa que la base de datos, el c\u00f3digo de programa (back-end) y el c\u00f3digo de visualizaci\u00f3n (front-end) est\u00e1n separados. Django lleva esta separaci\u00f3n un paso m\u00e1s all\u00e1 al separar el c\u00f3digo de los medios est\u00e1ticos -im\u00e1genes, archivos, CSS y JavaScript- que conforman tu sitio. Estas filosof\u00edas de dise\u00f1o permiten: Ejecutar servidores separados para la base de datos, las aplicaciones y los medios Tener f\u00e1cilmente los medios servidos desde una Red de Entrega de Contenido (CDN) Cachear el contenido en m\u00faltiples niveles y alcances Para sitios realmente grandes, se puede emplear la agrupaci\u00f3n y el equilibrio de carga para distribuir el sitio web entre varios servidores Django es compatible con una serie de proveedores externos populares para servidores web, administraci\u00f3n del rendimiento, almacenamiento en cach\u00e9, agrupaci\u00f3n en cl\u00fasteres y balanceo. Tambi\u00e9n es compatible con las principales aplicaciones y servicios de correo electr\u00f3nico y mensajer\u00eda como OAuth y ReST. 6. Probado en el campo de batalla Una buena forma de saber si un marco de trabajo en la web es robusto y fiable es averiguar cu\u00e1nto tiempo ha estado en funcionamiento, si est\u00e1 creciendo y qu\u00e9 sitios de alto perfil lo est\u00e1n utilizando. Django fue de fuentes abiertas por primera vez en 2005, despu\u00e9s de haber funcionado durante varios a\u00f1os en el entorno de alta demanda de una organizaci\u00f3n de noticias. Despu\u00e9s de crecer desde el 2005, Django ahora no s\u00f3lo corre en empresas de publicaci\u00f3n de noticias como el Washington Post, sino que tambi\u00e9n dirige todas o parte de las principales empresas globales como Pinterest, Instagram, Disqus, Bitbucket, EventBrite y Zapier. Django contin\u00faa creciendo en popularidad. Djangosites enumera m\u00e1s de 5200 sitios que usan Django, y eso es s\u00f3lo para los sitios que se registran en Djangosites. Ser\u00eda imposible adivinar cu\u00e1ntas p\u00e1ginas sirve Django cada d\u00eda en comparaci\u00f3n con otras tecnolog\u00edas de Internet, pero eso es en gran medida irrelevante: Django ha demostrado su val\u00eda en los \u00faltimos a\u00f1os gestionando algunos de los sitios de mayor tr\u00e1fico de la Internet, y sigue aumentando su base de usuarios en la actualidad. 7. Paquetes, paquetes y m\u00e1s paquetes! Casi todo lo que se quiera hacer con Django ya se ha hecho antes. Muchos de la gran comunidad internacional de desarrolladores de Django lo devuelven liberando sus proyectos como paquetes de c\u00f3digo abierto. El mayor repositorio de estos proyectos se puede encontrar en el sitio Django Packages . A d\u00eda de hoy, Django Packages enumera m\u00e1s de 3400 aplicaciones, sitios y herramientas reutilizables de Django para usar en proyectos propios. Un r\u00e1pido recorrido por los paquetes m\u00e1s populares incluye: Wagtail, Mezzanine y django CMS .- Sistemas de gesti\u00f3n de contenidos Cookiecutter .- Configuraci\u00f3n r\u00e1pida y sencilla del proyecto Django y de las estructuras de las aplicaciones para aplicaciones m\u00e1s avanzadas Django ReST Framework .-Implementa una API de ReST en Django Django allauth .-Apps de autenticaci\u00f3n de Facebook, GitHub, Google y Twitter Debug toolbar .- Barra de herramientas de depuraci\u00f3n que muestra la informaci\u00f3n de depuraci\u00f3n a medida que el proyecto se ejecuta. Django Celery .- Proporciona la integraci\u00f3n con Celery para Django Oscar, Django Shop y Cartridge .- eCommerce frameworks para Django (Cartridge es una extensi\u00f3n para Mezzanine CMS) Con miles de paquetes m\u00e1s como estos, es muy probable que se encuentre un paquete que se adapte a unas necesidades espec\u00edficas, sin tener que reinventar la rueda. 8. Desarrollado activamente Uno de los mayores riesgos del c\u00f3digo abierto es si hay suficiente inter\u00e9s en el proyecto para que atraiga el apoyo de los desarrolladores a largo plazo. No existe tal riesgo con Django; no s\u00f3lo el proyecto tiene m\u00e1s de 15 a\u00f1os de antig\u00fcedad, sino que tiene un largo historial de liberaciones constantes y sigue contando con el apoyo de una comunidad activa y un gran equipo b\u00e1sico de contribuyentes voluntarios que mantienen y mejoran la base del c\u00f3digo todos los d\u00edas. Django tuvo su primera versi\u00f3n de producci\u00f3n en 2008 (versi\u00f3n 1.0) y ha tenido tres versiones de soporte a largo plazo (LTS): 1.4, 1.8, 1.11 y 2.2. La versi\u00f3n 2.2 LTS (la actual) tiene soporte completo hasta mediados de 2022. El equipo de desarrollo de Django mantiene una hoja de ruta de desarrollo en el sitio web del Proyecto Django y tiene un s\u00f3lido historial de cumplimiento de los hitos de la hoja de ruta. El Proyecto Django tambi\u00e9n cuenta con el apoyo de una fundaci\u00f3n independiente, la Django Software Foundation, que es una organizaci\u00f3n sin \u00e1nimo de lucro registrada en los Estados Unidos. 9. Lanzamientos estables Los proyectos de software de c\u00f3digo abierto son, en muchos casos, desarrollados m\u00e1s activamente y m\u00e1s seguros que el software propietario de la competencia. El inconveniente del desarrollo en constante evoluci\u00f3n de un proyecto de software de c\u00f3digo abierto es la falta de una base de c\u00f3digo estable en la que basar el desarrollo comercial. Django aborda este problema con versiones de apoyo a largo plazo (LTS) del software y un proceso de lanzamiento definido. Las versiones LTS se lanzan con un per\u00edodo de soporte garantizado (normalmente de tres a\u00f1os). En este periodo se garantiza que la base del c\u00f3digo permanezca estable; con parches para errores, seguridad y p\u00e9rdida de datos 100% compatibles con la versi\u00f3n de la caracter\u00edstica. El proceso de lanzamiento de Django asegura que las versiones oficiales sean tan estables como sea posible. Tras una fase de desarrollo, cada versi\u00f3n entra en una fase Alfa en la que se aplica una congelaci\u00f3n de caracter\u00edsticas. La nueva versi\u00f3n pasa entonces por las fases Beta y Candidata a la Liberaci\u00f3n (RC Release Candidate), donde se trabajan los errores de la versi\u00f3n. Si no se encuentran errores importantes durante un per\u00edodo despu\u00e9s de la versi\u00f3n candidata, se lanzar\u00e1 la versi\u00f3n final (feature release). Despu\u00e9s de que la versi\u00f3n final ha sido liberada, s\u00f3lo se aplican correcciones de errores y parches de seguridad. Estos parches, como las versiones LTS, son 100% compatibles con la feature release . 10. Documentaci\u00f3n de primera clase Incluso en las primeras versiones, los desarrolladores de Django se aseguraron de que la documentaci\u00f3n fuera completa y que los tutoriales fueran f\u00e1ciles de seguir. La documentaci\u00f3n deber\u00eda ser la raz\u00f3n n\u00famero uno de esta lista porque fue la calidad de la documentaci\u00f3n lo que en muchos casos prevalezca la elecci\u00f3n de Django sobre otras opciones. Django tambi\u00e9n cuenta con un fuerte apoyo de los miembros de la comunidad que producen materiales de aprendizaje gratuitos, libros, cursos pagados y gratuitos y muchos consejos, trucos y asistencia en sus sitios web. Hay muchos grupos. Algunos de los m\u00e1s relevantes son: Tango con Django Cualquier cosa de Danny y Audrey en TwoScoops Press Django Girls Por supuesto, tambi\u00e9n se van a descubrir cosas sobre Django que parezcan frustrantes pero, dado que todos los lenguajes de programaci\u00f3n y los frameworks construidos sobre ellos tienen sus idiosincrasias, seguro que se descubrir\u00e1 que cuando se trata de construir r\u00e1pidamente sitios web seguros y escalables, los beneficios de Django superan con creces a sus desaf\u00edos.","title":"\u00bfPor qu\u00e9 Django?"},{"location":"por_que_django/#por-que-django","text":"Esta es la primera pregunta que los no iniciados casi siempre se hace cuando se les presenta Django: \"\u00bfPor qu\u00e9 debo aprender Django?\" \"\u00bfQu\u00e9 tiene Django que lo hace mejor que el Marco X o el lenguaje Y para construir aplicaciones web?\" Buena pregunta. La programaci\u00f3n, como la mayor\u00eda de las actividades creativas, tiene a mucha gente dedicada que lleva sus pasiones al extremo. Es por esta raz\u00f3n que se debe desconfiar de las comparaciones entre este software y aquel. El resultado final es que todos los lenguajes de programaci\u00f3n y las herramientas y marcos construidos sobre ellos tienen puntos buenos y malos . Cuando se trata de comparar Django con otros frameworks web, la \u00fanica comparaci\u00f3n que vale la pena considerar es el pragmatismo vs. la perfecci\u00f3n. O para decirlo de otra manera, \u00bfquieres c\u00f3digo estable y mantenible que puedas entregar en un plazo determinado? \u00bfO quieres una caja de magia arcana y una plantilla que haga que los profesores de la universidad te quieran y los que la mantienen te odien al mismo tiempo? Django tiene sus asperezas, pero su enfoque pragm\u00e1tico para hacer las cosas es lo que realmente le destaca de la multitud. Django tiene muchos partidarios y unos cuantos enemigos, as\u00ed que no dudar en sacar conclusiones propias.","title":"\u00bfPor qu\u00e9 Django?"},{"location":"por_que_django/#las-10-mejores-razones-de-django","text":"","title":"Las 10 mejores razones de Django"},{"location":"por_que_django/#1-python","text":"Se puede decir que Python es el lenguaje de programaci\u00f3n m\u00e1s f\u00e1cil de aprender. Con su uso de construcciones de lenguaje natural (por ejemplo, disposici\u00f3n y sangr\u00eda parecida a la de un p\u00e1rrafo) y una sintaxis f\u00e1cil de aprender, Python hace que la comprensi\u00f3n de la estructura y el flujo de los programas sea significativamente m\u00e1s f\u00e1cil de aprender que otros lenguajes populares. Esto se pone de manifiesto en el hecho de que la mayor proporci\u00f3n de cursos de programaci\u00f3n introductoria en universidades e institutos de ense\u00f1anza superior utilizan ahora Python como el lenguaje elegido. Python es vers\u00e1til . Ejecuta sitios web y se utiliza en muchas aplicaciones de escritorio populares en PC y Mac. Tambi\u00e9n se puede encontrar en aplicaciones m\u00f3viles e incorporado en muchos dispositivos. Python tambi\u00e9n es un lenguaje de programaci\u00f3n popular para otras aplicaciones. Aprender Python casi seguro que servir\u00e1, sin importar la carrera que se elija. Python es popular . Google, una de las empresas m\u00e1s grandes del mundo, utiliza Python en muchas de sus aplicaciones. Tambi\u00e9n es usado ampliamente por programadores profesionales. Algunos datos interesantes de la encuesta de desarrolladores de Stack Overflow de 2017: Python es el segundo en crecimiento en los \u00faltimos cinco a\u00f1os, despu\u00e9s de node.js. PHP, Java y Ruby han disminuido en popularidad. Python es ahora m\u00e1s com\u00fan que PHP. Python es el lenguaje m\u00e1s buscado entre todos los desarrolladores, saltando cuatro lugares desde 2016 y superando a JavaScript en el primer lugar. Los trabajos en Python pagan mejor que los tradicionales trabajos de Microsoft (C#, C++, VBA y .NET).","title":"1. Python"},{"location":"por_que_django/#2-baterias-incluidas","text":"Django hereda su filosof\u00eda de \"pilas incluidas\" de Python. Esto se interpreta a menudo como que Django incluye muchas cosas extra que probablemente no se necesiten, sin embargo, la mejor analog\u00eda es que, en lugar de tener que abrir el lenguaje para insertar energ\u00eda propia (bater\u00edas), s\u00f3lo hay que pulsar el interruptor y Django hace el resto. En t\u00e9rminos pr\u00e1cticos esto significa que Django implementa algunos procesos comunes, pero complejos, proporcionando herramientas y envoltorios simples para ocultar la complejidad sin comprometer la potencia. Las \"bater\u00edas\" de Django se encuentran en los contrib packages que son: admin .- La aplicaci\u00f3n de administraci\u00f3n de Django auth .- El marco de autenticaci\u00f3n de Django contenttypes .- Un marco para enganchar con los modelos Django flatpages .- Un marco para la gesti\u00f3n de las p\u00e1ginas de casos especiales, como las pol\u00edticas del sitio y los t\u00e9rminos y condiciones de uso gis .- A\u00f1ade capacidades geoespaciales a Django humanize .- A\u00f1ade filtros de plantilla para mejorar la legibilidad de los datos messages .- Un marco para la gesti\u00f3n de los mensajes basados en sesiones y cookies postgres .- Caracter\u00edsticas espec\u00edficas de la base de datos postgreSQL redirects .- Gesti\u00f3n de redirecciones sessions .- Un marco para la gesti\u00f3n de sesiones an\u00f3nimas sites .- Permite operar varios sitios web desde una sola instalaci\u00f3n sitemaps .- Implementa archivos sitemap XML syndication .- Un marco para generar feeds para la sindicaci\u00f3n Los contrib packages pueden ser un poco complejos, sin embargo, Django proporciona una s\u00f3lida lista de poderosos m\u00f3dulos incorporados para que no haya que crearlos.","title":"2. Bater\u00edas incluidas"},{"location":"por_que_django/#3-no-se-interpone-en-tu-camino","text":"Cuando creas una aplicaci\u00f3n Django, Django no agrega ning\u00fan tipo de funciones innecesarias. No hay importaciones obligatorias, no se requieren bibliotecas de terceros ni archivos de configuraci\u00f3n XML. Esto puede ser un poco aterrador cuando se crea un proyecto Django por primera vez, ya que las herramientas autom\u00e1ticas de Django ( startproject y startapp ) s\u00f3lo crean un archivo de configuraci\u00f3n b\u00e1sico, unas cuantas carpetas y algunos archivos de inicio casi vac\u00edos. Aunque esto pueda parecer algo malo, en realidad es un gran beneficio ya que Django proporciona una base s\u00f3lida sobre la que se puede construir de la forma que se quiera. El resultado es una mayor confianza en el c\u00f3digo ya que se sabe que lo que sea que est\u00e9 en la aplicaci\u00f3n, se ha puesto ah\u00ed.","title":"3. No se interpone en tu camino"},{"location":"por_que_django/#4-administracion-incorporada","text":"Desde el principio, Django proporciona una interfaz de administraci\u00f3n ( admin ) para trabajar con los modelos y gestionar los usuarios, los permisos de usuario y los grupos. La interfaz del modelo reemplaza inmediatamente la necesidad de un programa de administraci\u00f3n de base de datos separado para todas las funciones de la base de datos, excepto las avanzadas. Con cambios muy simples en la configuraci\u00f3n de la administraci\u00f3n, se puede organizar los campos del modelo, mostrar y ocultar campos, clasificar, filtrar y organizar los datos para maximizar la eficiencia. El administrador tambi\u00e9n tiene una funci\u00f3n opcional de documentaci\u00f3n de modelos que proporciona una documentaci\u00f3n autom\u00e1tica de los mismos. La administraci\u00f3n de usuarios siempre es importante en un sitio Web moderno y Django proporciona todo lo que se espera: a\u00f1adir y modificar usuarios, cambiar contrase\u00f1as, crear grupos de usuarios, asignar permisos y comunicarse con los usuarios. Al igual que el resto de Django, el administrador tambi\u00e9n es personalizable y ampliable. Por ejemplo, se pueden anular las plantillas de visualizaci\u00f3n del administrador y a\u00f1adir nuevas funciones para tareas como la exportaci\u00f3n de los datos del modelo a un archivo delimitado por comas (CSV).","title":"4. Administraci\u00f3n incorporada"},{"location":"por_que_django/#5-escalable","text":"Django se basa en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC). Esto significa que la base de datos, el c\u00f3digo de programa (back-end) y el c\u00f3digo de visualizaci\u00f3n (front-end) est\u00e1n separados. Django lleva esta separaci\u00f3n un paso m\u00e1s all\u00e1 al separar el c\u00f3digo de los medios est\u00e1ticos -im\u00e1genes, archivos, CSS y JavaScript- que conforman tu sitio. Estas filosof\u00edas de dise\u00f1o permiten: Ejecutar servidores separados para la base de datos, las aplicaciones y los medios Tener f\u00e1cilmente los medios servidos desde una Red de Entrega de Contenido (CDN) Cachear el contenido en m\u00faltiples niveles y alcances Para sitios realmente grandes, se puede emplear la agrupaci\u00f3n y el equilibrio de carga para distribuir el sitio web entre varios servidores Django es compatible con una serie de proveedores externos populares para servidores web, administraci\u00f3n del rendimiento, almacenamiento en cach\u00e9, agrupaci\u00f3n en cl\u00fasteres y balanceo. Tambi\u00e9n es compatible con las principales aplicaciones y servicios de correo electr\u00f3nico y mensajer\u00eda como OAuth y ReST.","title":"5. Escalable"},{"location":"por_que_django/#6-probado-en-el-campo-de-batalla","text":"Una buena forma de saber si un marco de trabajo en la web es robusto y fiable es averiguar cu\u00e1nto tiempo ha estado en funcionamiento, si est\u00e1 creciendo y qu\u00e9 sitios de alto perfil lo est\u00e1n utilizando. Django fue de fuentes abiertas por primera vez en 2005, despu\u00e9s de haber funcionado durante varios a\u00f1os en el entorno de alta demanda de una organizaci\u00f3n de noticias. Despu\u00e9s de crecer desde el 2005, Django ahora no s\u00f3lo corre en empresas de publicaci\u00f3n de noticias como el Washington Post, sino que tambi\u00e9n dirige todas o parte de las principales empresas globales como Pinterest, Instagram, Disqus, Bitbucket, EventBrite y Zapier. Django contin\u00faa creciendo en popularidad. Djangosites enumera m\u00e1s de 5200 sitios que usan Django, y eso es s\u00f3lo para los sitios que se registran en Djangosites. Ser\u00eda imposible adivinar cu\u00e1ntas p\u00e1ginas sirve Django cada d\u00eda en comparaci\u00f3n con otras tecnolog\u00edas de Internet, pero eso es en gran medida irrelevante: Django ha demostrado su val\u00eda en los \u00faltimos a\u00f1os gestionando algunos de los sitios de mayor tr\u00e1fico de la Internet, y sigue aumentando su base de usuarios en la actualidad.","title":"6. Probado en el campo de batalla"},{"location":"por_que_django/#7-paquetes-paquetes-y-mas-paquetes","text":"Casi todo lo que se quiera hacer con Django ya se ha hecho antes. Muchos de la gran comunidad internacional de desarrolladores de Django lo devuelven liberando sus proyectos como paquetes de c\u00f3digo abierto. El mayor repositorio de estos proyectos se puede encontrar en el sitio Django Packages . A d\u00eda de hoy, Django Packages enumera m\u00e1s de 3400 aplicaciones, sitios y herramientas reutilizables de Django para usar en proyectos propios. Un r\u00e1pido recorrido por los paquetes m\u00e1s populares incluye: Wagtail, Mezzanine y django CMS .- Sistemas de gesti\u00f3n de contenidos Cookiecutter .- Configuraci\u00f3n r\u00e1pida y sencilla del proyecto Django y de las estructuras de las aplicaciones para aplicaciones m\u00e1s avanzadas Django ReST Framework .-Implementa una API de ReST en Django Django allauth .-Apps de autenticaci\u00f3n de Facebook, GitHub, Google y Twitter Debug toolbar .- Barra de herramientas de depuraci\u00f3n que muestra la informaci\u00f3n de depuraci\u00f3n a medida que el proyecto se ejecuta. Django Celery .- Proporciona la integraci\u00f3n con Celery para Django Oscar, Django Shop y Cartridge .- eCommerce frameworks para Django (Cartridge es una extensi\u00f3n para Mezzanine CMS) Con miles de paquetes m\u00e1s como estos, es muy probable que se encuentre un paquete que se adapte a unas necesidades espec\u00edficas, sin tener que reinventar la rueda.","title":"7. Paquetes, paquetes y m\u00e1s paquetes!"},{"location":"por_que_django/#8-desarrollado-activamente","text":"Uno de los mayores riesgos del c\u00f3digo abierto es si hay suficiente inter\u00e9s en el proyecto para que atraiga el apoyo de los desarrolladores a largo plazo. No existe tal riesgo con Django; no s\u00f3lo el proyecto tiene m\u00e1s de 15 a\u00f1os de antig\u00fcedad, sino que tiene un largo historial de liberaciones constantes y sigue contando con el apoyo de una comunidad activa y un gran equipo b\u00e1sico de contribuyentes voluntarios que mantienen y mejoran la base del c\u00f3digo todos los d\u00edas. Django tuvo su primera versi\u00f3n de producci\u00f3n en 2008 (versi\u00f3n 1.0) y ha tenido tres versiones de soporte a largo plazo (LTS): 1.4, 1.8, 1.11 y 2.2. La versi\u00f3n 2.2 LTS (la actual) tiene soporte completo hasta mediados de 2022. El equipo de desarrollo de Django mantiene una hoja de ruta de desarrollo en el sitio web del Proyecto Django y tiene un s\u00f3lido historial de cumplimiento de los hitos de la hoja de ruta. El Proyecto Django tambi\u00e9n cuenta con el apoyo de una fundaci\u00f3n independiente, la Django Software Foundation, que es una organizaci\u00f3n sin \u00e1nimo de lucro registrada en los Estados Unidos.","title":"8. Desarrollado activamente"},{"location":"por_que_django/#9-lanzamientos-estables","text":"Los proyectos de software de c\u00f3digo abierto son, en muchos casos, desarrollados m\u00e1s activamente y m\u00e1s seguros que el software propietario de la competencia. El inconveniente del desarrollo en constante evoluci\u00f3n de un proyecto de software de c\u00f3digo abierto es la falta de una base de c\u00f3digo estable en la que basar el desarrollo comercial. Django aborda este problema con versiones de apoyo a largo plazo (LTS) del software y un proceso de lanzamiento definido. Las versiones LTS se lanzan con un per\u00edodo de soporte garantizado (normalmente de tres a\u00f1os). En este periodo se garantiza que la base del c\u00f3digo permanezca estable; con parches para errores, seguridad y p\u00e9rdida de datos 100% compatibles con la versi\u00f3n de la caracter\u00edstica. El proceso de lanzamiento de Django asegura que las versiones oficiales sean tan estables como sea posible. Tras una fase de desarrollo, cada versi\u00f3n entra en una fase Alfa en la que se aplica una congelaci\u00f3n de caracter\u00edsticas. La nueva versi\u00f3n pasa entonces por las fases Beta y Candidata a la Liberaci\u00f3n (RC Release Candidate), donde se trabajan los errores de la versi\u00f3n. Si no se encuentran errores importantes durante un per\u00edodo despu\u00e9s de la versi\u00f3n candidata, se lanzar\u00e1 la versi\u00f3n final (feature release). Despu\u00e9s de que la versi\u00f3n final ha sido liberada, s\u00f3lo se aplican correcciones de errores y parches de seguridad. Estos parches, como las versiones LTS, son 100% compatibles con la feature release .","title":"9. Lanzamientos estables"},{"location":"por_que_django/#10-documentacion-de-primera-clase","text":"Incluso en las primeras versiones, los desarrolladores de Django se aseguraron de que la documentaci\u00f3n fuera completa y que los tutoriales fueran f\u00e1ciles de seguir. La documentaci\u00f3n deber\u00eda ser la raz\u00f3n n\u00famero uno de esta lista porque fue la calidad de la documentaci\u00f3n lo que en muchos casos prevalezca la elecci\u00f3n de Django sobre otras opciones. Django tambi\u00e9n cuenta con un fuerte apoyo de los miembros de la comunidad que producen materiales de aprendizaje gratuitos, libros, cursos pagados y gratuitos y muchos consejos, trucos y asistencia en sus sitios web. Hay muchos grupos. Algunos de los m\u00e1s relevantes son: Tango con Django Cualquier cosa de Danny y Audrey en TwoScoops Press Django Girls Por supuesto, tambi\u00e9n se van a descubrir cosas sobre Django que parezcan frustrantes pero, dado que todos los lenguajes de programaci\u00f3n y los frameworks construidos sobre ellos tienen sus idiosincrasias, seguro que se descubrir\u00e1 que cuando se trata de construir r\u00e1pidamente sitios web seguros y escalables, los beneficios de Django superan con creces a sus desaf\u00edos.","title":"10. Documentaci\u00f3n de primera clase"}]}