{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Django \u00bfPor qu\u00e9 Django? Introducci\u00f3n Configuraci\u00f3n Inicial Hello World app Pages app Message Board app Blog app Formularios Cuentas de Usuarios Modelo de Usuario Personalizado Autenticaci\u00f3n de Usuarios Bootstrap Cambio y Restauraci\u00f3n de contrase\u00f1as Email Newspaper app Permisos y Autorizaci\u00f3n Comentarios","title":"Django"},{"location":"#django","text":"","title":"Django"},{"location":"#por-que-django","text":"","title":"\u00bfPor qu\u00e9 Django?"},{"location":"#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"#configuracion-inicial","text":"","title":"Configuraci\u00f3n Inicial"},{"location":"#hello-world-app","text":"","title":"Hello World app"},{"location":"#pages-app","text":"","title":"Pages app"},{"location":"#message-board-app","text":"","title":"Message Board app"},{"location":"#blog-app","text":"","title":"Blog app"},{"location":"#formularios","text":"","title":"Formularios"},{"location":"#cuentas-de-usuarios","text":"","title":"Cuentas de Usuarios"},{"location":"#modelo-de-usuario-personalizado","text":"","title":"Modelo de Usuario Personalizado"},{"location":"#autenticacion-de-usuarios","text":"","title":"Autenticaci\u00f3n de Usuarios"},{"location":"#bootstrap","text":"","title":"Bootstrap"},{"location":"#cambio-y-restauracion-de-contrasenas","text":"","title":"Cambio y Restauraci\u00f3n de contrase\u00f1as"},{"location":"#email","text":"","title":"Email"},{"location":"#newspaper-app","text":"","title":"Newspaper app"},{"location":"#permisos-y-autorizacion","text":"","title":"Permisos y Autorizaci\u00f3n"},{"location":"#comentarios","text":"","title":"Comentarios"},{"location":"01_introduccion/","text":"1 Introducci\u00f3n 1.1. Introduciendo Django El gran software de c\u00f3digo abierto casi siempre se construye porque uno o m\u00e1s desarrolladores inteligentes ten\u00edan un problema que resolver y no hab\u00eda ninguna soluci\u00f3n viable o rentable disponible. Django no es una excepci\u00f3n. Adrian y Jacob hace tiempo que se retiraron del proyecto, pero los fundamentos de lo que los llev\u00f3 a crear Django siguen vivos. Es esta s\u00f3lida base de experiencia en el mundo real la que ha hecho a Django tan exitoso como lo es. En reconocimiento a su contribuci\u00f3n, es mejor que les dejemos presentar a Django con sus propias palabras (editado y reformateado a partir del libro original). 1.1.1. Por Adrian Holovaty y Jacob Kaplan-Moss (Diciembre 2009) En los primeros d\u00edas, los desarrolladores web escrib\u00edan cada p\u00e1gina a mano. Actualizar un sitio web significaba editar el HTML; un redise\u00f1o implicaba rehacer cada una de las p\u00e1ginas, una a una. A medida que los sitios web crec\u00edan y se volv\u00edan m\u00e1s ambiciosos, se hizo evidente r\u00e1pidamente que ese enfoque era tedioso, lento y, en \u00faltima instancia, insostenible. Un grupo de hackers emprendedores del Centro Nacional de Aplicaciones de Supercomputaci\u00f3n (la NCSA, donde se desarroll\u00f3 Mosaic, el primer navegador web gr\u00e1fico) resolvi\u00f3 este problema dejando que el servidor web generara programas externos que pudieran generar HTML de forma din\u00e1mica. Llamaron a este protocolo la Interfaz de Entrada Com\u00fan (CGI Common Gateway Interface), y cambi\u00f3 la web para siempre. Ahora es dif\u00edcil imaginar lo que debe haber sido una revelaci\u00f3n CGI: en lugar de tratar las p\u00e1ginas HTML como simples archivos en el disco, CGI permite pensar en sus p\u00e1ginas como recursos generados din\u00e1micamente a pedido. El desarrollo de CGI marc\u00f3 el comienzo de la primera generaci\u00f3n de sitios web din\u00e1micos. Sin embargo, CGI tiene sus problemas: Los scripts CGI necesitan contener mucho c\u00f3digo repetitivo, dificultan la reutilizaci\u00f3n de c\u00f3digo, y pueden ser dif\u00edciles de escribir y entender para los desarrolladores novatos. PHP solucion\u00f3 muchos de estos problemas, y asalt\u00f3 el mundo -ahora es la herramienta m\u00e1s popular usada para crear sitios web din\u00e1micos, y docenas de lenguajes similares (ASP, JSP, etc.) siguieron de cerca el dise\u00f1o de PHP. La mayor innovaci\u00f3n de PHP es su facilidad de uso: El c\u00f3digo PHP es simplemente incrustado en HTML plano; la curva de aprendizaje para alguien que ya conoce el HTML es extremadamente superficial. Pero PHP tiene sus propios problemas; su gran facilidad de uso fomenta un c\u00f3digo descuidado, repetitivo y mal concebido. Peor a\u00fan, PHP hace poco para proteger a los programadores de las vulnerabilidades de seguridad, por lo que muchos desarrolladores de PHP se encontraron aprendiendo sobre seguridad s\u00f3lo una vez que ya era demasiado tarde. Estas y otras frustraciones similares condujeron directamente al desarrollo de la actual cosecha de marcos de desarrollo web de tercera generaci\u00f3n. Con esta nueva explosi\u00f3n de desarrollo web viene otro aumento de la ambici\u00f3n; se espera que los desarrolladores web hagan m\u00e1s y m\u00e1s cada d\u00eda. Django fue inventado para satisfacer estas nuevas ambiciones. 1.2. La historia de Django Django creci\u00f3 org\u00e1nicamente a partir de aplicaciones del mundo real escritas por un equipo de desarrollo web en Lawrence, Kansas, USA. Naci\u00f3 en el oto\u00f1o de 2003, cuando los programadores web del peri\u00f3dico Lawrence Journal-World, Adrian Holovaty y Simon Willison , comenzaron a usar Python para construir aplicaciones. El equipo de World Online, responsable de la producci\u00f3n y mantenimiento de varios sitios de noticias locales, prosper\u00f3 en un entorno de desarrollo dictado por los plazos del periodismo. Para los sitios -incluyendo LJWorld.com, Lawrence.com y KUsports.com- los periodistas (y la direcci\u00f3n) exigieron que se a\u00f1adieran caracter\u00edsticas y se construyeran aplicaciones enteras en un horario intensamente r\u00e1pido, a menudo con s\u00f3lo un d\u00eda u hora de aviso. As\u00ed, Simon y Adrian desarrollaron un marco de desarrollo web que ahorraba tiempo por necesidad, era la \u00fanica manera en que pod\u00edan construir aplicaciones mantenibles bajo los plazos extremos. En el verano de 2005, despu\u00e9s de haber desarrollado este marco de trabajo hasta un punto en el que alimentaba eficientemente la mayor\u00eda de los sitios de World Online, el equipo, que ahora inclu\u00eda a Jacob Kaplan-Moss , decidi\u00f3 lanzar el marco de trabajo como software de c\u00f3digo abierto. Lo lanzaron en julio de 2005 y lo llamaron Django, en honor al guitarrista de jazz Django Reinhardt . A pesar de que Django ahora es un proyecto de c\u00f3digo abierto con colaboradores por todo el mundo, los desarrolladores originales de World Online todav\u00eda aportan una gu\u00eda centralizada para el crecimiento del framework, y World Online colabora con otros aspectos importantes tales como tiempo de trabajo, materiales de marketing, y hosting/ancho de banda para el Web site del framework (http://www.djangoproject.com/). Esta historia es relevante porque ayuda a explicar dos cosas clave. La primera es el \"punto dulce\" de Django. Debido a que Django naci\u00f3 en un entorno de noticias, ofrece varias caracter\u00edsticas (como su sitio de administraci\u00f3n) que son particularmente adecuadas para sitios de \"contenido\" como Amazon.com, craigslist.org y washingtonpost.com que ofrecen informaci\u00f3n din\u00e1mica y basada en bases de datos. No hay que desanimarse por eso, aunque Django es particularmente bueno para desarrollar ese tipo de sitios, eso no impide que sea una herramienta efectiva para construir cualquier tipo de sitio web din\u00e1mico. (Hay una diferencia entre ser particularmente eficaz en algo y ser ineficaz en otras cosas). La segunda cuesti\u00f3n a tener en cuenta es c\u00f3mo los or\u00edgenes de Django han dado forma a la cultura de su comunidad de c\u00f3digo abierto. Debido a que Django fue extra\u00eddo del c\u00f3digo del mundo real, en lugar de ser un ejercicio acad\u00e9mico o un producto comercial, est\u00e1 muy enfocado en resolver los problemas de desarrollo web que los propios desarrolladores de Django han afrontado -y contin\u00faan afrontando-. Como resultado, Django mismo se mejora activamente casi a diario. Los encargados de mantener el marco de trabajo tienen un gran inter\u00e9s en asegurarse de que Django ahorre tiempo a los desarrolladores, produzca aplicaciones f\u00e1ciles de mantener y funcione bien bajo carga. Django permite construir sitios profundos, din\u00e1micos e interesantes en un tiempo extremadamente corto. Django est\u00e1 dise\u00f1ado para permitir concentrarse en las partes divertidas e interesantes del trabajo mientras alivia el dolor de las partes repetitivas. Al hacerlo, proporciona abstracciones de alto nivel de los patrones comunes de desarrollo web, atajos para tareas de programaci\u00f3n frecuentes y convenciones claras sobre c\u00f3mo resolver problemas. Al mismo tiempo, Django trata de mantenerse al margen, dejando trabajar fuera del \u00e1mbito del marco seg\u00fan sea necesario. Django hace que el desarrollo web sea mejor. Est\u00e1 dise\u00f1ado para moverse r\u00e1pidamente por muchos proyectos Django, y luego, en \u00faltima instancia, ense\u00f1ar todo lo que se necesita saber para dise\u00f1ar, desarrollar e implementar con \u00e9xito un sitio del que sentirse orgulloso. 1.3. Panorama General Empezar con Django es dif\u00edcil porque es un proyecto muy grande, pero entender c\u00f3mo se unen todas las partes a un alto nivel, permite dominar Django mucho m\u00e1s r\u00e1pido. En el nivel m\u00e1s alto, Django es un marco de trabajo Modelo-Vista-Controlador -o MVC. MVC es un patr\u00f3n de dise\u00f1o de software que tiene como objetivo separar una aplicaci\u00f3n web en tres partes interconectadas: El modelo , que proporciona la interfaz con la base de datos que contiene los datos de la aplicaci\u00f3n La vista , que decide qu\u00e9 informaci\u00f3n presentar al usuario y recoge informaci\u00f3n del usuario El controlador , que gestiona la l\u00f3gica de negocio de la aplicaci\u00f3n y act\u00faa como un intermediario de informaci\u00f3n entre el modelo y la vista. Django utiliza una terminolog\u00eda ligeramente diferente en su aplicaci\u00f3n del MVC. En Django: El modelo es funcionalmente el mismo. El mapeo de objetos relacionales de Django (ORM - Object Relational Mapping ) proporciona la interfaz para la base de datos de la aplicaci\u00f3n. La plantilla proporciona la l\u00f3gica de visualizaci\u00f3n y es la interfaz entre el usuario y su aplicaci\u00f3n Django. La vista gestiona el grueso de las aplicaciones de proceso de datos, la l\u00f3gica de las aplicaciones y la mensajer\u00eda. El patr\u00f3n de dise\u00f1o de MVC se ha utilizado tanto para aplicaciones de escritorio como para aplicaciones web durante muchos a\u00f1os, por lo que hay un gran n\u00famero de variaciones en este tema, de las que Django no es una excepci\u00f3n. Si se desea profundizar un poco m\u00e1s en el patr\u00f3n de dise\u00f1o de MVC, s\u00f3lo se debe advertir que la gente puede ser muy apasionada sobre lo que es una interpretaci\u00f3n diferente de la misma cosa. Tomando prestada una cita del equipo de desarrollo de Django: \"Al final del d\u00eda, por supuesto, todo se reduce a hacer las cosas. Y, sin importar el nombre que se les d\u00e9, Django las hace de la manera m\u00e1s l\u00f3gica por nosotros.\" 1.3.1. Modelos Django Los modelos de Django proporcionan un mapeo a objetos relacionales (ORM Object-Relational Mapper ) de la base de datos subyacente. El ORM es una poderosa t\u00e9cnica de programaci\u00f3n que facilita el trabajo con datos y bases de datos relacionales. La mayor\u00eda de las bases de datos comunes se programan con alguna forma de Lenguaje de Consulta Estructurado (SQL), sin embargo cada base de datos implementa el SQL a su manera. El SQL puede ser bastante complejo y dif\u00edcil de aprender. Una herramienta ORM, por otro lado, proporciona un mapeo simple entre un objeto (la 'O' en ORM) y la base de datos subyacente, sin que el programador necesite conocer la estructura de la base de datos, o requiera un SQL complejo para manipular y recuperar los datos. En Django, el modelo es el objeto que se asigna a la base de datos . Cuando se crea un modelo, Django crea una tabla correspondiente en la base de datos, sin tener que escribir una sola l\u00ednea de SQL. Django antepone al nombre de la tabla el nombre de la aplicaci\u00f3n Django. El modelo tambi\u00e9n vincula la informaci\u00f3n relacionada en la base de datos . En la figura, se crea un segundo modelo para hacer un seguimiento de los cursos en los que est\u00e1 inscrito un usuario. Repetir toda la informaci\u00f3n de los usuarios en la tabla yourapp_Course ir\u00eda en contra de los buenos principios de dise\u00f1o, por lo que en su lugar se crea una relaci\u00f3n (la 'R' en ORM) entre la tabla yourapp_Course y la tabla yourapp_UserProfile . Esta relaci\u00f3n se crea enlazando los modelos con una clave for\u00e1nea , es decir, el campo user_id en la tabla yourapp_Course es un campo clave que est\u00e1 enlazado con el campo id en la tabla for\u00e1nea yourapp_UserProfile . Esto es solo una simplificaci\u00f3n, pero es una visi\u00f3n general \u00fatil de c\u00f3mo el ORM de Django utiliza los datos del modelo para crear tablas de bases de datos. Las cosas se aclaran una vez que se tiene la oportunidad de construir modelos reales. 1.3.2. Bases de datos soportadas Django soporta oficialmente cuatro bases de datos: PostgreSQL MySQL SQLite Oracle Hay varias aplicaciones de terceros para conectarse a otras bases de datos, si es necesario conectarse a una base de datos con soporte no oficial. La preferencia de la mayor\u00eda de los desarrolladores de Django es PostgreSQL . MySQL tambi\u00e9n es un backend de base de datos bastante com\u00fan para Django. Instalar y configurar una base de datos no es una tarea para un principiante; afortunadamente, Django instala y configura SQLite de forma autom\u00e1tica. 1.3.2.1. \u00bfQu\u00e9 base de datos es mejor? Primero lo f\u00e1cil : SQLite es para el desarrollo y pruebas tempranas. No debe ser usado en producci\u00f3n. Nunca. La siguiente respuesta m\u00e1s f\u00e1cil : Oracle es para grandes corporaciones con grandes bolsillos. Es poco probable que se tenga que decidir si se utiliza Oracle a menos que sea una gran empresa, y entonces puede se que esa sea la \u00fanica elecci\u00f3n. En cuanto a PostgreSQL y MySQL : Hay razones definitivas por las que PostgreSQL es una mejor base de datos que MySQL. Sin embargo, para cuando se tenga suficiente experiencia para entender por qu\u00e9, se estar\u00e1 en posici\u00f3n de juzgar m\u00e1s apropiadamente. La mayor\u00eda de las veces la elecci\u00f3n la habr\u00e1 hecho el cliente, el empleador o el anfitri\u00f3n de la web. El programador inteligente evita este tipo de argumentos: Si se puede, utilizar PostgreSQL, de lo contrario MySQL tambi\u00e9n est\u00e1 bien. 1.3.3. Plantillas Django Una plantilla Django es un archivo de texto dise\u00f1ado para separar los datos de una aplicaci\u00f3n de la forma en que se presenta. En la mayor\u00eda de los casos, las plantillas Django son archivos de Lenguaje de Marcas de Hipertexto (HTML) para presentar los datos de la aplicaci\u00f3n en un navegador web, sin embargo, las plantillas Django no se limitan al HTML, sino que pueden utilizarse para presentar varios formatos de texto diferentes. El dise\u00f1o de las plantillas de Django se basa en varios principios b\u00e1sicos, sin embargo, tres son fundamentales: Un sistema de plantillas debe separar la l\u00f3gica del programa del dise\u00f1o . Las plantillas deben desalentar la redundancia : no te repitas (DRY Don't Repeat Yourself ). El sistema de plantillas debe ser seguro y estar a salvo de la ejecuci\u00f3n de c\u00f3digo en \u00e9l. 1.3.4. Separar la l\u00f3gica del dise\u00f1o El dise\u00f1o y la programaci\u00f3n web son dos disciplinas muy diferentes. En todos los proyectos, excepto en los m\u00e1s peque\u00f1os, el dise\u00f1o y la programaci\u00f3n no la hace el mismo equipo; en muchos casos, ni siquiera la misma compa\u00f1\u00eda. Cuando los creadores de Django consideraron por primera vez el dise\u00f1o del sistema de plantillas de Django, qued\u00f3 claro que los programadores y dise\u00f1adores de sitios web de Django deber\u00edan ser capaces de trabajar de forma independiente. El resultado es un lenguaje de scripting de texto plano que utiliza tags para proporcionar una l\u00f3gica de presentaci\u00f3n para decidir qu\u00e9 contenido mostrar en la plantilla. Esto es m\u00e1s f\u00e1cil de entender con un simple ejemplo: <h1>Informaci\u00f3n de su pedido</h1> <p>Apreciado Sr. {{ person_name }},</p> Este podr\u00eda ser el primer par de l\u00edneas de una p\u00e1gina de confirmaci\u00f3n de pedido, que se muestra en un sitio web despu\u00e9s de que el usuario haya hecho una compra. N\u00f3tese que la mayor\u00eda de este c\u00f3digo es HTML simple. La peque\u00f1a parte escrita entre llaves es una etiqueta de variable de Django. Cuando esta plantilla se muestre en el navegador, la plantilla sustituir\u00e1 la variable person_name por el nombre que se le pase a la vista. Como se trata de texto plano y HTML, un dise\u00f1ador no necesita saber nada sobre Django para poder crear una plantilla Django . Todo lo que el dise\u00f1ador tiene que hacer es a\u00f1adir un marcador de posici\u00f3n (etiqueta de comentario HTML, por ejemplo), para que el programador lo sustituya por una etiqueta Django al codificar el sitio web. La otra gran ventaja de este enfoque es que, dado que la mayor parte de la plantilla es HTML simple, como programador, se puede crear un sitio web de buena apariencia sin un dise\u00f1ador: se puede descargar una plantilla HTML de Internet y agregar etiquetas de plantilla Django. Esto tambi\u00e9n funciona con las plantillas Bootstrap y los sitios pesados en la parte de front-end con JavaScript. 1.3.5. Don't Repeat Yourself (DRY) DRY (Don't Repeat Yourself) es un t\u00e9rmino que aparece a menudo en el discurso de Django, ya que es uno de los principios fundamentales de Django. El principio DRY es particularmente evidente en c\u00f3mo Django utiliza la herencia de modelos . Para entender mejor c\u00f3mo la herencia de plantillas nos ayuda a minimizar la repetici\u00f3n y el c\u00f3digo redundante, vamos a examinar primero un dise\u00f1o t\u00edpico de una p\u00e1gina web. Este dise\u00f1o de p\u00e1gina tiene una navegaci\u00f3n superior, una imagen de cabecera, un men\u00fa lateral izquierdo, el contenido principal de la p\u00e1gina y un pie de p\u00e1gina. Si s\u00f3lo se quisiera crear unas pocas p\u00e1ginas web, se podr\u00eda copiar la p\u00e1gina principal y simplemente cambiar el contenido y guardar cada p\u00e1gina diferente como un archivo HTML. El problema es que no s\u00f3lo estamos repitiendo mucho c\u00f3digo, sino que el mantenimiento de un sitio grande podr\u00eda salirse r\u00e1pidamente de control. \u00a1Se tendr\u00eda que hacer el cambio en cada una de las p\u00e1ginas del sitio!. Este problema se soluciona creando una plantilla principal con el contenido com\u00fan a todo el sitio web para luego crear plantillas secundarias que heredan estas caracter\u00edsticas comunes y a las que, m\u00e1s tarde, se les agregar\u00e1 cualquier contenido que sea espec\u00edfico. Se habr\u00e1 notado que se incluy\u00f3 la navegaci\u00f3n de la barra lateral del hijo. Es com\u00fan que ciertas p\u00e1ginas de un sitio tengan una navegaci\u00f3n limitada, as\u00ed que no todas las p\u00e1ginas necesitar\u00e1n la navegaci\u00f3n lateral. Django tambi\u00e9n admite la herencia m\u00faltiple, por lo que, siguiendo con el ejemplo anterior, se podr\u00eda tener una plantilla hija que agregue s\u00f3lo la navegaci\u00f3n lateral al padre, y luego tener una tercera plantilla que herede de la hija y agregue el contenido. El \u00fanico l\u00edmite a la herencia de plantillas de Django es el pr\u00e1ctico: si se tienen plantillas que heredan m\u00e1s de dos o tres niveles de profundidad, se deber\u00eda reevaluar el dise\u00f1o del sitio . 1.3.6. Seguridad en las Plantillas La filosof\u00eda de Django es que Internet ya es lo suficientemente insegura como para introducir m\u00e1s problemas de seguridad al permitir la ejecuci\u00f3n de c\u00f3digo dentro de las plantillas de las p\u00e1ginas web. La soluci\u00f3n de Django a las vulnerabilidades de seguridad de las plantillas es simple: la ejecuci\u00f3n de c\u00f3digo est\u00e1 prohibida en las plantillas . Las etiquetas de las plantillas de Django proporcionan s\u00f3lo l\u00f3gica de visualizaci\u00f3n, esto incluye: Mostrar variables : puede ser un texto simple como el nombre de un usuario, o datos m\u00e1s complejos como texto con formato HTML. Elegir el contenido que se va a mostrar : bas\u00e1ndose en comprobaciones l\u00f3gicas, por ejemplo, si un usuario est\u00e1 conectado, entonces mostrar el men\u00fa de usuario o el contenido de ese usuario. Iterar sobre las listas de datos : lo m\u00e1s frecuente es que se utilice para insertar informaci\u00f3n de la base de datos en las listas de HTML. Formateo de los datos : por ejemplo, formato de fecha, manipulaci\u00f3n de texto y otros filtros que act\u00faan sobre los datos. Cosas que no se pueden hacer en una plantilla Django: Ejecutar c\u00f3digo Python Asignar un valor a una variable Realizar la l\u00f3gica avanzada Las plantillas de Django tambi\u00e9n a\u00f1aden caracter\u00edsticas de seguridad adicionales como el escape autom\u00e1tico de todas las cadenas, Cross-Site Scripting y la protecci\u00f3n Cross-Site Request Forgery. Estos dos \u00faltimos temas van m\u00e1s all\u00e1 de un texto inicial, pero es \u00fatil comprender que las plantillas de Django son seguras de forma predeterminada, por lo que no hay que preocuparse de introducir problemas de seguridad en el sitio web de forma accidental. 1.3.7. Vistas de Django Las vistas de Django son los brokers de informaci\u00f3n de una aplicaci\u00f3n de Django. Una vista obtiene los datos de la base de datos (o de una fuente o servicio de datos externos) y los entrega a una plantilla . En el caso de una aplicaci\u00f3n web, la vista entrega el contenido de la p\u00e1gina web y las plantillas; en el caso de una API RESTful, este contenido podr\u00eda estar formateado adecuadamente en datos JSON. La vista toma decisiones sobre los datos que se entregan a la plantilla, ya sea actuando sobre la entrada del usuario o en respuesta a otra l\u00f3gica de negocio y procesos internos. Cada vista de Django realiza una funci\u00f3n espec\u00edfica y tiene una plantilla asociada. Las vistas est\u00e1n representadas por una funci\u00f3n Python, o un m\u00e9todo de una clase Python. En los inicios de Django, s\u00f3lo exist\u00edan vistas basadas en funciones, sin embargo, a medida que Django ha ido creciendo a lo largo de los a\u00f1os, los desarrolladores de Django a\u00f1adieron a Django vistas basadas en clases. Las vistas basadas en clases a\u00f1aden extensibilidad a las vistas de Django, as\u00ed como vistas incorporadas que hacen que la creaci\u00f3n de vistas comunes (como la visualizaci\u00f3n de una lista de art\u00edculos) sea m\u00e1s f\u00e1cil de implementar. No preocuparse demasiado por las diferencias entre las vistas basadas en funciones y las basadas en clases por ahora. Para aliviar la carga de los programadores, muchas tareas de visualizaci\u00f3n comunes tienen vistas incorporadas en Django. Hay cuatro vistas incorporadas basadas en funciones para mostrar las p\u00e1ginas de error: La vista 404 (page not found) La vista 500 (server error) La vista 403 (HTTP Forbidden) La vista de 400 (bad request) Tambi\u00e9n hay varias vistas basadas en clases para simplificar las tareas comunes de visualizaci\u00f3n. Entre ellas se incluyen: ListView para mostrar una lista de objetos de datos (por ejemplo, lista de todos los art\u00edculos) DetailView para mostrar un solo objeto (por ejemplo, un art\u00edculo individual) RedirectView redirige a otra URL FormView para mostrar un formulario Tambi\u00e9n se proporcionan vistas de fechas gen\u00e9ricas adicionales basadas en clases para mostrar colecciones de objetos de d\u00eda, semana, mes y a\u00f1o, como entradas de blog y art\u00edculos. 1.3.8. URLconf - Colocando todo junto Un sitio web no es de mucha utilidad si no se puede navegar por \u00e9l: hay que decirle a la vista qu\u00e9 mostrar en el navegador, en base a lo que el usuario ha solicitado. La navegaci\u00f3n en un sitio web Django es la misma que en cualquier otro sitio web: las p\u00e1ginas y otros contenidos se acceden a trav\u00e9s de la URL . Cuando un usuario hace clic en un enlace de un sitio web, se env\u00eda una solicitud de esa URL a Django. Una vez que Django recibe la URL solicitada, debe decidir qu\u00e9 vista se ocupar\u00e1 de la solicitud. El programador decide qu\u00e9 vista servir\u00e1 en qu\u00e9 URL creando una Configuraci\u00f3n de URL (URLconf para abreviar) en un archivo de Python llamado urls.py . Cuando Django encuentra una URL en urls.py que coincide con la URL solicitada, llama a la vista asociada a esa URL. La vista seleccionada entonces renderiza el contenido a una plantilla, seg\u00fan la l\u00f3gica de negocio de la vista y env\u00eda el contenido renderizado de vuelta al navegador para su visualizaci\u00f3n. Por supuesto, esto es una simplificaci\u00f3n: Django puede recoger datos mucho m\u00e1s complejos del navegador que una URL , y las vistas no s\u00f3lo representan p\u00e1ginas web. Tambi\u00e9n hay otra capa colch\u00f3n en Django que se sit\u00faa entre la solicitud del navegador y la respuesta de la vista (a la que Django llama, de forma bastante inteligente, \" middleware \") que permite hacer toneladas de cosas geniales con los datos. La clave aqu\u00ed es que, independientemente de lo complejo que sea un sitio web, este simple proceso subyace en toda la comunicaci\u00f3n entre Django, el navegador y el usuario final. As\u00ed que eso es todo en cuanto a nuestra mirada de alto nivel a la estructura de Django y de c\u00f3mo Django se comunica con el navegador para mostrar el contenido de su sitio. No estar preocupado si se est\u00e1 todav\u00eda un poco confundido con todo esto. A medida que se va profundizando y se empieza a desarrollar aplicaciones reales de Django, se hace mucho m\u00e1s f\u00e1cil comprender c\u00f3mo funciona todo. 1.4. El plan Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv 1.4.1. Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\" La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas. 1.4.2. Por qu\u00e9 unos apuntes Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS 1.4.3 Estructura 1.Introducci\u00f3n 2.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 3.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 4.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 5.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test GitHub Heroku 6-8.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 9.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Modelos de usuario personalizados\" 10.Autenticaci\u00f3n de usuarios 11.Bootstrap 12-13.Reseteo y cambio de contrase\u00f1as v\u00eda email 14-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n","title":"1. Introducci\u00f3n"},{"location":"01_introduccion/#1-introduccion","text":"","title":"1 Introducci\u00f3n"},{"location":"01_introduccion/#11-introduciendo-django","text":"El gran software de c\u00f3digo abierto casi siempre se construye porque uno o m\u00e1s desarrolladores inteligentes ten\u00edan un problema que resolver y no hab\u00eda ninguna soluci\u00f3n viable o rentable disponible. Django no es una excepci\u00f3n. Adrian y Jacob hace tiempo que se retiraron del proyecto, pero los fundamentos de lo que los llev\u00f3 a crear Django siguen vivos. Es esta s\u00f3lida base de experiencia en el mundo real la que ha hecho a Django tan exitoso como lo es. En reconocimiento a su contribuci\u00f3n, es mejor que les dejemos presentar a Django con sus propias palabras (editado y reformateado a partir del libro original).","title":"1.1. Introduciendo Django"},{"location":"01_introduccion/#111-por-adrian-holovaty-y-jacob-kaplan-moss-diciembre-2009","text":"En los primeros d\u00edas, los desarrolladores web escrib\u00edan cada p\u00e1gina a mano. Actualizar un sitio web significaba editar el HTML; un redise\u00f1o implicaba rehacer cada una de las p\u00e1ginas, una a una. A medida que los sitios web crec\u00edan y se volv\u00edan m\u00e1s ambiciosos, se hizo evidente r\u00e1pidamente que ese enfoque era tedioso, lento y, en \u00faltima instancia, insostenible. Un grupo de hackers emprendedores del Centro Nacional de Aplicaciones de Supercomputaci\u00f3n (la NCSA, donde se desarroll\u00f3 Mosaic, el primer navegador web gr\u00e1fico) resolvi\u00f3 este problema dejando que el servidor web generara programas externos que pudieran generar HTML de forma din\u00e1mica. Llamaron a este protocolo la Interfaz de Entrada Com\u00fan (CGI Common Gateway Interface), y cambi\u00f3 la web para siempre. Ahora es dif\u00edcil imaginar lo que debe haber sido una revelaci\u00f3n CGI: en lugar de tratar las p\u00e1ginas HTML como simples archivos en el disco, CGI permite pensar en sus p\u00e1ginas como recursos generados din\u00e1micamente a pedido. El desarrollo de CGI marc\u00f3 el comienzo de la primera generaci\u00f3n de sitios web din\u00e1micos. Sin embargo, CGI tiene sus problemas: Los scripts CGI necesitan contener mucho c\u00f3digo repetitivo, dificultan la reutilizaci\u00f3n de c\u00f3digo, y pueden ser dif\u00edciles de escribir y entender para los desarrolladores novatos. PHP solucion\u00f3 muchos de estos problemas, y asalt\u00f3 el mundo -ahora es la herramienta m\u00e1s popular usada para crear sitios web din\u00e1micos, y docenas de lenguajes similares (ASP, JSP, etc.) siguieron de cerca el dise\u00f1o de PHP. La mayor innovaci\u00f3n de PHP es su facilidad de uso: El c\u00f3digo PHP es simplemente incrustado en HTML plano; la curva de aprendizaje para alguien que ya conoce el HTML es extremadamente superficial. Pero PHP tiene sus propios problemas; su gran facilidad de uso fomenta un c\u00f3digo descuidado, repetitivo y mal concebido. Peor a\u00fan, PHP hace poco para proteger a los programadores de las vulnerabilidades de seguridad, por lo que muchos desarrolladores de PHP se encontraron aprendiendo sobre seguridad s\u00f3lo una vez que ya era demasiado tarde. Estas y otras frustraciones similares condujeron directamente al desarrollo de la actual cosecha de marcos de desarrollo web de tercera generaci\u00f3n. Con esta nueva explosi\u00f3n de desarrollo web viene otro aumento de la ambici\u00f3n; se espera que los desarrolladores web hagan m\u00e1s y m\u00e1s cada d\u00eda. Django fue inventado para satisfacer estas nuevas ambiciones.","title":"1.1.1. Por Adrian Holovaty y Jacob Kaplan-Moss  (Diciembre 2009)"},{"location":"01_introduccion/#12-la-historia-de-django","text":"Django creci\u00f3 org\u00e1nicamente a partir de aplicaciones del mundo real escritas por un equipo de desarrollo web en Lawrence, Kansas, USA. Naci\u00f3 en el oto\u00f1o de 2003, cuando los programadores web del peri\u00f3dico Lawrence Journal-World, Adrian Holovaty y Simon Willison , comenzaron a usar Python para construir aplicaciones. El equipo de World Online, responsable de la producci\u00f3n y mantenimiento de varios sitios de noticias locales, prosper\u00f3 en un entorno de desarrollo dictado por los plazos del periodismo. Para los sitios -incluyendo LJWorld.com, Lawrence.com y KUsports.com- los periodistas (y la direcci\u00f3n) exigieron que se a\u00f1adieran caracter\u00edsticas y se construyeran aplicaciones enteras en un horario intensamente r\u00e1pido, a menudo con s\u00f3lo un d\u00eda u hora de aviso. As\u00ed, Simon y Adrian desarrollaron un marco de desarrollo web que ahorraba tiempo por necesidad, era la \u00fanica manera en que pod\u00edan construir aplicaciones mantenibles bajo los plazos extremos. En el verano de 2005, despu\u00e9s de haber desarrollado este marco de trabajo hasta un punto en el que alimentaba eficientemente la mayor\u00eda de los sitios de World Online, el equipo, que ahora inclu\u00eda a Jacob Kaplan-Moss , decidi\u00f3 lanzar el marco de trabajo como software de c\u00f3digo abierto. Lo lanzaron en julio de 2005 y lo llamaron Django, en honor al guitarrista de jazz Django Reinhardt . A pesar de que Django ahora es un proyecto de c\u00f3digo abierto con colaboradores por todo el mundo, los desarrolladores originales de World Online todav\u00eda aportan una gu\u00eda centralizada para el crecimiento del framework, y World Online colabora con otros aspectos importantes tales como tiempo de trabajo, materiales de marketing, y hosting/ancho de banda para el Web site del framework (http://www.djangoproject.com/). Esta historia es relevante porque ayuda a explicar dos cosas clave. La primera es el \"punto dulce\" de Django. Debido a que Django naci\u00f3 en un entorno de noticias, ofrece varias caracter\u00edsticas (como su sitio de administraci\u00f3n) que son particularmente adecuadas para sitios de \"contenido\" como Amazon.com, craigslist.org y washingtonpost.com que ofrecen informaci\u00f3n din\u00e1mica y basada en bases de datos. No hay que desanimarse por eso, aunque Django es particularmente bueno para desarrollar ese tipo de sitios, eso no impide que sea una herramienta efectiva para construir cualquier tipo de sitio web din\u00e1mico. (Hay una diferencia entre ser particularmente eficaz en algo y ser ineficaz en otras cosas). La segunda cuesti\u00f3n a tener en cuenta es c\u00f3mo los or\u00edgenes de Django han dado forma a la cultura de su comunidad de c\u00f3digo abierto. Debido a que Django fue extra\u00eddo del c\u00f3digo del mundo real, en lugar de ser un ejercicio acad\u00e9mico o un producto comercial, est\u00e1 muy enfocado en resolver los problemas de desarrollo web que los propios desarrolladores de Django han afrontado -y contin\u00faan afrontando-. Como resultado, Django mismo se mejora activamente casi a diario. Los encargados de mantener el marco de trabajo tienen un gran inter\u00e9s en asegurarse de que Django ahorre tiempo a los desarrolladores, produzca aplicaciones f\u00e1ciles de mantener y funcione bien bajo carga. Django permite construir sitios profundos, din\u00e1micos e interesantes en un tiempo extremadamente corto. Django est\u00e1 dise\u00f1ado para permitir concentrarse en las partes divertidas e interesantes del trabajo mientras alivia el dolor de las partes repetitivas. Al hacerlo, proporciona abstracciones de alto nivel de los patrones comunes de desarrollo web, atajos para tareas de programaci\u00f3n frecuentes y convenciones claras sobre c\u00f3mo resolver problemas. Al mismo tiempo, Django trata de mantenerse al margen, dejando trabajar fuera del \u00e1mbito del marco seg\u00fan sea necesario. Django hace que el desarrollo web sea mejor. Est\u00e1 dise\u00f1ado para moverse r\u00e1pidamente por muchos proyectos Django, y luego, en \u00faltima instancia, ense\u00f1ar todo lo que se necesita saber para dise\u00f1ar, desarrollar e implementar con \u00e9xito un sitio del que sentirse orgulloso.","title":"1.2. La historia de Django"},{"location":"01_introduccion/#13-panorama-general","text":"Empezar con Django es dif\u00edcil porque es un proyecto muy grande, pero entender c\u00f3mo se unen todas las partes a un alto nivel, permite dominar Django mucho m\u00e1s r\u00e1pido. En el nivel m\u00e1s alto, Django es un marco de trabajo Modelo-Vista-Controlador -o MVC. MVC es un patr\u00f3n de dise\u00f1o de software que tiene como objetivo separar una aplicaci\u00f3n web en tres partes interconectadas: El modelo , que proporciona la interfaz con la base de datos que contiene los datos de la aplicaci\u00f3n La vista , que decide qu\u00e9 informaci\u00f3n presentar al usuario y recoge informaci\u00f3n del usuario El controlador , que gestiona la l\u00f3gica de negocio de la aplicaci\u00f3n y act\u00faa como un intermediario de informaci\u00f3n entre el modelo y la vista. Django utiliza una terminolog\u00eda ligeramente diferente en su aplicaci\u00f3n del MVC. En Django: El modelo es funcionalmente el mismo. El mapeo de objetos relacionales de Django (ORM - Object Relational Mapping ) proporciona la interfaz para la base de datos de la aplicaci\u00f3n. La plantilla proporciona la l\u00f3gica de visualizaci\u00f3n y es la interfaz entre el usuario y su aplicaci\u00f3n Django. La vista gestiona el grueso de las aplicaciones de proceso de datos, la l\u00f3gica de las aplicaciones y la mensajer\u00eda. El patr\u00f3n de dise\u00f1o de MVC se ha utilizado tanto para aplicaciones de escritorio como para aplicaciones web durante muchos a\u00f1os, por lo que hay un gran n\u00famero de variaciones en este tema, de las que Django no es una excepci\u00f3n. Si se desea profundizar un poco m\u00e1s en el patr\u00f3n de dise\u00f1o de MVC, s\u00f3lo se debe advertir que la gente puede ser muy apasionada sobre lo que es una interpretaci\u00f3n diferente de la misma cosa. Tomando prestada una cita del equipo de desarrollo de Django: \"Al final del d\u00eda, por supuesto, todo se reduce a hacer las cosas. Y, sin importar el nombre que se les d\u00e9, Django las hace de la manera m\u00e1s l\u00f3gica por nosotros.\"","title":"1.3. Panorama General"},{"location":"01_introduccion/#131-modelos-django","text":"Los modelos de Django proporcionan un mapeo a objetos relacionales (ORM Object-Relational Mapper ) de la base de datos subyacente. El ORM es una poderosa t\u00e9cnica de programaci\u00f3n que facilita el trabajo con datos y bases de datos relacionales. La mayor\u00eda de las bases de datos comunes se programan con alguna forma de Lenguaje de Consulta Estructurado (SQL), sin embargo cada base de datos implementa el SQL a su manera. El SQL puede ser bastante complejo y dif\u00edcil de aprender. Una herramienta ORM, por otro lado, proporciona un mapeo simple entre un objeto (la 'O' en ORM) y la base de datos subyacente, sin que el programador necesite conocer la estructura de la base de datos, o requiera un SQL complejo para manipular y recuperar los datos. En Django, el modelo es el objeto que se asigna a la base de datos . Cuando se crea un modelo, Django crea una tabla correspondiente en la base de datos, sin tener que escribir una sola l\u00ednea de SQL. Django antepone al nombre de la tabla el nombre de la aplicaci\u00f3n Django. El modelo tambi\u00e9n vincula la informaci\u00f3n relacionada en la base de datos . En la figura, se crea un segundo modelo para hacer un seguimiento de los cursos en los que est\u00e1 inscrito un usuario. Repetir toda la informaci\u00f3n de los usuarios en la tabla yourapp_Course ir\u00eda en contra de los buenos principios de dise\u00f1o, por lo que en su lugar se crea una relaci\u00f3n (la 'R' en ORM) entre la tabla yourapp_Course y la tabla yourapp_UserProfile . Esta relaci\u00f3n se crea enlazando los modelos con una clave for\u00e1nea , es decir, el campo user_id en la tabla yourapp_Course es un campo clave que est\u00e1 enlazado con el campo id en la tabla for\u00e1nea yourapp_UserProfile . Esto es solo una simplificaci\u00f3n, pero es una visi\u00f3n general \u00fatil de c\u00f3mo el ORM de Django utiliza los datos del modelo para crear tablas de bases de datos. Las cosas se aclaran una vez que se tiene la oportunidad de construir modelos reales.","title":"1.3.1. Modelos Django"},{"location":"01_introduccion/#132-bases-de-datos-soportadas","text":"Django soporta oficialmente cuatro bases de datos: PostgreSQL MySQL SQLite Oracle Hay varias aplicaciones de terceros para conectarse a otras bases de datos, si es necesario conectarse a una base de datos con soporte no oficial. La preferencia de la mayor\u00eda de los desarrolladores de Django es PostgreSQL . MySQL tambi\u00e9n es un backend de base de datos bastante com\u00fan para Django. Instalar y configurar una base de datos no es una tarea para un principiante; afortunadamente, Django instala y configura SQLite de forma autom\u00e1tica.","title":"1.3.2. Bases de datos soportadas"},{"location":"01_introduccion/#1321-que-base-de-datos-es-mejor","text":"Primero lo f\u00e1cil : SQLite es para el desarrollo y pruebas tempranas. No debe ser usado en producci\u00f3n. Nunca. La siguiente respuesta m\u00e1s f\u00e1cil : Oracle es para grandes corporaciones con grandes bolsillos. Es poco probable que se tenga que decidir si se utiliza Oracle a menos que sea una gran empresa, y entonces puede se que esa sea la \u00fanica elecci\u00f3n. En cuanto a PostgreSQL y MySQL : Hay razones definitivas por las que PostgreSQL es una mejor base de datos que MySQL. Sin embargo, para cuando se tenga suficiente experiencia para entender por qu\u00e9, se estar\u00e1 en posici\u00f3n de juzgar m\u00e1s apropiadamente. La mayor\u00eda de las veces la elecci\u00f3n la habr\u00e1 hecho el cliente, el empleador o el anfitri\u00f3n de la web. El programador inteligente evita este tipo de argumentos: Si se puede, utilizar PostgreSQL, de lo contrario MySQL tambi\u00e9n est\u00e1 bien.","title":"1.3.2.1. \u00bfQu\u00e9 base de datos es mejor?"},{"location":"01_introduccion/#133-plantillas-django","text":"Una plantilla Django es un archivo de texto dise\u00f1ado para separar los datos de una aplicaci\u00f3n de la forma en que se presenta. En la mayor\u00eda de los casos, las plantillas Django son archivos de Lenguaje de Marcas de Hipertexto (HTML) para presentar los datos de la aplicaci\u00f3n en un navegador web, sin embargo, las plantillas Django no se limitan al HTML, sino que pueden utilizarse para presentar varios formatos de texto diferentes. El dise\u00f1o de las plantillas de Django se basa en varios principios b\u00e1sicos, sin embargo, tres son fundamentales: Un sistema de plantillas debe separar la l\u00f3gica del programa del dise\u00f1o . Las plantillas deben desalentar la redundancia : no te repitas (DRY Don't Repeat Yourself ). El sistema de plantillas debe ser seguro y estar a salvo de la ejecuci\u00f3n de c\u00f3digo en \u00e9l.","title":"1.3.3. Plantillas Django"},{"location":"01_introduccion/#134-separar-la-logica-del-diseno","text":"El dise\u00f1o y la programaci\u00f3n web son dos disciplinas muy diferentes. En todos los proyectos, excepto en los m\u00e1s peque\u00f1os, el dise\u00f1o y la programaci\u00f3n no la hace el mismo equipo; en muchos casos, ni siquiera la misma compa\u00f1\u00eda. Cuando los creadores de Django consideraron por primera vez el dise\u00f1o del sistema de plantillas de Django, qued\u00f3 claro que los programadores y dise\u00f1adores de sitios web de Django deber\u00edan ser capaces de trabajar de forma independiente. El resultado es un lenguaje de scripting de texto plano que utiliza tags para proporcionar una l\u00f3gica de presentaci\u00f3n para decidir qu\u00e9 contenido mostrar en la plantilla. Esto es m\u00e1s f\u00e1cil de entender con un simple ejemplo: <h1>Informaci\u00f3n de su pedido</h1> <p>Apreciado Sr. {{ person_name }},</p> Este podr\u00eda ser el primer par de l\u00edneas de una p\u00e1gina de confirmaci\u00f3n de pedido, que se muestra en un sitio web despu\u00e9s de que el usuario haya hecho una compra. N\u00f3tese que la mayor\u00eda de este c\u00f3digo es HTML simple. La peque\u00f1a parte escrita entre llaves es una etiqueta de variable de Django. Cuando esta plantilla se muestre en el navegador, la plantilla sustituir\u00e1 la variable person_name por el nombre que se le pase a la vista. Como se trata de texto plano y HTML, un dise\u00f1ador no necesita saber nada sobre Django para poder crear una plantilla Django . Todo lo que el dise\u00f1ador tiene que hacer es a\u00f1adir un marcador de posici\u00f3n (etiqueta de comentario HTML, por ejemplo), para que el programador lo sustituya por una etiqueta Django al codificar el sitio web. La otra gran ventaja de este enfoque es que, dado que la mayor parte de la plantilla es HTML simple, como programador, se puede crear un sitio web de buena apariencia sin un dise\u00f1ador: se puede descargar una plantilla HTML de Internet y agregar etiquetas de plantilla Django. Esto tambi\u00e9n funciona con las plantillas Bootstrap y los sitios pesados en la parte de front-end con JavaScript.","title":"1.3.4. Separar la l\u00f3gica del dise\u00f1o"},{"location":"01_introduccion/#135-dont-repeat-yourself-dry","text":"DRY (Don't Repeat Yourself) es un t\u00e9rmino que aparece a menudo en el discurso de Django, ya que es uno de los principios fundamentales de Django. El principio DRY es particularmente evidente en c\u00f3mo Django utiliza la herencia de modelos . Para entender mejor c\u00f3mo la herencia de plantillas nos ayuda a minimizar la repetici\u00f3n y el c\u00f3digo redundante, vamos a examinar primero un dise\u00f1o t\u00edpico de una p\u00e1gina web. Este dise\u00f1o de p\u00e1gina tiene una navegaci\u00f3n superior, una imagen de cabecera, un men\u00fa lateral izquierdo, el contenido principal de la p\u00e1gina y un pie de p\u00e1gina. Si s\u00f3lo se quisiera crear unas pocas p\u00e1ginas web, se podr\u00eda copiar la p\u00e1gina principal y simplemente cambiar el contenido y guardar cada p\u00e1gina diferente como un archivo HTML. El problema es que no s\u00f3lo estamos repitiendo mucho c\u00f3digo, sino que el mantenimiento de un sitio grande podr\u00eda salirse r\u00e1pidamente de control. \u00a1Se tendr\u00eda que hacer el cambio en cada una de las p\u00e1ginas del sitio!. Este problema se soluciona creando una plantilla principal con el contenido com\u00fan a todo el sitio web para luego crear plantillas secundarias que heredan estas caracter\u00edsticas comunes y a las que, m\u00e1s tarde, se les agregar\u00e1 cualquier contenido que sea espec\u00edfico. Se habr\u00e1 notado que se incluy\u00f3 la navegaci\u00f3n de la barra lateral del hijo. Es com\u00fan que ciertas p\u00e1ginas de un sitio tengan una navegaci\u00f3n limitada, as\u00ed que no todas las p\u00e1ginas necesitar\u00e1n la navegaci\u00f3n lateral. Django tambi\u00e9n admite la herencia m\u00faltiple, por lo que, siguiendo con el ejemplo anterior, se podr\u00eda tener una plantilla hija que agregue s\u00f3lo la navegaci\u00f3n lateral al padre, y luego tener una tercera plantilla que herede de la hija y agregue el contenido. El \u00fanico l\u00edmite a la herencia de plantillas de Django es el pr\u00e1ctico: si se tienen plantillas que heredan m\u00e1s de dos o tres niveles de profundidad, se deber\u00eda reevaluar el dise\u00f1o del sitio .","title":"1.3.5. Don't Repeat Yourself (DRY)"},{"location":"01_introduccion/#136-seguridad-en-las-plantillas","text":"La filosof\u00eda de Django es que Internet ya es lo suficientemente insegura como para introducir m\u00e1s problemas de seguridad al permitir la ejecuci\u00f3n de c\u00f3digo dentro de las plantillas de las p\u00e1ginas web. La soluci\u00f3n de Django a las vulnerabilidades de seguridad de las plantillas es simple: la ejecuci\u00f3n de c\u00f3digo est\u00e1 prohibida en las plantillas . Las etiquetas de las plantillas de Django proporcionan s\u00f3lo l\u00f3gica de visualizaci\u00f3n, esto incluye: Mostrar variables : puede ser un texto simple como el nombre de un usuario, o datos m\u00e1s complejos como texto con formato HTML. Elegir el contenido que se va a mostrar : bas\u00e1ndose en comprobaciones l\u00f3gicas, por ejemplo, si un usuario est\u00e1 conectado, entonces mostrar el men\u00fa de usuario o el contenido de ese usuario. Iterar sobre las listas de datos : lo m\u00e1s frecuente es que se utilice para insertar informaci\u00f3n de la base de datos en las listas de HTML. Formateo de los datos : por ejemplo, formato de fecha, manipulaci\u00f3n de texto y otros filtros que act\u00faan sobre los datos. Cosas que no se pueden hacer en una plantilla Django: Ejecutar c\u00f3digo Python Asignar un valor a una variable Realizar la l\u00f3gica avanzada Las plantillas de Django tambi\u00e9n a\u00f1aden caracter\u00edsticas de seguridad adicionales como el escape autom\u00e1tico de todas las cadenas, Cross-Site Scripting y la protecci\u00f3n Cross-Site Request Forgery. Estos dos \u00faltimos temas van m\u00e1s all\u00e1 de un texto inicial, pero es \u00fatil comprender que las plantillas de Django son seguras de forma predeterminada, por lo que no hay que preocuparse de introducir problemas de seguridad en el sitio web de forma accidental.","title":"1.3.6. Seguridad en las Plantillas"},{"location":"01_introduccion/#137-vistas-de-django","text":"Las vistas de Django son los brokers de informaci\u00f3n de una aplicaci\u00f3n de Django. Una vista obtiene los datos de la base de datos (o de una fuente o servicio de datos externos) y los entrega a una plantilla . En el caso de una aplicaci\u00f3n web, la vista entrega el contenido de la p\u00e1gina web y las plantillas; en el caso de una API RESTful, este contenido podr\u00eda estar formateado adecuadamente en datos JSON. La vista toma decisiones sobre los datos que se entregan a la plantilla, ya sea actuando sobre la entrada del usuario o en respuesta a otra l\u00f3gica de negocio y procesos internos. Cada vista de Django realiza una funci\u00f3n espec\u00edfica y tiene una plantilla asociada. Las vistas est\u00e1n representadas por una funci\u00f3n Python, o un m\u00e9todo de una clase Python. En los inicios de Django, s\u00f3lo exist\u00edan vistas basadas en funciones, sin embargo, a medida que Django ha ido creciendo a lo largo de los a\u00f1os, los desarrolladores de Django a\u00f1adieron a Django vistas basadas en clases. Las vistas basadas en clases a\u00f1aden extensibilidad a las vistas de Django, as\u00ed como vistas incorporadas que hacen que la creaci\u00f3n de vistas comunes (como la visualizaci\u00f3n de una lista de art\u00edculos) sea m\u00e1s f\u00e1cil de implementar. No preocuparse demasiado por las diferencias entre las vistas basadas en funciones y las basadas en clases por ahora. Para aliviar la carga de los programadores, muchas tareas de visualizaci\u00f3n comunes tienen vistas incorporadas en Django. Hay cuatro vistas incorporadas basadas en funciones para mostrar las p\u00e1ginas de error: La vista 404 (page not found) La vista 500 (server error) La vista 403 (HTTP Forbidden) La vista de 400 (bad request) Tambi\u00e9n hay varias vistas basadas en clases para simplificar las tareas comunes de visualizaci\u00f3n. Entre ellas se incluyen: ListView para mostrar una lista de objetos de datos (por ejemplo, lista de todos los art\u00edculos) DetailView para mostrar un solo objeto (por ejemplo, un art\u00edculo individual) RedirectView redirige a otra URL FormView para mostrar un formulario Tambi\u00e9n se proporcionan vistas de fechas gen\u00e9ricas adicionales basadas en clases para mostrar colecciones de objetos de d\u00eda, semana, mes y a\u00f1o, como entradas de blog y art\u00edculos.","title":"1.3.7. Vistas de Django"},{"location":"01_introduccion/#138-urlconf-colocando-todo-junto","text":"Un sitio web no es de mucha utilidad si no se puede navegar por \u00e9l: hay que decirle a la vista qu\u00e9 mostrar en el navegador, en base a lo que el usuario ha solicitado. La navegaci\u00f3n en un sitio web Django es la misma que en cualquier otro sitio web: las p\u00e1ginas y otros contenidos se acceden a trav\u00e9s de la URL . Cuando un usuario hace clic en un enlace de un sitio web, se env\u00eda una solicitud de esa URL a Django. Una vez que Django recibe la URL solicitada, debe decidir qu\u00e9 vista se ocupar\u00e1 de la solicitud. El programador decide qu\u00e9 vista servir\u00e1 en qu\u00e9 URL creando una Configuraci\u00f3n de URL (URLconf para abreviar) en un archivo de Python llamado urls.py . Cuando Django encuentra una URL en urls.py que coincide con la URL solicitada, llama a la vista asociada a esa URL. La vista seleccionada entonces renderiza el contenido a una plantilla, seg\u00fan la l\u00f3gica de negocio de la vista y env\u00eda el contenido renderizado de vuelta al navegador para su visualizaci\u00f3n. Por supuesto, esto es una simplificaci\u00f3n: Django puede recoger datos mucho m\u00e1s complejos del navegador que una URL , y las vistas no s\u00f3lo representan p\u00e1ginas web. Tambi\u00e9n hay otra capa colch\u00f3n en Django que se sit\u00faa entre la solicitud del navegador y la respuesta de la vista (a la que Django llama, de forma bastante inteligente, \" middleware \") que permite hacer toneladas de cosas geniales con los datos. La clave aqu\u00ed es que, independientemente de lo complejo que sea un sitio web, este simple proceso subyace en toda la comunicaci\u00f3n entre Django, el navegador y el usuario final. As\u00ed que eso es todo en cuanto a nuestra mirada de alto nivel a la estructura de Django y de c\u00f3mo Django se comunica con el navegador para mostrar el contenido de su sitio. No estar preocupado si se est\u00e1 todav\u00eda un poco confundido con todo esto. A medida que se va profundizando y se empieza a desarrollar aplicaciones reales de Django, se hace mucho m\u00e1s f\u00e1cil comprender c\u00f3mo funciona todo.","title":"1.3.8. URLconf - Colocando todo junto"},{"location":"01_introduccion/#14-el-plan","text":"Aprendizaje basado en proyectos 5 Proyectos progresivos Libre y Open Source Lo que hace que Django sea impresionante es su filosof\u00eda de \"viene en la caja\" \u00f3 \"pilas incluidas\" ( \"comes with the box\" \u00f3 \"batteries-included\" ). Permite una r\u00e1pida implementaci\u00f3n porque las partes m\u00e1s importantes ya est\u00e1n all\u00ed. Robusto Instagram, Pinterest (Flask; m\u00e1s personalizable y adecuado para API's), Bitbucket, Disqus, Nasa, Mozilla Firefox, Onion, Mahalo, The Washington Post, Eventbrite Se usar\u00e1 pipenv","title":"1.4. El plan"},{"location":"01_introduccion/#141-por-que-django-comes-with-the-box-o-batteries-included","text":"La mayor\u00eda de los sites usan las mismas funcionalidades b\u00e1sicas Autenticaci\u00f3n de usuarios Conexi\u00f3n a bases de datos Rutas Contenidos de una p\u00e1gina Gesti\u00f3n de la seguridad Interfaz de administraci\u00f3n etc. Hay que centrarse en nuevas funcionalidades: no reinventar la rueda. Django abraza el \"batteries-included\" frente a la aproximaci\u00f3n \"microframework\" (Flask). Menos flexible pero tambi\u00e9n menos tendente al error (Django) frente a m\u00e1s personalizable y simple (Flask). Es un entorno muy maduro (2005). Aprendamos de las mejores pr\u00e1cticas.","title":"1.4.1. Por qu\u00e9 Django \"comes with the box\" \u00f3 \"batteries-included\""},{"location":"01_introduccion/#142-por-que-unos-apuntes","text":"Django est\u00e1 bien documentado pero es dif\u00edcil de abordar para el principiante Incluso el tutorial b\u00e1sico es notablemente arduo El problema viene de que est\u00e1 orientado a la profundidad y no a la facilidad de uso Aunque no es estrictamente necesario, se recomienda tener conocimientos sobre Python, HTML y CSS","title":"1.4.2. Por qu\u00e9 unos apuntes"},{"location":"01_introduccion/#143-estructura","text":"1.Introducci\u00f3n 2.Configuraci\u00f3n inicial Django 3.0 Python 3.8 Pipenv Visual Studio Codium Terminal 3.Aplicaci\u00f3n \"Hello World\" Configuraci\u00f3n de un proyecto Django Git/GitLab (BitBucker?) 4.Aplicaci\u00f3n \"Pages\" Don't Repeat Yourserlf (DRY) Platform as a service (PaaS): Heroku? 5.Aplicaci\u00f3n \"Message Board\" Bases de datos: ORM Test GitHub Heroku 6-8.Aplicaci\u00f3n \"Blog\" CRUD (Create-Read-Update-Delete) log in, log out, sign up 9.Aplicaci\u00f3n \"Newspaper\" Concepto de \"Modelos de usuario personalizados\" 10.Autenticaci\u00f3n de usuarios 11.Bootstrap 12-13.Reseteo y cambio de contrase\u00f1as v\u00eda email 14-15.Art\u00edculos y comentarios para \"Newspaper\" 16.Conclusi\u00f3n","title":"1.4.3 Estructura"},{"location":"02_configuracion_inicial/","text":"2 Configuraci\u00f3n inicial Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto 2.1 La l\u00ednea de comandos Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line 2.2 Instalar Python 3 Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes Python Path Python path es la lista de directorios del sistema en donde Python buscar\u00e1 cuando se use la sentencia import de Python. Por ejemplo, supongamos que el Python path tiene el valor python ['', '/usr/lib/python2.4/site-packages', '/home/username/djcode/'] Si se ejecuta el c\u00f3digo Python from foo import bar , Python en primer lugar se va a buscar el m\u00f3dulo foo.py en el directorio actual. (La primera entrada en el Python path, una cadena de caracteres vac\u00eda, significa \"el directorio actual.\"). Si ese archivo no existe, Python va a buscar el m\u00f3dulo en /usr/lib/python2.4/site-packages/foo.py . Si ese archivo no existe, entonces se probar\u00e1 en /home/username/djcode/foo.py . Finalmente, si ese archivo no existe, Python lanzar\u00e1 un ImportError . Si se quiere ver el valor del Python path, abrir un int\u00e9rprete interactivo de Python y escribir import sys , seguido de print(sys.path) . Generalmente no hay que preocuparse de asigarle valores al \"Python path\" \u2014 Python y Django se encargan autom\u00e1ticamente de hacer esas cosas entre bastidores. (Si se quiere curiosear, establecer el Python path es una de las cosas que hace el archivo manage.py ). 2.3 Entornos Virtuales Ver: Entornos Virtuales 2.4 Instalaci\u00f3n de Django $ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual 2.5.1. Cambiando la IP de escucha y el puerto De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n . Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root). 2.5. Instalar Git $ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\" 2.6. Editores de texto Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm 2.7. Conclusi\u00f3n","title":"2. Configuraci\u00f3n Inicial"},{"location":"02_configuracion_inicial/#2-configuracion-inicial","text":"Objetivos Configurar el entorno para programar en proyectos Django Uso de la l\u00ednea de comandos para instalar: Django 3.0 Python 3.8 Git Editor de texto","title":"2 Configuraci\u00f3n inicial"},{"location":"02_configuracion_inicial/#21-la-linea-de-comandos","text":"Konsole, Tmux, zsh cd, cd .., ls, pwd, mkdir, touch Pr\u00e1ctica: Recorrer los directorios del sistema, hacer una lista de ellos Mostrar el directorio de trabajo Crear un nuevo directorio y crear un fichero index.html en \u00e9l Listar el fichero: formato largo, ficheros ocultos D\u00f3nde aprender OpenWebinars Command Line Crash Course CodeAcademy's Course on the Command Line","title":"2.1 La l\u00ednea de comandos"},{"location":"02_configuracion_inicial/#22-instalar-python-3","text":"Entornos Virtuales Instrucciones de instalaci\u00f3n desde los ficheros fuentes Python Path Python path es la lista de directorios del sistema en donde Python buscar\u00e1 cuando se use la sentencia import de Python. Por ejemplo, supongamos que el Python path tiene el valor python ['', '/usr/lib/python2.4/site-packages', '/home/username/djcode/'] Si se ejecuta el c\u00f3digo Python from foo import bar , Python en primer lugar se va a buscar el m\u00f3dulo foo.py en el directorio actual. (La primera entrada en el Python path, una cadena de caracteres vac\u00eda, significa \"el directorio actual.\"). Si ese archivo no existe, Python va a buscar el m\u00f3dulo en /usr/lib/python2.4/site-packages/foo.py . Si ese archivo no existe, entonces se probar\u00e1 en /home/username/djcode/foo.py . Finalmente, si ese archivo no existe, Python lanzar\u00e1 un ImportError . Si se quiere ver el valor del Python path, abrir un int\u00e9rprete interactivo de Python y escribir import sys , seguido de print(sys.path) . Generalmente no hay que preocuparse de asigarle valores al \"Python path\" \u2014 Python y Django se encargan autom\u00e1ticamente de hacer esas cosas entre bastidores. (Si se quiere curiosear, establecer el Python path es una de las cosas que hace el archivo manage.py ).","title":"2.2 Instalar Python 3"},{"location":"02_configuracion_inicial/#23-entornos-virtuales","text":"Ver: Entornos Virtuales","title":"2.3 Entornos Virtuales"},{"location":"02_configuracion_inicial/#24-instalacion-de-django","text":"$ cd ~/Escritorio $ mkdir django $ cd django $ pipenv install django $ pipenv shell Crear nuevo proyecto test . No olvidar el \".\" al final. $ django-admin startproject test_project . Si no se usa el \".\" aparecer\u00e1 la siguiente estructura \u2514\u2500\u2500test_project \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 test_project \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Arrancando el servidor $ python manage.py runserver Escribir en el navegador la url http://127.0.0.1:8000/ o http://localhost:8000 <Ctrl>-c para parar exit para salir del entorno virtual","title":"2.4 Instalaci\u00f3n de Django"},{"location":"02_configuracion_inicial/#251-cambiando-la-ip-de-escucha-y-el-puerto","text":"De manera predeterminada, el comando runserver inicia el servidor de desarrollo en la IP interna en el puerto 8000. Si se desea cambiar el puerto del servidor, hay que pasarlo como un argumento de l\u00ednea de comandos. Por ejemplo, este comando inicia el servidor en el puerto 8080: $ python manage.py runserver 8080 Si se desea cambiar la IP del servidor, ejecutar el comando con la IP seguida del puerto. Por ejemplo, para escuchar todas las IP p\u00fablicas disponibles (lo cual es \u00fatil si se est\u00e1 ejecutando Vagrant o se desea mostrar la web en otras computadoras en la red), usar: $ python manage.py runserver 0:8000 0 es un atajo para 0.0.0.0 . Los documentos completos para el servidor de desarrollo se pueden encontrar en la referencia del servidor de ejecuci\u00f3n . Si se ejecuta este script como un usuario sin privilegios (recomendado), es posible que no se tenga acceso para iniciar en un puerto con un n\u00famero bajo. Los n\u00fameros de puerto bajos est\u00e1n reservados para el superusuario (root).","title":"2.5.1. Cambiando la IP de escucha y el puerto"},{"location":"02_configuracion_inicial/#25-instalar-git","text":"$ sudo apt install git $ git config --global user.name \"<Nombre>\" $ git config --globar user.email \"<Correo electr\u00f3nico>\"","title":"2.5. Instalar Git"},{"location":"02_configuracion_inicial/#26-editores-de-texto","text":"Emacs \u00f3 Vim Code-OSS \u00f3 Visual Studio Codium PyCharm","title":"2.6. Editores de texto"},{"location":"02_configuracion_inicial/#27-conclusion","text":"","title":"2.7. Conclusi\u00f3n"},{"location":"03_hello_world_app/","text":"3 Hello World app Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\" 3.1 Configuraci\u00f3n inicial $ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 helloworld_project \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py 1 directory, 8 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. Este archivo solo se usa en la fase de despliegue. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). Este archivo solo se usa en la fase de despliegue. manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000 3.2 Crear una app Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree ... \u2514\u2500\u2500 pages \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 admin.py \u251c\u2500\u2500 apps.py \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 tests.py \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta (request/response) de la app Aunque la app existe, Django no sabe nada de ella hasta que se la a\u00f1adimos expl\u00edcitamente. Para incluir la app en el proyecto se necesita a\u00f1adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . DETALLE Tener en cuenta que dentro de cada aplicaci\u00f3n, Django crea un archivo, apps.py , que contiene una clase de configuraci\u00f3n con el nombre de la aplicaci\u00f3n. En este caso, la clase se llama PagesConfig . Para registrar nuestra aplicaci\u00f3n con Django, se necesita apuntar a la clase PagesConfig . PagesConfig por defecto contiene una \u00fanica opci\u00f3n de configuraci\u00f3n: el nombre de la aplicaci\u00f3n, en nuestro caso pages . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ 'pages.apps.PagesConfig', # new 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. DETALLE: settings.py El fichero settings.py se usa para configurar muchos otros ajustes, pero en este punto probablemente s\u00f3lo se querr\u00e1 cambiar la TIME_ZONE \u2014 \u00e9sta deber\u00eda ser igual a una cadena de la Lista de base de datos tz de time zones (la columna TZ column de la tabla contiene los valores que se necesitan). Cambiar la TIME_ZONE al valor de entre estas cadenas que sea apropiado para el uso horario que se requiera, por ejemplo: TIME_ZONE = 'Europe/Madrid' Hay otros dos ajustes que no se cambiar\u00e1n ahora, pero de los que se deber\u00eda ser consciente: SECRET_KEY . \u00c9sta es una clave secreta que se usa como parte de la estrategia de seguridad del sitio web de Django. Si no se va a proteger este c\u00f3digo durante el desarrollo, se necesitar\u00e1 usar un c\u00f3digo diferente (quiz\u00e1s leyendo de una variable de entorno o un fichero) cuando se ponga en producci\u00f3n. DEBUG . Esto habilita que los registros (logs) de depuraci\u00f3n se muestren en caso de error, en vez de las respuestas con los c\u00f3digos de estado HTTP. \u00c9ste deber\u00eda ajustarse a false en producci\u00f3n, ya que la informaci\u00f3n de depuraci\u00f3n es \u00fatil a los atacantes. En la configuraci\u00f3n de INSTALLED_APPS , en la parte superior del archivo, se encuentran los nombres de todas las aplicaciones que se activan en esta instancia de Django. Las aplicaciones pueden utilizarse en varios proyectos, y se pueden empaquetar y distribuir para que otros las utilicen en sus propios proyectos. De forma predeterminada, INSTALLED_APPS contiene las siguientes aplicaciones, todas ellas incluidas en Django: django.contrib.admin : El sitio de administraci\u00f3n. django.contrib.auth : Un sistema de autenticaci\u00f3n. django.contrib.contenttypes : Un marco de trabajo para los tipos de contenido. django.contrib.sessions : Un marco de trabajo de sesiones. django.contrib.messages : Un marco de mensajes. django.contrib.staticfiles : Un marco de trabajo para la gesti\u00f3n de archivos est\u00e1ticos. Estas aplicaciones se incluyen de forma predeterminada como una conveniencia para el caso com\u00fan. Sin embargo, algunas de estas aplicaciones utilizan al menos una tabla de la base de datos, por lo que se necesitan crear las tablas de la base de datos antes de poder utilizarlas. Para ello, hemos de hacer una migraci\u00f3n con el siguiente comando: python manage.py migrate El comando de migraci\u00f3n mira la configuraci\u00f3n de INSTALLED_APPS y crea las tablas de base de datos necesarias de acuerdo con la configuraci\u00f3n de la base de datos del archivo settings.py y las migraciones de bases de datos enviadas con cada aplicaci\u00f3n. Se cubrir\u00e1 m\u00e1s adelante. 3.3 Vistas (Views) y configurariones de URL's (URLConfs) En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template DETALLE: Una URLconf es como una tabla de contenido para un sitio web hecho con Django. B\u00e1sicamente, es un mapeo entre los patrones URL y las funciones de vista que deben ser llamadas por esos patrones URL. Es como decirle a Django, \"Para esta URL, llama a este c\u00f3digo, y para esta URL, llama a este otro c\u00f3digo\". Recordar que estas funciones de vista deben estar en el Python path. Se empieza actualizando el fichero views.py FICHERO: pages/views.py # from django.shortcuts import render from django.http import HttpResponse # new # Create your views here. def homePageView(request): # new return HttpResponse(\"Hello World!\") # new B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. DETALLE Primero, se importa la clase HttpResponse , que vive en el m\u00f3dulo django.http . Se necesita importar esta clase porque se usa m\u00e1s tarde en el c\u00f3digo. A continuaci\u00f3n, se define una funci\u00f3n llamada homePageView - la funci\u00f3n de la vista. Cada funci\u00f3n view toma al menos un par\u00e1metro, llamado request por convenci\u00f3n. Se trata de un objeto que contiene informaci\u00f3n sobre la solicitud web actual que ha activado esta vista, y es una instancia de la clase django.http.HttpRequest . En este ejemplo, no se hace nada con la solicitud , pero debe ser el primer par\u00e1metro de la vista de todos modos. T\u00e9ngase en cuenta que el nombre de la funci\u00f3n de la vista no importa; no tiene que estar nombrada de una forma determinada para que Django la reconozca. Se le llama homePageView aqu\u00ed, porque ese nombre indica claramente lo esencial de la vista, pero tambi\u00e9n podr\u00eda llamarse hola_mundo_maravilloso_y_hermoso , o algo igualmente repugnante. En breve, se iluminar\u00e1 el camino de c\u00f3mo Django encuentra esta funci\u00f3n. La funci\u00f3n es una l\u00ednea que devuelve un objeto HttpResponse instanciado con el texto Hello, world! . La principal lecci\u00f3n aqu\u00ed es \u00e9sta: una vista es s\u00f3lo una funci\u00f3n Python que toma una HttpRequest como primer par\u00e1metro y devuelve una instancia de HttpResponse . Para que una funci\u00f3n Python sea una vista Django, debe hacer estas dos cosas. (Hay excepciones, pero se ver\u00e1n m\u00e1s tarde). Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py # pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Una expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . DETALLE Notemos que se pasa la funci\u00f3n de vista homePageView como un objeto sin llamar a la funci\u00f3n. Esto es una caracter\u00edstica de Python (y otros lenguajes din\u00e1micos): las funciones son objetos de primera clase, lo cual significa que se puede pasar como cualquier otra variable. \u00a1Qu\u00e9 bueno!, \u00bfno? FICHERO: helloworld_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. DETALLE: URLconfs y el acoplamiento d\u00e9bil Ahora es el momento de resaltar una parte clave de la filosof\u00eda detr\u00e1s de las URLconf y detr\u00e1s de Django en general: el principio de acoplamiento d\u00e9bil (loose coupling). Para explicarlo de forma simple, el acoplamiento d\u00e9bil es una manera de dise\u00f1ar software aprovechando el valor de la importancia de que se puedan cambiar las piezas. Si dos piezas de c\u00f3digo est\u00e1n d\u00e9bilmente acopladas (loosely coupled) los cambios realizados sobre una de dichas piezas va a tener poco o ning\u00fan efecto sobre la otra. Las URLconfs de Django son un claro ejemplo de este principio en la pr\u00e1ctica. En una aplicaci\u00f3n Web de Django, la definici\u00f3n de la URL y la funci\u00f3n de vista que se llamar\u00e1 est\u00e1n d\u00e9bilmente acopladas; de esta manera, la decisi\u00f3n de cu\u00e1l debe ser la URL para una funci\u00f3n, y la implementaci\u00f3n de la funci\u00f3n misma, residen en dos lugares separados. Esto permite el desarrollo de una pieza sin afectar a la otra. En contraste, otras plataformas de desarrollo Web acoplan la URL con el programa. En las t\u00edpicas aplicaciones PHP, por ejemplo, la URL de la aplicaci\u00f3n es designada por d\u00f3nde se coloca el c\u00f3digo en el sistema de archivos. En versiones anteriores del framework Web Python CherryPy la URL de la aplicaci\u00f3n correspond\u00eda al nombre del m\u00e9todo donde resid\u00eda tu c\u00f3digo. Esto puede parecer un atajo convenient a corto plazo, pero puede tornarse inmanejable a largo plazo. Por ejemplo, consideremos una funci\u00f3n de vista que nos muestra la fecha y la hora actual. Si se quiere cambiar la URL de la aplicaci\u00f3n \u2014 digamos, mover desde algo como /time a /currenttime/ \u2014 se puede hacer un r\u00e1pido cambio en la URLconf, sin tener que preocuparse acerca de la implementaci\u00f3n subyacente de la funci\u00f3n. Similarmente, si se quiere cambiar la funci\u00f3n de la vista \u2014 alterando la l\u00f3gica de alguna manera \u2014 se puede hacer sin afectar la URL a la que est\u00e1 asociada la funci\u00f3n de vista. Adem\u00e1s, si se quiere exponer la funcionalidad de fecha actual en varias URL se podr\u00eda hacer editando el URLconf con cuidado, sin tener que tocar una sola l\u00ednea de c\u00f3digo de la vista. Eso es el acoplamiento d\u00e9bil en acci\u00f3n: una filosof\u00eda de desarrollo . 3.4 Resumen 1.- CREAR APP (helloworld) $ python manage.py startapp pages 2.- INFORMAR DE LA NUEVA APP FICHERO: settings.py ... INSTALLED_APPS = [ ... 'pages.apps.PagesConfig', 3.- CREAR LA VISTA FICHERO: pages/views.py # from django.shortcuts import render from django.http import HttpResponse # Create your views here. def homePageView(request): return HttpResponse(\"Hello World!\") 4.- CREAR EL FICHERO DE RUTAS DE LA APP FICHERO: pages/urls.py # pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ] 5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL FICHERO: helloworld_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), ] 3.5. C\u00f3mo procesa una petici\u00f3n Django Se deben se\u00f1alar varias cosas en lo que hemos visto. Este es el detalle de lo que sucede cuando se ejecuta el servidor de desarrollo de Django y se hace una petici\u00f3n a una p\u00e1gina Web. El comando python manage.py runserver importa un archivo llamado settings.py desde el mismo directorio. Este archivo contiene todo tipo de configuraciones opcionales para esa instancia de Django en particular, pero una de las configuraciones m\u00e1s importantes es ROOT_URLCONF . La variable ROOT_URLCONF le dice a Django qu\u00e9 m\u00f3dulo de Python deber\u00eda usar para la URLconf de este sitio Web. settings.py que es generado autom\u00e1ticamente tiene un ROOT_URLCONF que apunta al urls.py generado autom\u00e1ticamente. Cuando llega una petici\u00f3n Django carga la URLconf apuntada por la variable ROOT_URLCONF . Luego comprueba cada uno de los patrones de URL en la URLconf en orden, comparando la URL solicitada con un patr\u00f3n a la vez, hasta que encuentra uno que coincida. Cuando lo encuentra, llama a la funci\u00f3n de vista asociada con ese patr\u00f3n, pasando un objeto HttpRequest como primer par\u00e1metro de la funci\u00f3n. La funci\u00f3n de vista es responsable de retornar un objeto HttpResponse . Una vez se conoce lo b\u00e1sico sobre c\u00f3mo hacer p\u00e1ginas Web con Django. Es muy sencillo, realmente s\u00f3lo hay que escribir funciones de vista y relacionarlas con URLs mediante URLconfs. Se podr\u00eda pensar que es lento enlazar URL's con funciones. 3.3.1. C\u00f3mo procesa una petici\u00f3n Django: Detalles completos Adem\u00e1s del mapeo directo de URLs con funciones vista que acabamos de describir, Django nos provee un poco m\u00e1s de flexibilidad en el procesamiento de peticiones. El flujo t\u00edpico \u2014 resoluci\u00f3n de URLconf a una funci\u00f3n de vista que retorna un HttpResponse \u2014 puede ser cortocircuitado o aumentado mediante middleware. Los secretos del middleware ser\u00e1n tratados en profundidad m\u00e1s adelante, pero un esquema ayudar\u00e1 conceptualmente a poner todas las piezas juntas. Cuando llega una petici\u00f3n HTTP desde el navegador, un manejador espec\u00edfico a cada servidor construye la HttpRequest , para pasarla a los componentes y maneja el flujo del procesamiento de la respuesta. El manejador luego llama a cualquier middleware de Petici\u00f3n o Vista disponible. Estos tipos de middleware son \u00fatiles para augmenting los objetos HttpRequest as\u00ed como tambi\u00e9n para proveer manejo especial a determinados tipos de peticiones. En el caso de que alguno de los mismos retornara un HttpResponse la vista no es invocada. Hasta a los mejores programadores se le escapan errores (bugs), pero el middleware de excepci\u00f3n ayuda a aplastarlos. Si una funci\u00f3n de vista lanza una excepci\u00f3n, el control pasa al middleware de Excepci\u00f3n. Si este middleware no retorna un HttpResponse , la excepci\u00f3n se vuelve a lanzar. Sin embargo, no todo est\u00e1 perdido. Django incluye vistas por omisi\u00f3n para respuestas amigables a errores 404 y 500. Finalmente, el middleware de respuesta es bueno para el procesamiento posterior a un HttpResponse justo antes de que se env\u00ede al navegador o haciendo una limpieza de recursos espec\u00edficos a una petici\u00f3n.","title":"3. Hello World app"},{"location":"03_hello_world_app/#3-hello-world-app","text":"Objetivo: Crear la t\u00edpica aplicaci\u00f3n \"Hello World\"","title":"3 Hello World app"},{"location":"03_hello_world_app/#31-configuracion-inicial","text":"$ cd ~/Escritorio $ mkdir helloworld $ cd helloworld $ pipenv install django $ pipenv shell (helloworld) $ django-admin startproject helloworld_project . (helloworld) $ sudo apt install tree (helloworld) $ tree . \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 Pipfile.lock \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 helloworld_project \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py 1 directory, 8 files settings.py : Controla la configuraci\u00f3n del proyecto urls.py : Indica a Django qu\u00e9 p\u00e1ginas construir en respuesta a una petici\u00f3n de URL wsgi.py : ( Web Server Gateway Interface ) Punto de entrada para servidores web compatibles con WSGI para servir el proyecto. Este archivo solo se usa en la fase de despliegue. asgi.py : ( Asynchronous Server Gateway Interface ) Punto de entrada para servidores web compatibles con ASGI para servir el proyecto (nuevo en la versi\u00f3n 3.0). Este archivo solo se usa en la fase de despliegue. manage.py : Ejecuta varios comandos Django, como correr el servidor web local o crear una nueva app (helloworld) $ python manage.py runserver Visitar: http://localhost:8000","title":"3.1 Configuraci\u00f3n inicial"},{"location":"03_hello_world_app/#32-crear-una-app","text":"Un proyecto Django consta de una o m\u00e1s apps Cada app resuelve una funcionalidad concreta Crear la app pages (helloworld) $ python manage.py startapp pages (helloworld) $ tree ... \u2514\u2500\u2500 pages \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 admin.py \u251c\u2500\u2500 apps.py \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 tests.py \u2514\u2500\u2500 views.py Nuevos FICHEROS admin.py : Es un fichero de configuraci\u00f3n para la app incorporada al Admin de Django apps.py : Es una fichero de configuraci\u00f3n para la propia app migrations/ : Manteniene el seguimiento de cualquier cambio en el fichero models.py para que la base de datos y el fichero models.py est\u00e9n sincronizados models.py : Es donde se define el modelo de la base de datos que Django traduce en tablas dentro de la base de datos autom\u00e1ticamente. tests.py : Es para los tests espec\u00edficos de la app views.py : Es donde se gestiona la l\u00f3gica petici\u00f3n/respuesta (request/response) de la app Aunque la app existe, Django no sabe nada de ella hasta que se la a\u00f1adimos expl\u00edcitamente. Para incluir la app en el proyecto se necesita a\u00f1adir una referencia a su clase de configuraci\u00f3n en la lista INSTALLED_APPS . La clase PagesConfig est\u00e1 en el archivo pages/apps.py , por eso su path con puntos es 'pages.apps.PagesConfig' . DETALLE Tener en cuenta que dentro de cada aplicaci\u00f3n, Django crea un archivo, apps.py , que contiene una clase de configuraci\u00f3n con el nombre de la aplicaci\u00f3n. En este caso, la clase se llama PagesConfig . Para registrar nuestra aplicaci\u00f3n con Django, se necesita apuntar a la clase PagesConfig . PagesConfig por defecto contiene una \u00fanica opci\u00f3n de configuraci\u00f3n: el nombre de la aplicaci\u00f3n, en nuestro caso pages . FICHERO: settings.py ... # helloworld_project/settings.py INSTALLED_APPS = [ 'pages.apps.PagesConfig', # new 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... Ojo, el orden importa; si varias aplicaciones intentan acceder al mismo recurso, la app que aparece primero tiene preferencia. DETALLE: settings.py El fichero settings.py se usa para configurar muchos otros ajustes, pero en este punto probablemente s\u00f3lo se querr\u00e1 cambiar la TIME_ZONE \u2014 \u00e9sta deber\u00eda ser igual a una cadena de la Lista de base de datos tz de time zones (la columna TZ column de la tabla contiene los valores que se necesitan). Cambiar la TIME_ZONE al valor de entre estas cadenas que sea apropiado para el uso horario que se requiera, por ejemplo: TIME_ZONE = 'Europe/Madrid' Hay otros dos ajustes que no se cambiar\u00e1n ahora, pero de los que se deber\u00eda ser consciente: SECRET_KEY . \u00c9sta es una clave secreta que se usa como parte de la estrategia de seguridad del sitio web de Django. Si no se va a proteger este c\u00f3digo durante el desarrollo, se necesitar\u00e1 usar un c\u00f3digo diferente (quiz\u00e1s leyendo de una variable de entorno o un fichero) cuando se ponga en producci\u00f3n. DEBUG . Esto habilita que los registros (logs) de depuraci\u00f3n se muestren en caso de error, en vez de las respuestas con los c\u00f3digos de estado HTTP. \u00c9ste deber\u00eda ajustarse a false en producci\u00f3n, ya que la informaci\u00f3n de depuraci\u00f3n es \u00fatil a los atacantes. En la configuraci\u00f3n de INSTALLED_APPS , en la parte superior del archivo, se encuentran los nombres de todas las aplicaciones que se activan en esta instancia de Django. Las aplicaciones pueden utilizarse en varios proyectos, y se pueden empaquetar y distribuir para que otros las utilicen en sus propios proyectos. De forma predeterminada, INSTALLED_APPS contiene las siguientes aplicaciones, todas ellas incluidas en Django: django.contrib.admin : El sitio de administraci\u00f3n. django.contrib.auth : Un sistema de autenticaci\u00f3n. django.contrib.contenttypes : Un marco de trabajo para los tipos de contenido. django.contrib.sessions : Un marco de trabajo de sesiones. django.contrib.messages : Un marco de mensajes. django.contrib.staticfiles : Un marco de trabajo para la gesti\u00f3n de archivos est\u00e1ticos. Estas aplicaciones se incluyen de forma predeterminada como una conveniencia para el caso com\u00fan. Sin embargo, algunas de estas aplicaciones utilizan al menos una tabla de la base de datos, por lo que se necesitan crear las tablas de la base de datos antes de poder utilizarlas. Para ello, hemos de hacer una migraci\u00f3n con el siguiente comando: python manage.py migrate El comando de migraci\u00f3n mira la configuraci\u00f3n de INSTALLED_APPS y crea las tablas de base de datos necesarias de acuerdo con la configuraci\u00f3n de la base de datos del archivo settings.py y las migraciones de bases de datos enviadas con cada aplicaci\u00f3n. Se cubrir\u00e1 m\u00e1s adelante.","title":"3.2 Crear una app"},{"location":"03_hello_world_app/#33-vistas-views-y-configurariones-de-urls-urlconfs","text":"En Django , las vistas determinan qu\u00e9 contenido se muestra mientras que URLConfs indica d\u00f3nde va ese contendio. URLConf utiliza una expresi\u00f3n regular para mapear las peticiones a la funci\u00f3n apropiada de la vista que devuelve los datos correctos. La vista saca el texto Hello, World mientras que la url se asegurar\u00e1 de que cuando el usuario visita la p\u00e1gina sea redireccionado a la vista correcta. Cuando se escribe una URL, lo primero que ocurre dentro del proyecto Django es que se encuentra un patr\u00f3n que coincide con la p\u00e1gina de inicio ( homepage ). El urlpattern especifica una vista , que determinar\u00e1 el contenido de la p\u00e1gina (normalmente desde una base de datos), y una plantilla ( template ) para darle estilo. El resultado final se devuelve al usuario como una respuesta HTTP. URL -> View -> Model (t\u00edpicamente) -> Template DETALLE: Una URLconf es como una tabla de contenido para un sitio web hecho con Django. B\u00e1sicamente, es un mapeo entre los patrones URL y las funciones de vista que deben ser llamadas por esos patrones URL. Es como decirle a Django, \"Para esta URL, llama a este c\u00f3digo, y para esta URL, llama a este otro c\u00f3digo\". Recordar que estas funciones de vista deben estar en el Python path. Se empieza actualizando el fichero views.py FICHERO: pages/views.py # from django.shortcuts import render from django.http import HttpResponse # new # Create your views here. def homePageView(request): # new return HttpResponse(\"Hello World!\") # new B\u00e1sicamente se indica que siempre que se llame a la funci\u00f3n de la vista homePageView se devolver\u00e1 el texto \u201cHello World!\u201d . M\u00e1s espec\u00edficamente se ha importado el m\u00e9todo HttpResponse para poder devolver un objeto respuesta al usuario. DETALLE Primero, se importa la clase HttpResponse , que vive en el m\u00f3dulo django.http . Se necesita importar esta clase porque se usa m\u00e1s tarde en el c\u00f3digo. A continuaci\u00f3n, se define una funci\u00f3n llamada homePageView - la funci\u00f3n de la vista. Cada funci\u00f3n view toma al menos un par\u00e1metro, llamado request por convenci\u00f3n. Se trata de un objeto que contiene informaci\u00f3n sobre la solicitud web actual que ha activado esta vista, y es una instancia de la clase django.http.HttpRequest . En este ejemplo, no se hace nada con la solicitud , pero debe ser el primer par\u00e1metro de la vista de todos modos. T\u00e9ngase en cuenta que el nombre de la funci\u00f3n de la vista no importa; no tiene que estar nombrada de una forma determinada para que Django la reconozca. Se le llama homePageView aqu\u00ed, porque ese nombre indica claramente lo esencial de la vista, pero tambi\u00e9n podr\u00eda llamarse hola_mundo_maravilloso_y_hermoso , o algo igualmente repugnante. En breve, se iluminar\u00e1 el camino de c\u00f3mo Django encuentra esta funci\u00f3n. La funci\u00f3n es una l\u00ednea que devuelve un objeto HttpResponse instanciado con el texto Hello, world! . La principal lecci\u00f3n aqu\u00ed es \u00e9sta: una vista es s\u00f3lo una funci\u00f3n Python que toma una HttpRequest como primer par\u00e1metro y devuelve una instancia de HttpResponse . Para que una funci\u00f3n Python sea una vista Django, debe hacer estas dos cosas. (Hay excepciones, pero se ver\u00e1n m\u00e1s tarde). Ahora a configurar urls . Crear un nuevo archivo urls.py dentro del directorio pages . (helloworld) $ touch pages/urls.py A\u00f1adir el c\u00f3digo FICHERO: pages/urls.py # pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ] Importamos path .views utiliza \".\" para indicar el directorio actual El patr\u00f3n urlpattern tiene tres partes: Una expresi\u00f3n regular Python para la cadena vac\u00eda '' Especifica la vista que se llamar\u00e1: homePageView A\u00f1ade un nombre de URL opcional home Es decir, si el usuario requiere la pagina de inicio, representada por la cadena vac\u00eda, entonces utilizar la vista llamada homePageView El \u00faltimo paso es configurar el fichero urls.py a nivel de proyecto donde se recogen todas las apps dentro de un proyecto Django, dado que cada una precisa de su propia ruta . DETALLE Notemos que se pasa la funci\u00f3n de vista homePageView como un objeto sin llamar a la funci\u00f3n. Esto es una caracter\u00edstica de Python (y otros lenguajes din\u00e1micos): las funciones son objetos de primera clase, lo cual significa que se puede pasar como cualquier otra variable. \u00a1Qu\u00e9 bueno!, \u00bfno? FICHERO: helloworld_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] Puede confundir un poco que no se necesite importar la app pages pero ya se hace referencia en urlpatterns como pages.urls . La raz\u00f3n de hacerlo as\u00ed es que el m\u00e9todo django.urls.include() ya recibe un m\u00f3dulo, o app , como primer argumento. As\u00ed que, sin usar include , habr\u00eda que importar la app pages pero, como s\u00ed que se usa, no se necesita a nivel de proyecto. DETALLE: URLconfs y el acoplamiento d\u00e9bil Ahora es el momento de resaltar una parte clave de la filosof\u00eda detr\u00e1s de las URLconf y detr\u00e1s de Django en general: el principio de acoplamiento d\u00e9bil (loose coupling). Para explicarlo de forma simple, el acoplamiento d\u00e9bil es una manera de dise\u00f1ar software aprovechando el valor de la importancia de que se puedan cambiar las piezas. Si dos piezas de c\u00f3digo est\u00e1n d\u00e9bilmente acopladas (loosely coupled) los cambios realizados sobre una de dichas piezas va a tener poco o ning\u00fan efecto sobre la otra. Las URLconfs de Django son un claro ejemplo de este principio en la pr\u00e1ctica. En una aplicaci\u00f3n Web de Django, la definici\u00f3n de la URL y la funci\u00f3n de vista que se llamar\u00e1 est\u00e1n d\u00e9bilmente acopladas; de esta manera, la decisi\u00f3n de cu\u00e1l debe ser la URL para una funci\u00f3n, y la implementaci\u00f3n de la funci\u00f3n misma, residen en dos lugares separados. Esto permite el desarrollo de una pieza sin afectar a la otra. En contraste, otras plataformas de desarrollo Web acoplan la URL con el programa. En las t\u00edpicas aplicaciones PHP, por ejemplo, la URL de la aplicaci\u00f3n es designada por d\u00f3nde se coloca el c\u00f3digo en el sistema de archivos. En versiones anteriores del framework Web Python CherryPy la URL de la aplicaci\u00f3n correspond\u00eda al nombre del m\u00e9todo donde resid\u00eda tu c\u00f3digo. Esto puede parecer un atajo convenient a corto plazo, pero puede tornarse inmanejable a largo plazo. Por ejemplo, consideremos una funci\u00f3n de vista que nos muestra la fecha y la hora actual. Si se quiere cambiar la URL de la aplicaci\u00f3n \u2014 digamos, mover desde algo como /time a /currenttime/ \u2014 se puede hacer un r\u00e1pido cambio en la URLconf, sin tener que preocuparse acerca de la implementaci\u00f3n subyacente de la funci\u00f3n. Similarmente, si se quiere cambiar la funci\u00f3n de la vista \u2014 alterando la l\u00f3gica de alguna manera \u2014 se puede hacer sin afectar la URL a la que est\u00e1 asociada la funci\u00f3n de vista. Adem\u00e1s, si se quiere exponer la funcionalidad de fecha actual en varias URL se podr\u00eda hacer editando el URLconf con cuidado, sin tener que tocar una sola l\u00ednea de c\u00f3digo de la vista. Eso es el acoplamiento d\u00e9bil en acci\u00f3n: una filosof\u00eda de desarrollo .","title":"3.3 Vistas (Views) y configurariones de URL's (URLConfs)"},{"location":"03_hello_world_app/#34-resumen","text":"","title":"3.4 Resumen"},{"location":"03_hello_world_app/#1-crear-app","text":"(helloworld) $ python manage.py startapp pages","title":"1.- CREAR APP"},{"location":"03_hello_world_app/#2-informar-de-la-nueva-app","text":"FICHERO: settings.py ... INSTALLED_APPS = [ ... 'pages.apps.PagesConfig',","title":"2.- INFORMAR DE LA NUEVA APP"},{"location":"03_hello_world_app/#3-crear-la-vista","text":"FICHERO: pages/views.py # from django.shortcuts import render from django.http import HttpResponse # Create your views here. def homePageView(request): return HttpResponse(\"Hello World!\")","title":"3.- CREAR LA VISTA"},{"location":"03_hello_world_app/#4-crear-el-fichero-de-rutas-de-la-app","text":"FICHERO: pages/urls.py # pages/urls.py from django.urls import path from .views import homePageView urlpatterns = [ path('', homePageView, name='home') ]","title":"4.- CREAR EL FICHERO DE RUTAS DE LA APP"},{"location":"03_hello_world_app/#5-incluir-el-fichero-de-rutas-de-la-app-en-el-principal","text":"FICHERO: helloworld_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), ]","title":"5.- INCLUIR EL FICHERO DE RUTAS DE LA APP EN EL PRINCIPAL"},{"location":"03_hello_world_app/#35-como-procesa-una-peticion-django","text":"Se deben se\u00f1alar varias cosas en lo que hemos visto. Este es el detalle de lo que sucede cuando se ejecuta el servidor de desarrollo de Django y se hace una petici\u00f3n a una p\u00e1gina Web. El comando python manage.py runserver importa un archivo llamado settings.py desde el mismo directorio. Este archivo contiene todo tipo de configuraciones opcionales para esa instancia de Django en particular, pero una de las configuraciones m\u00e1s importantes es ROOT_URLCONF . La variable ROOT_URLCONF le dice a Django qu\u00e9 m\u00f3dulo de Python deber\u00eda usar para la URLconf de este sitio Web. settings.py que es generado autom\u00e1ticamente tiene un ROOT_URLCONF que apunta al urls.py generado autom\u00e1ticamente. Cuando llega una petici\u00f3n Django carga la URLconf apuntada por la variable ROOT_URLCONF . Luego comprueba cada uno de los patrones de URL en la URLconf en orden, comparando la URL solicitada con un patr\u00f3n a la vez, hasta que encuentra uno que coincida. Cuando lo encuentra, llama a la funci\u00f3n de vista asociada con ese patr\u00f3n, pasando un objeto HttpRequest como primer par\u00e1metro de la funci\u00f3n. La funci\u00f3n de vista es responsable de retornar un objeto HttpResponse . Una vez se conoce lo b\u00e1sico sobre c\u00f3mo hacer p\u00e1ginas Web con Django. Es muy sencillo, realmente s\u00f3lo hay que escribir funciones de vista y relacionarlas con URLs mediante URLconfs. Se podr\u00eda pensar que es lento enlazar URL's con funciones.","title":"3.5. C\u00f3mo procesa una petici\u00f3n Django"},{"location":"03_hello_world_app/#331-como-procesa-una-peticion-django-detalles-completos","text":"Adem\u00e1s del mapeo directo de URLs con funciones vista que acabamos de describir, Django nos provee un poco m\u00e1s de flexibilidad en el procesamiento de peticiones. El flujo t\u00edpico \u2014 resoluci\u00f3n de URLconf a una funci\u00f3n de vista que retorna un HttpResponse \u2014 puede ser cortocircuitado o aumentado mediante middleware. Los secretos del middleware ser\u00e1n tratados en profundidad m\u00e1s adelante, pero un esquema ayudar\u00e1 conceptualmente a poner todas las piezas juntas. Cuando llega una petici\u00f3n HTTP desde el navegador, un manejador espec\u00edfico a cada servidor construye la HttpRequest , para pasarla a los componentes y maneja el flujo del procesamiento de la respuesta. El manejador luego llama a cualquier middleware de Petici\u00f3n o Vista disponible. Estos tipos de middleware son \u00fatiles para augmenting los objetos HttpRequest as\u00ed como tambi\u00e9n para proveer manejo especial a determinados tipos de peticiones. En el caso de que alguno de los mismos retornara un HttpResponse la vista no es invocada. Hasta a los mejores programadores se le escapan errores (bugs), pero el middleware de excepci\u00f3n ayuda a aplastarlos. Si una funci\u00f3n de vista lanza una excepci\u00f3n, el control pasa al middleware de Excepci\u00f3n. Si este middleware no retorna un HttpResponse , la excepci\u00f3n se vuelve a lanzar. Sin embargo, no todo est\u00e1 perdido. Django incluye vistas por omisi\u00f3n para respuestas amigables a errores 404 y 500. Finalmente, el middleware de respuesta es bueno para el procesamiento posterior a un HttpResponse justo antes de que se env\u00ede al navegador o haciendo una limpieza de recursos espec\u00edficos a una petici\u00f3n.","title":"3.3.1. C\u00f3mo procesa una petici\u00f3n Django: Detalles completos"},{"location":"04_pages_app/","text":"4 Pages app 4.1 Objetivos Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates) 4.2 Configuraci\u00f3n inicial Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py ... INSTALLED_APPS = [ 'pages.apps.PagesConfig', # new ... Arrancar servidor (pages) $ python manage.py runserver 4.3 Plantillas (Templates) Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta Ruta (URL).- Controla la ruta inicial Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. Plantilla (Template).- Contiene el HTML. 4.3.1 D\u00f3nde colocar el directorio de plantillas Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista 4.4 Vistas basadas en clases (Class-Based Views) Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView . 4.5 URLs El \u00faltimo paso es actualizar las URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio. 4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\" Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py python from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' - Conectar la vista con la ruta FICHERO: `pages/urls.py` ```python from django.urls import path from .views import HomePageView, AboutPageView # new urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), # new path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about 4.7 Extendiendo Plantillas El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html html {% extends 'base.html' %} {% block content %} Homepage {% endblock content %} FICHERO: `templates/about.html` ```html {% extends 'base.html' %} {% block content %} <h1>About page</h1> {% endblock content %} 4.8 Tests Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py python # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) - Se usa `SimpleTestCase` ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos `TestCase`. - Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. - Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. - Para ejecutar los tests: ``` bash (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK 4.9 Git, GitHub, GitLab y Bitbucket (pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial' 4.10 Local vs Producci\u00f3n C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo. 4.11 Heroku Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com 4.11 Ficheros adicionales Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco * , que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master 4.12 Despliegue Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create (pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git A\u00f1adir un \u201chook\u201d para Heroku dentro de git Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349 Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1 Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/. 4.13 Errores 404 En las URLconf anteriores, se han definido varios patrones URL. \u00bfQu\u00e9 pasar\u00eda si se solicita una URL diferente a las recogidas en URLconf? Para averiguarlo, probar ejecutar el servidor de desarrollo Django e intentar acceder a una p\u00e1gina Web como http://127.0.0.1:8000/hello/ o http://127.0.0.1:8000/does-not-exist/ . Se deber\u00eda ver el mensaje \"Page not found\" . (Es linda, \u00bfno? A la gente de Django seguro le gustan los colores pasteles). Django muestra este mensaje porque se solicit\u00f3 una URL que no est\u00e1 definida en URLconf. La utilidad de esta p\u00e1gina va m\u00e1s all\u00e1 del mensaje b\u00e1sico de error 404; nos dice tambi\u00e9n, qu\u00e9 URLconf utiliz\u00f3 Django y todos los patrones de esa URLconf . Con esa informaci\u00f3n, tendr\u00edamos que ser capaces de establecer porqu\u00e9 la URL solicitada lanz\u00f3 un error 404. Naturalmente, esta es informaci\u00f3n importante s\u00f3lo destinada al programador . Si esto fuera un sitio en producci\u00f3n alojado en Internet, no quisi\u00e9ramos mostrar esta informaci\u00f3n al p\u00fablico. Por esta raz\u00f3n, la p\u00e1gina \"Page not found\" s\u00f3lo se muestra si el proyecto en Django est\u00e1 en modo de depuraci\u00f3n ( debug mode ). Se explicar\u00e1 c\u00f3mo desactivar este modo m\u00e1s adelante. Por ahora, todos los proyectos est\u00e1n en modo de depuraci\u00f3n cuando se crean, y si el proyecto no lo estuviese, se retornar\u00eda una respuesta diferente.l","title":"4. Pages app"},{"location":"04_pages_app/#4-pages-app","text":"","title":"4 Pages app"},{"location":"04_pages_app/#41-objetivos","text":"Desplegar la app Pages con una p\u00e1gina homepage y una about Vistas basadas en clases y plantillas (templates)","title":"4.1 Objetivos"},{"location":"04_pages_app/#42-configuracion-inicial","text":"Crear un nuevo directorio para el c\u00f3digo Instalar Django en un nuevo entorno virtual Crear un nuevo projecto Django Crear una nueva app pages Actualizar settings.py $ cd ~/Desktop $ mkdir pages $ cd pages $ pipenv install --python 3.8 $ pipenv install django $ pipenv shell (pages) $ django-admin startproject pages_project . (pages) $ python manage.py startapp pages # \u00f3 (pages) $ django-admin startproject pages FICHERO: pages_project/settings.py ... INSTALLED_APPS = [ 'pages.apps.PagesConfig', # new ... Arrancar servidor (pages) $ python manage.py runserver","title":"4.2 Configuraci\u00f3n inicial"},{"location":"04_pages_app/#43-plantillas-templates","text":"Cada framework precisa generar de alguna manera ficheros HTML. En Django, la aproximaci\u00f3n es usar plantillas (templates) de tal forma que los archivos HTML individuales puedan ser servidos por una vista a la p\u00e1gina web especificada por la ruta (URL). Plantilla \u2013> Vista \u2013> Ruta Ruta (URL).- Controla la ruta inicial Vista (View).- Contiene la l\u00f3gica (el qu\u00e9). En p\u00e1ginas relacionadas con BD es lo que hace la mayor parte del trabajo en cuanto a decidir qu\u00e9 datos estar\u00e1n disponibles para la plantilla. Plantilla (Template).- Contiene el HTML.","title":"4.3 Plantillas (Templates)"},{"location":"04_pages_app/#431-donde-colocar-el-directorio-de-plantillas","text":"Por defecto , Django mira dentro de cada app en busca de plantillas. En la app pages se crear\u00e1 una estructura de directorios como la siguiente con la plantilla home.html colgando de ella: \u2514\u2500\u2500 pages \u251c\u2500\u2500 templates \u251c\u2500\u2500 pages \u251c\u2500\u2500 home.html La otra aproximaci\u00f3n es hacer un directorio de plantillas com\u00fan a todas las apps. Hay que cambiar settings.py para que busque, tambi\u00e9n en este directorio, las plantillas que se necesiten. (pages) $ mkdir templates (pages) $ touch templates/home.html FICHERO: pages_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] La funci\u00f3n os.path.join une el path base de la aplicaci\u00f3n ( BASE_DIR ) con el nuevo directorio templates a\u00f1adiendo / seg\u00fan sea conveniente FICHERO: templates/home.html <h1>Homepage</h1> Ahora es el turno de la ruta y la vista","title":"4.3.1 D\u00f3nde colocar el directorio de plantillas"},{"location":"04_pages_app/#44-vistas-basadas-en-clases-class-based-views","text":"Las primeras versiones de Django solo inclu\u00edan vistas basadas en funciones , pero los desarrolladores pronto se encontraron repitiendo los mismos patrones una y otra vez. Sin embargo, no hab\u00eda una manera f\u00e1cil de ampliar o personalizar estas vistas. Django introdujo vistas gen\u00e9ricas basadas en clases que facilitan el uso y tambi\u00e9n ampl\u00edan las vistas que cubren casos de uso comunes. En el ejemplo se usar\u00e1 la clase TemplateView incorporada para mostrar la plantilla. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Dist\u00edngase c\u00f3mo se ha puesto en may\u00fasculas la vista, porque ahora es una clase, y c\u00f3mo \u00e9sta es descendiente de la clase base TemplateView .","title":"4.4 Vistas basadas en clases (Class-Based Views)"},{"location":"04_pages_app/#45-urls","text":"El \u00faltimo paso es actualizar las URLConfs . FICHERO: pages_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] FICHERO: pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Este patr\u00f3n es casi id\u00e9ntico al que se hizo anteriormente, con una sola diferencia; cuando se usan vistas basadas en clases, siempre se a\u00f1ade as_view() al final de su nombre. Iniciar el servidor para ver la nueva p\u00e1gina de inicio.","title":"4.5 URLs"},{"location":"04_pages_app/#46-anadir-una-pagina-acerca-de","text":"Crear un nuevo fichero de plantilla (pages) $ touch templates/about.html FICHERO: templates/about.html <h1>About page</h1> Crear una nueva vista para la p\u00e1gina FICHERO: pages/views.py python from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' - Conectar la vista con la ruta FICHERO: `pages/urls.py` ```python from django.urls import path from .views import HomePageView, AboutPageView # new urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), # new path('', HomePageView.as_view(), name='home'), ] Lanzar http://localhost:8000/about","title":"4.6 A\u00f1adir una p\u00e1gina \"Acerca de...\""},{"location":"04_pages_app/#47-extendiendo-plantillas","text":"El poder real de las plantillas es la posibilidad de ser extendidas. En las mayor\u00eda de webs encontramos contenido que se repite en cada p\u00e1gina: Hagamos una p\u00e1gina can\u00f3nica que ser\u00e1 heredada por las dem\u00e1s Django tiene un lenguaje m\u00ednimo de plantillas para a\u00f1adirles enlaces y l\u00f3gica b\u00e1sica Los tags de las plantillas tienen la forma {% cualquier_cosa %} Para a\u00f1adir enlaces a nuestro proyecto podemos usar la etiqueta de plantilla url incorporada que toma un patr\u00f3n de URL como argumento. El tag url utiliza los nombres opcionales de URL para crear enlaces autom\u00e1ticos por nosotros. Por ejemplo: {% url 'home' %} FICHERO: templates/base.html <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% block content %} {% endblock content %} Al final se a\u00f1ade un tag block llamado content . Los bloques pueden ser reescritos por las vistas descencientes. El lenguaje de plantillas de Django dispone de un m\u00e9todo extends que puede usarse para actualizar home.html y about.html y as\u00ed extender la plantilla base.html . FICHERO: templates/home.html html {% extends 'base.html' %} {% block content %}","title":"4.7 Extendiendo Plantillas"},{"location":"04_pages_app/#48-tests","text":"Importancia de los tests Jaco Kaplan-Moss : \"Code without tests is broken as designed.\" (El c\u00f3digo sin pruebas se rompe seg\u00fan se dise\u00f1\u00f3) Django nos brinda herramientas para escribir y correr tests. FICHERO: pages/tests.py python # pages/tests.py from django.test import SimpleTestCase class SimpleTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) - Se usa `SimpleTestCase` ya que no estamos usando una base de datos. Si estuvi\u00e9ramos usando una base de datos, en su lugar usar\u00edamos `TestCase`. - Luego se realiza una comprobaci\u00f3n de si el c\u00f3digo de estado para cada p\u00e1gina es 200, que es la respuesta est\u00e1ndar para una solicitud HTTP exitosa. - Esa es una manera elegante de garantizar que una p\u00e1gina web determinada realmente existe, pero no dice nada sobre su contenido. - Para ejecutar los tests: ``` bash (pages) $ python manage.py test System check identified no issues (0 silenced). .. --------------------------------------------------------------- Ran 2 tests in 0.014s OK","title":"4.8 Tests"},{"location":"04_pages_app/#49-git-github-gitlab-y-bitbucket","text":"(pages) $ git init (pages) $ git status (pages) $ git add -A (pages) $ git commit -m 'Commit inicial'","title":"4.9 Git, GitHub, GitLab y Bitbucket"},{"location":"04_pages_app/#410-local-vs-produccion","text":"C\u00f3digo en producci\u00f3n C\u00f3digo implementado en un servidor externo para que cualquiera pueda ver el sitio web. Hay muchos proveedores de servidores disponibles, pero usaremos Heroku porque es gratis para peque\u00f1os proyectos, ampliamente utilizado y tiene un proceso de implementaci\u00f3n relativamente sencillo.","title":"4.10 Local vs Producci\u00f3n"},{"location":"04_pages_app/#411-heroku","text":"Se puede obtener una cuenta gratuita de Heroku en su sitio web . Ahora se necesita instalar la interfaz de l\u00ednea de comando (CLI) de Heroku para poder implementar desde la l\u00ednea de comando. Queremos instalar Heroku globalmente para que est\u00e9 disponible en toda nuestra computadora. Si se instala Heroku dentro de un entorno virtual, solo estar\u00e1 disponible all\u00ed. Instalar Heroku seg\u00fan el sitio web de Heroku Arch Linux Este paquete est\u00e1 mantenido por la comunidad y no por Heroku. $ yay -S heroku-cli (pages) $ heroku login Enter your Heroku credentials: Email: will@wsvincent.com Password: ********************************* Logged in as will@wsvincent.com","title":"4.11 Heroku"},{"location":"04_pages_app/#411-ficheros-adicionales","text":"Se necesitan hacer cuatro cambios al proyecto para desplegar en Heroku: actualizar el archivo Pipfile.lock hacer un nuevo archivo Procfile instalar gunicorn como servidor web hacer un cambio de una l\u00ednea al archivo settings.py Especificar la versi\u00f3n de Python que se est\u00e1 usando en Pipfile # Pipfile [requires] python_version = \"3.8\" Luego ejecutar pipenv lock para generar el archivo Pipfile.lock apropiado. (pages) $ pipenv lock Heroku busca en Pipfile.lock informaci\u00f3n sobre el entorno virtual. A continuaci\u00f3n crear un Procfile que es espec\u00edfico para Heroku. FICHERO: Procfile web: gunicorn pages_project.wsgi --log-file - Esto indica que se use el fichero pages_project.wsgi existente pero con gunicorn , que es un servidor web adecuado para la producci\u00f3n , en lugar del propio servidor de Django; que por otro lado a\u00fan tenemos que instalar. (pages) $ pipenv install gunicorn El \u00faltimo paso es un cambio de una l\u00ednea a settings.py . FICHERO: pages_project/settings.py # pages_project/settings.py ALLOWED_HOSTS = ['*'] El par\u00e1metro ALLOWEDHOSTS representa los nombres de host/dominio que nuestro sitio Django puede servir. Esta es una medida de seguridad para evitar los ataques de cabecera de host HTTP, que son posibles incluso bajo muchas configuraciones de servidores web aparentemente seguras. Sin embargo, se ha utilizado el comod\u00edn asterisco * , que significa que todos los dominios son aceptables para mantener las cosas simples. En un sitio Django de nivel de producci\u00f3n, se enumeran expl\u00edcitamente los dominios que est\u00e1n permitidos. Usar git status para comprobar nuestros cambios, a\u00f1adir los nuevos archivos, y luego confirmarlos: (pages) $ git status (pages) $ git add -A (pages) $ git commit -m \"Actualiza para el despliegue en Heroku\" (pages) $ git push -u origin master","title":"4.11 Ficheros adicionales"},{"location":"04_pages_app/#412-despliegue","text":"Crear una nueva aplicaci\u00f3n en Heroku y enviar el c\u00f3digo A\u00f1adir un \"hook\" remoto de git para Heroku Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku","title":"4.12 Despliegue"},{"location":"04_pages_app/#crear-una-nueva-aplicacion-de-heroku-desde-la-linea-de-comandos-con-heroku-create","text":"(pages) $ heroku create Creating app... done, https://cryptic-oasis-40349.herokuapp.com/ | https://git.heroku.com/cryptic-oasis-40349.git","title":"Crear una nueva aplicaci\u00f3n de Heroku, desde la l\u00ednea de comandos con heroku create"},{"location":"04_pages_app/#anadir-un-hook-para-heroku-dentro-de-git","text":"Git almacenar\u00e1 tanto la configuraci\u00f3n para enviar el c\u00f3digo a GitHub como a Heroku. (pages) $ heroku git:remote -a cryptic-oasis-40349","title":"A\u00f1adir un \u201chook\u201d para Heroku dentro de git"},{"location":"04_pages_app/#configurar-la-aplicacion-para-ignorar-los-archivos-estaticos","text":"Hay que decirle a Heroku que ignore los archivos est\u00e1ticos como CSS y JavaScript que Django por defecto intenta optimizar para nosotros (se ver\u00e1 m\u00e1s adelante). Por ahora s\u00f3lo hay que ejecutar: (pages) $ heroku config:set DISABLE_COLLECTSTATIC=1 Ahora ya podemos enviar nuestro c\u00f3digo a Heroku. (pages) $ git push heroku master","title":"Configurar la aplicaci\u00f3n para ignorar los archivos est\u00e1ticos"},{"location":"04_pages_app/#iniciar-el-servidor-de-heroku-para-que-la-aplicacion-este-activa","text":"Se puede utilizar el nivel m\u00e1s bajo, web=1 , que tambi\u00e9n resulta ser gratuito. (pages) $ heroku ps:scale web=1","title":"Iniciar el servidor de Heroku para que la aplicaci\u00f3n est\u00e9 activa"},{"location":"04_pages_app/#visitar-la-aplicacion-en-la-url-proporcionada-por-heroku","text":"Vistiar algo como https://cryptic-oasis-40349.herokuapp.com \u00f3 https://cryptic-oasis-40349.herokuapp.com/about/.","title":"Visitar la aplicaci\u00f3n en la URL proporcionada por Heroku"},{"location":"04_pages_app/#413-errores-404","text":"En las URLconf anteriores, se han definido varios patrones URL. \u00bfQu\u00e9 pasar\u00eda si se solicita una URL diferente a las recogidas en URLconf? Para averiguarlo, probar ejecutar el servidor de desarrollo Django e intentar acceder a una p\u00e1gina Web como http://127.0.0.1:8000/hello/ o http://127.0.0.1:8000/does-not-exist/ . Se deber\u00eda ver el mensaje \"Page not found\" . (Es linda, \u00bfno? A la gente de Django seguro le gustan los colores pasteles). Django muestra este mensaje porque se solicit\u00f3 una URL que no est\u00e1 definida en URLconf. La utilidad de esta p\u00e1gina va m\u00e1s all\u00e1 del mensaje b\u00e1sico de error 404; nos dice tambi\u00e9n, qu\u00e9 URLconf utiliz\u00f3 Django y todos los patrones de esa URLconf . Con esa informaci\u00f3n, tendr\u00edamos que ser capaces de establecer porqu\u00e9 la URL solicitada lanz\u00f3 un error 404. Naturalmente, esta es informaci\u00f3n importante s\u00f3lo destinada al programador . Si esto fuera un sitio en producci\u00f3n alojado en Internet, no quisi\u00e9ramos mostrar esta informaci\u00f3n al p\u00fablico. Por esta raz\u00f3n, la p\u00e1gina \"Page not found\" s\u00f3lo se muestra si el proyecto en Django est\u00e1 en modo de depuraci\u00f3n ( debug mode ). Se explicar\u00e1 c\u00f3mo desactivar este modo m\u00e1s adelante. Por ahora, todos los proyectos est\u00e1n en modo de depuraci\u00f3n cuando se crean, y si el proyecto no lo estuviese, se retornar\u00eda una respuesta diferente.l","title":"4.13 Errores 404"},{"location":"05_message_board_app/","text":"5. Message Board app Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os. 5.1. Setup Inicial Crear un nuevo directorio para el c\u00f3digo llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'posts.apps.PostsConfig', # new ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver 5.2. Crear un modelo de base de datos Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos . FICHERO: posts/models.py from django.db import models Django importa un m\u00f3dulo models para ayudar a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual se puede hacer de la siguiente manera: FICHERO: post/models.py from django.db import models class Post(models.Model): # new text = models.TextField() # new Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() . 5.3. Activando modelos Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS . Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos apps separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones. 5.4. Django Admin Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py from django.contrib import admin from posts.models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() def __str__(self): # new return self.text[:50] # new Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos __str__() a todos los modelos para aumentar la legibilidad. 5.5. Views/Templates/URLs Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs . 5.5.1. Vista Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla . Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla. 5.4.2. Plantilla Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial' 5.6. Tests Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post = Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: 'just a test' Se ejecuta test_text_content para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id del modelo Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos. El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase from django.urls import reverse #new from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') class HomePageViewTest(TestCase): # new def setUp(self):# new Post.objects.create(text='this is another test')# new def test_view_url_exists_at_proper_location(self): # new resp = self.client.get('/') # new self.assertEqual(resp.status_code, 200) # new def test_view_url_by_name(self): # new resp = self.client.get(reverse('home')) # new self.assertEqual(resp.status_code, 200) # new def test_view_uses_correct_template(self): # new resp = self.client.get(reverse('home')) # new self.assertEqual(resp.status_code, 200) # new self.assertTemplateUsed(resp, 'home.html') # new Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests' 5.7. GitHub Subir el proyecto... 5.8. Heroku configuration Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py 5.8.1. Actualizar Pipfile.lock Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock 5.8.2. Crear Procfile Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile 5.8.3. Instalar gunicorn Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn 5.8.4. Actualizar settings.py Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master 5.9. Despliegue en Heroku Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n. 5.10. Conclusi\u00f3n Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5. Message Board app"},{"location":"05_message_board_app/#5-message-board-app","text":"Aplicaci\u00f3n en la que los usuarios pueden publicar y leer mensajes cortos con la ayuda de una base de datos. Se explorar\u00e1 la interfaz de administraci\u00f3n incorporada de Django Se agregar\u00e1n pruebas Se subir\u00e1 a github y se desplegar\u00e1 en Heroku Django proporciona soporte incorporado para varios tipos de backends de bases de datos Se empezar\u00e1 con SQLite Se ejecuta a partir de un \u00fanico archivo No requiere una instalaci\u00f3n compleja Es una elecci\u00f3n perfecta para proyectos peque\u00f1os.","title":"5. Message Board app"},{"location":"05_message_board_app/#51-setup-inicial","text":"Crear un nuevo directorio para el c\u00f3digo llamado mb Instalar Django en un nuevo entorno virtual Crear un nuevo proyecto llamado mb_project Crear una nueva aplicaci\u00f3n posts Actualizar settings.py $ mkdir mb $ cd mb $ pipenv install django $ pipenv shell (mb) $ django-admin startproject mb_project . (mb) $ python manage.py startapp posts FICHERO: mb_project/settings.py # mb_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'posts.apps.PostsConfig', # new ] A continuaci\u00f3n, ejecutar el comando migrate para crear una base de datos inicial basada en la configuraci\u00f3n por defecto de Django. (mb) $ python manage.py migrate Ahora en el directorio habr\u00e1 un fichero db.sqlite3 que representa a la base de datos SQLite. (mb) $ ls db.sqlite3 mb_project manage.py Nota .- T\u00e9cnicamente se crea un fichero db.sqlite3 la primera vez que se ejecuta una migraci\u00f3n ( migrate ) o se ejecuta el servidor ( runserver ). El uso de runserver configura una base de datos utilizando la configuraci\u00f3n predeterminada de Django, sin embargo, la migraci\u00f3n sincronizar\u00e1 la base de datos con el estado actual de cualquier modelo de base de datos contenido en el proyecto y listado en INSTALLED_APPS . En otras palabras, para asegurar que la base de datos refleja el estado actual del proyecto se tendr\u00e1 que ejecutar migrate (y tambi\u00e9n makemigrations ) cada vez que se actualiza un modelo. M\u00e1s en breve. Lanzar el servidor local y comprobar el funcionamiento (mb) $ python manage.py runserver","title":"5.1. Setup Inicial"},{"location":"05_message_board_app/#52-crear-un-modelo-de-base-de-datos","text":"Crear un modelo de base de datos donde se pueda almacenar y mostrar los mensajes de los usuarios. Django convertir\u00e1 este modelo en una tabla de base de datos . FICHERO: posts/models.py from django.db import models Django importa un m\u00f3dulo models para ayudar a construir nuevos modelos de bases de datos, que \"modelan\" las caracter\u00edsticas de los datos de la base de datos. Se quiere crear un modelo para almacenar el contenido textual de un mensaje en el tablero de mensajes, lo cual se puede hacer de la siguiente manera: FICHERO: post/models.py from django.db import models class Post(models.Model): # new text = models.TextField() # new Se ha creado un nuevo modelo de base de datos llamado Post que tiene el campo text de tipo TextField() .","title":"5.2. Crear un modelo de base de datos"},{"location":"05_message_board_app/#53-activando-modelos","text":"Una vez creado, el modelo tiene que ser activado Primero se crea un archivo de migraci\u00f3n con el comando makemigrations que genera los comandos SQL para las aplicaciones preinstaladas en nuestra configuraci\u00f3n de INSTALLED_APPS . Los archivos de migraci\u00f3n no ejecutan esos comandos en el archivo de base de datos, sino que son una referencia de todos los cambios en los modelos. Este enfoque significa que tienen un registro de los cambios de los modelos a lo largo del tiempo. En segundo lugar, construimos la base de datos actual con migrate que ejecuta la funci\u00f3n en el archivo de migraciones. (mb) $ python manage.py makemigrations posts (mb) $ python manage.py migrate posts No es necesario incluir un nombre despu\u00e9s de makemigrations o de migrate pero es un buen h\u00e1bito para ser espec\u00edfico. Si tenemos dos apps separadas en nuestro proyecto, se actualizan los modelos en ambos y luego se ejecuta makemigrations se generer\u00e1 un archivo de migraciones que contiene datos sobre ambas modificaciones. Esto hace que la depuraci\u00f3n sea m\u00e1s dif\u00edcil en el futuro. Es deseable que cada archivo de migraci\u00f3n sea lo m\u00e1s peque\u00f1o y aislado posible. De esta forma, si se necesita mirar las migraciones pasadas, s\u00f3lo hay un cambio por migraci\u00f3n en lugar de uno que se aplica a m\u00faltiples aplicaciones.","title":"5.3. Activando modelos"},{"location":"05_message_board_app/#54-django-admin","text":"Django proporciona una robusta interfaz de administraci\u00f3n para interactuar con la base de datos (pocos frameworks ofrecen tal cosa). Originado como proyecto en un peri\u00f3dico, los desarrolladores quer\u00edan un CMS para que los periodistas pudieran escribir y editar sus historias sin tocar \"c\u00f3digo\". Para utilizar el administrador de Django, primero necesitamos crear un superusuario que pueda iniciar sesi\u00f3n. (mb) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Reiniciar el servidor Django con python manage.py y en el navegador ir a http://127.0.0.1:8000/admin/. Necesitamos decirle expl\u00edcitamente a Django qu\u00e9 mostrar en la p\u00e1gina de administraci\u00f3n. FICHERO: post/admin.py from django.contrib import admin from posts.models import Post admin.site.register(Post) Ahora crear el primer mensaje en el tablero de mensajes. Problema : La nueva entrada se llama \u201cPost object\u201d, lo cual no es muy \u00fatil Cambiamos eso a\u00f1adiendo una nueva funci\u00f3n __str__ como sigue: FICHERO: posts/models.py # posts/models.py from django.db import models class Post(models.Model): text = models.TextField() def __str__(self): # new return self.text[:50] # new Es una buena pr\u00e1ctica a\u00f1adir m\u00e9todos __str__() a todos los modelos para aumentar la legibilidad.","title":"5.4. Django Admin"},{"location":"05_message_board_app/#55-viewstemplatesurls","text":"Para poder mostrar el contenido de la base de datos en la web, hay que conectar las vistas , las plantillas y las URLConfs .","title":"5.5. Views/Templates/URLs"},{"location":"05_message_board_app/#551-vista","text":"Django viene equipado con el ListView gen\u00e9rico basado en clases. FICHERO: posts/views.py # posts/views.py from django.views.generic import ListView from .models import Post class HomePageView(ListView): model = Post template_name = 'home.html' Importar ListView Definir qu\u00e9 modelo se va a usar En la vista, se deriva la clase ListView para especificar el nombre del modelo y la referencia de la plantilla . Internamente ListView devuelve un objeto llamado object_list que hay que mostrar en la plantilla.","title":"5.5.1. Vista"},{"location":"05_message_board_app/#542-plantilla","text":"Crear un directorio en el nivel del proyecto que se llame templates y una plantilla home.html en \u00e9l (mb) $ mkdir templates (mb) $ touch templates/home.html Actualizar el campo DIRS del archivo settings.py para que Django sepa c\u00f3mo acceder a la carpeta templates . # settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] En el archivo home.html se puede usar bucle for del lenguaje de plantillas de Django para listar todos los objetos en object_list . FICHERO: templates/home.html <!-- templates/home.html --> <h1>Message board homepage</h1> <ul> {% for post in object_list %} <li>{{ post }}</li> {% endfor %} </ul> FICHERO: mb_project/urls.py # mb_project/urls.py from django.contrib import admin \u00e7 from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), \u00e7 path('', include('posts.urls')), ] Crear el fichero urls.py a nivel de app (mb) $ touch posts/urls.py ...con el siguiente contenido: FICHERO: posts/urls.py \u00e7 # posts/urls.py \u00e7 from django.urls import path \u00e7 from .views import HomePageView \u00e7 urlpatterns = [ \u00e7 path('', HomePageView.as_view(), name='home'), \u00e7 ] Reiniciar el servidor que ahora mostrar\u00e1 los post del tabl\u00f3n de mensajes A\u00f1\u00e1danse m\u00e1s posts ;-) No olvidar (mb) $ git init (mb) $ git add -A (mb) $ git commit -m 'Realiza el commit inicial'","title":"5.4.2. Plantilla"},{"location":"05_message_board_app/#56-tests","text":"Se necesita usar TestCase dado que ahora tenemos una base de datos y no solo una p\u00e1gina est\u00e1tica. Se crear\u00e1 una base de datos con la que se pueden hacer pruebas (no se hacen con la base de datos real). Se empezar\u00e1 a\u00f1adiendo un mensaje de muestra al campo de la base de datos de texto para luego comprobar que se almacena correctamente. Es importante que todos los m\u00e9todos de prueba comiencen con test_ para que Django sepa c\u00f3mo manejarlos FICHERO: posts/test.py # posts/tests.py from django.test import TestCase \u00e7 from .models import Post \u00e7 class PostModelTest(TestCase): \u00e7 def setUp(self): \u00e7 Post.objects.create(text='just a test') \u00e7 def test_text_content(self): \u00e7 post = Post.objects.get(id=1) \u00e7 expected_object_name = f'{post.text}' \u00e7 self.assertEqual(expected_object_name, 'just a test') Importa el m\u00f3dulo TestCase que permite crear una base de datos de muestra Importa el modelo Post Se crea una nueva clase PostModelTest y se le a\u00f1ade un m\u00e9todo setUp para crear una nueva base de datos con una sola entrada: 'just a test' Se ejecuta test_text_content para comprobar que el campo de la base de datos realmente contiene just a test . Se crea una variable llamada post que representa el primer id del modelo Post. Django asigna autom\u00e1ticamente esta identificaci\u00f3n La siguiente l\u00ednea usa \"cadenas f\", que son una adici\u00f3n muy interesante desde Python 3.6, y permiten poner variables directamente en las cadenas siempre y cuando est\u00e9n rodeadas de corchetes {} Se establece expected_object_name como el valor de la cadena en post.text que permitir\u00e1 hacer la prueba En la \u00faltima l\u00ednea se usa assertEqual para comprobar que la entrada reci\u00e9n creada coincide con la dispuesta al principio Ejecutar la prueba con python manage.py test (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . --------------------------------------------------------------- Ran 1 test in 0.001s OK Destroying test database for alias 'default'... A pesar de lo aparentemente complicado del asunto pronto se ver\u00e1 que en la mayor parte de los casos, los tests son repetitivos. El segundo test comprueba una sola p\u00e1gina: la homepage. En concreto que exista (lanza una respuesta HTTP 200). Usa la vista home y la plantilla home.html . Se necesita a\u00f1adir un import m\u00e1s para reverse y una nueva clase HomePageViewTest from django.test import TestCase from django.urls import reverse #new from .models import Post class PostModelTest(TestCase): def setUp(self): Post.objects.create(text='just a test') def test_text_content(self): post=Post.objects.get(id=1) expected_object_name = f'{post.text}' self.assertEqual(expected_object_name, 'just a test') class HomePageViewTest(TestCase): # new def setUp(self):# new Post.objects.create(text='this is another test')# new def test_view_url_exists_at_proper_location(self): # new resp = self.client.get('/') # new self.assertEqual(resp.status_code, 200) # new def test_view_url_by_name(self): # new resp = self.client.get(reverse('home')) # new self.assertEqual(resp.status_code, 200) # new def test_view_uses_correct_template(self): # new resp = self.client.get(reverse('home')) # new self.assertEqual(resp.status_code, 200) # new self.assertTemplateUsed(resp, 'home.html') # new Ejecutando el test: (mb) $ python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). . ---------------------------------------------------------------------- Ran 4 tests in 0.036s OK Destroying test database for alias 'default'... 4 test: test_text_content , test_view_url_exists_at_proper_location , test_view_url_by_name y test_view_uses_correct_template . Cualquier funci\u00f3n que tenga la palabra test* al principio y exista en un fichero tests.py se lanzar\u00e1 cuando se ejecuta el comando python manage.py test . Hora de hacer commit de los cambios. (mb) $ git add -A (mb) $ git commit -m 'added tests'","title":"5.6. Tests"},{"location":"05_message_board_app/#57-github","text":"Subir el proyecto...","title":"5.7. GitHub"},{"location":"05_message_board_app/#58-heroku-configuration","text":"Hay que hacer los siguientes cambios al projecto para desplegarlo online: Actualizar Pipfile.lock Crear Procfile Instalar gunicorn Actualizar settings.py","title":"5.8. Heroku configuration"},{"location":"05_message_board_app/#581-actualizar-pipfilelock","text":"Especificar la versi\u00f3n de python que se est\u00e1 usando FICHERO: Pipfile # Pipfile [requires] python_version = \"3.8\" Ejecutar pipenv lock para generar el Pipfile.lock adecuado. (mb) $ pipenv lock","title":"5.8.1. Actualizar Pipfile.lock"},{"location":"05_message_board_app/#582-crear-procfile","text":"Le dir\u00e1 a Heroku c\u00f3mo ejecutar el servidor remoto donde habita el c\u00f3digo. (mb) $ touch Procfile","title":"5.8.2. Crear Procfile"},{"location":"05_message_board_app/#583-instalar-gunicorn","text":"Por ahora Heroku usa gunicorn como servidor de producci\u00f3n y mira en el fichero mb_project.wsgi para m\u00e1s instrucciones. web: gunicorn mb_project.wsgi --log-file - Luego, se instala gunicorn , que se usar\u00e1 en producci\u00f3n mientras se siga usando el servidor interno de Django para desarrollo local. (mb) $ pipenv install gunicorn","title":"5.8.3. Instalar gunicorn"},{"location":"05_message_board_app/#584-actualizar-settingspy","text":"Actualizar ALLOWED_HOSTS en el archivo settings.py . FICHERO: mb_project/settings.py # mb_project/settings.py ALLOWED_HOSTS = ['*'] commit y push (mb) $ git status (mb) $ git add -A (mb) $ git commit -m 'New updates for Heroku deployment' (mb) $ git push -u origin master","title":"5.8.4. Actualizar settings.py"},{"location":"05_message_board_app/#59-despliegue-en-heroku","text":"Login (mb) $ heroku login Create .- Genera un nombre aleatorio para la aplicaci\u00f3n (mb) $ heroku create Creating app... done,agile-inlet-25811 https://agile-inlet-25811.herokuapp.com/ | https://git.heroku.com/agile-inlet-25811.git Establecer a git para usar el nombre de la nueva aplicaci\u00f3n cuando se suba el c\u00f3digo a Heroku. (mb) $ heroku git:remote -a agile-inlet-25811 Indicar a que ignore los archivos est\u00e1ticos (se tratar\u00e1 m\u00e1s adelante). (mb) $ heroku config:set DISABLE_COLLECTSTATIC=1 Subir el c\u00f3digo a Heroku y a\u00f1adir escalado gratuito para que se ejecute realmente en l\u00ednea, de lo contrario el c\u00f3digo s\u00f3lo se quedar\u00e1 alojado. (mb) $ git push heroku master (mb) $ heroku ps:scale web=1 Abrir el c\u00f3digo con heroku open y autom\u00e1ticamente mostrar\u00e1 un navegador con la URL de la aplicaci\u00f3n.","title":"5.9. Despliegue en Heroku"},{"location":"05_message_board_app/#510-conclusion","text":"Se ha construido, probado e implementado la primera aplicaci\u00f3n b\u00e1sica basada en una base de datos. Faltar\u00edan formularios para interactuar con el sitio (el panel de administraci\u00f3n no es lo adecuado). Se crear\u00e1 una aplicaci\u00f3n de blog con formularios para que los usuarios puedan crear, editar y borrar mensajes. Se le a\u00f1adir\u00e1 estilo a trav\u00e9s de CSS.","title":"5.10. Conclusi\u00f3n"},{"location":"06_blog_app/","text":"6. Blog app Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos. 6.1. Configuraci\u00f3n inicial Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog.apps.BlogConfig', # new ] 6.2. Modelos de Bases de Datos Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django ; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User pertenece al modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada. 6.3. Admin 6.3.1. Para acceder a los datos: Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde est\u00e1 el nuevo modelo Post ? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios 6.4 URLs (blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ] 6.5. Views FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' 6.6. Templates (blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno? 6.7. Ficheros est\u00e1ticos Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: static/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load static %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"\\stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\"> <!-- new --> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; } 6.8. Individual blog pages Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3, Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . La pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando se vaya a la p\u00e1gina de entrada individual para el primer post, el patr\u00f3n de direcci\u00f3n es post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un punto de confusi\u00f3n muy com\u00fan en los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk . 6.9. Tests FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test 6.10. Git Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit' 6.11. Conclusi\u00f3n Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6. Blog app"},{"location":"06_blog_app/#6-blog-app","text":"Se construir\u00e1 una aplicaci\u00f3n de Blog que permita a los usuarios crear, editar y eliminar posts. La p\u00e1gina de inicio listar\u00e1 todos los art\u00edculos del blog Habr\u00e1 una p\u00e1gina de detalles dedicada a cada art\u00edculo individual. Se introduce CSS para el estilo y se ver\u00e1 c\u00f3mo funciona Django con los archivos est\u00e1ticos.","title":"6. Blog app"},{"location":"06_blog_app/#61-configuracion-inicial","text":"Nuevo proyecto Django: crear un nuevo directorio para el c\u00f3digo en el Escritorio llamado blog instalar Django en un nuevo entorno virtual crear un nuevo proyecto de Django llamado blog_project crear un nuevo blog de aplicaciones realizar una migraci\u00f3n para configurar la base de datos actualizar settings.py $ cd ~/Desktop $ mkdir blog $ cd blog $ pipenv install django $ pipenv shell (blog) $ django-admin startproject blog_project . (blog) $ python manage.py startapp blog (blog) $ python manage.py migrate (blog) $ python manage.py runserver FICHERO: blog_project/settings.py # blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog.apps.BlogConfig', # new ]","title":"6.1. Configuraci\u00f3n inicial"},{"location":"06_blog_app/#62-modelos-de-bases-de-datos","text":"Se asume que cada post tiene un t\u00edtulo, un autor y un cuerpo que se convertir\u00e1n en un modelo de base de datos: FICHERO: blog/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title Se importan los modelos de la clase y luego se crea una subclase del modelo llamada Post . Usando esta funcionalidad de subclase se tiene acceso autom\u00e1ticamente a todo lo que hay dentro de django.db.models.Models y se pueden a\u00f1adir campos y m\u00e9todos adicionales seg\u00fan se desee. El t\u00edtulo se limita a 200 caracteres y para el cuerpo se usa un campo de texto que se expandir\u00e1 autom\u00e1ticamente seg\u00fan sea necesario para adaptarse al texto del usuario. Hay muchos tipos de campos disponibles en Django ; se puede ver la lista completa aqu\u00ed . Para el campo de autor se usa una clave for\u00e1nea ( ForeignKey ) que permite una relaci\u00f3n de uno a muchos : un autor puede tener muchas entradas de blog diferentes, pero no al rev\u00e9s. La referencia auth.User pertenece al modelo de usuario incorporado que Django proporciona para la autenticaci\u00f3n. Para todas las relaciones de uno a muchos, con ForeignKey , tambi\u00e9n debemos especificar una opci\u00f3n de on_delete . Ahora que se ha creado el nuevo modelo de base de datos, se necesita crear un nuevo registro de migraci\u00f3n para \u00e9l y migrar el cambio a la base de datos. Este proceso de dos pasos se puede completar con los siguientes comandos: (blog) $ python manage.py makemigrations blog (blog) $ python manage.py migrate blog Base de datos configurada.","title":"6.2. Modelos de Bases de Datos"},{"location":"06_blog_app/#63-admin","text":"","title":"6.3. Admin"},{"location":"06_blog_app/#631-para-acceder-a-los-datos","text":"Crear una cuenta de superusuario (blog) $ python manage.py createsuperuser Username (leave blank to use 'wsv'): wsv Email: Password: Password (again): Superuser created successfully. Arrancar el servidor y abrir http://127.0.0.1:8000/admin/ Logear con la nueva cuenta de superusuario !Ups! \u00bfD\u00f3nde est\u00e1 el nuevo modelo Post ? Se olvid\u00f3 actualizar blog/admin.py FICHERO: blog/admin.py # blog/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) Refrescar ahora y a\u00f1adir dos blog post para tener algunos datos de muestra con los que trabajar A\u00f1adir un \"autor\" a cada entrada tambi\u00e9n, ya que por defecto todos los campos del modelo son obligatorios","title":"6.3.1. Para acceder a los datos:"},{"location":"06_blog_app/#64-urls","text":"(blog) $ touch blog/urls.py FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), ] FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blog.urls')), ]","title":"6.4 URLs"},{"location":"06_blog_app/#65-views","text":"FICHERO: blog/views.py from django.views.generic import ListView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html'","title":"6.5. Views"},{"location":"06_blog_app/#66-templates","text":"(blog) $ mkdir templates (blog) $ touch templates/base.html (blog) $ touch templates/home.html FICHERO: blog_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... }, ] FICHERO: templates/base.html <html> <head> <title>Django blog</title> </head> <body> <header> <h1><a href=\"/\">Django blog</a></h1> </header> <div class=\"container\"> {% block content %} {% endblock content %} </div> </body> </html> El c\u00f3digo entre {% block content %} y {% endblock content %} puede llenarse con otras plantillas. FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Observar que object_list proviene de ListView y contiene todos los objetos de la vista. Iniciar de nuevo el servidor Django: python manage.py runserver Terrible, \u00bfno?","title":"6.6. Templates"},{"location":"06_blog_app/#67-ficheros-estaticos","text":"Un poco de CSS, please En un proyecto Django listo para la producci\u00f3n, normalmente se almacenar\u00eda en una red de distribuci\u00f3n de contenidos (CDN, Content Delivery Network ) para un mejor rendimiento, pero para este caso, el almacenamiento de los archivos en local est\u00e1 bien. (blog) $ mkdir static Al igual que se hizo con la carpeta de plantillas, se necesita actualizar el archivo settings.py para decirle a Django d\u00f3nde buscar estos archivos est\u00e1ticos. A\u00f1adir en la parte inferior del archivo, debajo de la entrada para STATIC_URL . FICHERO: blog_project/settings.py STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] Crear una carpeta css dentro de static y crear el fichero base.css (blog) $ mkdir static/css (blog) $ touch static/css/base.css FICHERO: static/css/base.css header h1 a { color: red; } A\u00f1adir el fichero est\u00e1tico a la plantilla a\u00f1adiendo {% load static %} al pricipio de base.html Como las otras plantillas se heredan de base.html s\u00f3lo hay que a\u00f1adirlo una vez FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Ahora se pueden a\u00f1adir archivos est\u00e1ticos y aparecer\u00e1n autom\u00e1ticamente en todas las plantillas. \u00bfQu\u00e9 tal si se a\u00f1ade una fuente personalizada y algo m\u00e1s de CSS? FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link rel=\"\\stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:4000\"> <!-- new --> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> ... Actualizar el archivo css FICHERO: static/css/base.css body { font-family: 'Source Sans Pro', sans-serif; font-size: 18px; } header { border-bottom: 1px solid #999; margin-bottom: 2rem; display: flex; } header h1 a { color: red; text-decoration: none; } .nav-left { margin-right: auto; } .nav-right { display: flex; padding-top: 2rem; } .post-entry { margin-bottom: 2rem; } .post-entry h2 { margin: 0.5rem 0; } .post-entry h2 a, .post-entry h2 a:visited { color: blue; text-decoration: none; } .post-entry p { margin: 0; font-weight: 400; } .post-entry h2 a:hover { color: red; }","title":"6.7. Ficheros est\u00e1ticos"},{"location":"06_blog_app/#68-individual-blog-pages","text":"Ahora se puede a\u00f1adir funcionalidad a las p\u00e1ginas de blog individuales. Crear una nueva vista, url y plantilla. Se puede usar la vista gen\u00e9rica basada en clases DetailView para simplificar las cosas. FICHERO: blog/views.py from django.views.generic import ListView, DetailView from .models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' Por defecto DetailView proporciona un objeto de contexto que podemos usar en la plantilla llamado objeto o el nombre en min\u00fasculas de nuestro modelo, post . Adem\u00e1s, DetailView espera que se le pase una clave primaria o un slug como identificador. M\u00e1s sobre esto en breve. (blog) $ touch templates/post_detail.html FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ post.title }}</h2> <p>{{ post.body }}</p> </div> {% endblock content %} En la parte superior se especifica que esta plantilla hereda de base.html. Luego se muestra el t\u00edtulo y cuerpo del objeto de contexto, que DetailView hace accesible como post . La denominaci\u00f3n de los objetos de contexto en vistas gen\u00e9ricas es extremadamente confusa cuando se ve Django por primera vez. Debido a que nuestro objeto de contexto de DetailView es o bien el nombre de modelo post o bien object , podr\u00edamos tambi\u00e9n actualizar nuestro modelo de la siguiente manera y funcionar\u00eda exactamente igual. FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> {% endblock content %} Si se encuentra confuso el uso de post o de objeto , tambi\u00e9n podemos establecer expl\u00edcitamente el nombre del objeto del contexto en la vista. As\u00ed que si quisi\u00e9ramos llamarlo anything_you_want y luego usarlo en la plantilla, el c\u00f3digo tendr\u00eda el siguiente aspecto y funcionar\u00eda igual. FICHERO: blog/views.py ... class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' context_object_name = 'anything_you_want' FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ anything_you_want.title }}</h2> <p>{{ anything_you_want.body }}</p> </div> {% endblock content %} La \"magia\" en la denominaci\u00f3n del objeto de contexto es un precio que se paga por la facilidad y la sencillez del uso de vistas gen\u00e9ricas. Son geniales si se sabe lo que se hace pero pueden ser dif\u00edciles de personalizar si se quiere un comportamiento diferente. A\u00f1adir una nueva URLConf para la vista FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), ] Todas las entradas del blog comenzar\u00e1n con post/ . Lo siguiente es la clave principal de la entrada que se representar\u00e1 como un entero <int:pk> . \u00bfCu\u00e1l es la clave primaria? Django a\u00f1ade autom\u00e1ticamente una clave primaria autoincrementada a los modelos de base de datos. As\u00ed que mientras que s\u00f3lo se declaran los campos title , author and body en el modelo de publicaci\u00f3n, bajo el cap\u00f3, Django tambi\u00e9n a\u00f1adi\u00f3 otro campo llamado id , que es la clave primaria. Se puede acceder a ella como id o pk . La pk para el primer post \"Hola, Mundo\" es 1. Para el segundo post, es 2. Y as\u00ed sucesivamente. Por lo tanto, cuando se vaya a la p\u00e1gina de entrada individual para el primer post, el patr\u00f3n de direcci\u00f3n es post/1 . Nota: Entender c\u00f3mo funcionan claves primarias con DetailView es un punto de confusi\u00f3n muy com\u00fan en los principiantes. Vale la pena releer los dos p\u00e1rrafos anteriores unas cuantas veces. Con la pr\u00e1ctica se convertir\u00e1 en algo natural. Si se inicia el servidor con python manage.py runserver y se va directamente a http://127.0.0.1:8000/post/1/ se ver\u00e1 una p\u00e1gina dedicada para la primera entrada en el blog. Tambi\u00e9n se puede ir a http://127.0.0.1:8000/post/2/ para ver la segunda entrada. Para facilitar el acceso, se deber\u00eda actualizar el enlace en la p\u00e1gina de inicio para poder acceder directamente a las entradas individuales del blog desde all\u00ed. Actualmente en home.html el enlace est\u00e1 vac\u00edo: <a href=\"\"> . Actualizarlo a <a href=\"{% url 'post_detail' post.pk %}\"> . FICHERO: templates/home.html {% extends 'base.html' %} {% block content %} {% for post in object_list %} <div class=\"post-entry\"> <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2> <p>{{ post.body }}</p> </div> {% endfor %} {% endblock content %} Se empieza diciendo a la plantilla de Django que se quiere hacer referencia a una URLConf usando el c\u00f3digo {% url ... %} \u00bfQu\u00e9 URL?.- La que se llama post_detail , que es el nombre que se le di\u00f3 a BlogDetailView en la URLConf hace un momento. Si se mira a post_detail en URLConf , se observa que espera que se le pase un argumento pk que representa la clave primaria para la entrada del blog. Afortunadamente, Django ya ha creado e incluido este campo pk en el objeto post . Se pasa a la URLConf a\u00f1adi\u00e9ndolo en la plantilla como post.pk .","title":"6.8. Individual blog pages"},{"location":"06_blog_app/#69-tests","text":"FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') Hay muchas cosas nuevas en estas pruebas, as\u00ed que se recorrer\u00e1n lentamente. En la parte superior se importa get_user_model para referenciar al usuario activo. Se importa TestCase que se ha visto antes y tambi\u00e9n Client() que es nuevo y se usa como un navegador web falso para simular peticiones GET y POST en una URL . En otras palabras, siempre que se est\u00e9 probando vistas se usar\u00e1 Client() . En el m\u00e9todo de configuraci\u00f3n se a\u00f1ade una entrada de blog de muestra para probar y luego se confirma que tanto la representaci\u00f3n de la cadena como el contenido son correctos. Luego se usa test_post_list_view para confirmar que la p\u00e1gina de inicio devuelve un c\u00f3digo de estado HTTP 200 , contiene el texto del cuerpo y usa la plantilla home.html correcta. Finalmente test_post_detail_view comprueba que la p\u00e1gina de detalles funciona como se espera y que una p\u00e1gina incorrecta devuelve un 404 . Siempre es bueno probar que algo existe y que algo incorrecto no existe en las pruebas. (testy) $ python manage.py test","title":"6.9. Tests"},{"location":"06_blog_app/#610-git","text":"Ahora tambi\u00e9n es un buen momento para el primer commit de git. (testy) $ git init (testy) $ git status (testy) $ git add -A (testy) $ git commit -m 'initial commit'","title":"6.10. Git"},{"location":"06_blog_app/#611-conclusion","text":"Se ha construido una aplicaci\u00f3n b\u00e1sica de blog desde cero Usando el administrador de Django se puede crear, editar o borrar el contenido. Se ha usado DetailView por primera vez para crear una vista individual detallada de cada entrada del blog.","title":"6.11. Conclusi\u00f3n"},{"location":"07_formularios/","text":"7. Formularios Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas. 7.1 Formularios Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad ( Ataques XSS Cross-Site Scripting ) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito . Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan para trabajar con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting . Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establecer una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico sea la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models from django.urls import reverse # new class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio. 7.2 Actualizar Formularios Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. Nota.- Si se sigue usando el contexto de la vista tal y como se dej\u00f3 al final del tema anterior, se estar\u00e1 usando el contexto anything_you_want que habr\u00e1 que eliminar para volver a usar los habituales object y post . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego heredarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. T\u00e9ngase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas. 7.3 Borrar la vista El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota Se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que DetailView lo proporciona. - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): # new model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): # new model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ] 7.4 Tests Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_get_absolute_url(self): # new self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_create_view(self): # new response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): # new response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): # new response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades. 7.5 Conclusi\u00f3n En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7. Formularios"},{"location":"07_formularios/#7-formularios","text":"Se va a seguir trabajando sobre la aplicaci\u00f3n Blog a\u00f1adiendo Formularios para poder crear, editar o borrar cualquiera de las entradas.","title":"7. Formularios"},{"location":"07_formularios/#71-formularios","text":"Los formularios son muy comunes y dif\u00edciles de implementar correctamente. Cada vez que se acepta la entrada de un usuario hay preocupaciones de: Seguridad ( Ataques XSS Cross-Site Scripting ) Se requiere un manejo adecuado de los errores Hay consideraciones de UI sobre c\u00f3mo alertar al usuario de problemas con el formulario. Sin mencionar la necesidad de redireccionarlo en caso de \u00e9xito . Afortunadamente, los formularios incorporados de Django abstraen gran parte de la dificultad y proporcionan un rico conjunto de herramientas para manejar los casos de uso com\u00fan para trabajar con los formularios. Actualizar la plantilla base para mostrar un enlace a una p\u00e1gina donde introducir nuevas entradas en el blog. Tomar\u00e1 la forma <a href=\"{% url 'post_new' %}\"><a/> donde post_new es el nombre de la URL. FICHERO: templates/base.html {% load static %} <html> <head> <title>Django blog</title> <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400\" rel=\"stylesheet\"> <link rel=\"stylesheet\" href=\"{% static 'css/base.css' %}\"> </head> <body> <div class=\"container\"> <header> <div class=\"nav-left\"> <h1><a href=\"/\">Django blog</a></h1> </div> <div class=\"nav-right\"> <a href=\"{% url 'post_new' %}\">+ New Blog Post</a> </div> </header> {% block content %} {% endblock content %} </div> </body> </html> FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), ] La url empezar\u00e1 con post/new/ , la vista se llama BlogCreateView , y la url se llamar\u00e1 post_new . Crear la vista importando una nueva clase gen\u00e9rica llamada CreateView y luego heredarla para crear una nueva vista llamada BlogCreateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' Dentro de BlogCreateView se especifica el modelo de base de datos Post , el nombre de la plantilla post_new.html , y todos los campos con '__all__' ya que s\u00f3lo hay dos: title y author . El \u00faltimo paso es crear la plantilla, que llamaremos post_new.html . (blog) $ touch templates/post_new.html FICHERO: templates/post_new.html {% extends 'base.html' %} {% block content %} <h1>New post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Save\" /> </form> {% endblock %} En la l\u00ednea superior se hereda la plantilla base. Se usan etiquetas HTML <form> con el m\u00e9todo POST ya que se est\u00e1 enviando datos. Si se reciben datos de un formulario, por ejemplo en un cuadro de b\u00fasqueda, se utilizar\u00eda GET. Se a\u00f1ade un {% csrf_token %} que proporciona Django para proteger al formulario de ataques de cross-site scripting . Se debe usar en todos los formularios de Django. Luego para obtener los datos del formulario se usa {{ form.as_p }} que lo renderiza dentro etiquetas de p\u00e1rrafo <p> . Por \u00faltimo, se especifica un input type=\"submit\" con el valor \"Save\". Iniciar el servidor con python manage.py runserver e ir a la p\u00e1gina web en http://127.0.0.1:8000 Hacer clic en el enlace para \"+ New Blog Post\" que le redirigir\u00e1 a: http://127.0.0.1:8000/post/new/. Crear una nueva entrada de blog. \u00a1Ups! \u00bfQu\u00e9 ha pasado? El mensaje de error de Django se queja de que no se especific\u00f3 d\u00f3nde enviar al usuario despu\u00e9s de haber enviado el formulario con \u00e9xito. Se enviar\u00e1 al usuario a la p\u00e1gina de detalles despu\u00e9s de haber tenido \u00e9xito; as\u00ed se podr\u00e1 ver el mensaje completo. Se puede seguir la sugerencia de Django y a\u00f1adir un get_absolute_url al modelo. Esta es una buena pr\u00e1ctica que siempre se debe hacer. Establecer una URL can\u00f3nica para un objeto, de modo que aunque la estructura de las URL cambie en el futuro, la referencia al objeto espec\u00edfico sea la misma. En resumen, se deber\u00eda a\u00f1adir un m\u00e9todo get_absolute_url() y __str__() a cada modelo que se escriba. FICHERO: blog/models.py from django.db import models from django.urls import reverse # new class Post(models.Model): title = models.CharField(max_length=200) author = models.ForeignKey( 'auth.User', on_delete=models.CASCADE, ) body = models.TextField() def __str__(self): return self.title def get_absolute_url(self): return reverse('post_detail', args=[str(self.id)]) reverse es una funci\u00f3n muy \u00fatil que Django proporciona para referir a un objeto por el nombre de plantilla URL, en este caso post_detail . path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), Eso significa que para que esta ruta funcione debemos pasar tambi\u00e9n como argumento la pk o clave primaria del objeto. A pesar de que pk e id son intercambiables en Django, la documentaci\u00f3n de Django recomienda usar self.id con get_absolute_url . As\u00ed le decimos a Django que la \u00faltima ubicaci\u00f3n de una entrada de un Post es su vista post_detail que es posts/<int:pk>/ por lo que la ruta para la primera entrada que hemos hecho estar\u00e1 en posts/1 . Intentar crear una nueva entrada en el blog de nuevo en http://127.0.0.1:8000/post/new/ y se tendr\u00e1 \u00e9xito al ser redirigido a la p\u00e1gina de vista detallada donde aparece el post. Tambi\u00e9n se notar\u00e1 que la entrada anterior en el blog tambi\u00e9n est\u00e1 ah\u00ed. Fue enviada con \u00e9xito a la base de datos pero Django no supo c\u00f3mo redirigirse despu\u00e9s de eso. Aunque se podr\u00eda entrar en el administrador de Django para borrar los mensajes no deseados, es mejor a\u00f1adir formularios para que un usuario pueda actualizar y eliminar los mensajes existentes directamente desde el sitio.","title":"7.1 Formularios"},{"location":"07_formularios/#72-actualizar-formularios","text":"Para empezar, se a\u00f1ade un nuevo enlace a post_detail.html para que la opci\u00f3n de editar una entrada de blog aparezca en una p\u00e1gina de blog individual. Nota.- Si se sigue usando el contexto de la vista tal y como se dej\u00f3 al final del tema anterior, se estar\u00e1 usando el contexto anything_you_want que habr\u00e1 que eliminar para volver a usar los habituales object y post . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a> {% endblock content %} Se ha a\u00f1adido un enlace usando <a href>...</a> y la etiqueta del motor de plantillas de Django {% url... %} . Dentro de ella se ha especificado el nombre del objetivo de la url, que se llamar\u00e1 post_edit , y tambi\u00e9n se ha pasado el par\u00e1metro necesario, que es la clave principal del post post.pk . A continuaci\u00f3n se crea la plantilla para la p\u00e1gina de edici\u00f3n llamada post_edit.html . FICHERO: templates/post_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit post</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Update\" /> </form> {% endblock %} De nuevo se usan las etiquetas HTML <form></form> , el csrf_token de Django por seguridad, el form.as_p para mostrar los campos de formulario con etiquetas de p\u00e1rrafo, y finalmente se le da el valor \"Update\" en el bot\u00f3n submit . Ahora a nuestra vista. Necesitamos importar UpdateView en la segunda l\u00ednea superior y luego heredarla en nuestra nueva vista BlogUpdateView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from . models import Post class BlogListView(ListView): model = Post template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): model = Post fields = ['title', 'body'] template_name = 'post_edit.html' N\u00f3tese que en BlogUpdateView se listan expl\u00edcitamente los campos que se quieren usar ['title', 'body'] en lugar de usar '__all__' . Esto se debe a que se asume que el autor del post no cambia; s\u00f3lo se quiere que el t\u00edtulo y el texto sean editables. El \u00faltimo paso es actualizar el archivo urls.py de la siguiente manera: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/',views.BlogUpdateView.as_view(), name='post_edit'), ] En la parte superior se agrega la vista BlogUpdateView a la lista de vistas importadas, luego se crear\u00e1 un nuevo patr\u00f3n de url para /post/pk/edit y se le dar\u00e1 el nombre post_edit . Ahora, si se hace click en una entrada del blog, se ver\u00e1 el nuevo bot\u00f3n Editar . Si se hace clic en \"+ Edit Blog Post\" se redirigir\u00e1 a http://127.0.0.1:8000/post/1/edit/ si esa es la primera entrada en el blog. T\u00e9ngase en cuenta que el formulario est\u00e1 precargado con los datos existentes en la base de datos para el post. Vamos a hacer un cambio... Y despu\u00e9s de pulsar el bot\u00f3n \"Update\" somos redirigidos a la vista de detalles del post en el que se puede ver el cambio. Esto se debe a la configuraci\u00f3n get_absolute_url . Si se navega a la p\u00e1gina principal se podr\u00e1s ver el cambio junto a todas las dem\u00e1s entradas.","title":"7.2 Actualizar Formularios"},{"location":"07_formularios/#73-borrar-la-vista","text":"El proceso de creaci\u00f3n de un formulario para borrar entradas del blog es muy similar al de la actualizaci\u00f3n de un post. Se usar\u00e1 otra vista gen\u00e9rica basada en clases, DeleteView , y se necesita crear una vista, una url y una plantilla para la funcionalidad. Se comenzar\u00e1 por agregar un enlace para eliminar los post del blog en la p\u00e1gina de blog individual, post_detail.html . FICHERO: templates/post_detail.html {% extends 'base.html' %} {% block content %} <div class=\"post-entry\"> <h2>{{ object.title }}</h2> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'post_edit' post.pk %}\">+ Edit Blog Post</a></p> <p><a href=\"{% url 'post_delete' post.pk %}\">+ Delete Blog Post</a></p> {% endblock content %} A continuaci\u00f3n, se crea un nuevo archivo para la plantilla de la p\u00e1gina de borrado. FICHERO: templates/post_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete post</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ post.title }}\"?</p> <input type=\"submit\" value=\"Confirm\" /> </form> {% endblock %} Nota Se usa post.title para mostrar el t\u00edtulo de la entrada en el blog. Tambi\u00e9n se podr\u00eda usar object.title ya que DetailView lo proporciona. - Ahora se actualiza el archivo views.py , importando DeleteView y reverse_lazy en la parte superior, y luego creamos una nueva vista que hereda de DeleteView . FICHERO: blog/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . models import Post class BlogListView(ListView): model = PostChapter template_name = 'home.html' class BlogDetailView(DetailView): model = Post template_name = 'post_detail.html' class BlogCreateView(CreateView): model = Post template_name = 'post_new.html' fields = '__all__' class BlogUpdateView(UpdateView): # new model = Post fields = ['title', 'body'] template_name = 'post_edit.html' class BlogDeleteView(DeleteView): # new model = Post template_name = 'post_delete.html' success_url = reverse_lazy('home') Se usa reverse_lazy en vez de s\u00f3lo reverse para que no ejecute la redirecci\u00f3n URL hasta que la vista haya terminado de borrar la entrada del blog. Finalmente agregar una url importando la vista BlogDeleteView y agregando un nuevo patr\u00f3n: FICHERO: blog/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.BlogListView.as_view(), name='home'), path('post/<int:pk>/', views.BlogDetailView.as_view(), name='post_detail'), path('post/new/', views.BlogCreateView.as_view(), name='post_new'), path('post/<int:pk>/edit/', views.BlogUpdateView.as_view(), name='post_edit'), path('post/<int:pk>/delete/', views.BlogDeleteView.as_view(), name='post_delete'), ]","title":"7.3 Borrar la vista"},{"location":"07_formularios/#74-tests","text":"Se ha a\u00f1adido un m\u00e9todo get_absolute_url al modelo y nuevas vistas para crear, actualizar y editar entradas. Eso significa que se necesitan cuatro nuevas pruebas: def test_get_absolute_url def test_post_create_view def test_post_update_view def test_post_delete_view FICHERO: blog/tests.py from django.contrib.auth import get_user_model from django.test import Client, TestCase from django.urls import reverse from .models import Post class BlogTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( username='testuser', email='test@email.com', password='secret' ) self.post = Post.objects.create( title='A good title', body='Nice body content', author=self.user, ) def test_string_representation(self): post = Post(title='A sample title') self.assertEqual(str(post), post.title) def test_post_content(self): self.assertEqual(f'{self.post.title}', 'A good title') self.assertEqual(f'{self.post.author}', 'testuser') self.assertEqual(f'{self.post.body}', 'Nice body content') def test_post_list_view(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Nice body content') self.assertTemplateUsed(response, 'home.html') def test_post_detail_view(self): response = self.client.get('/post/1/') no_response = self.client.get('/post/100000/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'A good title') self.assertTemplateUsed(response, 'post_detail.html') def test_get_absolute_url(self): # new self.assertEquals(self.post.get_absolute_url(), '/post/1/') def test_post_create_view(self): # new response = self.client.post(reverse('post_new'), { 'title': 'New title', 'body': 'New text', 'author': self.user, }) self.assertEqual(response.status_code, 200) self.assertContains(response, 'New title') self.assertContains(response, 'New text') def test_post_update_view(self): # new response = self.client.post(reverse('post_edit', args='1'), { 'title': 'Updated title', 'body': 'Updated text', }) self.assertEqual(response.status_code, 302) def test_post_delete_view(self): # new response = self.client.get(reverse('post_delete', args='1')) self.assertEqual(response.status_code, 200) Se espera que la url de la prueba est\u00e9 en post/1/ ya que s\u00f3lo hay un post y el 1 es la clave primaria que Django a\u00f1ade autom\u00e1ticamente. Para testar la creaci\u00f3n de la vista se crea una nueva respuesta y luego se asegura que se pase la respuesta (c\u00f3digo de estado 200) y contenga nuestro el t\u00edtulo y texto del cuerpo. Para actualizar la vista, se accede al primer post que tiene un pk de 1 que se pasa como \u00fanico argumento y confirmamos que resulta en una redirecci\u00f3n 302. Finalmente se prueba la vista de borrado confirmando que si eliminamos un post el c\u00f3digo de estado es 200 para que sea exitoso. Siempre hay m\u00e1s pruebas que pueden ser a\u00f1adidas, pero esto al menos da cobertura a todas las nuevas funcionalidades.","title":"7.4 Tests"},{"location":"07_formularios/#75-conclusion","text":"En una peque\u00f1a cantidad de c\u00f3digo se ha construido una aplicaci\u00f3n de blog que permite crear, leer, actualizar y borrar entradas de blog. Esta funcionalidad b\u00e1sica se conoce por el acr\u00f3nimo CRUD: Create-Read-Update-Delete. Aunque hay m\u00faltiples maneras de lograr esta misma funcionalidad -se podr\u00eda haber usado vistas basadas en funciones o haber escrito unas vistas propias basadas en clases- se ha demostrado lo poco de c\u00f3digo que se necesita en Django para que esto suceda.","title":"7.5 Conclusi\u00f3n"},{"location":"08_cuentas_de_usuarios/","text":"8. Cuentas de Usuarios La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado . Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos 8.1. Login Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), # new path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML con el m\u00e9todo POST ya que se est\u00e1 enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar ataques XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n \"enviar\" ( submit ). En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese que no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente. 8.2. Actualizado de la homepage Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n preeminente. M\u00e1s adelante se le podr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso. 8.3. Enlace para Logout Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'logout' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la vista necesaria proporciona una app de autenticaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' 8.4. Inscripci\u00f3n Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de las urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: accounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views.generic import CreateView class SignUpView(CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso del UserCreationForm incorporado y la plantilla, a\u00fan no creada, signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi William . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Con el tiempo empezar\u00e1n a tener m\u00e1s sentido. 8.5. Git (blog) $ git commit -m 'A\u00f1ade formulario para crear cuentas de usuario' Crear un nuevo repo en GitHub al que se puedes llamar como se desee. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master 8.6. Configuraci\u00f3n de Heroku Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: Procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master 8.7. Despliegue en Heroku (blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En el editor de texto abrir settings.py . A\u00f1adir whitenoise a INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n a MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1adir nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse lo siguiente: FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1 8.8. Conclusi\u00f3n Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se han cubierto muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8. Cuentas de Usuarios"},{"location":"08_cuentas_de_usuarios/#8-cuentas-de-usuarios","text":"La mayor\u00eda de las aplicaciones web cuentan con una importante pieza: la autenticaci\u00f3n del usuario . La implementaci\u00f3n de una autenticaci\u00f3n de usuario adecuada es conocida por su dificultad Afortunadamente Django viene con un poderoso sistema de autenticaci\u00f3n de usuarios incorporado . Cada vez que se crea un nuevo proyecto, Django instala por defecto la aplicaci\u00f3n de autenticaci\u00f3n, que proporciona un objeto de usuario que contiene: Nombre de Usuario Contrase\u00f1a Correo Electr\u00f3nico Nombre Apellidos","title":"8. Cuentas de Usuarios"},{"location":"08_cuentas_de_usuarios/#81-login","text":"Se usar\u00e1 este objeto usuario para implementar: El inicio de sesi\u00f3n El cierre de sesi\u00f3n El registro en la aplicaci\u00f3n del blog Django proporciona una vista predeterminada para una p\u00e1gina de inicio de sesi\u00f3n a trav\u00e9s de LoginView . Todo lo que se necesita es: A\u00f1adir un patr\u00f3n de url a nivel de proyecto para el sistema de autorizaci\u00f3n Una plantilla de inicio de sesi\u00f3n Una peque\u00f1a actualizaci\u00f3n del fichero settings.py Actualizar el archivo urls.py a nivel de proyecto Se colocaran las p\u00e1ginas de login y logout en la URL accounts/ . FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), # new path('', include('blog.urls')), ] Como se indica en la documentaci\u00f3n de LoginView , por defecto Django buscar\u00e1 dentro de una carpeta de plantillas llamada registration un archivo llamado login.html para un formulario de inicio de sesi\u00f3n. As\u00ed que tenemos que crear un nuevo directorio llamado registration y el archivo requerido dentro de \u00e9l. (blog) $ mkdir templates/registration (blog) $ touch templates/registration/login.html FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock content %} Se usan las etiquetas HTML con el m\u00e9todo POST ya que se est\u00e1 enviando datos al servidor (se usa GET si se est\u00e1n solicitando datos, como en un formulario de un motor de b\u00fasqueda). Se a\u00f1ade {% csrf_token %} por motivos de seguridad, es decir, para evitar ataques XSS. El contenido del formulario se muestra entre las etiquetas de los p\u00e1rrafos gracias a {{ form.as_p }} y luego se a\u00f1ade un bot\u00f3n \"enviar\" ( submit ). En el paso final hay que especificar d\u00f3nde redirigir al usuario cuando el acceso es exitoso. Podemos establecer esto con la configuraci\u00f3n LOGIN_REDIRECT_URL . En la parte inferior del archivo settings.py agregar: FICHERO: settings.py LOGIN_REDIRECT_URL = 'home' Ahora el usuario ser\u00e1 redirigido a la plantilla home que es la p\u00e1gina de inicio. Navegar ahora a: http://127.0.0.1:8000/accounts/login/ Al introducir la informaci\u00f3n de acceso de la cuenta de superusuario, seremos redirigidos a la p\u00e1gina de inicio. N\u00f3tese que no se ha a\u00f1adido ninguna l\u00f3gica de visualizaci\u00f3n ni se ha creados un modelo de base de datos porque el sistema de autentificaci\u00f3n de Django los proporcion\u00f3 autom\u00e1ticamente.","title":"8.1. Login"},{"location":"08_cuentas_de_usuarios/#82-actualizado-de-la-homepage","text":"Actualizar la plantilla base.html para mostrar un mensaje a los usuarios tanto si est\u00e1n conectados como si no. Se puede usar el atributo is_authenticated para esto. Por ahora, se pondr\u00e1 este c\u00f3digo en una posici\u00f3n preeminente. M\u00e1s adelante se le podr\u00e1 dar un estilo m\u00e1s apropiado. FICHERO: templates/base.html ... </header> {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> {% endif %} {% block content %} {% endblock content %} Si el usuario est\u00e1 conectado, se le saludar\u00e1 por su nombre, si no, se le dar\u00e1 un enlace a la reci\u00e9n creada p\u00e1gina de acceso.","title":"8.2. Actualizado de la homepage"},{"location":"08_cuentas_de_usuarios/#83-enlace-para-logout","text":"Se a\u00f1ade un enlace de cierre de sesi\u00f3n que redirija a la p\u00e1gina de inicio. Gracias al sistema de autentificaci\u00f3n de Django, esto es muy sencillo de conseguir. En el archivo base.html se agrega un enlace de una l\u00ednea {% url 'logout' %} para desconectarse. FICHERO: templates/base.html ... {% if user.is_authenticated %} <p>Hi {{ user.username }}!</p> <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} ... Eso es todo lo que se necesita hacer ya que la vista necesaria proporciona una app de autenticaci\u00f3n auth . A\u00fan se necesita especificar d\u00f3nde redirigir al usuario al cerrar la sesi\u00f3n. Actualizar settings.py para proporcionar un enlace de redireccionamiento que se llama, apropiadamente, LOGOUT_REDIRECT_URL . Podemos a\u00f1adirlo justo al lado de nuestra redirecci\u00f3n de inicio de sesi\u00f3n, de manera que la parte inferior del archivo tenga el siguiente aspecto: FICHERO: blog_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home'","title":"8.3. Enlace para Logout"},{"location":"08_cuentas_de_usuarios/#84-inscripcion","text":"Se necesita escribir una vista propia para la p\u00e1gina de registro de nuevos usuarios, pero Django proporciona una clase formulario, UserCreationForm , para facilitar las cosas. Por defecto viene con tres campos: nombre de usuario, contrase\u00f1a y contrase\u00f1a. Hay muchas maneras de organizar el c\u00f3digo y la estructura de las urls para un sistema de autenticaci\u00f3n de usuario robusto. Aqu\u00ed se crear\u00e1 una nueva aplicaci\u00f3n dedicada, accounts , para la p\u00e1gina de registro. (blog) $ python manage.py startapp accounts A\u00f1adir la nueva app a INSTALLED_APPS del fichero settings.py . FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog', 'accounts', ] A continuaci\u00f3n a\u00f1adimos una url a nivel de proyecto que apunta a esta nueva aplicaci\u00f3n directamente debajo de donde incluimos la aplicaci\u00f3n de autorizaci\u00f3n incorporada. FICHERO: blog_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('accounts/', include('accounts.urls')), path('', include('blog.urls')), ] El orden de las urls importa porque Django lee este archivo de arriba a abajo. Por lo tanto, cuando se solicite la url /accounts/signup , Django buscar\u00e1 primero en el archivo auth , no lo encontrar\u00e1, y luego proceder\u00e1 a la aplicaci\u00f3n accounts de cuentas. (blog) $ touch accounts/urls.py And add the following code: FICHERO: accounts/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUpView.as_view(), name='signup'), ] Se \u00e9st\u00e1 usando una vista que a\u00fan no se ha creado llamada SignupView que est\u00e1 basada en clases, ya que est\u00e1 en may\u00fasculas, y tiene el sufijo as_view() . Su ruta es s\u00f3lo signup/ por lo que la ruta general ser\u00e1 accounts/signup/ . Ahora para la vista que usa el UserCreationForm incorporado y el CreateView gen\u00e9rico . FICHERO: accounts/views.py from django.contrib.auth.forms import UserCreationForm from django.urls import reverse_lazy from django.views.generic import CreateView class SignUpView(CreateView): form_class = UserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Se est\u00e1 heredando de la vista gen\u00e9rica basada en clases CreateView la clase SignUpView . Se especifica el uso del UserCreationForm incorporado y la plantilla, a\u00fan no creada, signup.html . Y se usa reverse_lazy para redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n cuando se registra con \u00e9xito. \u00bfPor qu\u00e9 usar aqu\u00ed reverse_lazy en lugar de reverse ? La raz\u00f3n es que para todas las vistas gen\u00e9ricas basadas en clases las urls no se cargan cuando se importa el archivo, por lo que tenemos que usar la forma perezosa de reverse para cargarlas m\u00e1s tarde cuando est\u00e9n disponibles. A\u00f1adir signup.html a la carpeta de plantillas a nivel de proyecto: (blog) $ touch templates/signup.html TEMPLATE: templates/signup.html {% extends 'base.html' %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Al principio se extiende la plantilla base, se coloca la l\u00f3gica entre las etiquetas <form></form> , y se usa csrf_token por seguridad. El contenido del formulario se muestra en etiquetas de p\u00e1rrafo con form.as_p y se incluye un bot\u00f3n de env\u00edo. Navegar en: http://127.0.0.1:8000/accounts/signup/ Observar que hay mucho texto extra que Django incluye por defecto. Se puede personalizar usando el marco de mensajes incorporado, pero por ahora probar el formulario. Crear un nuevo usuario llamado \"William\" y comprobar como al enviarlo se redirige a la p\u00e1gina de acceso y de como, despu\u00e9s de ingresar exitosamente, se redirige a la p\u00e1gina de inicio con el saludo personalizado Hi William . El \u00faltimo flujo es, por lo tanto: Inscripci\u00f3n (Signup) -> Inicio de sesi\u00f3n (Login) -> P\u00e1gina de inicio (Homepage) - Y por supuesto podemos modificar esto como queramos. La SignupView se redirige a la entrada al sistema (login) porque se establece success_url = reverse_lazy('login') . La p\u00e1gina de login se redirige a la homepage porque en el archivo settings.py se establece LOGIN_REDIRECT_URL = 'home' . - Al principio puede parecer abrumador llevar la cuenta de todas las partes de un proyecto Django. Eso es normal. Con el tiempo empezar\u00e1n a tener m\u00e1s sentido.","title":"8.4. Inscripci\u00f3n"},{"location":"08_cuentas_de_usuarios/#85-git","text":"(blog) $ git commit -m 'A\u00f1ade formulario para crear cuentas de usuario' Crear un nuevo repo en GitHub al que se puedes llamar como se desee. (blog) $ git remote add origin git@bitbucket.org:wsvincent/blog-app.git (blog) $ git push -u origin master","title":"8.5. Git"},{"location":"08_cuentas_de_usuarios/#86-configuracion-de-heroku","text":"Hay cuatro cambios que hacer para el despliegue en Heroku. actualizar Pipfile.lock nuevo Procfile instalar gunicorn actualizar settings.py FICHERO: Pipfile [requires] python_version = \"3.8\" (blog) $ pipenv lock (blog) $ touch Procfile FICHERO: Procfile web: gunicorn blog_project.wsgi --log-file - (blog) $ pipenv install gunicorn FICHERO: blog_project/settings.py ALLOWED_HOSTS = ['*'] (blog) $ git status (blog) $ git add -A (blog) $ git commit -m 'A\u00f1ade ficheros de configuraci\u00f3n Heroku' (blog) $ git push -u origin master","title":"8.6. Configuraci\u00f3n de Heroku"},{"location":"08_cuentas_de_usuarios/#87-despliegue-en-heroku","text":"(blog) $ heroku login \"Create\" indica a Heroku que haga un nuevo contenedor para la aplicaci\u00f3n. Si s\u00f3lo se ejecuta heroku create , Heroku asignar\u00e1 un nombre al azar, aunque se puede especificar un nombre personalizado, que debe ser \u00fanico en Heroku. (blog) $ heroku create dfb-blog Ahora configurar git de manera que cuando se suba a Heroku (push), vaya al nombre de la nueva aplicaci\u00f3n (reemplazar dfb-blog con el nombre elegido). (blog) $ heroku git:remote -a dfb-blog Hay un paso m\u00e1s que debemos dar ahora que tenemos archivos est\u00e1ticos, en este caso CSS. Django no soporta servir archivos est\u00e1ticos en producci\u00f3n, sin embargo el proyecto WhiteNoise s\u00ed lo hace. As\u00ed que vamos a instalarlo. (blog) $ pipenv install whitenoise Hay que actualizar la configuraci\u00f3n est\u00e1tica para que se use en producci\u00f3n. En el editor de texto abrir settings.py . A\u00f1adir whitenoise a INSTALLED_APPS encima de la aplicaci\u00f3n de archivos est\u00e1ticos incorporada y tambi\u00e9n a MIDDLEWARE en la tercera l\u00ednea. El orden importa tanto para INSTALLED_APPS como para MIDDLEWARE . En la parte inferior del archivo a\u00f1adir nuevas l\u00edneas tanto para STATIC_ROOT como para STATICFILES_STORAGE . Deber\u00eda verse lo siguiente: FICHERO: blog_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new! 'django.contrib.staticfiles', 'blog', 'accounts', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new! 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ... STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new! STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new! (blog) $ git add -A (blog) $ git commit -m 'Heroku config' (blog) $ git push origin master Finalmente podemos subir el c\u00f3digo a Heroku y a\u00f1adir un proceso web para que el banco de pruebas se ponga en marcha. (blog) $ git push heroku master (blog) $ heroku ps:scale web=1","title":"8.7. Despliegue en Heroku"},{"location":"08_cuentas_de_usuarios/#88-conclusion","text":"Con una m\u00ednima cantidad de c\u00f3digo, el framework de Django nos ha permitido crear un flujo de autenticaci\u00f3n de usuario de inicio de sesi\u00f3n, cierre de sesi\u00f3n y registro. Bajo el cap\u00f3, se han cubierto muchos problemas de seguridad que pueden surgir si se intenta crear un flujo de autenticaci\u00f3n de usuario propio desde cero.","title":"8.8. Conclusi\u00f3n"},{"location":"09_modelo_de_usuario_personalizado/","text":"9. Modelo de usuario personalizado La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adir un campo edad- utilizar un modelo de usuario personalizado desde el principio lo convierte en algo sencillo. Pero si no se crea, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil . Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos en Django recomiendan. Utilizar el complejo AbstractBaseUser cuando si s\u00f3lo se utiliza AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables es mucho mejor pr\u00e1ctica. Y ahora, hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ). 9.1. Setup $ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Nota Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django . 9.2 Modelo de usuario personalizado La creaci\u00f3n del modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age Crear nuevos formularios para UserCreation y UserChangeForm Actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users.apps.UsersConfig', # new ] ... # Authentication # new AUTH_USER_MODEL = 'users.CustomUser' # new FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0) 9.3. Formularios Hay dos formas de interactuar con el nuevo modelo de usuario personalizado Cuando un usuario se registra para una nueva cuenta en el sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationForm y UserChangeForm . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se usa el modelo CustomUser con los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo age adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate 9.4. Superusuario Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escribir el siguiente comando y cumplir con las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar. 9.5. Conclusi\u00f3n Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Newspaper .","title":"9. Modelo de Usuario Personalizado"},{"location":"09_modelo_de_usuario_personalizado/#9-modelo-de-usuario-personalizado","text":"La documentaci\u00f3n oficial de Django recomienda encarecidamente utilizar un modelo de usuario personalizado para los nuevos proyectos. La raz\u00f3n es que si se quiere hacer cualquier cambio en el modelo de usuario en el futuro -por ejemplo, a\u00f1adir un campo edad- utilizar un modelo de usuario personalizado desde el principio lo convierte en algo sencillo. Pero si no se crea, actualizar el modelo de usuario por defecto en un proyecto Django existente es muy, muy dif\u00edcil . Sin embargo, el ejemplo de la documentaci\u00f3n oficial no es realmente lo que muchos expertos en Django recomiendan. Utilizar el complejo AbstractBaseUser cuando si s\u00f3lo se utiliza AbstractUser las cosas son mucho m\u00e1s sencillas y a\u00fan as\u00ed personalizables es mucho mejor pr\u00e1ctica. Y ahora, hagamos un peri\u00f3dico (homenaje a las ra\u00edces de Django como un framework construido para editores y periodistas en el Lawrence Journal-World ).","title":"9. Modelo de usuario personalizado"},{"location":"09_modelo_de_usuario_personalizado/#91-setup","text":"$ cd ~/Desktop $ mkdir news $ cd news $ pipenv install django $ pipenv shell (news) $ django-admin startproject newspaper_project . (news) $ python manage.py startapp users (news) $ python manage.py runserver Tener en cuenta que a\u00fan no se ha ejecutado la migraci\u00f3n para configurar la base de datos. Nota Es importante esperar hasta despu\u00e9s de que se haya creado el nuevo modelo de usuario personalizado, dado lo estrechamente conectado que est\u00e1 el modelo de usuario con el resto de Django .","title":"9.1. Setup"},{"location":"09_modelo_de_usuario_personalizado/#92-modelo-de-usuario-personalizado","text":"La creaci\u00f3n del modelo de usuario personalizado requiere cuatro pasos: Actualizar settings.py Crear un nuevo modelo CustomUser a\u00f1adiendo un nuevo campo age Crear nuevos formularios para UserCreation y UserChangeForm Actualizar el admin FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users.apps.UsersConfig', # new ] ... # Authentication # new AUTH_USER_MODEL = 'users.CustomUser' # new FICHERO: users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): age = models.PositiveIntegerField(default=0)","title":"9.2 Modelo de usuario personalizado"},{"location":"09_modelo_de_usuario_personalizado/#93-formularios","text":"Hay dos formas de interactuar con el nuevo modelo de usuario personalizado Cuando un usuario se registra para una nueva cuenta en el sitio web Dentro de la aplicaci\u00f3n de administraci\u00f3n que permite, como superusuarios, modificar los usuarios existentes. As\u00ed que hay que actualizar los dos formularios incorporados para esta funcionalidad: UserCreationForm y UserChangeForm . (noticias) $ touch users/forms.py FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Para ambos formularios se usa el modelo CustomUser con los campos por defecto de Meta.fields . El modelo de CustomUser contiene todos los campos del modelo de usuario por defecto y el campo age adicional que se ha definido. \u00bfPero cu\u00e1les son estos campos por defecto? Resulta que hay muchos, incluyendo username , first_name , last_name , email , password , groups y m\u00e1s. Sin embargo, cuando un usuario se registra en una nueva cuenta en Django, el formulario predeterminado s\u00f3lo pide un nombre de usuario, un correo electr\u00f3nico y una contrase\u00f1a. Esto nos dice que la configuraci\u00f3n predeterminada para los campos en UserCreationForm son s\u00f3lo el username , email y password aunque hay muchos m\u00e1s campos disponibles. Por tanto, entender los formularios y los modelos correctamente lleva alg\u00fan tiempo. El paso final es actualizar el archivo admin.py ya que Admin est\u00e1 estrechamente unido al modelo de usuario por defecto. Se extender\u00e1 la clase existente UserAdmin para usar el nuevo modelo de CustomUser y los dos nuevos formularios. FICHERO: users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm list_display = ['email', 'username', 'age'] model = CustomUser admin.site.register(CustomUser, CustomUserAdmin) Obs\u00e9rvese que CustomUserAdmin tambi\u00e9n tiene un ajuste de list_display de manera que s\u00f3lo muestra los campos email , username y age aunque de hecho hay muchos m\u00e1s en el modelo de CustomUser Ejecutar makemigrations y migrate por primera vez para crear una nueva base de datos que utilice el modelo de usuario personalizado. (news) $ python manage.py makemigrations (news) $ python manage.py migrate","title":"9.3. Formularios"},{"location":"09_modelo_de_usuario_personalizado/#94-superusuario","text":"Vamos a crear una cuenta de superusuario para confirmar que todo funciona como se espera. En la l\u00ednea de comandos, escribir el siguiente comando y cumplir con las indicaciones. (news) $ python manage.py createsuperuser El hecho de que esto funcione es la primera prueba de que el modelo de usuario personalizado funciona como se esperaba. Navegar a http://127.0.0.1:8000/admin, logear y probar.","title":"9.4. Superusuario"},{"location":"09_modelo_de_usuario_personalizado/#95-conclusion","text":"Con el modelo de usuario personalizado completo, ahora podemos centrarnos en construir el resto de la aplicaci\u00f3n Newspaper .","title":"9.5. Conclusi\u00f3n"},{"location":"10_autenticacion_de_usuarios/","text":"10. Autenticaci\u00f3n de usuarios 10.1. Plantillas Por defecto, el cargador de plantillas de Django las busca en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html de users tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero el enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Tras iniciar o cerrar sesi\u00f3n en un sitio se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar al usuario en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block content %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %} 10.2. URLs En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias . Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new from django.views.generic.base import TemplateView # new urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), # new path('users/', include('django.contrib.auth.urls')), # new ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser . 10.3. Admin Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta que no sea de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En principio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio ! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera. 10.4. Conclusi\u00f3n Hasta ahora la aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro , login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10. Autenticaci\u00f3n de Usuarios"},{"location":"10_autenticacion_de_usuarios/#10-autenticacion-de-usuarios","text":"","title":"10. Autenticaci\u00f3n de usuarios"},{"location":"10_autenticacion_de_usuarios/#101-plantillas","text":"Por defecto, el cargador de plantillas de Django las busca en una estructura anidada dentro de cada aplicaci\u00f3n. As\u00ed que una plantilla home.html de users tendr\u00eda que estar ubicada en users/templates/users/home.html . Pero el enfoque de carpeta de plantillas a nivel de proyecto es m\u00e1s limpio y se escala mejor, as\u00ed que se usar\u00e1. (news) $ mkdir templates (news) $ mkdir templates/registration FICHERO: newspaper_project/settings.py TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], ... } ] Tras iniciar o cerrar sesi\u00f3n en un sitio se es redirigido inmediatamente a una p\u00e1gina subsiguiente. Por tanto, habr\u00e1 que decirle a Django d\u00f3nde enviar al usuario en cada caso. Las configuraciones LOGIN_REDIRECT_URL y LOGOUT_REDIRECT_URL hacen eso. Se configurar\u00e1 ambos para redirigirlos a la p\u00e1gina de inicio, que tendr\u00e1 el nombre de URL home . Recordar que cuando se crean las rutas URL se tiene la opci\u00f3n de a\u00f1adir un nombre a cada una. As\u00ed que cuando se construya la URL de la p\u00e1gina de inicio habr\u00e1 que asegurarse de llamarla home . A\u00f1adir estas dos l\u00edneas en la parte inferior del archivo settings.py. FICHERO: newspaper_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' Ahora se pueden crear cuatro nuevas plantillas: (news) $ touch templates/registration/login.html (news) $ touch templates/base.html (news) $ touch templates/home.html (news) $ touch templates/signup.html Este es el c\u00f3digo HTML para cada archivo a utilizar. base.html ser\u00e1 heredada por cada una de las otras plantillas del proyecto. Usando un bloque como {% block content %} se puede m\u00e1s tarde sobreescribir el contenido s\u00f3lo en este lugar desde otras plantillas. FICHERO: templates/base.html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Newspaper App</title> </head> <body> <main> {% block content %} {% endblock %} </main> </body> </html> FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} {% if user.is_authenticated %} Hi {{ user.username }}! <p><a href=\"{% url 'logout' %}\">logout</a></p> {% else %} <p>You are not logged in</p> <a href=\"{% url 'login' %}\">login</a> | <a href=\"{% url 'signup' %}\">signup</a> {% endif %} {% endblock %} FICHERO: templates/registration/login.html {% extends 'base.html' %} {% block title %}Login{% endblock %} {% block content %} <h2>Login</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Login</button> </form> {% endblock %} FICHERO: templates/signup.html {% extends 'base.html' %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Sign up</button> </form> {% endblock %}","title":"10.1. Plantillas"},{"location":"10_autenticacion_de_usuarios/#102-urls","text":"En el archivo urls.py , a nivel de proyecto, se quiere que la plantilla home.html aparezca como p\u00e1gina de inicio. Pero no se quiere construir una app pages dedicada todav\u00eda, as\u00ed que se puede usar el atajo de importar TemplateView y establecer el template_name justo en el patr\u00f3n url. A continuaci\u00f3n se quiere \"incluir\" tanto la app users como la app auth incorporada. La raz\u00f3n es que la app auth incorporada ya proporciona vistas y urls para el inicio y el cierre de sesi\u00f3n. Pero para el registro hay que crear una vista y una url propias . Para asegurar que las rutas URL sean consistentes se colocar\u00e1n ambas en users/ para que las URLs eventuales sean /users/login , /users/logout y /users/signup . FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new from django.views.generic.base import TemplateView # new urlpatterns = [ path('', TemplateView.as_view(template_name='home.html'), name='home'), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), # new path('users/', include('django.contrib.auth.urls')), # new ] Ahora se crea un archivo urls.py en la app users . (news) $ touch users/urls.py Actualizar users/urls.py con el siguiente c\u00f3digo: FICHERO: users/urls.py from django.urls import path from . import views urlpatterns = [ path('signup/', views.SignUp.as_view(), name='signup'), ] El \u00faltimo paso es el archivo views.py que contendr\u00e1 la l\u00f3gica del formulario de inscripci\u00f3n. Se usar\u00e1 el CreateView gen\u00e9rico de Django dici\u00e9ndole que use CustomUserCreationForm , para redirigirse a login una vez que el usuario se registre con \u00e9xito, y que la plantilla se llama signup.html . FICHERO: users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm class SignUp(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Arrancar el servidor con python manage.py runserver e ir a la p\u00e1gina principal en http://127.0.0.1:8000/. Probar todo y crear un nuevo usuario testuser .","title":"10.2. URLs"},{"location":"10_autenticacion_de_usuarios/#103-admin","text":"Entrar tambi\u00e9n en el administrador para ver las dos cuentas de usuario. No se podr\u00e1 entrar con una cuenta que no sea de superusuario. Todo est\u00e1 funcionando pero no hay un campo email para el usuario testuser . En la p\u00e1gina de registro users/signup/ se puede ver que s\u00f3lo se pide un nombre de usuario y una contrase\u00f1a, \u00a1no un correo electr\u00f3nico! As\u00ed es como funciona la configuraci\u00f3n predeterminada de Django pero se puede cambiar f\u00e1cilmente en users/forms.py . En principio tiene este aspecto: FICHERO: users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = UserCreationForm.Meta.fields class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Como campos se usan Meta.fields que s\u00f3lo muestran la configuraci\u00f3n por defecto de nombre_de_usuario/contrase\u00f1a. Pero tambi\u00e9n se puede establecer expl\u00edcitamente qu\u00e9 campos se quieren mostrar, as\u00ed que se actualizar\u00e1 para pedir un nombre_de_usuario/correo_electr\u00f3nico/contrase\u00f1a configur\u00e1ndolo como ('username', 'email',) . \u00a1No se necesita incluir el campo password porque es obligatorio ! Pero todos los dem\u00e1s campos pueden ser configurados como se quiera. FICHERO: users/forms.py ... class CustomUserCreationForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = ('username', 'email', ) # new class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = ('username', 'email', ) # new El flujo de autenticaci\u00f3n de usuarios de Django requiere un poco de configuraci\u00f3n, pero puede verse que tambi\u00e9n proporciona una incre\u00edble flexibilidad para configurar el registro e iniciar la sesi\u00f3n exactamente como se requiera.","title":"10.3. Admin"},{"location":"10_autenticacion_de_usuarios/#104-conclusion","text":"Hasta ahora la aplicaci\u00f3n Newspaper tiene un modelo de usuario personalizado y funciona con p\u00e1ginas de registro , login y logout aunque no tiene muy buen aspecto. Pr\u00f3ximamente se a\u00f1adir\u00e1 Bootstrap para mejorar el estilo adem\u00e1s de una app de p\u00e1ginas dedicadas.","title":"10.4. Conclusi\u00f3n"},{"location":"11_bootstrap/","text":"11. Bootstrap El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n. 11.1. Pages app Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar se puede y debe crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas . Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Recordar actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users.apps.UsersConfig', 'pages.apps.PagesConfig', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con la nueva url y vista. 11.2. Pruebas Hay dos momentos ideales para a\u00f1adir pruebas - Antes de escribir cualquier c\u00f3digo (test-driven-development) - Inmediatamente despu\u00e9s de que se haya a\u00f1adido una nueva funcionalidad y lo a\u00fan est\u00e9 claro en mente. Actualmente el proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirse al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: Si la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 Si la p\u00e1gina utiliza el nombre de la url correcta en la vista Si se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test 11.3. Bootstrap Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: - Se pueden descargar todos los archivos y servirlos localmente - Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: - Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: - la p\u00e1gina de inicio - inicio de sesi\u00f3n - cierre de sesi\u00f3n - registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico a mejorar es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ... 11.4. Formulario de inscripci\u00f3n \u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra ah\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hay tres opciones: - anular el help_text existente - ocultar el help_text - reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si el bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ... 11.5. Pr\u00f3ximos pasos El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11. Bootstrap"},{"location":"11_bootstrap/#11-bootstrap","text":"El desarrollo de la web requiere de muchas habilidades. No s\u00f3lo hay que programar un sitio web para que funcione correctamente, los usuarios tambi\u00e9n esperan que se vea bien. Cuando se est\u00e1 creando todo desde cero, puede ser abrumador a\u00f1adir tambi\u00e9n todo el HTML/CSS necesario para un sitio atractivo. Afortunadamente est\u00e1 Bootstrap , el marco de trabajo m\u00e1s popular para construir proyectos responsivos y para m\u00f3viles. En lugar de escribir nuestro propio CSS y JavaScript para las caracter\u00edsticas comunes de dise\u00f1o de sitios web, podemos confiar en Bootstrap para hacer el trabajo pesado. Esto significa que con s\u00f3lo una peque\u00f1a cantidad de c\u00f3digo de nuestra parte podemos tener r\u00e1pidamente sitios web de gran apariencia. Y si queremos hacer cambios personalizados a medida que el proyecto avanza, tambi\u00e9n es f\u00e1cil anular Bootstrap cuando sea necesario. Cuando centrarse en la funcionalidad de un proyecto y no en el dise\u00f1o es lo importante, Bootstrap es una gran elecci\u00f3n.","title":"11. Bootstrap"},{"location":"11_bootstrap/#111-pages-app","text":"Hasta ahora se muestra la p\u00e1gina de inicio incluyendo la l\u00f3gica de la vista en el archivo urls.py . Aunque este enfoque funciona, es una triqui\u00f1uela y ciertamente escala a medida que un sitio web crece con el tiempo. Tambi\u00e9n es probablemente algo confuso para los reci\u00e9n llegados a Django. En su lugar se puede y debe crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para todas las p\u00e1ginas est\u00e1ticas . Esto mantendr\u00e1 el c\u00f3digo bien organizado en el futuro. En la l\u00ednea de comandos usar el comando startapp para crear la aplicaci\u00f3n pages . (news) $ python manage.py startapp pages Recordar actualizar inmediatamente el archivo settings.py . FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users.apps.UsersConfig', 'pages.apps.PagesConfig', # new ] Ahora se puede actualizar el archivo urls.py a nivel de proyecto. Eliminar el import de TemplateView . Tambi\u00e9n se actualizar\u00e1 la ruta '' para incluir las p\u00e1ginas de la aplicaci\u00f3n. FICHERO: newspaper_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('', include('pages.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] Es hora de a\u00f1adir la p\u00e1gina web, lo cual significa hacer el baile est\u00e1ndar de urls/views/templates de Django. (news) $ touch pages/urls.py Luego importar las vistas a\u00fan no creadas, establecer las rutas y asegurarse de nombrar cada url, tambi\u00e9n. FICHERO: pages/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.HomePageView.as_view(), name='home'), ] El c\u00f3digo de views.py deber\u00eda resultar familiar a estas alturas. Se usa la vista gen\u00e9rica basada en clases TemplateView de Django, lo que significa que s\u00f3lo habr\u00e1 que especificar el template_name para usarlo. FICHERO: pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya existe una plantilla home.html . Confirmar que sigue funcionando como se esperaba con la nueva url y vista.","title":"11.1. Pages app"},{"location":"11_bootstrap/#112-pruebas","text":"Hay dos momentos ideales para a\u00f1adir pruebas - Antes de escribir cualquier c\u00f3digo (test-driven-development) - Inmediatamente despu\u00e9s de que se haya a\u00f1adido una nueva funcionalidad y lo a\u00fan est\u00e9 claro en mente. Actualmente el proyecto tiene cuatro p\u00e1ginas: home signup login logout S\u00f3lo se necesita probar las dos primeras. login y logut son parte de Django y ya tienen cobertura de pruebas. FICHERO: pages/tests.py from django.contrib.auth import get_user_model from django.test import SimpleTestCase, TestCase from django.urls import reverse class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class SignupPageTests(TestCase): username = 'newuser' email = 'newuser@email.com' def test_signup_page_status_code(self): response = self.client.get('/users/signup/') self.assertEqual(response.status_code, 200) def test_view_url_by_name(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) def test_view_uses_correct_template(self): response = self.client.get(reverse('signup')) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'signup.html') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) En la l\u00ednea superior se usa get_user_model() para referirse al modelo de usuario personalizado. Luego para ambas p\u00e1ginas se prueban tres cosas: Si la p\u00e1gina existe y devuelve un c\u00f3digo de estado HTTP 200 Si la p\u00e1gina utiliza el nombre de la url correcta en la vista Si se est\u00e1 utilizando la plantilla adecuada La p\u00e1gina de registro tambi\u00e9n tiene un formulario, as\u00ed que se deber\u00eda probar eso tambi\u00e9n. En el formulario test_signup_form se est\u00e1 verificando que cuando un nombre de usuario y una direcci\u00f3n de correo electr\u00f3nico son POSTeados (enviados a la base de datos), coinciden con lo que se almacena en el modelo CustomUser . Ejecutar: (news) $ python manage.py test","title":"11.2. Pruebas"},{"location":"11_bootstrap/#113-bootstrap","text":"Hay dos maneras de a\u00f1adir Bootstrap a un proyecto: - Se pueden descargar todos los archivos y servirlos localmente - Confiar en una Red de Entrega de Contenido (CDN) El segundo enfoque es m\u00e1s sencillo de implementar siempre que se tenga una conexi\u00f3n a Internet consistente, as\u00ed que eso es lo que se usar\u00e1 aqu\u00ed. Bootstrap viene con una plantilla inicial que incluye los archivos b\u00e1sicos necesarios. En particular, hay cuatro que se incorporar\u00e1n: Bootstrap.css jQuery.js Popper.js Bootstrap.js FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>Hello, world!</title> </head> <body> <h1>Hello, world!</h1> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Se a\u00f1ade ahora: - Una barra de navegaci\u00f3n en la parte superior de la p\u00e1gina que contiene los enlaces para: - la p\u00e1gina de inicio - inicio de sesi\u00f3n - cierre de sesi\u00f3n - registro. En particular, se pueden usar las etiquetas if/else en el motor de plantillas de Django para a\u00f1adir algo de l\u00f3gica b\u00e1sica. Se quiere mostrar un bot\u00f3n de \"login\" y \"signup\" a los usuarios que han cerrado la sesi\u00f3n, pero un bot\u00f3n de \"logout\" y \"cambiar contrase\u00f1a\" a los usuarios que han iniciado la sesi\u00f3n. FICHERO: templates/base.html <!doctype html> <html lang=\"en\"> <head> <!-- Required meta tags --> <meta charset=\"utf- \"> <meta name=\"viewport\" content=\"width=device-width, initial-scale= , shrink-to-fit=no\"> <!-- Bootstrap CSS --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"> <title>{% block title %}Newspaper App{% endblock title %}</title> </head> <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> {% if user.is_authenticated %} <ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> {{ user.username }} </a> <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userMenu\"> <a class=\"dropdown-item\" href=\"{% url 'password_change' %}\">Change password</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Log out</a> </div> </li> </ul> {% else %} <form class=\"form-inline ml-auto\"> <a href=\"{% url 'login' %}\" class=\"btn btn-outline-secondary\">Log in</a> <a href=\"{% url 'signup' %}\" class=\"btn btn-primary ml- \">Sign up</a> </form> {% endif %} </div> </nav> <div class=\"container\"> {% block content %} {% endblock %} </div> <!-- Optional JavaScript --> <!-- jQuery first, then Popper.js, then Bootstrap JS --> <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9KScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script> </body> </html> Lo \u00fanico a mejorar es el bot\u00f3n de \"Login\". Se puede usar Bootstrap para a\u00f1adir un estilo agradable, como hacerlo verde y atractivo. FICHERO: templates/registration/login.html ... <button class=\"btn btn-success ml-2\" type=\"submit\">Login</button> ...","title":"11.3. Bootstrap"},{"location":"11_bootstrap/#114-formulario-de-inscripcion","text":"\u00bfDe d\u00f3nde vino ese texto? Cuando algo se siente \"m\u00e1gico\" en Django, seguro que no lo es. El m\u00e9todo m\u00e1s r\u00e1pido para averiguar lo que ocurre bajo el cap\u00f3 de Django es simplemente ir al c\u00f3digo fuente de Django en Github, usar la barra de b\u00fasqueda e intentar encontrar el trozo de texto espec\u00edfico. Por ejemplo, si se busca \"150 characters or fewer\" se encontrar\u00e1 en la p\u00e1gina django/contrib/auth/models.py que se encuentra ah\u00ed en la l\u00ednea 301. El texto viene como parte de la app auth , en el campo de nombre de usuario de AbstractUser . Ahora hay tres opciones: - anular el help_text existente - ocultar el help_text - reestilar el help_text Se escoger\u00e1 la tercera opci\u00f3n ya que es una buena manera de introducir el excelente paquete de terceros django-crispy-forms . Trabajar con formularios es un reto y django-crispy-forms hace m\u00e1s f\u00e1cil escribir c\u00f3digo \u00c1RIDO . (news) $ pipenv install django-crispy-forms A\u00f1adir la nueva aplicaci\u00f3n a la lista INSTALLED_APPS en el archivo settings.py A medida que el n\u00famero de aplicaciones comienza a crecer, es \u00fatil distinguir entre aplicaciones de terceros y aplicaciones locales que se han a\u00f1adido. FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', #3rd Party 'crispy_forms', # Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', ] Ya que se est\u00e1 usando Bootstrap4 tambi\u00e9n se deber\u00eda a\u00f1adir esa configuraci\u00f3n al archivo settings.py . Esto va en la parte inferior del archivo. FICHERO: newspaper_project/settings.py CRISPY_TEMPLATE_PACK = 'bootstrap' Ahora en la plantilla de signup.html se puede usar r\u00e1pidamente formularios crujientes ( crispy forms ). Primero se cargan las etiquetas crispy_forms_tags en la parte superior y luego se intercambia {{ form.as_p }} por {{ form|crispy }} . FICHERO: templates/signup.html {% extends 'base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock %} {% block content %} <h2>Sign up</h2> <form method=\"post\"> {% csrf_token %} {{ form|crispy }} <button type=\"submit\">Sign up</button> </form> {% endblock %} Mucho mejor. Aunque, \u00bfqu\u00e9 tal si el bot\u00f3n de \"Registrarse\" fuera un poco m\u00e1s atractivo?\u00bfQuiz\u00e1s hacerlo verde? Bootstrap tiene todo tipo de opciones de estilo de botones donde elegir. Se usar\u00e1 el \"exitoso\" fondo verde con texto blanco. FICHERO: templates/signup.html ... <button class=\"btn btn-success\" type=\"submit\">Sign up</button> ...","title":"11.4. Formulario de inscripci\u00f3n"},{"location":"11_bootstrap/#115-proximos-pasos","text":"El \u00faltimo paso del flujo de autentificaci\u00f3n de usuarios es configurar el cambio y el restablecimiento de la contrase\u00f1a. Una vez m\u00e1s Django se ha encargado del trabajo pesado, as\u00ed que solo se requiere una cantidad m\u00ednima de c\u00f3digo adicional.","title":"11.5. Pr\u00f3ximos pasos"},{"location":"12_cambio_y_restauracion_de_contrasenas/","text":"12. Cambio y Restauraci\u00f3n de Contrase\u00f1as As\u00ed como Django viene con vistas y urls incorporadas para el inicio y cierre de sesi\u00f3n, tambi\u00e9n viene con vistas/urls para el cambio y el restablecimiento de la contrase\u00f1a. 12.1. Cambio de contrase\u00f1a Django proporciona una implementaci\u00f3n predeterminada que ya funciona para este cometido. Para probarlo: Hacer clic en el bot\u00f3n \"Login\" para asegurar que se ha iniciado sesi\u00f3n. Luego navegar a la p\u00e1gina \"Password change\" en http://127.0.0.1:8000/users/password_change/ Introducir la antigua contrase\u00f1a y luego una nueva. Luego hacer clic en el bot\u00f3n \"Change My Password\". Se ser\u00e1 redirigido a la p\u00e1gina \"Password change successful\" ubicada en: http://127.0.0.1:8000/users/password_change/done/. 12.2. Personalizar el cambio de contrase\u00f1a Se van a personalizar estas dos p\u00e1ginas de cambio de contrase\u00f1a para que coincidan con el aspecto y la sensaci\u00f3n del sitio del peri\u00f3dico. Dado que Django ya ha creado las vistas y las URL, s\u00f3lo hay que a\u00f1adir nuevas plantillas. Crear dos nuevos archivos de plantillas en la carpeta de registro. (news) $ touch templates/registration/password_change_form.html (news) $ touch templates/registration/password_change_done.html Actualiza password_change_form.html con el siguiente c\u00f3digo. FICHERO: templates/registration/password_change_form.html {% extends 'base.html' %} {% block title %}Password Change{% endblock %} {% block content %} <h1>Password change</h1> <p>Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que se usan t\u00edtulos \"blocks\" en el archivo base.html se puede prescindir de ellos aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Usando form.as_p estamos simplemente mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de contrase\u00f1a por defecto. Y finalmente incluimos un bot\u00f3n de env\u00edo que usa el estilo btn btn-success de Bootstrap para que sea verde. Lo siguiente es la plantilla password_change_done . FICHERO: templates/registration/password_change_done.html {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} <h1>Password change successful</h1> <p>Your password was changed.</p> {% endblock content %} Tambi\u00e9n se extiende base.html y se incluye un nuevo t\u00edtulo. Sin embargo, no hay ning\u00fan formulario en la p\u00e1gina, s\u00f3lo texto nuevo. La nueva p\u00e1gina est\u00e1 en http://127.0.0.1:8000/users/password_change/done/. 12.3. Restablecer la contrase\u00f1a La \u00fanica configuraci\u00f3n que se requiere es decirle a Django c\u00f3mo enviar los correos electr\u00f3nicos. Despu\u00e9s de todo, un usuario s\u00f3lo puede restablecer una contrase\u00f1a si se tiene acceso al correo electr\u00f3nico vinculado a la cuenta. En la producci\u00f3n se usar\u00e1 el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos, pero para fines de prueba se puede confiar en la configuraci\u00f3n del backend de la consola de Django que env\u00eda el texto del correo electr\u00f3nico a la consola de l\u00ednea de comandos en su lugar. En la parte inferior del archivo settings.py hacer el siguiente cambio de una l\u00ednea. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Listo. Django se encargar\u00e1 del resto. Probar desde http://127.0.0.1:8000/users/password_reset/. Asegurar que la direcci\u00f3n de correo electr\u00f3nico coincida con una de las cuentas de usuario. Una vez enviado, se ser\u00e1 redirigido a la p\u00e1gina de restablecimiento de contrase\u00f1a en http://127.0.0.1:8000/users/password_reset/done/ que informa de que se revise el correo electr\u00f3nico. Ya que se le ha dicho a Django que env\u00ede correos electr\u00f3nicos a la consola de la l\u00ednea de comando, el texto del correo electr\u00f3nico estar\u00e1 ahora all\u00ed. Esto es lo que se muestra por consola: Content-Type: text/plain; charset=\"utf-8\" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Password reset on 127.0.0.1:8000 From: webmaster@localhost To: will@wsvincent.com Date: Thu,22 Mar 2018 20:31:48 -0000 Message-ID: <152175070807.39206.18266082938043731152@1.0.0.127.in-addr.arpa> You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000. Please go to the following page and choose a new password: http://127.0.0.1:8000/user/reset/MQ/4up-678712c114db2ead7780/ Your username, in case you've forgotten: wsv Thanks for using our site! The 127.0.0.1:8000 team El texto del correo electr\u00f3nico debe ser id\u00e9ntico excepto por tres l\u00edneas: - El \"To:\" en la sexta l\u00ednea contiene la direcci\u00f3n de correo electr\u00f3nico del usuario - El enlace URL contiene una se\u00f1al segura que Django genera aleatoriamente y puede ser usada s\u00f3lo una vez - Django recuerda amablemente el nombre de usuario El enlace proporcionado: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/, conduce a la \"change password page\". Introducir una nueva contrase\u00f1a y hacer clic en el bot\u00f3n \"Change my password\". El paso final es ser redirigido a la p\u00e1gina de \"Password reset complete\". Comprobar que todo ha funcionado, hacer clic en el enlace \"Login\" y usar la nueva contrase\u00f1a. 12.4. Plantillas personalizadas S\u00f3lo hay que crear nuevas plantillas para personalizar el aspecto y la sensaci\u00f3n del restablecimiento de la contrase\u00f1a. Crear cuatro nuevos archivos de plantilla: (news) $ touch templates/registration/password_reset_form.html (news) $ touch templates/registration/password_reset_done.html (news) $ touch templates/registration/password_reset_confirm.html (news) $ touch templates/registration/password_reset_complete.html Se empieza con el formulario de restablecimiento de contrase\u00f1a que es password_reset_form.html . FICHERO: templates/registration/password_reset_form.html {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} <h1>Forgot your password?</h1> <p>Enter your email address below, and we'll email instructions for setting a new one.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Send me instructions!\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que usamos t\u00edtulos \"block\" en el base.html se pueden anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Al usar form.as_p simplemente se est\u00e1 mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de la contrase\u00f1a predeterminada. Finalmente se incluye un enviar el bot\u00f3n y se usa el estilo de Bootstrap btn btn-success para hacerlo verde. Ahora se puede actualizar las otras tres p\u00e1ginas. Cada una tiene la misma forma de extender base.html , un nuevo t\u00edtulo, un nuevo texto de contenido, y para \"password reset confirm\" una actualizaci\u00f3n tambi\u00e9n. FICHERO: templates/registration/password_reset_done.html {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} <h1>Check your inbox.</h1> <p>We've emailed you instructions for setting your password. You should receive the email shortly!</p> {% endblock %} Confirmar los cambios en http://127.0.0.1:8000/users/password_reset/done/ A continuaci\u00f3n, la p\u00e1gina de confirmaci\u00f3n del restablecimiento de la contrase\u00f1a. FICHERO: templates/registration/password_reset_confirm.html {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} <h1>Set a new password!</h1> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} Abrir la linea de comandos y tomar el enlace URL del correo electr\u00f3nico enviado a la consola. Finalmente aqu\u00ed est\u00e1 el c\u00f3digo completo para reestablecer el password. FICHERO: templates/registration/password_reset_complete.html {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} <h1>Password reset complete</h1> <p>Your new password has been set. You can log in now on the <a href=\"{% url 'login' %}\">log in page</a>.</p> {% endblock %} 12.5. Conclusi\u00f3n En el pr\u00f3ximo cap\u00edtulo se conectar\u00e1 Newspaper con el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos automatizados a los usuarios, en lugar de emitirlos en la consola de l\u00ednea de comandos.","title":"12. Cambio y Restauraci\u00f3n de Contrase\u00f1as"},{"location":"12_cambio_y_restauracion_de_contrasenas/#12-cambio-y-restauracion-de-contrasenas","text":"As\u00ed como Django viene con vistas y urls incorporadas para el inicio y cierre de sesi\u00f3n, tambi\u00e9n viene con vistas/urls para el cambio y el restablecimiento de la contrase\u00f1a.","title":"12. Cambio y Restauraci\u00f3n de Contrase\u00f1as"},{"location":"12_cambio_y_restauracion_de_contrasenas/#121-cambio-de-contrasena","text":"Django proporciona una implementaci\u00f3n predeterminada que ya funciona para este cometido. Para probarlo: Hacer clic en el bot\u00f3n \"Login\" para asegurar que se ha iniciado sesi\u00f3n. Luego navegar a la p\u00e1gina \"Password change\" en http://127.0.0.1:8000/users/password_change/ Introducir la antigua contrase\u00f1a y luego una nueva. Luego hacer clic en el bot\u00f3n \"Change My Password\". Se ser\u00e1 redirigido a la p\u00e1gina \"Password change successful\" ubicada en: http://127.0.0.1:8000/users/password_change/done/.","title":"12.1. Cambio de contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#122-personalizar-el-cambio-de-contrasena","text":"Se van a personalizar estas dos p\u00e1ginas de cambio de contrase\u00f1a para que coincidan con el aspecto y la sensaci\u00f3n del sitio del peri\u00f3dico. Dado que Django ya ha creado las vistas y las URL, s\u00f3lo hay que a\u00f1adir nuevas plantillas. Crear dos nuevos archivos de plantillas en la carpeta de registro. (news) $ touch templates/registration/password_change_form.html (news) $ touch templates/registration/password_change_done.html Actualiza password_change_form.html con el siguiente c\u00f3digo. FICHERO: templates/registration/password_change_form.html {% extends 'base.html' %} {% block title %}Password Change{% endblock %} {% block content %} <h1>Password change</h1> <p>Please enter your old password, for security's sake, and then enter your new password twice so we can verify you typed it in correctly.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que se usan t\u00edtulos \"blocks\" en el archivo base.html se puede prescindir de ellos aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Usando form.as_p estamos simplemente mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de contrase\u00f1a por defecto. Y finalmente incluimos un bot\u00f3n de env\u00edo que usa el estilo btn btn-success de Bootstrap para que sea verde. Lo siguiente es la plantilla password_change_done . FICHERO: templates/registration/password_change_done.html {% extends 'base.html' %} {% block title %}Password Change Successful{% endblock %} {% block content %} <h1>Password change successful</h1> <p>Your password was changed.</p> {% endblock content %} Tambi\u00e9n se extiende base.html y se incluye un nuevo t\u00edtulo. Sin embargo, no hay ning\u00fan formulario en la p\u00e1gina, s\u00f3lo texto nuevo. La nueva p\u00e1gina est\u00e1 en http://127.0.0.1:8000/users/password_change/done/.","title":"12.2. Personalizar el cambio de contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#123-restablecer-la-contrasena","text":"La \u00fanica configuraci\u00f3n que se requiere es decirle a Django c\u00f3mo enviar los correos electr\u00f3nicos. Despu\u00e9s de todo, un usuario s\u00f3lo puede restablecer una contrase\u00f1a si se tiene acceso al correo electr\u00f3nico vinculado a la cuenta. En la producci\u00f3n se usar\u00e1 el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos, pero para fines de prueba se puede confiar en la configuraci\u00f3n del backend de la consola de Django que env\u00eda el texto del correo electr\u00f3nico a la consola de l\u00ednea de comandos en su lugar. En la parte inferior del archivo settings.py hacer el siguiente cambio de una l\u00ednea. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Listo. Django se encargar\u00e1 del resto. Probar desde http://127.0.0.1:8000/users/password_reset/. Asegurar que la direcci\u00f3n de correo electr\u00f3nico coincida con una de las cuentas de usuario. Una vez enviado, se ser\u00e1 redirigido a la p\u00e1gina de restablecimiento de contrase\u00f1a en http://127.0.0.1:8000/users/password_reset/done/ que informa de que se revise el correo electr\u00f3nico. Ya que se le ha dicho a Django que env\u00ede correos electr\u00f3nicos a la consola de la l\u00ednea de comando, el texto del correo electr\u00f3nico estar\u00e1 ahora all\u00ed. Esto es lo que se muestra por consola: Content-Type: text/plain; charset=\"utf-8\" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Password reset on 127.0.0.1:8000 From: webmaster@localhost To: will@wsvincent.com Date: Thu,22 Mar 2018 20:31:48 -0000 Message-ID: <152175070807.39206.18266082938043731152@1.0.0.127.in-addr.arpa> You're receiving this email because you requested a password reset for your user account at 127.0.0.1:8000. Please go to the following page and choose a new password: http://127.0.0.1:8000/user/reset/MQ/4up-678712c114db2ead7780/ Your username, in case you've forgotten: wsv Thanks for using our site! The 127.0.0.1:8000 team El texto del correo electr\u00f3nico debe ser id\u00e9ntico excepto por tres l\u00edneas: - El \"To:\" en la sexta l\u00ednea contiene la direcci\u00f3n de correo electr\u00f3nico del usuario - El enlace URL contiene una se\u00f1al segura que Django genera aleatoriamente y puede ser usada s\u00f3lo una vez - Django recuerda amablemente el nombre de usuario El enlace proporcionado: http://127.0.0.1:8000/users/reset/MQ/4up-678712c114db2ead7780/, conduce a la \"change password page\". Introducir una nueva contrase\u00f1a y hacer clic en el bot\u00f3n \"Change my password\". El paso final es ser redirigido a la p\u00e1gina de \"Password reset complete\". Comprobar que todo ha funcionado, hacer clic en el enlace \"Login\" y usar la nueva contrase\u00f1a.","title":"12.3. Restablecer la contrase\u00f1a"},{"location":"12_cambio_y_restauracion_de_contrasenas/#124-plantillas-personalizadas","text":"S\u00f3lo hay que crear nuevas plantillas para personalizar el aspecto y la sensaci\u00f3n del restablecimiento de la contrase\u00f1a. Crear cuatro nuevos archivos de plantilla: (news) $ touch templates/registration/password_reset_form.html (news) $ touch templates/registration/password_reset_done.html (news) $ touch templates/registration/password_reset_confirm.html (news) $ touch templates/registration/password_reset_complete.html Se empieza con el formulario de restablecimiento de contrase\u00f1a que es password_reset_form.html . FICHERO: templates/registration/password_reset_form.html {% extends 'base.html' %} {% block title %}Forgot Your Password?{% endblock %} {% block content %} <h1>Forgot your password?</h1> <p>Enter your email address below, and we'll email instructions for setting a new one.</p> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Send me instructions!\"> </form> {% endblock %} En la parte superior se extiende base.html y se fija el t\u00edtulo de la p\u00e1gina. Debido a que usamos t\u00edtulos \"block\" en el base.html se pueden anular aqu\u00ed. El formulario usa POST ya que se est\u00e1n enviando datos y un csrf_token por razones de seguridad. Al usar form.as_p simplemente se est\u00e1 mostrando en p\u00e1rrafos el contenido del formulario de restablecimiento de la contrase\u00f1a predeterminada. Finalmente se incluye un enviar el bot\u00f3n y se usa el estilo de Bootstrap btn btn-success para hacerlo verde. Ahora se puede actualizar las otras tres p\u00e1ginas. Cada una tiene la misma forma de extender base.html , un nuevo t\u00edtulo, un nuevo texto de contenido, y para \"password reset confirm\" una actualizaci\u00f3n tambi\u00e9n. FICHERO: templates/registration/password_reset_done.html {% extends 'base.html' %} {% block title %}Email Sent{% endblock %} {% block content %} <h1>Check your inbox.</h1> <p>We've emailed you instructions for setting your password. You should receive the email shortly!</p> {% endblock %} Confirmar los cambios en http://127.0.0.1:8000/users/password_reset/done/ A continuaci\u00f3n, la p\u00e1gina de confirmaci\u00f3n del restablecimiento de la contrase\u00f1a. FICHERO: templates/registration/password_reset_confirm.html {% extends 'base.html' %} {% block title %}Enter new password{% endblock %} {% block content %} <h1>Set a new password!</h1> <form method=\"POST\"> {% csrf_token %} {{ form.as_p }} <input class=\"btn btn-success\" type=\"submit\" value=\"Change my password\"> </form> {% endblock %} Abrir la linea de comandos y tomar el enlace URL del correo electr\u00f3nico enviado a la consola. Finalmente aqu\u00ed est\u00e1 el c\u00f3digo completo para reestablecer el password. FICHERO: templates/registration/password_reset_complete.html {% extends 'base.html' %} {% block title %}Password reset complete{% endblock %} {% block content %} <h1>Password reset complete</h1> <p>Your new password has been set. You can log in now on the <a href=\"{% url 'login' %}\">log in page</a>.</p> {% endblock %}","title":"12.4. Plantillas personalizadas"},{"location":"12_cambio_y_restauracion_de_contrasenas/#125-conclusion","text":"En el pr\u00f3ximo cap\u00edtulo se conectar\u00e1 Newspaper con el servicio de correo electr\u00f3nico SendGrid para enviar realmente los correos electr\u00f3nicos automatizados a los usuarios, en lugar de emitirlos en la consola de l\u00ednea de comandos.","title":"12.5. Conclusi\u00f3n"},{"location":"13_email/","text":"13. Correo electr\u00f3nico Ahora se quiere que los correos electr\u00f3nicos se env\u00eden realmente a los usuarios, no s\u00f3lo a la consola de l\u00ednea de comandos. Se precisa de una SendGrid y actualizar los archivos settings.py . Django se encargar\u00e1 del resto. 13.1. SendGrid SendGrid es un servicio popular para el env\u00edo de e-mails transaccionales. A Django no le importa el servicio que se elija; se puede usar tambi\u00e9n MailGun o cualquier otro servicio con la misma facilidad. En la p\u00e1gina de inicio de SendGrid , hacer clic en \" Start for Free \". Registrarse para obtener su cuenta gratuita en la siguiente p\u00e1gina. Asegurarse de que la cuenta de correo electr\u00f3nico que se utiliza para SendGrid no sea la misma cuenta de correo electr\u00f3nico que se tiene para la cuenta de superusuario en el proyecto de Newspaper o pueden suceder errores extra\u00f1os. Luego de confirmar la nueva cuenta a trav\u00e9s de un correo electr\u00f3nico, se pedir\u00e1 que se ingrese y nos llevar\u00e1 a la p\u00e1gina del panel de control de SendGrid . Ahora podemos configurar el c\u00f3digo Django en el archivo settings.py . Primero se actualizar\u00e1 el backend de correo electr\u00f3nico para usar SMTP. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Luego, justo debajo, agregar las siguientes cinco l\u00edneas de configuraci\u00f3n de correo electr\u00f3nico. Tener en cuenta que lo ideal ser\u00eda almacenar informaci\u00f3n segura como la contrase\u00f1a en variables de entorno, pero no estamos aqu\u00ed para mantener las cosas simples. FICHERO: newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = 587 EMAIL_USE_TLS = True Aseg\u00fararse de usar el nombre de usuario SendGrid para EMAIL_HOST_USER y la contrase\u00f1a de EMAIL_HOST_PASSWORD. Eso es todo. 13.2. Correos electr\u00f3nicos personalizados Utilizar la barra de b\u00fasqueda de Github e introducir algunas palabras del texto del correo electr\u00f3nico. Si se escribe \"You're receiving this email because\" se terminar\u00e1 en una p\u00e1gina muy concreta de Github. El primer resultado es el que se desea. Muestra que el c\u00f3digo se encuentra en django/contrib/admin/templates/registration/password_reset_email.html . Eso significa que en la app contrib el archivo que queremos se llama password_reset_email.html . Aqu\u00ed est\u00e1 el texto por defecto del c\u00f3digo fuente de Django. {% load i18n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Para cambiarlo, se necesita crear un nuevo archivo password_reset_email.html en la carpeta registration . (news) $ touch templates/registration/password_reset_email.html Usar el siguiente c\u00f3digo que ajusta lo que Django proporcion\u00f3 por defecto. FICHERO: templates/registration/password_reset_email.html {% load i18n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make this request, you can safely ignore this email. Otherwise, click the button below to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% endautoescape %} Arriba se carga la etiqueta de la plantilla i18n lo que significa que este texto puede ser traducido a varios idiomas. Django tiene un s\u00f3lido soporte de internacionalizaci\u00f3n aunque cubrirlo est\u00e1 fuera de nuestro alcance, por ahora. Se saluda al usuario por su nombre gracias a user.get_username . Luego se usa el bloque reset_link incorporado para incluir el enlace URL personalizado. Tambi\u00e9n se actualiza el t\u00edtulo del asunto del correo electr\u00f3nico. Para ello, se crea un nuevo archivo templates/registration/password_reset_subject.txt . (news) $ touch templates/registration/password_reset_subject.txt Luego agregar la siguiente l\u00ednea de c\u00f3digo al archivo password_reset_subject.txt . Please reset your password 13.3. Conclusi\u00f3n Se ha terminado de implementar un flujo de autenticaci\u00f3n de usuario completo. Los usuarios pueden ingresar una nueva cuenta, iniciar sesi\u00f3n, cerrar sesi\u00f3n, cambiar contrase\u00f1a y restablecerla. Documentaci\u00f3n Django Env\u00edo de emails Aunque Python proporciona una interfaz de env\u00edo de correo a trav\u00e9s del m\u00f3dulo smtplib , Django proporciona un par de wrappers ligeros que lo recubren. Estos wrappers se proporcionan para hacer el env\u00edo de correo electr\u00f3nico de forma extra r\u00e1pida, para ayudar a probar el env\u00edo de correo electr\u00f3nico durante el desarrollo y para proporcionar apoyo a las plataformas que no pueden utilizar SMTP. El c\u00f3digo vive en el m\u00f3dulo django.core.mail . Ejemplo r\u00e1pido En dos l\u00edneas: from django.core.mail import send_mail send_mail( 'Subject here', 'Here is the message.', 'from@example.com', ['to@example.com'], fail_silently=False, ) El correo se env\u00eda usando el host SMTP y el puerto especificado en los ajustes EMAIL_HOST y EMAIL_PORT . Los ajustes EMAIL_HOST_USER y EMAIL_HOST_PASSWORD , si est\u00e1n configurados, se utilizan para autenticarse en el servidor SMTP, y los ajustes EMAIL_USE_TLS y EMAIL_USE_SSL controlan si se utiliza una conexi\u00f3n segura. Nota El conjunto de caracteres del correo electr\u00f3nico enviado con django.core.mail se ajustar\u00e1 al valor ajustado en DEFAULT_CHARSET . send_mail() send_mail`(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None, html_message=None En la mayor\u00eda de los casos, se puede enviar un correo electr\u00f3nico usando django.core.mail.send_mail() . Se requieren los par\u00e1metros \"subject\", \"message\", \"from_email\" y \"recipient_list\". subject : Una cadena. message : Una cadena. from_email : Una cadena. recipient_list : Una lista de cadenas, cada una con una direcci\u00f3n de correo electr\u00f3nico. Cada miembro de la lista de recipientes ver\u00e1 a los dem\u00e1s destinatarios en el campo \"From:\" del mensaje de correo electr\u00f3nico. fail_silently : Un booleano. Cuando es False , send_mail() levantar\u00e1 una smtplib.SMTPException si ocurre un error. Consultar los documentos de smtplib para ver una lista de posibles excepciones, todas ellas subclases de SMTPException . auth_user : El nombre de usuario opcional a usar para autenticarse en el servidor SMTP. Si no se proporciona, Django usar\u00e1 el valor del par\u00e1metro EMAIL_HOST_USER . auth_password : La contrase\u00f1a opcional a utilizar para autenticarse en el servidor SMTP. Si no se proporciona, Django utilizar\u00e1 el valor del par\u00e1metro EMAIL_HOST_PASSWORD . connection : El backend opcional de correo electr\u00f3nico a utilizar para enviar el correo. Si no se especifica, se usar\u00e1 una instancia del backend por defecto. Ver la documentaci\u00f3n en Email backends para m\u00e1s detalles. html_message : Si se proporciona html_message , el correo electr\u00f3nico resultante ser\u00e1 un correo electr\u00f3nico multiparte/alternativo con message como tipo de contenido texto/plano y html_message como tipo de contenido texto/html . El valor de retorno ser\u00e1 el n\u00famero de mensajes entregados con \u00e9xito (que puede ser 0 o 1 ya que s\u00f3lo se puede enviar un mensaje). send_mass_mail() send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None) django.core.mail.send_mass_mail() est\u00e1 pensado para manejar el env\u00edo masivo de correo electr\u00f3nico. datatuple es una tupla en la que cada elemento est\u00e1 en este formato: ```\ufffc (subject, message, from_email, recipient_list) `fail_silently`, `auth_user` y `auth_password` tienen las mismas funciones que en `send_mail()`. Cada elemento separado del `datatuple` resulta en un mensaje de correo electr\u00f3nico separado. Al igual que en `send_mail()`, los destinatarios de la misma lista de destinatarios ver\u00e1n todas las dem\u00e1s direcciones en el campo \"To:\" de los mensajes de correo electr\u00f3nico. Por ejemplo, el siguiente c\u00f3digo enviar\u00eda dos mensajes diferentes a dos conjuntos de destinatarios diferentes; sin embargo, s\u00f3lo se abrir\u00eda una conexi\u00f3n con el servidor de correo: ```python mensaje1 = ('Subject here', 'Here is the message', 'from@example.com', ['first@example.com', 'other@example.com']) message2 = ('Another Subject', 'Here is another message', 'from@example.com', ['second@test.com']) send_mass_mail((mensaje1, mensaje2), fail_silently=False) El valor de retorno ser\u00e1 el n\u00famero de mensajes entregados con \u00e9xito. send_mass_mail() vs. send_mail() La principal diferencia entre send_mass_mail() y send_mail() es que send_mail() abre una conexi\u00f3n al servidor de correo cada vez que se ejecuta, mientras que send_mass_mail() utiliza una \u00fanica conexi\u00f3n para todos sus mensajes. Esto hace que send_mass_mail() sea ligeramente m\u00e1s eficiente. mail_admins() mail_admins(subject, message, fail_silently=Falso, connection=None, html_message=None) mail_admins() mail_admins`(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*) django.core.mail.mail_admins() es un atajo para enviar un correo electr\u00f3nico a los administradores del sitio, como se define en la configuraci\u00f3n de ADMINS. mail_admins() antepone al asunto el valor del ajuste EMAIL_SUBJECT_PREFIX , que es [Django] por defecto. El encabezado \"From:\" del correo electr\u00f3nico ser\u00e1 el valor del ajuste SERVER_EMAIL . Este m\u00e9todo existe por conveniencia y legibilidad. Si se proporciona html_message , el correo electr\u00f3nico resultante ser\u00e1 un correo electr\u00f3nico multiparte/alternativo con el mensaje de tipo text/plain y html_message de tipo text/html. mail_managers() mail_managers(subject, message, fail_silently=Falso, connection=None, html_message=None) django.core.mail.mail_managers() es igual que mail_admins() , excepto que env\u00eda un correo electr\u00f3nico a los administradores del sitio, como se define en la configuraci\u00f3n MANAGERS . Ejemplos Esto env\u00eda un solo correo electr\u00f3nico a john@example.com y jane@example.com, y ambos aparecen en el \"Para:'': send_mail( \"Sujeto\", \"Mensaje\", 'from@example.com', ['john@example.com', 'jane@example.com'], ) Esto env\u00eda un mensaje a john@example.com y jane@example.com, y ambos reciben un correo electr\u00f3nico separado: \ufffc```python datatuple = (('Asunto', 'Mensaje', 'from@example.com', ['john@example.com']), ('Asunto', 'Mensaje', 'from@example.com', ['jane@example.com']),) send_mass_mail(datatuple) Prevenir la inyecci\u00f3n en la cabeza... La inyecci\u00f3n de cabeceras es un exploit de seguridad en el que un atacante inserta cabeceras de correo electr\u00f3nico adicionales para controlar el \"Para:\" y \"Desde:\" en los mensajes de correo electr\u00f3nico que sus scripts generan. Las funciones de correo electr\u00f3nico de Django descritas anteriormente protegen contra la inyecci\u00f3n de encabezado prohibiendo las nuevas l\u00edneas en los valores de los encabezados. Si alg\u00fan asunto, from_email o recipient_list contiene una nueva l\u00ednea (ya sea en estilo Unix, Windows o Mac), la funci\u00f3n de correo electr\u00f3nico (p. ej., send_mail()) elevar\u00e1 django.core.mail.BadHeaderError (una subclase de ValueError) y, por lo tanto, no enviar\u00e1 el correo electr\u00f3nico. Es tu responsabilidad validar todos los datos antes de pasarlos a las funciones de correo electr\u00f3nico. Si un mensaje contiene cabeceras al principio de la cadena, las cabeceras se imprimir\u00e1n como el primer bit del mensaje de correo electr\u00f3nico. Aqu\u00ed hay una vista de ejemplo que toma un asunto, mensaje y from_email de los datos POST de la solicitud, lo env\u00eda a admin@example.com y lo redirige a \"/contacto/gracias/\" cuando est\u00e1 hecho: \ufffc desde django.core.mail importar BadHeaderError, send_mail de django.http import HttpResponse, HttpResponseRedirect def send_email(request): subject = request.POST.get('subject', '') mensaje = request.POST.get('mensaje', '') from_email = request.POST.get('from_email', '') si el asunto y el mensaje y from_email: Int\u00e9ntalo: send_mail(subject, message, from_email, ['admin@example.com']) excepto BadHeaderError: devuelve HttpResponse('Cabecera inv\u00e1lida encontrada'). return HttpResponseRedirect('/contacto/gracias/') ...sino..: # En realidad usar\u00edamos una clase de forma # para obtener los errores de validaci\u00f3n adecuados. devuelve HttpResponse('Aseg\u00farate de que todos los campos est\u00e1n introducidos y son v\u00e1lidos') La clase EmailMessage\u00b6 Las funciones send_mail() y send_mass_mail() de Django son en realidad envoltorios delgados que hacen uso de la clase EmailMessage. No todas las caracter\u00edsticas de la clase EmailMessage est\u00e1n disponibles a trav\u00e9s de las funciones send_mail() y las funciones de envoltura relacionadas. Si desea utilizar funciones avanzadas, como destinatarios CCO, archivos adjuntos o correo electr\u00f3nico de varias partes, deber\u00e1 crear instancias de EmailMessage directamente. Nota Esto es...`nd_mass_mail()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#send-mass-mail) - `send_mass_mail`(*datatuple*, *fail_silently=False*, *auth_user=None*, *auth_password=None*, *connection=None*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#send_mass_mail)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) `django.core.mail.send_mass_mail()` is intended to handle mass emailing. `datatuple` is a tuple in which each element is in this format: (subject, message, from_email, recipient_list) `fail_silently`, `auth_user` and `auth_password` have the same functions as in [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail). Each separate element of `datatuple` results in a separate email message. As in [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail), recipients in the same `recipient_list` will all see the other addresses in the email messages\u201d \u00abTo:\u00bb field. For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened: message1 = ('Subject here', 'Here is the message', 'from@example.com', ['first@example.com', 'other@example.com']) message2 = ('Another Subject', 'Here is another message', 'from@example.com', ['second@test.com']) send_mass_mail((message1, message2), fail_silently=False) The return value will be the number of successfully delivered messages. ### `send_mass_mail()` vs. `send_mail()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#send-mass-mail-vs-send-mail) The main difference between [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) and [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) is that [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) opens a connection to the mail server each time it\u2019s executed, while [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) uses a single connection for all of its messages. This makes [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) slightly more efficient. ## `mail_admins()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#mail-admins) - `mail_admins`(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#mail_admins)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.mail_admins) `django.core.mail.mail_admins()` is a shortcut for sending an email to the site admins, as defined in the [`ADMINS`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-ADMINS) setting. `mail_admins()` prefixes the subject with the value of the [`EMAIL_SUBJECT_PREFIX`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_SUBJECT_PREFIX) setting, which is `\"[Django] \"` by default. The \u00abFrom:\u00bb header of the email will be the value of the [`SERVER_EMAIL`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-SERVER_EMAIL) setting. This method exists for convenience and readability. If `html_message` is provided, the resulting email will be a *multipart/alternative* email with `message` as the *text/plain* content type and `html_message` as the *text/html* content type. ## `mail_managers()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#mail-managers) - `mail_managers`(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#mail_managers)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.mail_managers) `django.core.mail.mail_managers()` is just like `mail_admins()`, except it sends an email to the site managers, as defined in the [`MANAGERS`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-MANAGERS) setting. ## Examples[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#examples) This sends a single email to [john@example.com](mailto:john%40example.com) and [jane@example.com](mailto:jane%40example.com), with them both appearing in the \u00abTo:\u00bb: send_mail( 'Subject', 'Message.', 'from@example.com', ['john@example.com', 'jane@example.com'], ) This sends a message to [john@example.com](mailto:john%40example.com) and [jane@example.com](mailto:jane%40example.com), with them both receiving a separate email: datatuple = ( ('Subject', 'Message.', 'from@example.com', ['john@example.com']), ('Subject', 'Message.', 'from@example.com', ['jane@example.com']), ) send_mass_mail(datatuple) ## Preventing header injection[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#preventing-header-injection) [Header injection](http://www.nyphp.org/phundamentals/8_Preventing-Email-Header-Injection) is a security exploit in which an attacker inserts extra email headers to control the \u00abTo:\u00bb and \u00abFrom:\u00bb in email messages that your scripts generate. The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any `subject`, `from_email` or `recipient_list` contains a newline (in either Unix, Windows or Mac style), the email function (e.g. [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail)) will raise `django.core.mail.BadHeaderError` (a subclass of `ValueError`) and, hence, will not send the email. It\u2019s your responsibility to validate all data before passing it to the email functions. If a `message` contains headers at the start of the string, the headers will be printed as the first bit of the email message. Here\u2019s an example view that takes a `subject`, `message` and `from_email` from the request\u2019s POST data, sends that to [admin@example.com](mailto:admin%40example.com) and redirects to \u00ab/contact/thanks/\u00bb when it\u2019s done: from django.core.mail import BadHeaderError, send_mail from django.http import HttpResponse, HttpResponseRedirect def send_email(request): subject = request.POST.get('subject', '') message = request.POST.get('message', '') from_email = request.POST.get('from_email', '') if subject and message and from_email: try: send_mail(subject, message, from_email, ['admin@example.com']) except BadHeaderError: return HttpResponse('Invalid header found.') return HttpResponseRedirect('/contact/thanks/') else: # In reality we'd use a form class # to get proper validation errors. return HttpResponse('Make sure all fields are entered and valid.') ## The `EmailMessage` class[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#the-emailmessage-class) Django\u2019s [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) and [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) functions are actually thin wrappers that make use of the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class. Not all features of the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class are available through the [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) and related wrapper functions. If you wish to use advanced features, such as BCC\u2019ed recipients, file attachments, or multi-part email, you\u2019ll need to create [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instances directly. Nota This is a design feature. [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility. [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) is responsible for creating the email message itself. The [email backend](https://docs.djangoproject.com/es/3.0/topics/email/#topic-email-backends) is then responsible for sending the email. For convenience, [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) provides a `send()` method for sending a single email. If you need to send multiple messages, the email backend API [provides an alternative](https://docs.djangoproject.com/es/3.0/topics/email/#topics-sending-multiple-emails). ### `EmailMessage` Objects[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#emailmessage-objects) - *class* `EmailMessage`[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/message/#EmailMessage)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) The [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the `send()` method. - `subject`: The subject line of the email. - `body`: The body text. This should be a plain text message. - `from_email`: The sender\u2019s address. Both `fred@example.com` and `\"Fred\" ` forms are legal. If omitted, the [`DEFAULT_FROM_EMAIL`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-DEFAULT_FROM_EMAIL) setting is used. - `to`: A list or tuple of recipient addresses. - `bcc`: A list or tuple of addresses used in the \u00abBcc\u00bb header when sending the email. - `connection`: An email backend instance. Use this parameter if you want to use the same connection for multiple messages. If omitted, a new connection is created when `send()` is called. - `attachments`: A list of attachments to put on the message. These can be either [`MIMEBase`](https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase) instances, or `(filename, content, mimetype)` triples. - `headers`: A dictionary of extra headers to put on the message. The keys are the header name, values are the header values. It\u2019s up to the caller to ensure header names and values are in the correct format for an email message. The corresponding attribute is `extra_headers`. - `cc`: A list or tuple of recipient addresses used in the \u00abCc\u00bb header when sending the email. - `reply_to`: A list or tuple of recipient addresses used in the \u00abReply-To\u00bb header when sending the email. For example: from django.core.mail import EmailMessage email = EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to1@example.com', 'to2@example.com'], ['bcc@example.com'], reply_to=['another@example.com'], headers={'Message-ID': 'foo'}, ) The class has the following methods: - `send(fail_silently=False)` sends the message. If a connection was specified when the email was constructed, that connection will be used. Otherwise, an instance of the default backend will be instantiated and used. If the keyword argument `fail_silently` is `True`, exceptions raised while sending the message will be quashed. An empty list of recipients will not raise an exception. - `message()` constructs a `django.core.mail.SafeMIMEText` object (a subclass of Python\u2019s [`MIMEText`](https://docs.python.org/3/library/email.mime.html#email.mime.text.MIMEText) class) or a `django.core.mail.SafeMIMEMultipart` object holding the message to be sent. If you ever need to extend the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class, you\u2019ll probably want to override this method to put the content you want into the MIME object. - `recipients()` returns a list of all the recipients of the message, whether they\u2019re recorded in the `to`, `cc` or `bcc` attributes. This is another method you might need to override when subclassing, because the SMTP server needs to be told the full list of recipients when the message is sent. If you add another way to specify recipients in your class, they need to be returned from this method as well. - `attach()` creates a new file attachment and adds it to the message. There are two ways to call `attach()`: - You can pass it a single argument that is a [`MIMEBase`](https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase) instance. This will be inserted directly into the resulting message. - Alternatively, you can pass `attach()` three arguments: `filename`, `content` and `mimetype`. `filename` is the name of the file attachment as it will appear in the email, `content` is the data that will be contained inside the attachment and `mimetype` is the optional MIME type for the attachment. If you omit `mimetype`, the MIME content type will be guessed from the filename of the attachment. For example: ``` message.attach('design.png', img_data, 'image/png') ``` If you specify a `mimetype` of `message/rfc822`, it will also accept [`django.core.mail.EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) and [`email.message.Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message). For a `mimetype` starting with `text/`, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to `application/octet-stream` and the data will be attached unchanged. In addition, `message/rfc822` attachments will no longer be base64-encoded in violation of [**RFC 2046#section-5.2.1**](https://tools.ietf.org/html/rfc2046.html#section-5.2.1), which can cause issues with displaying the attachments in [Evolution](https://bugzilla.gnome.org/show_bug.cgi?id=651197) and [Thunderbird](https://bugzilla.mozilla.org/show_bug.cgi?id=333880). - `attach_file()` creates a new attachment using a file from your filesystem. Call it with the path of the file to attach and, optionally, the MIME type to use for the attachment. If the MIME type is omitted, it will be guessed from the filename. You can use it like this: ``` message.attach_file('/images/weather_map.png') ``` For MIME types starting with `text/`, binary data is handled as in `attach()`. #### Sending alternative content types[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#sending-alternative-content-types) It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django\u2019s email library, you can do this using the `EmailMultiAlternatives` class. This subclass of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) has an `attach_alternative()` method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage). To send a text and HTML combination, you could write: from django.core.mail import EmailMultiAlternatives subject, from_email, to = 'hello', 'from@example.com', 'to@example.com' text_content = 'This is an important message.' html_content = ' This is an important message. ' msg = EmailMultiAlternatives(subject, text_content, from_email, [to]) msg.attach_alternative(html_content, \"text/html\") msg.send() By default, the MIME type of the `body` parameter in an [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) is `\"text/plain\"`. It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the `content_subtype` attribute on the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class to change the main content type. The major type will always be `\"text\"`, but you can change the subtype. For example: msg = EmailMessage(subject, html_content, from_email, [to]) msg.content_subtype = \"html\" # Main content is now text/html msg.send() ## Email backends[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#email-backends) The actual sending of an email is handled by the email backend. The email backend class has the following methods: - `open()` instantiates a long-lived email-sending connection. - `close()` closes the current email-sending connection. - `send_messages(email_messages)` sends a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) objects. If the connection is not open, this call will implicitly open the connection, and close the connection afterwards. If the connection is already open, it will be left open after mail has been sent. It can also be used as a context manager, which will automatically call `open()` and `close()` as needed: from django.core import mail with mail.get_connection() as connection: mail.EmailMessage( subject1, body1, from1, [to1], connection=connection, ).send() mail.EmailMessage( subject2, body2, from2, [to2], connection=connection, ).send() ### Obtaining an instance of an email backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#obtaining-an-instance-of-an-email-backend) The [`get_connection()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.get_connection) function in `django.core.mail` returns an instance of the email backend that you can use. - `get_connection`(*backend=None*, *fail_silently=False*, **args*, ***kwargs*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#get_connection)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.get_connection) By default, a call to `get_connection()` will return an instance of the email backend specified in [`EMAIL_BACKEND`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_BACKEND). If you specify the `backend` argument, an instance of that backend will be instantiated. The `fail_silently` argument controls how the backend should handle errors. If `fail_silently` is True, exceptions during the email sending process will be silently ignored. All other arguments are passed directly to the constructor of the email backend. Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can [write your own email backend](https://docs.djangoproject.com/es/3.0/topics/email/#topic-custom-email-backend). #### SMTP backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#smtp-backend) - *class* `backends.smtp.``EmailBackend`(*host=None*, *port=None*, *username=None*, *password=None*, *use_tls=None*, *fail_silently=False*, *use_ssl=None*, *timeout=None*, *ssl_keyfile=None*, *ssl_certfile=None*, ***kwargs*)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.backends.smtp.EmailBackend) This is the default backend. Email will be sent through a SMTP server.The value for each argument is retrieved from the matching setting if the argument is `None`:`host`: [`EMAIL_HOST`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_HOST)`port`: [`EMAIL_PORT`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_PORT)`username`: [`EMAIL_HOST_USER`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_HOST_USER)`password`: [`EMAIL_HOST_PASSWORD`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_HOST_PASSWORD)`use_tls`: [`EMAIL_USE_TLS`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_USE_TLS)`use_ssl`: [`EMAIL_USE_SSL`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_USE_SSL)`timeout`: [`EMAIL_TIMEOUT`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_TIMEOUT)`ssl_keyfile`: [`EMAIL_SSL_KEYFILE`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_SSL_KEYFILE)`ssl_certfile`: [`EMAIL_SSL_CERTFILE`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_SSL_CERTFILE)The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings:`EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' `If unspecified, the default `timeout` will be the one provided by [`socket.getdefaulttimeout()`](https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout), which defaults to `None` (no timeout). #### Console backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#console-backend) Instead of sending out real emails the console backend just writes the emails that would be sent to the standard output. By default, the console backend writes to `stdout`. You can use a different stream-like object by providing the `stream` keyword argument when constructing the connection. To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development. #### File backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#file-backend) The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the [`EMAIL_FILE_PATH`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_FILE_PATH) setting or from the `file_path` keyword when creating a connection with [`get_connection()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.get_connection). To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend' EMAIL_FILE_PATH = '/tmp/app-messages' # change this to a proper location This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development. #### In-memory backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#in-memory-backend) The `'locmem'` backend stores messages in a special attribute of the `django.core.mail` module. The `outbox` attribute is created when the first message is sent. It\u2019s a list with an [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instance for each message that would be sent. To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend' This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development and testing. #### Dummy backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#dummy-backend) As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend' This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development. ### Defining a custom email backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#defining-a-custom-email-backend) If you need to change how emails are sent you can write your own email backend. The [`EMAIL_BACKEND`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_BACKEND) setting in your settings file is then the Python import path for your backend class. Custom email backends should subclass `BaseEmailBackend` that is located in the `django.core.mail.backends.base` module. A custom email backend must implement the `send_messages(email_messages)` method. This method receives a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instances and returns the number of successfully delivered messages. If your backend has any concept of a persistent session or connection, you should also implement the `open()` and `close()` methods. Refer to `smtp.EmailBackend` for a reference implementation. ### Sending multiple emails[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#sending-multiple-emails) Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email. There are two ways you tell an email backend to reuse a connection. Firstly, you can use the `send_messages()` method. `send_messages()` takes a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instances (or subclasses), and sends them all using a single connection. For example, if you have a function called `get_notification_email()` that returns a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages: from django.core import mail connection = mail.get_connection() # Use default email connection messages = get_notification_email() connection.send_messages(messages) In this example, the call to `send_messages()` opens a connection on the backend, sends the list of messages, and then closes the connection again. The second approach is to use the `open()` and `close()` methods on the email backend to manually control the connection. `send_messages()` will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example: from django.core import mail connection = mail.get_connection() Manually open the connection connection.open() Construct an email message that uses the connection email1 = mail.EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to1@example.com'], connection=connection, ) email1.send() # Send the email Construct two more messages email2 = mail.EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to2@example.com'], ) email3 = mail.EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to3@example.com'], ) Send the two emails in a single call - connection.send_messages([email2, email3]) The connection was already open so send_messages() doesn't close it. We need to manually close the connection. connection.close() ## Configuring email for development[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#configuring-email-for-development) There are times when you do not want Django to send emails at all. For example, while developing a website, you probably don\u2019t want to send out thousands of emails \u2013 but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content. The easiest way to configure email for local development is to use the [console](https://docs.djangoproject.com/es/3.0/topics/email/#topic-email-console-backend) email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail. The [file](https://docs.djangoproject.com/es/3.0/topics/email/#topic-email-file-backend) email backend can also be useful during development \u2013 this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure. Another approach is to use a \u00abdumb\u00bb SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command: python -m smtpd -n -c DebuggingServer localhost:1025 ``` This command will start a minimal SMTP server listening on port 1025 of localhost. This server prints to standard output all email headers and the email body. You then only need to set the EMAIL_HOST and EMAIL_PORT accordingly. For a more detailed discussion of SMTP server options, see the Python documentation for the smtpd module. For information about unit-testing the sending of emails in your application, see the Email services section of the testing documentation.","title":"13. Email"},{"location":"13_email/#13-correo-electronico","text":"Ahora se quiere que los correos electr\u00f3nicos se env\u00eden realmente a los usuarios, no s\u00f3lo a la consola de l\u00ednea de comandos. Se precisa de una SendGrid y actualizar los archivos settings.py . Django se encargar\u00e1 del resto.","title":"13. Correo electr\u00f3nico"},{"location":"13_email/#131-sendgrid","text":"SendGrid es un servicio popular para el env\u00edo de e-mails transaccionales. A Django no le importa el servicio que se elija; se puede usar tambi\u00e9n MailGun o cualquier otro servicio con la misma facilidad. En la p\u00e1gina de inicio de SendGrid , hacer clic en \" Start for Free \". Registrarse para obtener su cuenta gratuita en la siguiente p\u00e1gina. Asegurarse de que la cuenta de correo electr\u00f3nico que se utiliza para SendGrid no sea la misma cuenta de correo electr\u00f3nico que se tiene para la cuenta de superusuario en el proyecto de Newspaper o pueden suceder errores extra\u00f1os. Luego de confirmar la nueva cuenta a trav\u00e9s de un correo electr\u00f3nico, se pedir\u00e1 que se ingrese y nos llevar\u00e1 a la p\u00e1gina del panel de control de SendGrid . Ahora podemos configurar el c\u00f3digo Django en el archivo settings.py . Primero se actualizar\u00e1 el backend de correo electr\u00f3nico para usar SMTP. FICHERO: newspaper_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' Luego, justo debajo, agregar las siguientes cinco l\u00edneas de configuraci\u00f3n de correo electr\u00f3nico. Tener en cuenta que lo ideal ser\u00eda almacenar informaci\u00f3n segura como la contrase\u00f1a en variables de entorno, pero no estamos aqu\u00ed para mantener las cosas simples. FICHERO: newspaper_project/settings.py EMAIL_HOST = 'smtp.sendgrid.net' EMAIL_HOST_USER = 'sendgrid_username' EMAIL_HOST_PASSWORD = 'sendgrid_password' EMAIL_PORT = 587 EMAIL_USE_TLS = True Aseg\u00fararse de usar el nombre de usuario SendGrid para EMAIL_HOST_USER y la contrase\u00f1a de EMAIL_HOST_PASSWORD. Eso es todo.","title":"13.1. SendGrid"},{"location":"13_email/#132-correos-electronicos-personalizados","text":"Utilizar la barra de b\u00fasqueda de Github e introducir algunas palabras del texto del correo electr\u00f3nico. Si se escribe \"You're receiving this email because\" se terminar\u00e1 en una p\u00e1gina muy concreta de Github. El primer resultado es el que se desea. Muestra que el c\u00f3digo se encuentra en django/contrib/admin/templates/registration/password_reset_email.html . Eso significa que en la app contrib el archivo que queremos se llama password_reset_email.html . Aqu\u00ed est\u00e1 el texto por defecto del c\u00f3digo fuente de Django. {% load i18n %}{% autoescape off %} {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %} {% trans \"Please go to the following page and choose a new password:\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }} {% trans \"Thanks for using our site!\" %} {% blocktrans %}The {{ site_name }} team{% endblocktrans %} {% endautoescape %} Para cambiarlo, se necesita crear un nuevo archivo password_reset_email.html en la carpeta registration . (news) $ touch templates/registration/password_reset_email.html Usar el siguiente c\u00f3digo que ajusta lo que Django proporcion\u00f3 por defecto. FICHERO: templates/registration/password_reset_email.html {% load i18n %}{% autoescape off %} {% trans \"Hi\" %} {{ user.get_username }}, {% trans \"We've received a request to reset your password. If you didn't make this request, you can safely ignore this email. Otherwise, click the button below to reset your password.\" %} {% block reset_link %} {{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %} {% endblock %} {% endautoescape %} Arriba se carga la etiqueta de la plantilla i18n lo que significa que este texto puede ser traducido a varios idiomas. Django tiene un s\u00f3lido soporte de internacionalizaci\u00f3n aunque cubrirlo est\u00e1 fuera de nuestro alcance, por ahora. Se saluda al usuario por su nombre gracias a user.get_username . Luego se usa el bloque reset_link incorporado para incluir el enlace URL personalizado. Tambi\u00e9n se actualiza el t\u00edtulo del asunto del correo electr\u00f3nico. Para ello, se crea un nuevo archivo templates/registration/password_reset_subject.txt . (news) $ touch templates/registration/password_reset_subject.txt Luego agregar la siguiente l\u00ednea de c\u00f3digo al archivo password_reset_subject.txt . Please reset your password","title":"13.2. Correos electr\u00f3nicos personalizados"},{"location":"13_email/#133-conclusion","text":"Se ha terminado de implementar un flujo de autenticaci\u00f3n de usuario completo. Los usuarios pueden ingresar una nueva cuenta, iniciar sesi\u00f3n, cerrar sesi\u00f3n, cambiar contrase\u00f1a y restablecerla.","title":"13.3. Conclusi\u00f3n"},{"location":"13_email/#documentacion-django","text":"","title":"Documentaci\u00f3n Django"},{"location":"13_email/#envio-de-emails","text":"Aunque Python proporciona una interfaz de env\u00edo de correo a trav\u00e9s del m\u00f3dulo smtplib , Django proporciona un par de wrappers ligeros que lo recubren. Estos wrappers se proporcionan para hacer el env\u00edo de correo electr\u00f3nico de forma extra r\u00e1pida, para ayudar a probar el env\u00edo de correo electr\u00f3nico durante el desarrollo y para proporcionar apoyo a las plataformas que no pueden utilizar SMTP. El c\u00f3digo vive en el m\u00f3dulo django.core.mail .","title":"Env\u00edo de emails"},{"location":"13_email/#ejemplo-rapido","text":"En dos l\u00edneas: from django.core.mail import send_mail send_mail( 'Subject here', 'Here is the message.', 'from@example.com', ['to@example.com'], fail_silently=False, ) El correo se env\u00eda usando el host SMTP y el puerto especificado en los ajustes EMAIL_HOST y EMAIL_PORT . Los ajustes EMAIL_HOST_USER y EMAIL_HOST_PASSWORD , si est\u00e1n configurados, se utilizan para autenticarse en el servidor SMTP, y los ajustes EMAIL_USE_TLS y EMAIL_USE_SSL controlan si se utiliza una conexi\u00f3n segura. Nota El conjunto de caracteres del correo electr\u00f3nico enviado con django.core.mail se ajustar\u00e1 al valor ajustado en DEFAULT_CHARSET .","title":"Ejemplo r\u00e1pido"},{"location":"13_email/#send_mail","text":"send_mail`(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None, html_message=None En la mayor\u00eda de los casos, se puede enviar un correo electr\u00f3nico usando django.core.mail.send_mail() . Se requieren los par\u00e1metros \"subject\", \"message\", \"from_email\" y \"recipient_list\". subject : Una cadena. message : Una cadena. from_email : Una cadena. recipient_list : Una lista de cadenas, cada una con una direcci\u00f3n de correo electr\u00f3nico. Cada miembro de la lista de recipientes ver\u00e1 a los dem\u00e1s destinatarios en el campo \"From:\" del mensaje de correo electr\u00f3nico. fail_silently : Un booleano. Cuando es False , send_mail() levantar\u00e1 una smtplib.SMTPException si ocurre un error. Consultar los documentos de smtplib para ver una lista de posibles excepciones, todas ellas subclases de SMTPException . auth_user : El nombre de usuario opcional a usar para autenticarse en el servidor SMTP. Si no se proporciona, Django usar\u00e1 el valor del par\u00e1metro EMAIL_HOST_USER . auth_password : La contrase\u00f1a opcional a utilizar para autenticarse en el servidor SMTP. Si no se proporciona, Django utilizar\u00e1 el valor del par\u00e1metro EMAIL_HOST_PASSWORD . connection : El backend opcional de correo electr\u00f3nico a utilizar para enviar el correo. Si no se especifica, se usar\u00e1 una instancia del backend por defecto. Ver la documentaci\u00f3n en Email backends para m\u00e1s detalles. html_message : Si se proporciona html_message , el correo electr\u00f3nico resultante ser\u00e1 un correo electr\u00f3nico multiparte/alternativo con message como tipo de contenido texto/plano y html_message como tipo de contenido texto/html . El valor de retorno ser\u00e1 el n\u00famero de mensajes entregados con \u00e9xito (que puede ser 0 o 1 ya que s\u00f3lo se puede enviar un mensaje).","title":"send_mail()"},{"location":"13_email/#send_mass_mail","text":"send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None) django.core.mail.send_mass_mail() est\u00e1 pensado para manejar el env\u00edo masivo de correo electr\u00f3nico. datatuple es una tupla en la que cada elemento est\u00e1 en este formato: ```\ufffc (subject, message, from_email, recipient_list) `fail_silently`, `auth_user` y `auth_password` tienen las mismas funciones que en `send_mail()`. Cada elemento separado del `datatuple` resulta en un mensaje de correo electr\u00f3nico separado. Al igual que en `send_mail()`, los destinatarios de la misma lista de destinatarios ver\u00e1n todas las dem\u00e1s direcciones en el campo \"To:\" de los mensajes de correo electr\u00f3nico. Por ejemplo, el siguiente c\u00f3digo enviar\u00eda dos mensajes diferentes a dos conjuntos de destinatarios diferentes; sin embargo, s\u00f3lo se abrir\u00eda una conexi\u00f3n con el servidor de correo: ```python mensaje1 = ('Subject here', 'Here is the message', 'from@example.com', ['first@example.com', 'other@example.com']) message2 = ('Another Subject', 'Here is another message', 'from@example.com', ['second@test.com']) send_mass_mail((mensaje1, mensaje2), fail_silently=False) El valor de retorno ser\u00e1 el n\u00famero de mensajes entregados con \u00e9xito.","title":"send_mass_mail()"},{"location":"13_email/#send_mass_mail-vs-send_mail","text":"La principal diferencia entre send_mass_mail() y send_mail() es que send_mail() abre una conexi\u00f3n al servidor de correo cada vez que se ejecuta, mientras que send_mass_mail() utiliza una \u00fanica conexi\u00f3n para todos sus mensajes. Esto hace que send_mass_mail() sea ligeramente m\u00e1s eficiente. mail_admins() mail_admins(subject, message, fail_silently=Falso, connection=None, html_message=None)","title":"send_mass_mail() vs. send_mail()"},{"location":"13_email/#mail_admins","text":"mail_admins`(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*) django.core.mail.mail_admins() es un atajo para enviar un correo electr\u00f3nico a los administradores del sitio, como se define en la configuraci\u00f3n de ADMINS. mail_admins() antepone al asunto el valor del ajuste EMAIL_SUBJECT_PREFIX , que es [Django] por defecto. El encabezado \"From:\" del correo electr\u00f3nico ser\u00e1 el valor del ajuste SERVER_EMAIL . Este m\u00e9todo existe por conveniencia y legibilidad. Si se proporciona html_message , el correo electr\u00f3nico resultante ser\u00e1 un correo electr\u00f3nico multiparte/alternativo con el mensaje de tipo text/plain y html_message de tipo text/html.","title":"mail_admins()"},{"location":"13_email/#mail_managers","text":"mail_managers(subject, message, fail_silently=Falso, connection=None, html_message=None) django.core.mail.mail_managers() es igual que mail_admins() , excepto que env\u00eda un correo electr\u00f3nico a los administradores del sitio, como se define en la configuraci\u00f3n MANAGERS .","title":"mail_managers()"},{"location":"13_email/#ejemplos","text":"Esto env\u00eda un solo correo electr\u00f3nico a john@example.com y jane@example.com, y ambos aparecen en el \"Para:'': send_mail( \"Sujeto\", \"Mensaje\", 'from@example.com', ['john@example.com', 'jane@example.com'], ) Esto env\u00eda un mensaje a john@example.com y jane@example.com, y ambos reciben un correo electr\u00f3nico separado: \ufffc```python datatuple = (('Asunto', 'Mensaje', 'from@example.com', ['john@example.com']), ('Asunto', 'Mensaje', 'from@example.com', ['jane@example.com']),) send_mass_mail(datatuple) Prevenir la inyecci\u00f3n en la cabeza... La inyecci\u00f3n de cabeceras es un exploit de seguridad en el que un atacante inserta cabeceras de correo electr\u00f3nico adicionales para controlar el \"Para:\" y \"Desde:\" en los mensajes de correo electr\u00f3nico que sus scripts generan. Las funciones de correo electr\u00f3nico de Django descritas anteriormente protegen contra la inyecci\u00f3n de encabezado prohibiendo las nuevas l\u00edneas en los valores de los encabezados. Si alg\u00fan asunto, from_email o recipient_list contiene una nueva l\u00ednea (ya sea en estilo Unix, Windows o Mac), la funci\u00f3n de correo electr\u00f3nico (p. ej., send_mail()) elevar\u00e1 django.core.mail.BadHeaderError (una subclase de ValueError) y, por lo tanto, no enviar\u00e1 el correo electr\u00f3nico. Es tu responsabilidad validar todos los datos antes de pasarlos a las funciones de correo electr\u00f3nico. Si un mensaje contiene cabeceras al principio de la cadena, las cabeceras se imprimir\u00e1n como el primer bit del mensaje de correo electr\u00f3nico. Aqu\u00ed hay una vista de ejemplo que toma un asunto, mensaje y from_email de los datos POST de la solicitud, lo env\u00eda a admin@example.com y lo redirige a \"/contacto/gracias/\" cuando est\u00e1 hecho: \ufffc desde django.core.mail importar BadHeaderError, send_mail de django.http import HttpResponse, HttpResponseRedirect def send_email(request): subject = request.POST.get('subject', '') mensaje = request.POST.get('mensaje', '') from_email = request.POST.get('from_email', '') si el asunto y el mensaje y from_email: Int\u00e9ntalo: send_mail(subject, message, from_email, ['admin@example.com']) excepto BadHeaderError: devuelve HttpResponse('Cabecera inv\u00e1lida encontrada'). return HttpResponseRedirect('/contacto/gracias/') ...sino..: # En realidad usar\u00edamos una clase de forma # para obtener los errores de validaci\u00f3n adecuados. devuelve HttpResponse('Aseg\u00farate de que todos los campos est\u00e1n introducidos y son v\u00e1lidos') La clase EmailMessage\u00b6 Las funciones send_mail() y send_mass_mail() de Django son en realidad envoltorios delgados que hacen uso de la clase EmailMessage. No todas las caracter\u00edsticas de la clase EmailMessage est\u00e1n disponibles a trav\u00e9s de las funciones send_mail() y las funciones de envoltura relacionadas. Si desea utilizar funciones avanzadas, como destinatarios CCO, archivos adjuntos o correo electr\u00f3nico de varias partes, deber\u00e1 crear instancias de EmailMessage directamente. Nota Esto es...`nd_mass_mail()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#send-mass-mail) - `send_mass_mail`(*datatuple*, *fail_silently=False*, *auth_user=None*, *auth_password=None*, *connection=None*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#send_mass_mail)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) `django.core.mail.send_mass_mail()` is intended to handle mass emailing. `datatuple` is a tuple in which each element is in this format: (subject, message, from_email, recipient_list) `fail_silently`, `auth_user` and `auth_password` have the same functions as in [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail). Each separate element of `datatuple` results in a separate email message. As in [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail), recipients in the same `recipient_list` will all see the other addresses in the email messages\u201d \u00abTo:\u00bb field. For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened: message1 = ('Subject here', 'Here is the message', 'from@example.com', ['first@example.com', 'other@example.com']) message2 = ('Another Subject', 'Here is another message', 'from@example.com', ['second@test.com']) send_mass_mail((message1, message2), fail_silently=False) The return value will be the number of successfully delivered messages. ### `send_mass_mail()` vs. `send_mail()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#send-mass-mail-vs-send-mail) The main difference between [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) and [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) is that [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) opens a connection to the mail server each time it\u2019s executed, while [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) uses a single connection for all of its messages. This makes [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) slightly more efficient. ## `mail_admins()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#mail-admins) - `mail_admins`(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#mail_admins)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.mail_admins) `django.core.mail.mail_admins()` is a shortcut for sending an email to the site admins, as defined in the [`ADMINS`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-ADMINS) setting. `mail_admins()` prefixes the subject with the value of the [`EMAIL_SUBJECT_PREFIX`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_SUBJECT_PREFIX) setting, which is `\"[Django] \"` by default. The \u00abFrom:\u00bb header of the email will be the value of the [`SERVER_EMAIL`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-SERVER_EMAIL) setting. This method exists for convenience and readability. If `html_message` is provided, the resulting email will be a *multipart/alternative* email with `message` as the *text/plain* content type and `html_message` as the *text/html* content type. ## `mail_managers()`[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#mail-managers) - `mail_managers`(*subject*, *message*, *fail_silently=False*, *connection=None*, *html_message=None*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#mail_managers)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.mail_managers) `django.core.mail.mail_managers()` is just like `mail_admins()`, except it sends an email to the site managers, as defined in the [`MANAGERS`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-MANAGERS) setting. ## Examples[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#examples) This sends a single email to [john@example.com](mailto:john%40example.com) and [jane@example.com](mailto:jane%40example.com), with them both appearing in the \u00abTo:\u00bb: send_mail( 'Subject', 'Message.', 'from@example.com', ['john@example.com', 'jane@example.com'], ) This sends a message to [john@example.com](mailto:john%40example.com) and [jane@example.com](mailto:jane%40example.com), with them both receiving a separate email: datatuple = ( ('Subject', 'Message.', 'from@example.com', ['john@example.com']), ('Subject', 'Message.', 'from@example.com', ['jane@example.com']), ) send_mass_mail(datatuple) ## Preventing header injection[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#preventing-header-injection) [Header injection](http://www.nyphp.org/phundamentals/8_Preventing-Email-Header-Injection) is a security exploit in which an attacker inserts extra email headers to control the \u00abTo:\u00bb and \u00abFrom:\u00bb in email messages that your scripts generate. The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any `subject`, `from_email` or `recipient_list` contains a newline (in either Unix, Windows or Mac style), the email function (e.g. [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail)) will raise `django.core.mail.BadHeaderError` (a subclass of `ValueError`) and, hence, will not send the email. It\u2019s your responsibility to validate all data before passing it to the email functions. If a `message` contains headers at the start of the string, the headers will be printed as the first bit of the email message. Here\u2019s an example view that takes a `subject`, `message` and `from_email` from the request\u2019s POST data, sends that to [admin@example.com](mailto:admin%40example.com) and redirects to \u00ab/contact/thanks/\u00bb when it\u2019s done: from django.core.mail import BadHeaderError, send_mail from django.http import HttpResponse, HttpResponseRedirect def send_email(request): subject = request.POST.get('subject', '') message = request.POST.get('message', '') from_email = request.POST.get('from_email', '') if subject and message and from_email: try: send_mail(subject, message, from_email, ['admin@example.com']) except BadHeaderError: return HttpResponse('Invalid header found.') return HttpResponseRedirect('/contact/thanks/') else: # In reality we'd use a form class # to get proper validation errors. return HttpResponse('Make sure all fields are entered and valid.') ## The `EmailMessage` class[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#the-emailmessage-class) Django\u2019s [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) and [`send_mass_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mass_mail) functions are actually thin wrappers that make use of the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class. Not all features of the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class are available through the [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) and related wrapper functions. If you wish to use advanced features, such as BCC\u2019ed recipients, file attachments, or multi-part email, you\u2019ll need to create [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instances directly. Nota This is a design feature. [`send_mail()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.send_mail) and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility. [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) is responsible for creating the email message itself. The [email backend](https://docs.djangoproject.com/es/3.0/topics/email/#topic-email-backends) is then responsible for sending the email. For convenience, [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) provides a `send()` method for sending a single email. If you need to send multiple messages, the email backend API [provides an alternative](https://docs.djangoproject.com/es/3.0/topics/email/#topics-sending-multiple-emails). ### `EmailMessage` Objects[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#emailmessage-objects) - *class* `EmailMessage`[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/message/#EmailMessage)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) The [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the `send()` method. - `subject`: The subject line of the email. - `body`: The body text. This should be a plain text message. - `from_email`: The sender\u2019s address. Both `fred@example.com` and `\"Fred\" ` forms are legal. If omitted, the [`DEFAULT_FROM_EMAIL`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-DEFAULT_FROM_EMAIL) setting is used. - `to`: A list or tuple of recipient addresses. - `bcc`: A list or tuple of addresses used in the \u00abBcc\u00bb header when sending the email. - `connection`: An email backend instance. Use this parameter if you want to use the same connection for multiple messages. If omitted, a new connection is created when `send()` is called. - `attachments`: A list of attachments to put on the message. These can be either [`MIMEBase`](https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase) instances, or `(filename, content, mimetype)` triples. - `headers`: A dictionary of extra headers to put on the message. The keys are the header name, values are the header values. It\u2019s up to the caller to ensure header names and values are in the correct format for an email message. The corresponding attribute is `extra_headers`. - `cc`: A list or tuple of recipient addresses used in the \u00abCc\u00bb header when sending the email. - `reply_to`: A list or tuple of recipient addresses used in the \u00abReply-To\u00bb header when sending the email. For example: from django.core.mail import EmailMessage email = EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to1@example.com', 'to2@example.com'], ['bcc@example.com'], reply_to=['another@example.com'], headers={'Message-ID': 'foo'}, ) The class has the following methods: - `send(fail_silently=False)` sends the message. If a connection was specified when the email was constructed, that connection will be used. Otherwise, an instance of the default backend will be instantiated and used. If the keyword argument `fail_silently` is `True`, exceptions raised while sending the message will be quashed. An empty list of recipients will not raise an exception. - `message()` constructs a `django.core.mail.SafeMIMEText` object (a subclass of Python\u2019s [`MIMEText`](https://docs.python.org/3/library/email.mime.html#email.mime.text.MIMEText) class) or a `django.core.mail.SafeMIMEMultipart` object holding the message to be sent. If you ever need to extend the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class, you\u2019ll probably want to override this method to put the content you want into the MIME object. - `recipients()` returns a list of all the recipients of the message, whether they\u2019re recorded in the `to`, `cc` or `bcc` attributes. This is another method you might need to override when subclassing, because the SMTP server needs to be told the full list of recipients when the message is sent. If you add another way to specify recipients in your class, they need to be returned from this method as well. - `attach()` creates a new file attachment and adds it to the message. There are two ways to call `attach()`: - You can pass it a single argument that is a [`MIMEBase`](https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase) instance. This will be inserted directly into the resulting message. - Alternatively, you can pass `attach()` three arguments: `filename`, `content` and `mimetype`. `filename` is the name of the file attachment as it will appear in the email, `content` is the data that will be contained inside the attachment and `mimetype` is the optional MIME type for the attachment. If you omit `mimetype`, the MIME content type will be guessed from the filename of the attachment. For example: ``` message.attach('design.png', img_data, 'image/png') ``` If you specify a `mimetype` of `message/rfc822`, it will also accept [`django.core.mail.EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) and [`email.message.Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message). For a `mimetype` starting with `text/`, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to `application/octet-stream` and the data will be attached unchanged. In addition, `message/rfc822` attachments will no longer be base64-encoded in violation of [**RFC 2046#section-5.2.1**](https://tools.ietf.org/html/rfc2046.html#section-5.2.1), which can cause issues with displaying the attachments in [Evolution](https://bugzilla.gnome.org/show_bug.cgi?id=651197) and [Thunderbird](https://bugzilla.mozilla.org/show_bug.cgi?id=333880). - `attach_file()` creates a new attachment using a file from your filesystem. Call it with the path of the file to attach and, optionally, the MIME type to use for the attachment. If the MIME type is omitted, it will be guessed from the filename. You can use it like this: ``` message.attach_file('/images/weather_map.png') ``` For MIME types starting with `text/`, binary data is handled as in `attach()`. #### Sending alternative content types[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#sending-alternative-content-types) It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django\u2019s email library, you can do this using the `EmailMultiAlternatives` class. This subclass of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) has an `attach_alternative()` method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage). To send a text and HTML combination, you could write: from django.core.mail import EmailMultiAlternatives subject, from_email, to = 'hello', 'from@example.com', 'to@example.com' text_content = 'This is an important message.' html_content = ' This is an important message. ' msg = EmailMultiAlternatives(subject, text_content, from_email, [to]) msg.attach_alternative(html_content, \"text/html\") msg.send() By default, the MIME type of the `body` parameter in an [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) is `\"text/plain\"`. It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the `content_subtype` attribute on the [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) class to change the main content type. The major type will always be `\"text\"`, but you can change the subtype. For example: msg = EmailMessage(subject, html_content, from_email, [to]) msg.content_subtype = \"html\" # Main content is now text/html msg.send() ## Email backends[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#email-backends) The actual sending of an email is handled by the email backend. The email backend class has the following methods: - `open()` instantiates a long-lived email-sending connection. - `close()` closes the current email-sending connection. - `send_messages(email_messages)` sends a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) objects. If the connection is not open, this call will implicitly open the connection, and close the connection afterwards. If the connection is already open, it will be left open after mail has been sent. It can also be used as a context manager, which will automatically call `open()` and `close()` as needed: from django.core import mail with mail.get_connection() as connection: mail.EmailMessage( subject1, body1, from1, [to1], connection=connection, ).send() mail.EmailMessage( subject2, body2, from2, [to2], connection=connection, ).send() ### Obtaining an instance of an email backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#obtaining-an-instance-of-an-email-backend) The [`get_connection()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.get_connection) function in `django.core.mail` returns an instance of the email backend that you can use. - `get_connection`(*backend=None*, *fail_silently=False*, **args*, ***kwargs*)[[fuente\\]](https://docs.djangoproject.com/es/3.0/_modules/django/core/mail/#get_connection)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.get_connection) By default, a call to `get_connection()` will return an instance of the email backend specified in [`EMAIL_BACKEND`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_BACKEND). If you specify the `backend` argument, an instance of that backend will be instantiated. The `fail_silently` argument controls how the backend should handle errors. If `fail_silently` is True, exceptions during the email sending process will be silently ignored. All other arguments are passed directly to the constructor of the email backend. Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can [write your own email backend](https://docs.djangoproject.com/es/3.0/topics/email/#topic-custom-email-backend). #### SMTP backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#smtp-backend) - *class* `backends.smtp.``EmailBackend`(*host=None*, *port=None*, *username=None*, *password=None*, *use_tls=None*, *fail_silently=False*, *use_ssl=None*, *timeout=None*, *ssl_keyfile=None*, *ssl_certfile=None*, ***kwargs*)[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.backends.smtp.EmailBackend) This is the default backend. Email will be sent through a SMTP server.The value for each argument is retrieved from the matching setting if the argument is `None`:`host`: [`EMAIL_HOST`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_HOST)`port`: [`EMAIL_PORT`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_PORT)`username`: [`EMAIL_HOST_USER`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_HOST_USER)`password`: [`EMAIL_HOST_PASSWORD`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_HOST_PASSWORD)`use_tls`: [`EMAIL_USE_TLS`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_USE_TLS)`use_ssl`: [`EMAIL_USE_SSL`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_USE_SSL)`timeout`: [`EMAIL_TIMEOUT`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_TIMEOUT)`ssl_keyfile`: [`EMAIL_SSL_KEYFILE`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_SSL_KEYFILE)`ssl_certfile`: [`EMAIL_SSL_CERTFILE`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_SSL_CERTFILE)The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings:`EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' `If unspecified, the default `timeout` will be the one provided by [`socket.getdefaulttimeout()`](https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout), which defaults to `None` (no timeout). #### Console backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#console-backend) Instead of sending out real emails the console backend just writes the emails that would be sent to the standard output. By default, the console backend writes to `stdout`. You can use a different stream-like object by providing the `stream` keyword argument when constructing the connection. To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development. #### File backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#file-backend) The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the [`EMAIL_FILE_PATH`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_FILE_PATH) setting or from the `file_path` keyword when creating a connection with [`get_connection()`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.get_connection). To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend' EMAIL_FILE_PATH = '/tmp/app-messages' # change this to a proper location This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development. #### In-memory backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#in-memory-backend) The `'locmem'` backend stores messages in a special attribute of the `django.core.mail` module. The `outbox` attribute is created when the first message is sent. It\u2019s a list with an [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instance for each message that would be sent. To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend' This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development and testing. #### Dummy backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#dummy-backend) As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend' This backend is not intended for use in production \u2013 it is provided as a convenience that can be used during development. ### Defining a custom email backend[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#defining-a-custom-email-backend) If you need to change how emails are sent you can write your own email backend. The [`EMAIL_BACKEND`](https://docs.djangoproject.com/es/3.0/ref/settings/#std:setting-EMAIL_BACKEND) setting in your settings file is then the Python import path for your backend class. Custom email backends should subclass `BaseEmailBackend` that is located in the `django.core.mail.backends.base` module. A custom email backend must implement the `send_messages(email_messages)` method. This method receives a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instances and returns the number of successfully delivered messages. If your backend has any concept of a persistent session or connection, you should also implement the `open()` and `close()` methods. Refer to `smtp.EmailBackend` for a reference implementation. ### Sending multiple emails[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#sending-multiple-emails) Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email. There are two ways you tell an email backend to reuse a connection. Firstly, you can use the `send_messages()` method. `send_messages()` takes a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) instances (or subclasses), and sends them all using a single connection. For example, if you have a function called `get_notification_email()` that returns a list of [`EmailMessage`](https://docs.djangoproject.com/es/3.0/topics/email/#django.core.mail.EmailMessage) objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages: from django.core import mail connection = mail.get_connection() # Use default email connection messages = get_notification_email() connection.send_messages(messages) In this example, the call to `send_messages()` opens a connection on the backend, sends the list of messages, and then closes the connection again. The second approach is to use the `open()` and `close()` methods on the email backend to manually control the connection. `send_messages()` will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example: from django.core import mail connection = mail.get_connection()","title":"Ejemplos"},{"location":"13_email/#manually-open-the-connection","text":"connection.open()","title":"Manually open the connection"},{"location":"13_email/#construct-an-email-message-that-uses-the-connection","text":"email1 = mail.EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to1@example.com'], connection=connection, ) email1.send() # Send the email","title":"Construct an email message that uses the connection"},{"location":"13_email/#construct-two-more-messages","text":"email2 = mail.EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to2@example.com'], ) email3 = mail.EmailMessage( 'Hello', 'Body goes here', 'from@example.com', ['to3@example.com'], )","title":"Construct two more messages"},{"location":"13_email/#send-the-two-emails-in-a-single-call-","text":"connection.send_messages([email2, email3])","title":"Send the two emails in a single call -"},{"location":"13_email/#the-connection-was-already-open-so-send_messages-doesnt-close-it","text":"","title":"The connection was already open so send_messages() doesn't close it."},{"location":"13_email/#we-need-to-manually-close-the-connection","text":"connection.close() ## Configuring email for development[\u00b6](https://docs.djangoproject.com/es/3.0/topics/email/#configuring-email-for-development) There are times when you do not want Django to send emails at all. For example, while developing a website, you probably don\u2019t want to send out thousands of emails \u2013 but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content. The easiest way to configure email for local development is to use the [console](https://docs.djangoproject.com/es/3.0/topics/email/#topic-email-console-backend) email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail. The [file](https://docs.djangoproject.com/es/3.0/topics/email/#topic-email-file-backend) email backend can also be useful during development \u2013 this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure. Another approach is to use a \u00abdumb\u00bb SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command: python -m smtpd -n -c DebuggingServer localhost:1025 ``` This command will start a minimal SMTP server listening on port 1025 of localhost. This server prints to standard output all email headers and the email body. You then only need to set the EMAIL_HOST and EMAIL_PORT accordingly. For a more detailed discussion of SMTP server options, see the Python documentation for the smtpd module. For information about unit-testing the sending of emails in your application, see the Email services section of the testing documentation.","title":"We need to manually close the connection."},{"location":"14_newspaper_app/","text":"14. Newspaper app Habr\u00e1 una p\u00e1gina de art\u00edculos en la que los periodistas podr\u00e1n publicar art\u00edculos, establecer permisos para que s\u00f3lo el autor de un art\u00edculo pueda editarlo o borrarlo, y finalmente a\u00f1adir la posibilidad de que otros usuarios escriban comentarios en cada art\u00edculo, lo que introducir\u00e1 el concepto de claves externas . 14.1. Articles app No hay reglas r\u00edgidas sobre c\u00f3mo llamar a las aplicaciones, excepto que no se puede usar el nombre de una aplicaci\u00f3n incorporada. Una regla general es usar el plural del nombre de una aplicaci\u00f3n - posts , payments , users , etc.- a menos que hacerlo sea obviamente incorrecto como en el caso com\u00fan de blog donde el singular tiene m\u00e1s sentido. Crear la aplicaci\u00f3n para los nuevos art\u00edculos. (news) $ python manage.py startapp articles A\u00f1adirla a INSTALLED_APPS y actualizar la zona horaria ya que se marcar\u00e1 la hora de los art\u00edculos. Para averiguar la zona horaria correspondiente: >>> from pytz import all_timezones, common_timezones >>> 'Europe/Madrid' in all_timezones True FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd Party 'crispy_forms', # Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'Europe/Madrid' Se define el modelo de base de datos con cuatro campos: title , body , date , y author . Para el campo autor se har\u00e1 referencia al modelo de usuario personalizado users.CustomUser que se ha establecido en el archivo settings.py como AUTH_USER_MODEL . Por lo tanto, si se importa la configuraci\u00f3n podemos referirnos a ella como settings.AUTH_USER_MODEL . Tambi\u00e9n se implementa la 'buena mejores pr\u00e1ctica' de definir un get_absolute_url desde el principio y un m\u00e9todo __str__ para ver el modelo en la interfaz de administraci\u00f3n. FICHERO: articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length=255) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Como se tiene una nueva aplicaci\u00f3n y modelo, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo a la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate En este punto es conveniente ir a la administraci\u00f3n para jugar con el modelo antes de construir las urls/vistas/plantillas necesarias para mostrar los datos en el sitio web. Pero primero necesitamos actualizar admin.py para que se muestre la nueva aplicaci\u00f3n. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Iniciar el servidor, ir a la p\u00e1gina de administraci\u00f3n y a\u00f1adir algunos art\u00edculos de ejemplo. No se podr\u00e1 a\u00f1adir la fecha porque fue a\u00f1adida autom\u00e1ticamente por Django en nuestro nombre y no puede ser cambiada en la administraci\u00f3n. Se podr\u00e1 hacer que la fecha sea editable -en aplicaciones m\u00e1s complejas es com\u00fan tener un campo created_at y updated_at - pero para mantener las cosas simples, por ahora s\u00f3lo se tendr\u00e1 date establecida por Django al momento de la creaci\u00f3n. 14.2. URLs y Vistas Vamos a hacer que los art\u00edculos aparezcan en articles/ . FICHERO: # newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Crear ahora la vista usando la gen\u00e9rica ListView de Django. FICHERO: # articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' Los dos \u00fanicos campos que se necesitan especificar son el modelo de art\u00edculo y el nombre de la plantilla que ser\u00e1 article_list.html . El \u00faltimo paso es crear la plantilla. Bootstrap tiene un componente incorporado llamado Cards que se puede personalizar para los art\u00edculos individuales. Recordar que ListView devuelve un objeto llamado object_list que se puede iterar con un bucle for. Dentro de cada art\u00edculo se muestra el t\u00edtulo, el cuerpo, el autor y la fecha. Incluso se proporcionan enlaces a las funciones de \"editar\" y \"borrar\" que a\u00fan no se han construido. FICHERO: templates/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> {{ article.body }} </div> <div class=\"card-footer text-center text-muted\"> <a href=\"#\">Edit</a> | <a href=\"#\">Delete</a> </div> </div> <br /> {% endfor %} {% endblock content %} Arracar el servidor y consultar la p\u00e1gina articles/ 14.3. Editar/Borrar Se necesitan nuevas urls, vistas y plantillas. Se puede aprovechar el hecho de que Django a\u00f1ade autom\u00e1ticamente una clave primaria a cada base de datos. Por lo tanto, el primer art\u00edculo con una clave primaria de 1 estar\u00e1 en articles/1/edit/ y la ruta de borrado estar\u00e1 en articles/1/delete/ . FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path('<int:pk>/edit/',views.ArticleUpdateView.as_view(), name='article_edit'),# new path('<int:pk>/', views.ArticleDetailView.as_view(), name='article_detail'), # new path('<int:pk>/delete/', views.ArticleDeleteView.as_view(), name='article_delete'), # new ] Ahora se escribir\u00e1n las vistas que usar\u00e1n las vistas gen\u00e9ricas basadas en clases de Django para DetailView , UpdateView y DeleteView . Especificamos qu\u00e9 campos pueden ser actualizados - title y body - y d\u00f3nde redirigir al usuario despu\u00e9s de borrar un art\u00edculo: article_list . FICHERO: articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') Finalmente se necesita a\u00f1adir las nuevas plantillas. Se empezar\u00e1 con la p\u00e1gina de detalles que mostrar\u00e1 el t\u00edtulo, la fecha, el cuerpo y el autor con enlaces para editar y borrar. Tambi\u00e9n enlazar\u00e1 hacia atr\u00e1s con todos los art\u00edculos. El nombre de la ruta de edici\u00f3n es article_edit y tenemos que pasarle su clave principal article.pk . El nombre de la ruta de borrado es article_delete y tambi\u00e9n necesita una clave primaria article.pk . La p\u00e1gina de art\u00edculos es una ListView por lo que no necesita que se le pase ning\u00fan argumento adicional. FICHERO: templates/article_detail.html {% extends 'base.html' %} {% block content %} <div class=\"article-entry\"> <h2>{{ object.title }}</h2> <p>by {{ object.author }} | {{ object.date }}</p> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a></p> <p>Back to <a href=\"{% url 'article_list' %}\">All Articles</a>.</p> {% endblock content %} Para las p\u00e1ginas de edici\u00f3n y borrado se puede usar el estilo del bot\u00f3n de Bootstrap para hacer que el bot\u00f3n de edici\u00f3n sea azul claro y el de borrado rojo. FICHERO: templates/article_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-info ml-2\" type=\"submit\">Update</button> </form> {% endblock %} FICHERO: templates/article_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ article.title }}\"?</p> <button class=\"btn btn-danger ml- \" type=\"submit\">Confirm</button> </form> {% endblock %} Como paso final se a\u00f1aden los enlaces de edici\u00f3n y borrado a la p\u00e1gina de listas en la clase div para el card-foot . Ser\u00e1n los mismos que los a\u00f1adidos a la p\u00e1gina detalle. FICHERO: templates/article_list.html ... <div class=\"card-footer text-center text-muted\"> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> ... Arrancar el servidor e ir a la p\u00e1gina de articles/ y pulsar sobre Edit . Si se actualiza el campo \"t\u00edtulo\" y se hace clic en actualizar, el usuario ser\u00e1 redirigido a la p\u00e1gina de detalles que mostrar\u00e1 el nuevo cambio. Si se hace clic en el enlace Delete el usuario ser\u00e1 redirigido a la p\u00e1gina de borrado. Si se presiona el aterrador bot\u00f3n rojo Confirm el usuario ser\u00e1 redirigido a la p\u00e1gina de art\u00edculos donde ahora habr\u00e1 una entrada menos. 00000000000000000000000000000000000000000000000000000000000000000000000000000 14.Crear la page El paso final es una p\u00e1gina de creaci\u00f3n de nuevos art\u00edculos que podemos hacer con el CreateView de Django. Nuestros tres pasos son crear una vista, una url y una plantilla. Este flujo ya deber\u00eda resultar bastante familiar. En nuestro archivo de vistas agregamos CreateView a las importaciones de la parte superior y hacemos una nueva clase ArticleCreateView que especifica nuestro modelo, plantilla y los campos disponibles. FICHERO: articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... N\u00f3tese que nuestros campos tienen autor ya que queremos asociar un nuevo art\u00edculo con un autor, sin embargo una vez que un art\u00edculo ha sido creado no queremos que un usuario pueda cambiar el autor, por lo que ArticleUpdateView s\u00f3lo tiene los campos ['title', 'body',] . Actualizar nuestro archivo de urls con la nueva ruta para la vista. FICHERO: articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Luego, salga del servidor Control+c para crear una nueva plantilla llamada article_new.html . (news) $ touch templates/article_new.html Y actualizarlo con el siguiente c\u00f3digo HTML. FICHERO: templates/article_new.html {% extends 'base.html' %} {% block content %} <h1>New article</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-success ml- \" type=\"submit\">Save</button> </form> {% endblock %} Como paso final deber\u00edamos a\u00f1adir un enlace para crear nuevos art\u00edculos en nuestro navegador para que sea accesible en todas partes del sitio para los usuarios registrados. FICHERO: templates/base.html ... <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb- \"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> {% if user.is_authenticated %} <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"><a href=\"{% url 'article_new' %}\">+ New</a></li> </ul> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-tar\\ get=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-\\ label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> ... \u00bfY por qu\u00e9 no usar Bootstrap para mejorar nuestra p\u00e1gina web original ahora tambi\u00e9n? Podemos actualizar plantillas/home.html como sigue. FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} <div class=\"jumbotron\"> <h1 class=\"display- \">Newspaper app</h1> <p class=\"lead\">A Newspaper website built with Django.</p> <p class=\"lead\"> <a class=\"btn btn-primary btn-lg\" href=\"{% url 'article_list' %}\" role=\"butt\\ on\">View All Articles</a> </p> </div> {% endblock %} Ya hemos terminado. Vamos a confirmar que todo funciona como se esperaba. Arranca el servidor de nuevo python manage.py runserver y navega a nuestra p\u00e1gina web en: http://127.0.0.1:8000/.273 P\u00e1gina principal con nuevo enlace en la navegaci\u00f3n Haz clic en el enlace \"+ Nuevo\" en la parte superior del navegador y ser\u00e1s redirigido a nuestra p\u00e1gina de creaci\u00f3n. Crear p\u00e1gina Adelante, crea un nuevo art\u00edculo. Luego haz clic en el bot\u00f3n \"Guardar\". Ser\u00e1s redirigido a la p\u00e1gina de detalles. \u00bfPor qu\u00e9? Porque en nuestro archivo models.py establecemos el m\u00e9todo get_-absolute_url en article_detail . Este es un buen enfoque porque si m\u00e1s tarde cambiamos el patr\u00f3n de url de la p\u00e1gina de detalles a, digamos, art\u00edculos/detalles/ / , la redirecci\u00f3n seguir\u00e1 funcionando. Se utilizar\u00e1 cualquier ruta asociada a article_detail; no hay c\u00f3digo duro de la ruta en s\u00ed. P\u00e1gina de detalles Tengan en cuenta tambi\u00e9n que la clave principal aqu\u00ed est\u00e1 en el URL. Aunque s\u00f3lo estamos mostrando tres art\u00edculos ahora mismo, Django no reordena las claves primarias s\u00f3lo porque hayamos borrado una. En la pr\u00e1ctica, la mayor\u00eda de los sitios del mundo real no borran nada; en su lugar, \"ocultan\" los campos borrados, ya que esto facilita el mantenimiento de la integridad de una base de datos y da la opci\u00f3n de \"recuperar\" m\u00e1s adelante si es necesario. Con nuestro enfoque actual, una vez que algo se borra, \u00a1se va para siempre! Haga clic en el enlace de \"Todos los art\u00edculos\" para ver nuestra nueva p\u00e1gina de art\u00edculos. P\u00e1gina de art\u00edculos actualizada Hay un nuevo art\u00edculo en la parte inferior como se esperaba. Conclusi\u00f3n... Hemos creado una aplicaci\u00f3n de art\u00edculos dedicados con la funcionalidad de CRUD. Pero a\u00fan no hay permisos o autorizaciones, lo que significa que cualquiera puede hacer cualquier cosa. Un usuario desconectado puede visitar todas las URLs y cualquier usuario conectado puede editar o eliminar un art\u00edculo existente, \u00a1incluso uno que no sea suyo! En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos permisos y autorizaciones a nuestro proyecto para arreglar esto.","title":"14. Newspaper app"},{"location":"14_newspaper_app/#14-newspaper-app","text":"Habr\u00e1 una p\u00e1gina de art\u00edculos en la que los periodistas podr\u00e1n publicar art\u00edculos, establecer permisos para que s\u00f3lo el autor de un art\u00edculo pueda editarlo o borrarlo, y finalmente a\u00f1adir la posibilidad de que otros usuarios escriban comentarios en cada art\u00edculo, lo que introducir\u00e1 el concepto de claves externas .","title":"14. Newspaper app"},{"location":"14_newspaper_app/#141-articles-app","text":"No hay reglas r\u00edgidas sobre c\u00f3mo llamar a las aplicaciones, excepto que no se puede usar el nombre de una aplicaci\u00f3n incorporada. Una regla general es usar el plural del nombre de una aplicaci\u00f3n - posts , payments , users , etc.- a menos que hacerlo sea obviamente incorrecto como en el caso com\u00fan de blog donde el singular tiene m\u00e1s sentido. Crear la aplicaci\u00f3n para los nuevos art\u00edculos. (news) $ python manage.py startapp articles A\u00f1adirla a INSTALLED_APPS y actualizar la zona horaria ya que se marcar\u00e1 la hora de los art\u00edculos. Para averiguar la zona horaria correspondiente: >>> from pytz import all_timezones, common_timezones >>> 'Europe/Madrid' in all_timezones True FICHERO: newspaper_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd Party 'crispy_forms', # Local 'users', 'pages', 'articles', # new ] TIME_ZONE = 'Europe/Madrid' Se define el modelo de base de datos con cuatro campos: title , body , date , y author . Para el campo autor se har\u00e1 referencia al modelo de usuario personalizado users.CustomUser que se ha establecido en el archivo settings.py como AUTH_USER_MODEL . Por lo tanto, si se importa la configuraci\u00f3n podemos referirnos a ella como settings.AUTH_USER_MODEL . Tambi\u00e9n se implementa la 'buena mejores pr\u00e1ctica' de definir un get_absolute_url desde el principio y un m\u00e9todo __str__ para ver el modelo en la interfaz de administraci\u00f3n. FICHERO: articles/models.py from django.conf import settings from django.db import models from django.urls import reverse class Article(models.Model): title = models.CharField(max_length=255) body = models.TextField() date = models.DateTimeField(auto_now_add=True) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.title def get_absolute_url(self): return reverse('article_detail', args=[str(self.id)]) Como se tiene una nueva aplicaci\u00f3n y modelo, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo a la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate En este punto es conveniente ir a la administraci\u00f3n para jugar con el modelo antes de construir las urls/vistas/plantillas necesarias para mostrar los datos en el sitio web. Pero primero necesitamos actualizar admin.py para que se muestre la nueva aplicaci\u00f3n. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) Iniciar el servidor, ir a la p\u00e1gina de administraci\u00f3n y a\u00f1adir algunos art\u00edculos de ejemplo. No se podr\u00e1 a\u00f1adir la fecha porque fue a\u00f1adida autom\u00e1ticamente por Django en nuestro nombre y no puede ser cambiada en la administraci\u00f3n. Se podr\u00e1 hacer que la fecha sea editable -en aplicaciones m\u00e1s complejas es com\u00fan tener un campo created_at y updated_at - pero para mantener las cosas simples, por ahora s\u00f3lo se tendr\u00e1 date establecida por Django al momento de la creaci\u00f3n.","title":"14.1. Articles app"},{"location":"14_newspaper_app/#142-urls-y-vistas","text":"Vamos a hacer que los art\u00edculos aparezcan en articles/ . FICHERO: # newspaper_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('', include('pages.urls')), path('articles/', include('articles.urls')), # new path('admin/', admin.site.urls), path('users/', include('users.urls')), path('users/', include('django.contrib.auth.urls')), ] FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), ] Crear ahora la vista usando la gen\u00e9rica ListView de Django. FICHERO: # articles/views.py from django.views.generic import ListView from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' Los dos \u00fanicos campos que se necesitan especificar son el modelo de art\u00edculo y el nombre de la plantilla que ser\u00e1 article_list.html . El \u00faltimo paso es crear la plantilla. Bootstrap tiene un componente incorporado llamado Cards que se puede personalizar para los art\u00edculos individuales. Recordar que ListView devuelve un objeto llamado object_list que se puede iterar con un bucle for. Dentro de cada art\u00edculo se muestra el t\u00edtulo, el cuerpo, el autor y la fecha. Incluso se proporcionan enlaces a las funciones de \"editar\" y \"borrar\" que a\u00fan no se han construido. FICHERO: templates/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> {{ article.body }} </div> <div class=\"card-footer text-center text-muted\"> <a href=\"#\">Edit</a> | <a href=\"#\">Delete</a> </div> </div> <br /> {% endfor %} {% endblock content %} Arracar el servidor y consultar la p\u00e1gina articles/","title":"14.2. URLs y Vistas"},{"location":"14_newspaper_app/#143-editarborrar","text":"Se necesitan nuevas urls, vistas y plantillas. Se puede aprovechar el hecho de que Django a\u00f1ade autom\u00e1ticamente una clave primaria a cada base de datos. Por lo tanto, el primer art\u00edculo con una clave primaria de 1 estar\u00e1 en articles/1/edit/ y la ruta de borrado estar\u00e1 en articles/1/delete/ . FICHERO: articles/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.ArticleListView.as_view(), name='article_list'), path('<int:pk>/edit/',views.ArticleUpdateView.as_view(), name='article_edit'),# new path('<int:pk>/', views.ArticleDetailView.as_view(), name='article_detail'), # new path('<int:pk>/delete/', views.ArticleDeleteView.as_view(), name='article_delete'), # new ] Ahora se escribir\u00e1n las vistas que usar\u00e1n las vistas gen\u00e9ricas basadas en clases de Django para DetailView , UpdateView y DeleteView . Especificamos qu\u00e9 campos pueden ser actualizados - title y body - y d\u00f3nde redirigir al usuario despu\u00e9s de borrar un art\u00edculo: article_list . FICHERO: articles/views.py from django.views.generic import ListView, DetailView from django.views.generic.edit import UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(ListView): model = models.Article template_name = 'article_list.html' class ArticleDetailView(DetailView): model = models.Article template_name = 'article_detail.html' class ArticleUpdateView(UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' class ArticleDeleteView(DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') Finalmente se necesita a\u00f1adir las nuevas plantillas. Se empezar\u00e1 con la p\u00e1gina de detalles que mostrar\u00e1 el t\u00edtulo, la fecha, el cuerpo y el autor con enlaces para editar y borrar. Tambi\u00e9n enlazar\u00e1 hacia atr\u00e1s con todos los art\u00edculos. El nombre de la ruta de edici\u00f3n es article_edit y tenemos que pasarle su clave principal article.pk . El nombre de la ruta de borrado es article_delete y tambi\u00e9n necesita una clave primaria article.pk . La p\u00e1gina de art\u00edculos es una ListView por lo que no necesita que se le pase ning\u00fan argumento adicional. FICHERO: templates/article_detail.html {% extends 'base.html' %} {% block content %} <div class=\"article-entry\"> <h2>{{ object.title }}</h2> <p>by {{ object.author }} | {{ object.date }}</p> <p>{{ object.body }}</p> </div> <p><a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a></p> <p>Back to <a href=\"{% url 'article_list' %}\">All Articles</a>.</p> {% endblock content %} Para las p\u00e1ginas de edici\u00f3n y borrado se puede usar el estilo del bot\u00f3n de Bootstrap para hacer que el bot\u00f3n de edici\u00f3n sea azul claro y el de borrado rojo. FICHERO: templates/article_edit.html {% extends 'base.html' %} {% block content %} <h1>Edit</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-info ml-2\" type=\"submit\">Update</button> </form> {% endblock %} FICHERO: templates/article_delete.html {% extends 'base.html' %} {% block content %} <h1>Delete</h1> <form action=\"\" method=\"post\">{% csrf_token %} <p>Are you sure you want to delete \"{{ article.title }}\"?</p> <button class=\"btn btn-danger ml- \" type=\"submit\">Confirm</button> </form> {% endblock %} Como paso final se a\u00f1aden los enlaces de edici\u00f3n y borrado a la p\u00e1gina de listas en la clase div para el card-foot . Ser\u00e1n los mismos que los a\u00f1adidos a la p\u00e1gina detalle. FICHERO: templates/article_list.html ... <div class=\"card-footer text-center text-muted\"> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> ... Arrancar el servidor e ir a la p\u00e1gina de articles/ y pulsar sobre Edit . Si se actualiza el campo \"t\u00edtulo\" y se hace clic en actualizar, el usuario ser\u00e1 redirigido a la p\u00e1gina de detalles que mostrar\u00e1 el nuevo cambio. Si se hace clic en el enlace Delete el usuario ser\u00e1 redirigido a la p\u00e1gina de borrado. Si se presiona el aterrador bot\u00f3n rojo Confirm el usuario ser\u00e1 redirigido a la p\u00e1gina de art\u00edculos donde ahora habr\u00e1 una entrada menos. 00000000000000000000000000000000000000000000000000000000000000000000000000000","title":"14.3. Editar/Borrar"},{"location":"14_newspaper_app/#14crear-la-page","text":"El paso final es una p\u00e1gina de creaci\u00f3n de nuevos art\u00edculos que podemos hacer con el CreateView de Django. Nuestros tres pasos son crear una vista, una url y una plantilla. Este flujo ya deber\u00eda resultar bastante familiar. En nuestro archivo de vistas agregamos CreateView a las importaciones de la parte superior y hacemos una nueva clase ArticleCreateView que especifica nuestro modelo, plantilla y los campos disponibles. FICHERO: articles/views.py ... from django.views.generic.edit import CreateView, UpdateView, DeleteView class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', 'author',] ... N\u00f3tese que nuestros campos tienen autor ya que queremos asociar un nuevo art\u00edculo con un autor, sin embargo una vez que un art\u00edculo ha sido creado no queremos que un usuario pueda cambiar el autor, por lo que ArticleUpdateView s\u00f3lo tiene los campos ['title', 'body',] . Actualizar nuestro archivo de urls con la nueva ruta para la vista. FICHERO: articles/urls.py ... urlpatterns = [ ... path('new/', views.ArticleCreateView.as_view(), name='article_new'), ... ] Luego, salga del servidor Control+c para crear una nueva plantilla llamada article_new.html . (news) $ touch templates/article_new.html Y actualizarlo con el siguiente c\u00f3digo HTML. FICHERO: templates/article_new.html {% extends 'base.html' %} {% block content %} <h1>New article</h1> <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }} <button class=\"btn btn-success ml- \" type=\"submit\">Save</button> </form> {% endblock %} Como paso final deber\u00edamos a\u00f1adir un enlace para crear nuevos art\u00edculos en nuestro navegador para que sea accesible en todas partes del sitio para los usuarios registrados. FICHERO: templates/base.html ... <body> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark mb- \"> <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Newspaper</a> {% if user.is_authenticated %} <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item\"><a href=\"{% url 'article_new' %}\">+ New</a></li> </ul> {% endif %} <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-tar\\ get=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-\\ label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> ... \u00bfY por qu\u00e9 no usar Bootstrap para mejorar nuestra p\u00e1gina web original ahora tambi\u00e9n? Podemos actualizar plantillas/home.html como sigue. FICHERO: templates/home.html {% extends 'base.html' %} {% block title %}Home{% endblock %} {% block content %} <div class=\"jumbotron\"> <h1 class=\"display- \">Newspaper app</h1> <p class=\"lead\">A Newspaper website built with Django.</p> <p class=\"lead\"> <a class=\"btn btn-primary btn-lg\" href=\"{% url 'article_list' %}\" role=\"butt\\ on\">View All Articles</a> </p> </div> {% endblock %} Ya hemos terminado. Vamos a confirmar que todo funciona como se esperaba. Arranca el servidor de nuevo python manage.py runserver y navega a nuestra p\u00e1gina web en: http://127.0.0.1:8000/.273 P\u00e1gina principal con nuevo enlace en la navegaci\u00f3n Haz clic en el enlace \"+ Nuevo\" en la parte superior del navegador y ser\u00e1s redirigido a nuestra p\u00e1gina de creaci\u00f3n. Crear p\u00e1gina Adelante, crea un nuevo art\u00edculo. Luego haz clic en el bot\u00f3n \"Guardar\". Ser\u00e1s redirigido a la p\u00e1gina de detalles. \u00bfPor qu\u00e9? Porque en nuestro archivo models.py establecemos el m\u00e9todo get_-absolute_url en article_detail . Este es un buen enfoque porque si m\u00e1s tarde cambiamos el patr\u00f3n de url de la p\u00e1gina de detalles a, digamos, art\u00edculos/detalles/ / , la redirecci\u00f3n seguir\u00e1 funcionando. Se utilizar\u00e1 cualquier ruta asociada a article_detail; no hay c\u00f3digo duro de la ruta en s\u00ed. P\u00e1gina de detalles Tengan en cuenta tambi\u00e9n que la clave principal aqu\u00ed est\u00e1 en el URL. Aunque s\u00f3lo estamos mostrando tres art\u00edculos ahora mismo, Django no reordena las claves primarias s\u00f3lo porque hayamos borrado una. En la pr\u00e1ctica, la mayor\u00eda de los sitios del mundo real no borran nada; en su lugar, \"ocultan\" los campos borrados, ya que esto facilita el mantenimiento de la integridad de una base de datos y da la opci\u00f3n de \"recuperar\" m\u00e1s adelante si es necesario. Con nuestro enfoque actual, una vez que algo se borra, \u00a1se va para siempre! Haga clic en el enlace de \"Todos los art\u00edculos\" para ver nuestra nueva p\u00e1gina de art\u00edculos. P\u00e1gina de art\u00edculos actualizada Hay un nuevo art\u00edculo en la parte inferior como se esperaba.","title":"14.Crear la page"},{"location":"14_newspaper_app/#conclusion","text":"Hemos creado una aplicaci\u00f3n de art\u00edculos dedicados con la funcionalidad de CRUD. Pero a\u00fan no hay permisos o autorizaciones, lo que significa que cualquiera puede hacer cualquier cosa. Un usuario desconectado puede visitar todas las URLs y cualquier usuario conectado puede editar o eliminar un art\u00edculo existente, \u00a1incluso uno que no sea suyo! En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos permisos y autorizaciones a nuestro proyecto para arreglar esto.","title":"Conclusi\u00f3n..."},{"location":"15_permisos_y_autorizacion/","text":"15. Permisos y Autorizaci\u00f3n Si se quiere que el peri\u00f3dico sea financieramente sostenible se podr\u00eda a\u00f1adir una app de pagos para cobrar por el acceso, para lo que se requiere un proceso de autorizaci\u00f3n , diferente al proceso de autenticaci\u00f3n . La autorizaci\u00f3n restringe el acceso; la autenticaci\u00f3n permite el flujo de registro e inicio de sesi\u00f3n de un usuario. Django incorpora una funcionalidad de autorizaci\u00f3n que se puede utilizar r\u00e1pidamente. 15.1. CreateView mejorado Se van a establecer permisos de edici\u00f3n/borrado para que s\u00f3lo el autor de un art\u00edculo pueda hacer tales cambios. Se va a eliminar el autor de los campos y en su lugar se establecer\u00e1 autom\u00e1ticamente a trav\u00e9s del m\u00e9todo form_valid . FICHERO: articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... Las vistas gen\u00e9ricas basadas en clases son incre\u00edbles para empezar nuevos proyectos, pero cuando se quieren personalizar, es necesario arremangarse y empezar a entender lo que pasa bajo el cap\u00f3. Lo m\u00e1s probable es que lo que est\u00e1s intentando hacer ya haya sido resuelto en alg\u00fan lugar, ya sea dentro de Django mismo o en un foro como Stack Overflow. No tengas miedo de pedir ayuda! Ahora el autor ya no es un campo a rellenar si se crea un nuevo art\u00edculo y sino que se establece autom\u00e1ticamente seg\u00fan el usuario actual conectado. 15.2. Autorizaciones Hay m\u00faltiples problemas en torno a la falta de autorizaciones en nuestro proyecto actual. Nos gustar\u00eda restringir el acceso s\u00f3lo a los usuarios para tener la opci\u00f3n de cobrar un d\u00eda a los lectores de nuestro peri\u00f3dico. Cualquier usuario desconectado al azar que conozca la URL correcta puede acceder a cualquier parte del sitio. 15.3. Mixins Hay que establecer algunas autorizaciones para que s\u00f3lo los usuarios registrados puedan acceder al sitio. Para ello se puede utilizar un mixin , que es un tipo especial de herencia m\u00faltiple que Django utiliza para evitar la duplicaci\u00f3n de c\u00f3digo y permitir la personalizaci\u00f3n . Por ejemplo, el ListView gen\u00e9rico incorporado necesita una forma de devolver una plantilla. Pero tambi\u00e9n lo hace DetailView y, de hecho, casi todas las dem\u00e1s vistas. En lugar de repetir el mismo c\u00f3digo en cada gran vista gen\u00e9rica, Django descompone esta funcionalidad en una \"mezcla\" conocida como TemplateResponseMixin . Tanto la ListView como la DetailView usan esta mezcla para mostrar la plantilla adecuada. Para restringir el acceso a la vista a s\u00f3lo los usuarios conectados, Django tiene un mixin LoginRequired que se puede utilizar. FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Regresar a la URL para crear nuevos mensajes en http://127.0.0.1:8000/articles/new/ y se ver\u00e1 un error: Django se ha redirigido autom\u00e1ticamente a la ubicaci\u00f3n por defecto de la p\u00e1gina de inicio de sesi\u00f3n que est\u00e1 en /accounts/login , sin embargo, en los URLs a nivel de proyecto se usa usando users/ como ruta. Por eso la p\u00e1gina de acceso est\u00e1 en users/login . Entonces, \u00bfc\u00f3mo se informa a ArticleCreateView sobre esto? La respuesta est\u00e1 en la documentaci\u00f3n para LoginRequired mixin. Se puede agregar ua ruta login_url para anular el par\u00e1metro por defecto. Se usa la URL con nombre de la ruta login . FICHERO: articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Probar el enlace para crear nuevos mensajes de nuevo: http://127.0.0.1:8000/articles/new/. Ahora redirige a los usuarios a la p\u00e1gina de acceso. Tal como se deseaba. 15.4 Actualizando las vistas Restringir el acceso a las vistas es s\u00f3lo cuesti\u00f3n de a\u00f1adir LoginRequiredMixin al principio de todas las vistas existentes y especificar el login_url correcto. Actualizar el resto de las vistas de los art\u00edculos ya que no se desea que un usuario pueda crear, leer, actualizar o borrar un mensaje si no est\u00e1 conectado. El archivo completo views.py deber\u00eda tener ahora este aspecto: FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Jugar con el sitio para confirmar que las redirecciones de acceso ahora funcionan como se esperaba. Conclusi\u00f3n La aplicaci\u00f3n para el peri\u00f3dico est\u00e1 casi terminada. Art\u00edculos correctamente configurados Establecidos permisos y autorizaciones La autentificaci\u00f3n de los usuarios est\u00e1 en buen estado. Queda: A\u00f1adir la posibilidad de que otros usuarios conectados dejen comentarios","title":"15. Permisos y Autorizaci\u00f3n"},{"location":"15_permisos_y_autorizacion/#15-permisos-y-autorizacion","text":"Si se quiere que el peri\u00f3dico sea financieramente sostenible se podr\u00eda a\u00f1adir una app de pagos para cobrar por el acceso, para lo que se requiere un proceso de autorizaci\u00f3n , diferente al proceso de autenticaci\u00f3n . La autorizaci\u00f3n restringe el acceso; la autenticaci\u00f3n permite el flujo de registro e inicio de sesi\u00f3n de un usuario. Django incorpora una funcionalidad de autorizaci\u00f3n que se puede utilizar r\u00e1pidamente.","title":"15. Permisos y Autorizaci\u00f3n"},{"location":"15_permisos_y_autorizacion/#151-createview-mejorado","text":"Se van a establecer permisos de edici\u00f3n/borrado para que s\u00f3lo el autor de un art\u00edculo pueda hacer tales cambios. Se va a eliminar el autor de los campos y en su lugar se establecer\u00e1 autom\u00e1ticamente a trav\u00e9s del m\u00e9todo form_valid . FICHERO: articles/views.py ... class ArticleCreateView(CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body'] def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) ... Las vistas gen\u00e9ricas basadas en clases son incre\u00edbles para empezar nuevos proyectos, pero cuando se quieren personalizar, es necesario arremangarse y empezar a entender lo que pasa bajo el cap\u00f3. Lo m\u00e1s probable es que lo que est\u00e1s intentando hacer ya haya sido resuelto en alg\u00fan lugar, ya sea dentro de Django mismo o en un foro como Stack Overflow. No tengas miedo de pedir ayuda! Ahora el autor ya no es un campo a rellenar si se crea un nuevo art\u00edculo y sino que se establece autom\u00e1ticamente seg\u00fan el usuario actual conectado.","title":"15.1. CreateView mejorado"},{"location":"15_permisos_y_autorizacion/#152-autorizaciones","text":"Hay m\u00faltiples problemas en torno a la falta de autorizaciones en nuestro proyecto actual. Nos gustar\u00eda restringir el acceso s\u00f3lo a los usuarios para tener la opci\u00f3n de cobrar un d\u00eda a los lectores de nuestro peri\u00f3dico. Cualquier usuario desconectado al azar que conozca la URL correcta puede acceder a cualquier parte del sitio.","title":"15.2. Autorizaciones"},{"location":"15_permisos_y_autorizacion/#153-mixins","text":"Hay que establecer algunas autorizaciones para que s\u00f3lo los usuarios registrados puedan acceder al sitio. Para ello se puede utilizar un mixin , que es un tipo especial de herencia m\u00faltiple que Django utiliza para evitar la duplicaci\u00f3n de c\u00f3digo y permitir la personalizaci\u00f3n . Por ejemplo, el ListView gen\u00e9rico incorporado necesita una forma de devolver una plantilla. Pero tambi\u00e9n lo hace DetailView y, de hecho, casi todas las dem\u00e1s vistas. En lugar de repetir el mismo c\u00f3digo en cada gran vista gen\u00e9rica, Django descompone esta funcionalidad en una \"mezcla\" conocida como TemplateResponseMixin . Tanto la ListView como la DetailView usan esta mezcla para mostrar la plantilla adecuada. Para restringir el acceso a la vista a s\u00f3lo los usuarios conectados, Django tiene un mixin LoginRequired que se puede utilizar. FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new ... class ArticleCreateView(LoginRequiredMixin, CreateView): # new ... Regresar a la URL para crear nuevos mensajes en http://127.0.0.1:8000/articles/new/ y se ver\u00e1 un error: Django se ha redirigido autom\u00e1ticamente a la ubicaci\u00f3n por defecto de la p\u00e1gina de inicio de sesi\u00f3n que est\u00e1 en /accounts/login , sin embargo, en los URLs a nivel de proyecto se usa usando users/ como ruta. Por eso la p\u00e1gina de acceso est\u00e1 en users/login . Entonces, \u00bfc\u00f3mo se informa a ArticleCreateView sobre esto? La respuesta est\u00e1 en la documentaci\u00f3n para LoginRequired mixin. Se puede agregar ua ruta login_url para anular el par\u00e1metro por defecto. Se usa la URL con nombre de la ruta login . FICHERO: articles/views.py ... class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body',] login_url = 'login' # new def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Probar el enlace para crear nuevos mensajes de nuevo: http://127.0.0.1:8000/articles/new/. Ahora redirige a los usuarios a la p\u00e1gina de acceso. Tal como se deseaba.","title":"15.3. Mixins"},{"location":"15_permisos_y_autorizacion/#154-actualizando-las-vistas","text":"Restringir el acceso a las vistas es s\u00f3lo cuesti\u00f3n de a\u00f1adir LoginRequiredMixin al principio de todas las vistas existentes y especificar el login_url correcto. Actualizar el resto de las vistas de los art\u00edculos ya que no se desea que un usuario pueda crear, leer, actualizar o borrar un mensaje si no est\u00e1 conectado. El archivo completo views.py deber\u00eda tener ahora este aspecto: FICHERO: articles/views.py from django.contrib.auth.mixins import LoginRequiredMixin from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView, DeleteView from django.urls import reverse_lazy from . import models class ArticleListView(LoginRequiredMixin, ListView): model = models.Article template_name = 'article_list.html' login_url = 'login' class ArticleDetailView(LoginRequiredMixin, DetailView): model = models.Article template_name = 'article_detail.html' login_url = 'login' class ArticleUpdateView(LoginRequiredMixin, UpdateView): model = models.Article fields = ['title', 'body', ] template_name = 'article_edit.html' login_url = 'login' class ArticleDeleteView(LoginRequiredMixin, DeleteView): model = models.Article template_name = 'article_delete.html' success_url = reverse_lazy('article_list') login_url = 'login' class ArticleCreateView(LoginRequiredMixin, CreateView): model = models.Article template_name = 'article_new.html' fields = ['title', 'body', ] login_url = 'login' def form_valid(self, form): form.instance.author = self.request.user return super().form_valid(form) Jugar con el sitio para confirmar que las redirecciones de acceso ahora funcionan como se esperaba.","title":"15.4 Actualizando las vistas"},{"location":"15_permisos_y_autorizacion/#conclusion","text":"La aplicaci\u00f3n para el peri\u00f3dico est\u00e1 casi terminada. Art\u00edculos correctamente configurados Establecidos permisos y autorizaciones La autentificaci\u00f3n de los usuarios est\u00e1 en buen estado. Queda: A\u00f1adir la posibilidad de que otros usuarios conectados dejen comentarios","title":"Conclusi\u00f3n"},{"location":"16_comentarios/","text":"16. Comentarios Dos maneras: Crear una aplicaci\u00f3n de comentarios dedicada y enlazarla a los art\u00edculos (sobreingenier\u00eda en este momento). A\u00f1adir un modelo adicional llamado Comment a la aplicaci\u00f3n de art\u00edculos y enlazarlo al modelo de Art\u00edculo a trav\u00e9s de una clave externa. Los usuarios tambi\u00e9n tendr\u00e1n la posibilidad de dejar comentarios en los art\u00edculos de cualquier otro usuario. 16.1. Modelo A\u00f1adir otra tabla a nuestra base de datos existente llamada Comment . Tendr\u00e1 una relaci\u00f3n muchos a uno de clave primaria con Article : un art\u00edculo puede tener muchos comentarios, pero no al rev\u00e9s. Tradicionalmente el nombre del campo de la clave for\u00e1nea es simplemente el modelo con el que se vincula, por lo que este campo se llamar\u00e1 article . Los otros dos campos ser\u00e1n comment y author . FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length=140) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.comment def get_absolute_url(self): return reverse('article_list') El modelo Comment tiene un m\u00e9todo __str__ y un m\u00e9todo get_absolute_url que regresa a la p\u00e1gina principal articles/ . Ya que se han actualizado los modelos, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo. Al a\u00f1adir articles al final de cada comando, lo cual es opcional, estamos especificando que queremos usar s\u00f3lo la aplicaci\u00f3n de art\u00edculos. Esto es un buen h\u00e1bito. Por ejemplo, \u00bfqu\u00e9 pasar\u00eda si se hicieran cambios en los modelos de dos aplicaciones diferentes? Si no especificamos una aplicaci\u00f3n, entonces los cambios de ambas aplicaciones se incorporar\u00e1n en el mismo archivo de migraciones, lo que hace m\u00e1s dif\u00edcil, en el futuro, depurar los errores. Mant\u00e9ngase cada migraci\u00f3n tan peque\u00f1a y contenida como sea posible. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate 16.4 Admin Despu\u00e9s de crear un nuevo modelo es bueno jugar con \u00e9l en la aplicaci\u00f3n de administraci\u00f3n antes de mostrarlo en el sitio web real. A\u00f1adir el Comment al archivo admin.py para que sea visible. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) En este punto se podr\u00edamos a\u00f1adir un campo de administraci\u00f3n adicional para ver el comentario y el art\u00edculo en la p\u00e1gina de administraci\u00f3n de Django. \u00bfPero no ser\u00eda mejor ver todos los modelos de Comment relacionados con un solo modelo Post ? Resulta que s\u00ed, con una funci\u00f3n de administraci\u00f3n de Django llamada inlines que muestra las relaciones de claves externas de una manera m\u00e1s visual y agradable. Hay dos vistas inlines principales: TabularInline y StackedInline . La \u00fanica diferencia entre las dos es el modelo para mostrar la informaci\u00f3n. En una TabularInline todos los campos del modelo aparecen en una l\u00ednea mientras que en una StackedInline cada campo tiene su propia l\u00ednea. Se implementar\u00e1n las dos para decidir cu\u00e1l se prefiere FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Se pueden ver y modificar todos los art\u00edculos y comentarios relacionados en un solo lugar. En caso de usar TabularInline se muestra m\u00e1s informaci\u00f3n en menos espacio. Para cambiar a \u00e9l s\u00f3lo hay que cambiar CommentInline de admin.StackedInline a admin.TabularInline . FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Ver lo cambios en la p\u00e1gina de administraci\u00f3n de Django: todos los campos de cada modelo se muestran en la misma l\u00ednea. 16.5. Plantilla Dado que Comment vive dentro de la app articles existente, s\u00f3lo necesitamos actualizar las plantillas existentes para article_list.html y article_detail.html para mostrar el nuevo contenido. No hay que crear nuevas plantillas y jugar con las urls y las vistas. Lo que se quiere hacer es mostrar todos los comentarios relacionados con un art\u00edculo espec\u00edfico. Esto se llama \"query\" ya que estamos pidiendo a la base de datos una informaci\u00f3n espec\u00edfica. En este caso, al trabajar con una clave rof\u00e1nea, se busca seguir una relaci\u00f3n hacia atr\u00e1s: para cada Article buscar modelos de Comment relacionados. Django tiene una sintaxis incorporada que se puede usar conocida como FOO_set donde FOO es el nombre del modelo fuente en min\u00fasculas. As\u00ed que para el modelo de Article se puede usar article_set para acceder a todas las instancias del modelo. Esta sintaxis es un poco confusa y no intuitiva. Un mejor enfoque es a\u00f1adir un atributo related_name al modelo que permita establecer expl\u00edcitamente el nombre de esta relaci\u00f3n inversa en su lugar. Hag\u00e1moslo. Para empezar, agregar un atributo related_name al modelo de comentarios. Un buen valor por defecto es nombrarlo en el plural del modelo que contiene la clave for\u00e1nea. FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Como se acaba de hacer un cambio en el modelo de base de datos, se necesita crear un archivo de migraciones y actualizar la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Entender las consultas lleva alg\u00fan tiempo, as\u00ed que no preocuparse si la idea de las relaciones inversas es confusa. Y una vez que se dominen estos casos b\u00e1sicos, se puede explorar c\u00f3mo filtrar consultas con gran detalle para que devuelvan exactamente la informaci\u00f3n que se desea. En el archivo article_list.html se pueden a\u00f1adir los comentarios a card-footer . Notar que se han movido los enlaces de edici\u00f3n y borrado a card-body . Para acceder a cada comentario se llama a article.comments.all lo que significa que primero se mira el modelo article , luego comment que es el nombre relacionado a todo el modelo Comment , y se selecciona all included . \u00a1Puede llevar un poco de tiempo acostumbrarse a esta sintaxis para referenciar datos de claves for\u00e1neas en una plantilla! FICHERO: template/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> <p>{{ article.body }}</p> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> <div class=\"card-footer\"> {% for comment in article.comments.all %} <p> <span class=\"font-weight-bold\">{{ comment.author }} &middot;</span> {{ comment }} </p> {% endfor %} </div> </div> <br /> {% endfor %} {% endblock content %} Conclusi\u00f3n Con m\u00e1s tiempo habr\u00eda que centrarse en los formularios para que un usuario pueda escribir un nuevo art\u00edculo directamente en la p\u00e1gina de art\u00edculos, as\u00ed como a\u00f1adir tambi\u00e9n comentarios. Pero el principal objetivo de este cap\u00edtulo es demostrar c\u00f3mo funcionan las relaciones de clave for\u00e1nea en Django. La aplicaci\u00f3n para el peri\u00f3dico ya est\u00e1 completa. Tiene un flujo de autenticaci\u00f3n de usuario robusto, incluyendo el uso del correo electr\u00f3nico para el restablecimiento de la contrase\u00f1a. Tambi\u00e9n se utiliza un modelo de usuario personalizado, por lo que si se quiere a\u00f1adir campos adicionales al modelo de usuario personalizado es tan sencillo como a\u00f1adir un campo adicional. Ya tenemos un campo de edad para todos los usuarios que est\u00e1 siendo configurado por defecto. Se podr\u00eda a\u00f1adir un desplegable de edad al formulario de registro y restringir el acceso de los usuarios s\u00f3lo a los mayores de 13 a\u00f1os. O se podr\u00eda ofrecer descuentos a los usuarios mayores de 65 a\u00f1os. Lo que se quiera hacer con el modelo de usuario personalizado es una opci\u00f3n. La mayor parte del desarrollo web sigue los mismos patrones y al utilizar un framework como Django el 99% de lo que se quiera en t\u00e9rminos de funcionalidad ya est\u00e1 incluido o s\u00f3lo falta una peque\u00f1a personalizaci\u00f3n de alguna funci\u00f3n existente.","title":"16. Comentarios"},{"location":"16_comentarios/#16-comentarios","text":"Dos maneras: Crear una aplicaci\u00f3n de comentarios dedicada y enlazarla a los art\u00edculos (sobreingenier\u00eda en este momento). A\u00f1adir un modelo adicional llamado Comment a la aplicaci\u00f3n de art\u00edculos y enlazarlo al modelo de Art\u00edculo a trav\u00e9s de una clave externa. Los usuarios tambi\u00e9n tendr\u00e1n la posibilidad de dejar comentarios en los art\u00edculos de cualquier otro usuario.","title":"16. Comentarios"},{"location":"16_comentarios/#161-modelo","text":"A\u00f1adir otra tabla a nuestra base de datos existente llamada Comment . Tendr\u00e1 una relaci\u00f3n muchos a uno de clave primaria con Article : un art\u00edculo puede tener muchos comentarios, pero no al rev\u00e9s. Tradicionalmente el nombre del campo de la clave for\u00e1nea es simplemente el modelo con el que se vincula, por lo que este campo se llamar\u00e1 article . Los otros dos campos ser\u00e1n comment y author . FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey(Article, on_delete=models.CASCADE) comment = models.CharField(max_length=140) author = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE, ) def __str__(self): return self.comment def get_absolute_url(self): return reverse('article_list') El modelo Comment tiene un m\u00e9todo __str__ y un m\u00e9todo get_absolute_url que regresa a la p\u00e1gina principal articles/ . Ya que se han actualizado los modelos, es hora de hacer un nuevo archivo de migraci\u00f3n y luego aplicarlo. Al a\u00f1adir articles al final de cada comando, lo cual es opcional, estamos especificando que queremos usar s\u00f3lo la aplicaci\u00f3n de art\u00edculos. Esto es un buen h\u00e1bito. Por ejemplo, \u00bfqu\u00e9 pasar\u00eda si se hicieran cambios en los modelos de dos aplicaciones diferentes? Si no especificamos una aplicaci\u00f3n, entonces los cambios de ambas aplicaciones se incorporar\u00e1n en el mismo archivo de migraciones, lo que hace m\u00e1s dif\u00edcil, en el futuro, depurar los errores. Mant\u00e9ngase cada migraci\u00f3n tan peque\u00f1a y contenida como sea posible. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate","title":"16.1. Modelo"},{"location":"16_comentarios/#164-admin","text":"Despu\u00e9s de crear un nuevo modelo es bueno jugar con \u00e9l en la aplicaci\u00f3n de administraci\u00f3n antes de mostrarlo en el sitio web real. A\u00f1adir el Comment al archivo admin.py para que sea visible. FICHERO: articles/admin.py from django.contrib import admin from . import models admin.site.register(models.Article) admin.site.register(models.Comment) En este punto se podr\u00edamos a\u00f1adir un campo de administraci\u00f3n adicional para ver el comentario y el art\u00edculo en la p\u00e1gina de administraci\u00f3n de Django. \u00bfPero no ser\u00eda mejor ver todos los modelos de Comment relacionados con un solo modelo Post ? Resulta que s\u00ed, con una funci\u00f3n de administraci\u00f3n de Django llamada inlines que muestra las relaciones de claves externas de una manera m\u00e1s visual y agradable. Hay dos vistas inlines principales: TabularInline y StackedInline . La \u00fanica diferencia entre las dos es el modelo para mostrar la informaci\u00f3n. En una TabularInline todos los campos del modelo aparecen en una l\u00ednea mientras que en una StackedInline cada campo tiene su propia l\u00ednea. Se implementar\u00e1n las dos para decidir cu\u00e1l se prefiere FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.StackedInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Se pueden ver y modificar todos los art\u00edculos y comentarios relacionados en un solo lugar. En caso de usar TabularInline se muestra m\u00e1s informaci\u00f3n en menos espacio. Para cambiar a \u00e9l s\u00f3lo hay que cambiar CommentInline de admin.StackedInline a admin.TabularInline . FICHERO: articles/admin.py from django.contrib import admin from . import models class CommentInline(admin.TabularInline): model = models.Comment class ArticleAdmin(admin.ModelAdmin): inlines = [ CommentInline, ] admin.site.register(models.Article, ArticleAdmin) admin.site.register(models.Comment) Ver lo cambios en la p\u00e1gina de administraci\u00f3n de Django: todos los campos de cada modelo se muestran en la misma l\u00ednea.","title":"16.4 Admin"},{"location":"16_comentarios/#165-plantilla","text":"Dado que Comment vive dentro de la app articles existente, s\u00f3lo necesitamos actualizar las plantillas existentes para article_list.html y article_detail.html para mostrar el nuevo contenido. No hay que crear nuevas plantillas y jugar con las urls y las vistas. Lo que se quiere hacer es mostrar todos los comentarios relacionados con un art\u00edculo espec\u00edfico. Esto se llama \"query\" ya que estamos pidiendo a la base de datos una informaci\u00f3n espec\u00edfica. En este caso, al trabajar con una clave rof\u00e1nea, se busca seguir una relaci\u00f3n hacia atr\u00e1s: para cada Article buscar modelos de Comment relacionados. Django tiene una sintaxis incorporada que se puede usar conocida como FOO_set donde FOO es el nombre del modelo fuente en min\u00fasculas. As\u00ed que para el modelo de Article se puede usar article_set para acceder a todas las instancias del modelo. Esta sintaxis es un poco confusa y no intuitiva. Un mejor enfoque es a\u00f1adir un atributo related_name al modelo que permita establecer expl\u00edcitamente el nombre de esta relaci\u00f3n inversa en su lugar. Hag\u00e1moslo. Para empezar, agregar un atributo related_name al modelo de comentarios. Un buen valor por defecto es nombrarlo en el plural del modelo que contiene la clave for\u00e1nea. FICHERO: articles/models.py ... class Comment(models.Model): article = models.ForeignKey( Article, on_delete=models.CASCADE, related_name='comments' # new ) Como se acaba de hacer un cambio en el modelo de base de datos, se necesita crear un archivo de migraciones y actualizar la base de datos. (news) $ python manage.py makemigrations articles (news) $ python manage.py migrate (news) $ python manage.py runserver Entender las consultas lleva alg\u00fan tiempo, as\u00ed que no preocuparse si la idea de las relaciones inversas es confusa. Y una vez que se dominen estos casos b\u00e1sicos, se puede explorar c\u00f3mo filtrar consultas con gran detalle para que devuelvan exactamente la informaci\u00f3n que se desea. En el archivo article_list.html se pueden a\u00f1adir los comentarios a card-footer . Notar que se han movido los enlaces de edici\u00f3n y borrado a card-body . Para acceder a cada comentario se llama a article.comments.all lo que significa que primero se mira el modelo article , luego comment que es el nombre relacionado a todo el modelo Comment , y se selecciona all included . \u00a1Puede llevar un poco de tiempo acostumbrarse a esta sintaxis para referenciar datos de claves for\u00e1neas en una plantilla! FICHERO: template/article_list.html {% extends 'base.html' %} {% block title %}Articles{% endblock %} {% block content %} {% for article in object_list %} <div class=\"card\"> <div class=\"card-header\"> <span class=\"font-weight-bold\">{{ article.title }}</span> &middot; <span class=\"text-muted\">by {{ article.author }} | {{ article.date }}</span> </div> <div class=\"card-body\"> <p>{{ article.body }}</p> <a href=\"{% url 'article_edit' article.pk %}\">Edit</a> | <a href=\"{% url 'article_delete' article.pk %}\">Delete</a> </div> <div class=\"card-footer\"> {% for comment in article.comments.all %} <p> <span class=\"font-weight-bold\">{{ comment.author }} &middot;</span> {{ comment }} </p> {% endfor %} </div> </div> <br /> {% endfor %} {% endblock content %}","title":"16.5. Plantilla"},{"location":"16_comentarios/#conclusion","text":"Con m\u00e1s tiempo habr\u00eda que centrarse en los formularios para que un usuario pueda escribir un nuevo art\u00edculo directamente en la p\u00e1gina de art\u00edculos, as\u00ed como a\u00f1adir tambi\u00e9n comentarios. Pero el principal objetivo de este cap\u00edtulo es demostrar c\u00f3mo funcionan las relaciones de clave for\u00e1nea en Django. La aplicaci\u00f3n para el peri\u00f3dico ya est\u00e1 completa. Tiene un flujo de autenticaci\u00f3n de usuario robusto, incluyendo el uso del correo electr\u00f3nico para el restablecimiento de la contrase\u00f1a. Tambi\u00e9n se utiliza un modelo de usuario personalizado, por lo que si se quiere a\u00f1adir campos adicionales al modelo de usuario personalizado es tan sencillo como a\u00f1adir un campo adicional. Ya tenemos un campo de edad para todos los usuarios que est\u00e1 siendo configurado por defecto. Se podr\u00eda a\u00f1adir un desplegable de edad al formulario de registro y restringir el acceso de los usuarios s\u00f3lo a los mayores de 13 a\u00f1os. O se podr\u00eda ofrecer descuentos a los usuarios mayores de 65 a\u00f1os. Lo que se quiera hacer con el modelo de usuario personalizado es una opci\u00f3n. La mayor parte del desarrollo web sigue los mismos patrones y al utilizar un framework como Django el 99% de lo que se quiera en t\u00e9rminos de funcionalidad ya est\u00e1 incluido o s\u00f3lo falta una peque\u00f1a personalizaci\u00f3n de alguna funci\u00f3n existente.","title":"Conclusi\u00f3n"},{"location":"17_docker/","text":"18. Docker La configuraci\u00f3n adecuada de un entorno de desarrollo local sigue siendo un gran reto a pesar de todos los otros avances de la programaci\u00f3n moderna. Simplemente hay demasiadas variables: diferentes ordenadores , sistemas operativos , versiones de lenguajes y frameworks , opciones de entornos virtuales , y as\u00ed sucesivamente. Cuando se a\u00f1ade el reto de trabajar en equipo en un entorno en el que todos necesitan tener la misma configuraci\u00f3n, el problema se magnifica. En los \u00faltimos a\u00f1os ha surgido una soluci\u00f3n: Docker . Aunque s\u00f3lo tiene unos pocos a\u00f1os, Docker se ha convertido r\u00e1pidamente en la opci\u00f3n por defecto para muchos desarrolladores que trabajan en proyectos a nivel de producci\u00f3n. Con Docker finalmente es posible reproducir un entorno de producci\u00f3n de forma fiel y fiable localmente, desde la versi\u00f3n adecuada de Python hasta la instalaci\u00f3n de Django a la par de ejecutar servicios adicionales como una base de datos a nivel de producci\u00f3n. Esto significa que ya no es importante si se desarrolla en un equipo Linux, Mac o Windows. Todo funciona dentro del mismo Docker. Docker tambi\u00e9n facilita exponencialmente la colaboraci\u00f3n en equipo. Atr\u00e1s quedaron los d\u00edas de compartir archivos README largos y obsoletos para a\u00f1adir un nuevo desarrollador a un proyecto de grupo. En lugar de eso, con Docker s\u00f3lo se tienen que compartir dos archivos: Dockerfile y docker-compose.yml y el desarrollador puede tener la confianza de que su entorno de desarrollo local es exactamente igual que el del resto del equipo . Docker no es una tecnolog\u00eda perfecta. Todav\u00eda es relativamente nueva y compleja bajo el cap\u00f3; a\u00fan est\u00e1 en desarrollo activo. Pero aspira a la promesa de una pol\u00edtica coherente y a un entorno de desarrollo compartible, que pueda ejecutarse localmente en cualquier ordenador o desplegado en cualquier servidor, lo que lo convierte en una opci\u00f3n s\u00f3lida. 18.1. \u00bfQu\u00e9 es Docker? Docker es una forma de aislar todo un sistema operativo a trav\u00e9s de contenedores Linux que son un tipo de virtualizaci\u00f3n. La virtualizaci\u00f3n tiene sus ra\u00edces en los inicios de la inform\u00e1tica cuando las computadoras grandes y caras eran la norma. \u00bfC\u00f3mo podr\u00edan varios programadores utilizar la misma m\u00e1quina?. La respuesta fue la virtualizaci\u00f3n y espec\u00edficamente las m\u00e1quinas virtuales que son copias completas de un sistema inform\u00e1tico desde el sistema operativo en adelante. Cuando se alquila un espacio en un proveedor de cloud computing como Amazon Web Services (AWS) normalmente no se proporciona una pieza de hardware dedicada. En lugar de eso, se comparte un servidor f\u00edsico con otros clientes. Pero como cada cliente tiene su propio sistema virtual que se ejecuta en el servidor, le parece que tiene el suyo propio. Esta tecnolog\u00eda es la que hace posible a\u00f1adir o eliminar servidores de un servicio de cloud de forma r\u00e1pida y sencilla. Se trata en gran medida de software entre bastidores, no de hardware real. \u00bfCu\u00e1l es el inconveniente de una m\u00e1quina virtual? Tama\u00f1o y velocidad. Un sistema operativo hu\u00e9sped t\u00edpico ( guest ) puede ocupar f\u00e1cilmente hasta 700MB de tama\u00f1o. As\u00ed que si un servidor f\u00edsico soporta tres m\u00e1quinas virtuales, eso es al menos 2,1 GB de espacio en disco ocupado junto con el resto de necesidades para otros recursos como CPU y memoria. Al entrar en Docker, la idea clave es que la mayor\u00eda de los ordenadores dependen del mismo sistema operativo Linux . \u00bfY si virtualizamos desde la capa de Linux hacia arriba? \u00bfNo proporcionar\u00eda eso una forma m\u00e1s r\u00e1pida y ligera de duplicar gran parte de la misma funcionalidad? La respuesta es s\u00ed. Y en los \u00faltimos a\u00f1os los contenedores Linux se han vuelto muy populares. Para la mayor\u00eda de las aplicaciones -especialmente las aplicaciones web- una m\u00e1quina virtual proporciona mucho m\u00e1s recursos de los que se necesitan y un contenedor es m\u00e1s que suficiente. Esto, fundamentalmente, es Docker: \u00a1una forma de implementar contenedores Linux! Una analog\u00eda que podemos usar es la de los edificios y los apartamentos. Las m\u00e1quinas virtuales son como viviendas: edificios independientes con su propia infraestructura, incluida la fontaner\u00eda y calefacci\u00f3n, as\u00ed como cocina, ba\u00f1os, dormitorios, etc. Los contenedores Docker son como los apartamentos: comparten una infraestructura com\u00fan como la fontaner\u00eda y la calefacci\u00f3n, pero vienen en varios tama\u00f1os que se ajustan a las necesidades exactas de un propietario. 18.2. Contenedores vs. Entornos Virtuales Como programador de Python se debe estar familiarizado con el concepto de entornos virtuales que son una forma de aislar los paquetes Python. Gracias al entorno virtual, una computadora puede ejecutar m\u00faltiples proyectos localmente. Por ejemplo, el Proyecto A podr\u00eda usar Python 3.4 y Django 1.11 entre otras dependencias; mientras que el Proyecto B usa Python 3.8 y Django 2.2. Configurando un entorno virtual dedicado en cada proyecto se puede gestionar estos diferentes paquetes de software sin contaminar nuestro entorno global. Hay una peque\u00f1a confusi\u00f3n derivada de que hay m\u00faltiples herramientas en este momento para implementar un entorno virtual: desde virtualenv , venv a Pipenv , pero fundamentalmente todas hacen lo mismo. La mayor distinci\u00f3n entre los entornos virtuales y Docker es que los entornos virtuales s\u00f3lo pueden aislar paquetes Python. No pueden aislar a los no-Python como una base de datos PostgreSQL o MySQL. Y siguen dependiendo del sistema global; de la instalaci\u00f3n de Python a nivel de sistema (en otras palabras, de su ordenador). Los entornos virtuales apuntan a una instalaci\u00f3n Python existente; no contienen Python en s\u00ed mismos . Los contenedores Linux van un paso m\u00e1s all\u00e1 y a\u00edslan todo el sistema operativo , no s\u00f3lo las partes de Python. En otras palabras, instalaremos el propio Python dentro de Docker, as\u00ed como se instalar\u00e1 y ejecutar\u00e1 en \u00e9l la base de datos a nivel de producci\u00f3n. Docker en s\u00ed mismo es un tema complejo y no se va a profundizar tanto en \u00e9l, sin embargo, es importante comprender sus antecedentes y componentes clave. Si quieres aprender m\u00e1s sobre \u00e9l puedes acceder a diferentes cursos de los que dispones en la plataforma de OpenWebinars . 18.3. Instalar Docker Ok, suficiente teor\u00eda. Empecemos a usar Docker y Django juntos. El primer paso es registrarse en Docker Hub para obtener una cuenta gratuita y luego instalar la aplicaci\u00f3n de escritorio Docker en nuestra m\u00e1quina local: Docker para Linux Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker Docker para Mac Docker para Windows Esta descarga puede tomarse alg\u00fan tiempo ya que es un archivo grande. Una vez que Docker se haya terminado de instalar, podemos confirmar que se est\u00e1 ejecutando la versi\u00f3n correcta escribiendo docker --version en la l\u00ednea de comandos. Debe ser al menos la versi\u00f3n 18. $ docker --version Docker versi\u00f3n 19.03.5-ce, build 633a0ea838 Docker se utiliza a menudo con una herramienta adicional, Docker Compose , para ayudar a automatizar los comandos. Docker Compose se incluye con las descargas de Mac y Windows, pero si se est\u00e1 en Linux, tendr\u00e1 que a\u00f1adirse manualmente. Puede hacerse ejecutando el comando sudo pip install docker-compose despu\u00e9s de que la instalaci\u00f3n de Docker haya finalizado. Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker-compose . (Si surgen problemas con alg\u00fan fichero ya instalado en el sistema, borrar todos aquellos ficheros que est\u00e9n involucrados y proceder con la instalaci\u00f3n como se indica) 18.4. Docker, Hola Mundo Docker se env\u00eda con su propia imagen de \"Hello, World\" que es un primer paso \u00fatil para comprobar la instalaci\u00f3n. Introducir en la l\u00ednea de comandos el comando docker run hello-world . Esto descargar\u00e1 una imagen Docker oficial y luego se ejecutar\u00e1 dentro de un contenedor. Se discutir\u00e1 sobre las im\u00e1genes y los contenedores en breve. $ docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:b8ba256769a0ac28dd126d584e0a2011cd2877f3f76e093a7ae560f2a5301c00 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ El comando docker info nos permite inspeccionar Docker. Contendr\u00e1 una gran cantidad de informaci\u00f3n, pero si nos centramos en las l\u00edneas superiores tenemos 1 contenedor que se detenido y 1 imagen. $ docker info Client: Debug Mode: false Server: Containers: 1 Running: 0 Paused: 0 Stopped: 1 Images: 1 ... 18.5. Django, Hola mundo Ahora vamos a crear un proyecto de Django \"Hello, World\" que se ejecuta localmente en nuestro ordenador y luego lo moveremos por completo dentro de Docker para que se pueda ver c\u00f3mo encajan todas las piezas. El primer paso es elegir una ubicaci\u00f3n para nuestro c\u00f3digo. Esto puede ser en cualquier parte del ordenador pero si se est\u00e1 en Linux, una ubicaci\u00f3n f\u00e1cil de encontrar es el Escritorio . Desde la l\u00ednea de comandos navegamos hasta el Escritorio y creamos un directorio code para todos los ejemplos: $ cd ~/Desktop $ mkdir code && cd code Luego creeamos un directorio hello donde instalaremos Django usando Pipenv que crea un archivo Pipfile y un archivo Pipfile.lock. Activamos el entorno virtual con el comando shell . $ mkdir hello && cd hello pipenv install django==2.2.7 $ pipenv shell (hello) $ Si se necesita ayuda para instalar Pipenv o Python 3, se pueden encontrar m\u00e1s detalles aqu\u00ed . Ahora podemos usar el comando startproject para crear un nuevo proyecto de Django llamado hello_project . A\u00f1adir un punto, . , al final del comando es un paso opcional pero muchos desarrolladores de Django lo hacen. Sin el punto, Django a\u00f1ade un directorio adicional al proyecto; con el . , esto no ocurre. Por \u00faltimo, utilice el comando migrate para inicializar la base de datos e iniciar la web local con el comando runserver . (hola) $ django-admin startproject hello_project . (hola) $ python manage.py migrate (hola) $ python manage.py runserver Suponiendo que todo ha funcionado correctamente, ahora deber\u00edamos poder navegar para ver el la p\u00e1gica de bienvenida de Django en http://127.0.0.1:8000/ en su navegador web. 18.6. Pages App Ahora haremos una p\u00e1gina de inicio simple creando una pages app espec\u00edfica para ello. Parar el servidor local escribiendo Control+c y luego usar el comando startapp a\u00f1adiendo el nombre de la pages que se desee. (hola) $ python manage.py startapp pages Django instala autom\u00e1ticamente un nuevo directorio de p\u00e1ginas y varios archivos para nosotros. Pero incluso aunque la app ha sido creada, nuestro hello_project no la reconocer\u00e1 hasta que la a\u00f1adamos a la configuraci\u00f3n de INSTALLED_APPS de archivo hello_project/settings.py . Django carga las apps de arriba a abajo, por lo que, en general, es una buena pr\u00e1ctica a\u00f1adir las nuevas aplicaciones debajo de las aplicaciones incorporadas en las que pueden confiar, tales como admin , auth , y todas las aplicaciones restantes. T\u00e9ngase en cuenta que si bien es posible simplemente escribir el nombre de la app, pages , es mejor escribir la pages.apps.apps.PagesConfig completa lo que abre m\u00e1s posibilidades en la configuraci\u00f3n de las apps. # hello_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'pages.apps.apps.PagesConfig', # nuevo ] Ahora podemos establecer la ruta URL para la app pages . Ya que queremos que nuestro mensaje aparezca en la p\u00e1gina de inicio usaremos la cadena vac\u00eda '' . No olvidar a\u00f1adir la importaci\u00f3n de include en la segunda l\u00ednea tambi\u00e9n. # hello_project/urls.py from django.contrib import admin from django.urls import path, include # nuevo urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # nuevo ] En lugar de crear una plantilla en este punto, podemos simplemente codificar un mensaje en nuestra capa de la vista pages/views.py que producir\u00e1 la cadena Hello, World! . # pages/views.py from django.http import HttpResponse def home_page_view(request): return HttpResponse('Hello, World!') \u00bfQu\u00e9 es lo siguiente? El \u00faltimo paso es crear un archivo urls.py dentro de la app pages y enlazarlo to home_page_view . Si se encuentra en un ordenador Mac o Linux, el comando touch se puede usar desde la l\u00ednea de comandos para crear nuevos archivos. En Windows habr\u00e1 que crear el nuevo archivo con un editor de texto. (hola) $ touch pages/urls.py En el editor de texto importar path en la primera l\u00ednea, a\u00f1adir la home_page_view , y colocar su ruta para otra vez ser la cadena vac\u00eda ''. N\u00f3tese que tambi\u00e9n provee un nombre opcional, home , para esta ruta lo cual es una buena pr\u00e1ctica. # pages/urls.py from django.urls import path from .views import home_page_view urlpatterns = [ path('', home_page_view, name='home') ] El flujo completo de nuestra p\u00e1gina web Django es el siguiente: cuando un usuario va a su homepage ser\u00e1 primero encaminado a hello_project/urls.py luego a pages/urls.py y finalmente dirigido a la home_page_view que devuelve la cadena Hello, World! El trabajo para una p\u00e1gina de inicio b\u00e1sica ha terminado. Iniciemos de nuevo el servidor local. (hola) $ python manage.py runserver Si se actualiza el navegador web en http://127.0.0.1:8000/, ahora saldr\u00e1 nuestro deseado mensaje. Ahora es el momento de cambiar a Docker. Detengamos de nuevo el servidor local con Ctrl+C y salgamos de nuestro entorno virtual, que ya no necesitamos, escribiendo exit . (hello) $ exit $ \u00bfC\u00f3mo sabemos que nuestro entorno virtual ya no est\u00e1 activo? No habr\u00e1 un par\u00e9ntesis alrededor del nombre de directorio en el prompt. Cualquier comando Django normal que se intente ejecutar en este punto fallar\u00e1. Por ejemplo, probar python manage.py runserver para ver lo que ocurre. $ python manage.py runserver File \"./manage.py\", line 14 ) from exc ^ SyntaxError: invalid syntax Esto significa que estamos totalmente fuera del entorno virtual y preparados para Docker. 18.7. Im\u00e1genes, Contenedores y el \"Docker Host\" Una imagen Docker es una instant\u00e1nea en el tiempo de lo que contiene un proyecto. Est\u00e1 representado por un Dockerfile y es literalmente una lista de instrucciones que deben ser construidas/ejecutadas. Un contenedor Docker es una instancia en ejecuci\u00f3n de una imagen. Para continuar con la analog\u00eda de nuestro apartamento de antes, la imagen es el plano o conjunto de planos del apartamento; el contenedor es el edificio real totalmente construido. El tercer concepto central es el Docker host , que es el sistema operativo subyacente. Es posible tener varios contenedores ejecut\u00e1ndose dentro de un mismo Docker host . Cuando nos referimos a c\u00f3digo o procesos que se ejecutan en el Docker, significa que se ejecutan en el Docker host . Creemos nuestro primer Dockerfile para ver toda esta teor\u00eda en acci\u00f3n. $ touch Dockerfile Dentro del Dockerfile agregamos el siguiente c\u00f3digo que recorreremos l\u00ednea por l\u00ednea m\u00e1s abajo. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Los Dockerfiles se leen de arriba hacia abajo cuando se crea una imagen. La primera instrucci\u00f3n debe ser el comando FROM que nos permite importar una imagen base que usar, en nuestro caso Python 3.8 . Luego usamos el comando ENV para establecer dos variables de entorno: PYTHONUNBUFFERED asegura que la salida de nuestra consola se vea familiar y que no est\u00e9 almacenada en un b\u00fafer de Docker, lo cual no queremos PYTHONDONTWRITEBYTECODE significa que Python no intentar\u00e1 escribir archivos .pyc , que tampoco deseamos A continuaci\u00f3n usamos WORKDIR para establecer una ruta de directorio de trabajo por defecto dentro de nuestra imagen llamada code que es donde guardaremos nuestro c\u00f3digo. Si no lo hicimos, entonces cada vez que queramos ejecutar comandos dentro de nuestro contenedor tendr\u00edamos que escribir una ruta muy larga. En su lugar, Docker asumir\u00e1 que queremos ejecutar todos los comandos desde este directorio. Para nuestras dependencias estamos usando pipenv , as\u00ed que copiamos tanto el archivo Pipfile como el archivo Pipfile.lock en el directorio /code/ en Docker. Vale la pena tomarse un momento para explicar por qu\u00e9 pipenv crea un Pipfile.lock . El concepto de bloqueo de archivos no es exclusivo de Python o Pipenv; de hecho ya est\u00e1 presente en los gestores de paquetes de los lenguajes de programaci\u00f3n m\u00e1s modernos: Gemfile.lock en Ruby, yarn.lock en JavaScript, composer.lock en PHP, etc. Pipenv fue el primer proyecto popular en incorporarlos en la paqueter\u00eda de Python. La ventaja de un archivo de bloqueo es que esto conduce a una construcci\u00f3n determinista: no importa cu\u00e1ntas veces se instalen los paquetes de software, se obtendr\u00e1 el mismo resultado. Sin un fichero lock que \"bloquee\" las dependencias y su orden, no se cumplir\u00eda necesariamente. Lo que significa que dos miembros del equipo que instalan la misma lista de software pueden tener instalaciones de construcci\u00f3n ligeramente diferentes. Cuando estamos trabajando con Docker donde hay c\u00f3digo tanto local en nuestro ordenador como tambi\u00e9n dentro de Docker, el potencial de conflictos de Pipfile.lock surge cuando se actualizan paquetes de software. Siguiendo adelante usamos el comando RUN para instalar primero pipenv y luego pipenv install para instalar los paquetes de software listados en nuestro Pipfile.lock, actualmente s\u00f3lo Django. Es un es importante a\u00f1adir tambi\u00e9n el indicador --system , ya que por defecto Pipenv buscar\u00e1 el par\u00e1metro en el que instalar cualquier paquete, pero como estamos dentro de Docker ahora, t\u00e9cnicamente no hay ning\u00fan entorno virtual. En cierto modo, el contenedor Docker es nuestro entorno virtual y mucho m\u00e1s. As\u00ed que debemos usar la bandera --system para asegurarnos de que nuestros paquestes est\u00e1n disponibles en todo el Docker para nosotros. Como paso final copiamos el resto de nuestro c\u00f3digo local en el directorio /code/ dentro de Docker. \u00bfPor qu\u00e9 copiamos el c\u00f3digo local dos veces, primero el Pipfile y Pipfile.lock y luego el resto? La raz\u00f3n es que las im\u00e1genes se crean en base a instrucciones de arriba hacia abajo por lo que queremos que las cosas que cambian a menudo -como nuestro c\u00f3digo local- sea el \u00faltimo. De esta manera s\u00f3lo tenemos que regenerar esa parte de la imagen ante un cambio y no se reinstala todo cada vez que lo haya. Como el software de los paquetes contenidos en nuestros Pipfile y Pipfile.lock cambian con poca frecuencia, implica que no tiene sentido copiarlos e instalarlos antes. Nuestras instrucciones de imagen ya est\u00e1n hechas, as\u00ed que vamos a construir la imagen usando el comando docker build . . El punto . indica que el directorio actual es donde se debe ejecutar el comando comando. Se genera una gran cantidad de texto en pantalla; s\u00f3lo se incluye las dos primeras l\u00edneas y las tres \u00faltimas. $ docker build . Sending build context to Docker daemon 154.1kB Step 1/7 : FROM python:3.8 ... Step 7/7 : COPY . /code/ ---> a48b2acb1fcc Successfully built a48b2acb1fcc Pasando a lo siguiente, ahora necesitamos crear un archivo docker-composition.yml para controlar c\u00f3mo ejecutar el comando que ser\u00e1 construido en base a nuestra imagen de Dockerfile . $ touch docker-compose.yml Contendr\u00e1 el siguiente c\u00f3digo version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 En la l\u00ednea superior se especifica la versi\u00f3n m\u00e1s reciente de Docker Compose que es actualmente 3.7 (no confundir con la versi\u00f3n de Python que puede ser bien parecida) A continuaci\u00f3n, especificamos qu\u00e9 services (o contenedores) queremos que funcionen en nuestro \"Docker host\". Es posible tener varios services funcionando, pero por ahora s\u00f3lo tenemos uno para el servidor web . Especificaremos c\u00f3mo construir el contenedor diciendo, \"Busca el directorio en curso . el Dockerfile \" . Luego, dentro del contenedor, ejecute el comando para arrancar el servidor local. El montaje de los vol\u00famenes sincroniza autom\u00e1ticamente el sistema de archivos Docker con nuestro sistema de archivos local. \u00a1Esto significa que no tenemos que reconstruir la imagen cada vez que cambiamos un solo fichero!. Por \u00faltimo especificamos los puertos ( ports ) a exponer dentro de Docker que solo ser\u00e1 el 8000, que es el puerto Django por defecto. Si es la primera vez que utiliza Docker, es muy probable que se est\u00e9 muy confundido en este momento. No hay motivo de preocupaci\u00f3n. Crearemos m\u00faltiples im\u00e1genes y contenedores Docker y, con la pr\u00e1ctica, el flujo comenzar\u00e1 a tener m\u00e1s sentido. Se ver\u00e1 como se usan archivos Dockerfile y docker-composition.yml muy similares en cada uno de los proyectos. El paso final es ejecutar nuestro contenedor Docker usando el comando docker-compose up . Este comando resultar\u00e1 en otro largo flujo de texto de salida en la l\u00ednea de comandos. $ docker-compose up Creating network \"hello_default\" with the default driver Building web Step 1/7 : FROM python:3.8 ... Creating hello_web_1 ... done Attaching to hello_web_1 web_1 | Performing system checks... web_1 | web_1 | System check identified no issues (0 silenced). web_1 | September 20, 2019 - 17:21:57 web_1 | Django version 2.2.5, using settings 'hello_project.settings' web_1 | Starting development server at http://0.0.0.0:8000/ web_1 | Quit the server with CONTROL-C. Para confirmar que realmente funcion\u00f3, volveremos a poner http://127.0.0.1:8000/ en el navegador web. Actualizaremos la p\u00e1gina y aparecer\u00e1 la p\u00e1gina \"Hello, World\". Django se est\u00e1 ejecutando ahora puramente dentro de un contenedor Docker. No estamos trabajando dentro de un entorno virtual local. No ejecutamos el comando runserver . Todo nuestro c\u00f3digo y nuestro servidor Django se est\u00e1 ejecutando desde dentro de un Docker aut\u00f3nomo. !Todo un \u00e9xito! Detendremos el contenedor con Ctrl+C y adem\u00e1s escribiremos docker-compose down . Los contenedores absorben una gran cantidad de memoria, as\u00ed que es una buena idea detenerlos de esta manera cuando hayamos terminado de usarlos. Los contenedores se han concebido para ser est\u00e1ticos (no pueden cambiar), por lo que utilizamos volumes para copiar nuestro c\u00f3digo en sitios donde si que pueda guardarse. $ docker-compose down Removing hello_web_1 ... done Removing network hello_default","title":"18. Docker"},{"location":"17_docker/#18-docker","text":"La configuraci\u00f3n adecuada de un entorno de desarrollo local sigue siendo un gran reto a pesar de todos los otros avances de la programaci\u00f3n moderna. Simplemente hay demasiadas variables: diferentes ordenadores , sistemas operativos , versiones de lenguajes y frameworks , opciones de entornos virtuales , y as\u00ed sucesivamente. Cuando se a\u00f1ade el reto de trabajar en equipo en un entorno en el que todos necesitan tener la misma configuraci\u00f3n, el problema se magnifica. En los \u00faltimos a\u00f1os ha surgido una soluci\u00f3n: Docker . Aunque s\u00f3lo tiene unos pocos a\u00f1os, Docker se ha convertido r\u00e1pidamente en la opci\u00f3n por defecto para muchos desarrolladores que trabajan en proyectos a nivel de producci\u00f3n. Con Docker finalmente es posible reproducir un entorno de producci\u00f3n de forma fiel y fiable localmente, desde la versi\u00f3n adecuada de Python hasta la instalaci\u00f3n de Django a la par de ejecutar servicios adicionales como una base de datos a nivel de producci\u00f3n. Esto significa que ya no es importante si se desarrolla en un equipo Linux, Mac o Windows. Todo funciona dentro del mismo Docker. Docker tambi\u00e9n facilita exponencialmente la colaboraci\u00f3n en equipo. Atr\u00e1s quedaron los d\u00edas de compartir archivos README largos y obsoletos para a\u00f1adir un nuevo desarrollador a un proyecto de grupo. En lugar de eso, con Docker s\u00f3lo se tienen que compartir dos archivos: Dockerfile y docker-compose.yml y el desarrollador puede tener la confianza de que su entorno de desarrollo local es exactamente igual que el del resto del equipo . Docker no es una tecnolog\u00eda perfecta. Todav\u00eda es relativamente nueva y compleja bajo el cap\u00f3; a\u00fan est\u00e1 en desarrollo activo. Pero aspira a la promesa de una pol\u00edtica coherente y a un entorno de desarrollo compartible, que pueda ejecutarse localmente en cualquier ordenador o desplegado en cualquier servidor, lo que lo convierte en una opci\u00f3n s\u00f3lida.","title":"18. Docker"},{"location":"17_docker/#181-que-es-docker","text":"Docker es una forma de aislar todo un sistema operativo a trav\u00e9s de contenedores Linux que son un tipo de virtualizaci\u00f3n. La virtualizaci\u00f3n tiene sus ra\u00edces en los inicios de la inform\u00e1tica cuando las computadoras grandes y caras eran la norma. \u00bfC\u00f3mo podr\u00edan varios programadores utilizar la misma m\u00e1quina?. La respuesta fue la virtualizaci\u00f3n y espec\u00edficamente las m\u00e1quinas virtuales que son copias completas de un sistema inform\u00e1tico desde el sistema operativo en adelante. Cuando se alquila un espacio en un proveedor de cloud computing como Amazon Web Services (AWS) normalmente no se proporciona una pieza de hardware dedicada. En lugar de eso, se comparte un servidor f\u00edsico con otros clientes. Pero como cada cliente tiene su propio sistema virtual que se ejecuta en el servidor, le parece que tiene el suyo propio. Esta tecnolog\u00eda es la que hace posible a\u00f1adir o eliminar servidores de un servicio de cloud de forma r\u00e1pida y sencilla. Se trata en gran medida de software entre bastidores, no de hardware real. \u00bfCu\u00e1l es el inconveniente de una m\u00e1quina virtual? Tama\u00f1o y velocidad. Un sistema operativo hu\u00e9sped t\u00edpico ( guest ) puede ocupar f\u00e1cilmente hasta 700MB de tama\u00f1o. As\u00ed que si un servidor f\u00edsico soporta tres m\u00e1quinas virtuales, eso es al menos 2,1 GB de espacio en disco ocupado junto con el resto de necesidades para otros recursos como CPU y memoria. Al entrar en Docker, la idea clave es que la mayor\u00eda de los ordenadores dependen del mismo sistema operativo Linux . \u00bfY si virtualizamos desde la capa de Linux hacia arriba? \u00bfNo proporcionar\u00eda eso una forma m\u00e1s r\u00e1pida y ligera de duplicar gran parte de la misma funcionalidad? La respuesta es s\u00ed. Y en los \u00faltimos a\u00f1os los contenedores Linux se han vuelto muy populares. Para la mayor\u00eda de las aplicaciones -especialmente las aplicaciones web- una m\u00e1quina virtual proporciona mucho m\u00e1s recursos de los que se necesitan y un contenedor es m\u00e1s que suficiente. Esto, fundamentalmente, es Docker: \u00a1una forma de implementar contenedores Linux! Una analog\u00eda que podemos usar es la de los edificios y los apartamentos. Las m\u00e1quinas virtuales son como viviendas: edificios independientes con su propia infraestructura, incluida la fontaner\u00eda y calefacci\u00f3n, as\u00ed como cocina, ba\u00f1os, dormitorios, etc. Los contenedores Docker son como los apartamentos: comparten una infraestructura com\u00fan como la fontaner\u00eda y la calefacci\u00f3n, pero vienen en varios tama\u00f1os que se ajustan a las necesidades exactas de un propietario.","title":"18.1. \u00bfQu\u00e9 es Docker?"},{"location":"17_docker/#182-contenedores-vs-entornos-virtuales","text":"Como programador de Python se debe estar familiarizado con el concepto de entornos virtuales que son una forma de aislar los paquetes Python. Gracias al entorno virtual, una computadora puede ejecutar m\u00faltiples proyectos localmente. Por ejemplo, el Proyecto A podr\u00eda usar Python 3.4 y Django 1.11 entre otras dependencias; mientras que el Proyecto B usa Python 3.8 y Django 2.2. Configurando un entorno virtual dedicado en cada proyecto se puede gestionar estos diferentes paquetes de software sin contaminar nuestro entorno global. Hay una peque\u00f1a confusi\u00f3n derivada de que hay m\u00faltiples herramientas en este momento para implementar un entorno virtual: desde virtualenv , venv a Pipenv , pero fundamentalmente todas hacen lo mismo. La mayor distinci\u00f3n entre los entornos virtuales y Docker es que los entornos virtuales s\u00f3lo pueden aislar paquetes Python. No pueden aislar a los no-Python como una base de datos PostgreSQL o MySQL. Y siguen dependiendo del sistema global; de la instalaci\u00f3n de Python a nivel de sistema (en otras palabras, de su ordenador). Los entornos virtuales apuntan a una instalaci\u00f3n Python existente; no contienen Python en s\u00ed mismos . Los contenedores Linux van un paso m\u00e1s all\u00e1 y a\u00edslan todo el sistema operativo , no s\u00f3lo las partes de Python. En otras palabras, instalaremos el propio Python dentro de Docker, as\u00ed como se instalar\u00e1 y ejecutar\u00e1 en \u00e9l la base de datos a nivel de producci\u00f3n. Docker en s\u00ed mismo es un tema complejo y no se va a profundizar tanto en \u00e9l, sin embargo, es importante comprender sus antecedentes y componentes clave. Si quieres aprender m\u00e1s sobre \u00e9l puedes acceder a diferentes cursos de los que dispones en la plataforma de OpenWebinars .","title":"18.2. Contenedores vs. Entornos Virtuales"},{"location":"17_docker/#183-instalar-docker","text":"Ok, suficiente teor\u00eda. Empecemos a usar Docker y Django juntos. El primer paso es registrarse en Docker Hub para obtener una cuenta gratuita y luego instalar la aplicaci\u00f3n de escritorio Docker en nuestra m\u00e1quina local: Docker para Linux Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker Docker para Mac Docker para Windows Esta descarga puede tomarse alg\u00fan tiempo ya que es un archivo grande. Una vez que Docker se haya terminado de instalar, podemos confirmar que se est\u00e1 ejecutando la versi\u00f3n correcta escribiendo docker --version en la l\u00ednea de comandos. Debe ser al menos la versi\u00f3n 18. $ docker --version Docker versi\u00f3n 19.03.5-ce, build 633a0ea838 Docker se utiliza a menudo con una herramienta adicional, Docker Compose , para ayudar a automatizar los comandos. Docker Compose se incluye con las descargas de Mac y Windows, pero si se est\u00e1 en Linux, tendr\u00e1 que a\u00f1adirse manualmente. Puede hacerse ejecutando el comando sudo pip install docker-compose despu\u00e9s de que la instalaci\u00f3n de Docker haya finalizado. Para distribuciones basadas en Arch ser\u00e1 algo tan f\u00e1cil como ejecutar pacman -S docker-compose . (Si surgen problemas con alg\u00fan fichero ya instalado en el sistema, borrar todos aquellos ficheros que est\u00e9n involucrados y proceder con la instalaci\u00f3n como se indica)","title":"18.3. Instalar Docker"},{"location":"17_docker/#184-docker-hola-mundo","text":"Docker se env\u00eda con su propia imagen de \"Hello, World\" que es un primer paso \u00fatil para comprobar la instalaci\u00f3n. Introducir en la l\u00ednea de comandos el comando docker run hello-world . Esto descargar\u00e1 una imagen Docker oficial y luego se ejecutar\u00e1 dentro de un contenedor. Se discutir\u00e1 sobre las im\u00e1genes y los contenedores en breve. $ docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:b8ba256769a0ac28dd126d584e0a2011cd2877f3f76e093a7ae560f2a5301c00 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ El comando docker info nos permite inspeccionar Docker. Contendr\u00e1 una gran cantidad de informaci\u00f3n, pero si nos centramos en las l\u00edneas superiores tenemos 1 contenedor que se detenido y 1 imagen. $ docker info Client: Debug Mode: false Server: Containers: 1 Running: 0 Paused: 0 Stopped: 1 Images: 1 ...","title":"18.4. Docker, Hola Mundo"},{"location":"17_docker/#185-django-hola-mundo","text":"Ahora vamos a crear un proyecto de Django \"Hello, World\" que se ejecuta localmente en nuestro ordenador y luego lo moveremos por completo dentro de Docker para que se pueda ver c\u00f3mo encajan todas las piezas. El primer paso es elegir una ubicaci\u00f3n para nuestro c\u00f3digo. Esto puede ser en cualquier parte del ordenador pero si se est\u00e1 en Linux, una ubicaci\u00f3n f\u00e1cil de encontrar es el Escritorio . Desde la l\u00ednea de comandos navegamos hasta el Escritorio y creamos un directorio code para todos los ejemplos: $ cd ~/Desktop $ mkdir code && cd code Luego creeamos un directorio hello donde instalaremos Django usando Pipenv que crea un archivo Pipfile y un archivo Pipfile.lock. Activamos el entorno virtual con el comando shell . $ mkdir hello && cd hello pipenv install django==2.2.7 $ pipenv shell (hello) $ Si se necesita ayuda para instalar Pipenv o Python 3, se pueden encontrar m\u00e1s detalles aqu\u00ed . Ahora podemos usar el comando startproject para crear un nuevo proyecto de Django llamado hello_project . A\u00f1adir un punto, . , al final del comando es un paso opcional pero muchos desarrolladores de Django lo hacen. Sin el punto, Django a\u00f1ade un directorio adicional al proyecto; con el . , esto no ocurre. Por \u00faltimo, utilice el comando migrate para inicializar la base de datos e iniciar la web local con el comando runserver . (hola) $ django-admin startproject hello_project . (hola) $ python manage.py migrate (hola) $ python manage.py runserver Suponiendo que todo ha funcionado correctamente, ahora deber\u00edamos poder navegar para ver el la p\u00e1gica de bienvenida de Django en http://127.0.0.1:8000/ en su navegador web.","title":"18.5. Django, Hola mundo"},{"location":"17_docker/#186-pages-app","text":"Ahora haremos una p\u00e1gina de inicio simple creando una pages app espec\u00edfica para ello. Parar el servidor local escribiendo Control+c y luego usar el comando startapp a\u00f1adiendo el nombre de la pages que se desee. (hola) $ python manage.py startapp pages Django instala autom\u00e1ticamente un nuevo directorio de p\u00e1ginas y varios archivos para nosotros. Pero incluso aunque la app ha sido creada, nuestro hello_project no la reconocer\u00e1 hasta que la a\u00f1adamos a la configuraci\u00f3n de INSTALLED_APPS de archivo hello_project/settings.py . Django carga las apps de arriba a abajo, por lo que, en general, es una buena pr\u00e1ctica a\u00f1adir las nuevas aplicaciones debajo de las aplicaciones incorporadas en las que pueden confiar, tales como admin , auth , y todas las aplicaciones restantes. T\u00e9ngase en cuenta que si bien es posible simplemente escribir el nombre de la app, pages , es mejor escribir la pages.apps.apps.PagesConfig completa lo que abre m\u00e1s posibilidades en la configuraci\u00f3n de las apps. # hello_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'pages.apps.apps.PagesConfig', # nuevo ] Ahora podemos establecer la ruta URL para la app pages . Ya que queremos que nuestro mensaje aparezca en la p\u00e1gina de inicio usaremos la cadena vac\u00eda '' . No olvidar a\u00f1adir la importaci\u00f3n de include en la segunda l\u00ednea tambi\u00e9n. # hello_project/urls.py from django.contrib import admin from django.urls import path, include # nuevo urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # nuevo ] En lugar de crear una plantilla en este punto, podemos simplemente codificar un mensaje en nuestra capa de la vista pages/views.py que producir\u00e1 la cadena Hello, World! . # pages/views.py from django.http import HttpResponse def home_page_view(request): return HttpResponse('Hello, World!') \u00bfQu\u00e9 es lo siguiente? El \u00faltimo paso es crear un archivo urls.py dentro de la app pages y enlazarlo to home_page_view . Si se encuentra en un ordenador Mac o Linux, el comando touch se puede usar desde la l\u00ednea de comandos para crear nuevos archivos. En Windows habr\u00e1 que crear el nuevo archivo con un editor de texto. (hola) $ touch pages/urls.py En el editor de texto importar path en la primera l\u00ednea, a\u00f1adir la home_page_view , y colocar su ruta para otra vez ser la cadena vac\u00eda ''. N\u00f3tese que tambi\u00e9n provee un nombre opcional, home , para esta ruta lo cual es una buena pr\u00e1ctica. # pages/urls.py from django.urls import path from .views import home_page_view urlpatterns = [ path('', home_page_view, name='home') ] El flujo completo de nuestra p\u00e1gina web Django es el siguiente: cuando un usuario va a su homepage ser\u00e1 primero encaminado a hello_project/urls.py luego a pages/urls.py y finalmente dirigido a la home_page_view que devuelve la cadena Hello, World! El trabajo para una p\u00e1gina de inicio b\u00e1sica ha terminado. Iniciemos de nuevo el servidor local. (hola) $ python manage.py runserver Si se actualiza el navegador web en http://127.0.0.1:8000/, ahora saldr\u00e1 nuestro deseado mensaje. Ahora es el momento de cambiar a Docker. Detengamos de nuevo el servidor local con Ctrl+C y salgamos de nuestro entorno virtual, que ya no necesitamos, escribiendo exit . (hello) $ exit $ \u00bfC\u00f3mo sabemos que nuestro entorno virtual ya no est\u00e1 activo? No habr\u00e1 un par\u00e9ntesis alrededor del nombre de directorio en el prompt. Cualquier comando Django normal que se intente ejecutar en este punto fallar\u00e1. Por ejemplo, probar python manage.py runserver para ver lo que ocurre. $ python manage.py runserver File \"./manage.py\", line 14 ) from exc ^ SyntaxError: invalid syntax Esto significa que estamos totalmente fuera del entorno virtual y preparados para Docker.","title":"18.6. Pages App"},{"location":"17_docker/#187-imagenes-contenedores-y-el-docker-host","text":"Una imagen Docker es una instant\u00e1nea en el tiempo de lo que contiene un proyecto. Est\u00e1 representado por un Dockerfile y es literalmente una lista de instrucciones que deben ser construidas/ejecutadas. Un contenedor Docker es una instancia en ejecuci\u00f3n de una imagen. Para continuar con la analog\u00eda de nuestro apartamento de antes, la imagen es el plano o conjunto de planos del apartamento; el contenedor es el edificio real totalmente construido. El tercer concepto central es el Docker host , que es el sistema operativo subyacente. Es posible tener varios contenedores ejecut\u00e1ndose dentro de un mismo Docker host . Cuando nos referimos a c\u00f3digo o procesos que se ejecutan en el Docker, significa que se ejecutan en el Docker host . Creemos nuestro primer Dockerfile para ver toda esta teor\u00eda en acci\u00f3n. $ touch Dockerfile Dentro del Dockerfile agregamos el siguiente c\u00f3digo que recorreremos l\u00ednea por l\u00ednea m\u00e1s abajo. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Los Dockerfiles se leen de arriba hacia abajo cuando se crea una imagen. La primera instrucci\u00f3n debe ser el comando FROM que nos permite importar una imagen base que usar, en nuestro caso Python 3.8 . Luego usamos el comando ENV para establecer dos variables de entorno: PYTHONUNBUFFERED asegura que la salida de nuestra consola se vea familiar y que no est\u00e9 almacenada en un b\u00fafer de Docker, lo cual no queremos PYTHONDONTWRITEBYTECODE significa que Python no intentar\u00e1 escribir archivos .pyc , que tampoco deseamos A continuaci\u00f3n usamos WORKDIR para establecer una ruta de directorio de trabajo por defecto dentro de nuestra imagen llamada code que es donde guardaremos nuestro c\u00f3digo. Si no lo hicimos, entonces cada vez que queramos ejecutar comandos dentro de nuestro contenedor tendr\u00edamos que escribir una ruta muy larga. En su lugar, Docker asumir\u00e1 que queremos ejecutar todos los comandos desde este directorio. Para nuestras dependencias estamos usando pipenv , as\u00ed que copiamos tanto el archivo Pipfile como el archivo Pipfile.lock en el directorio /code/ en Docker. Vale la pena tomarse un momento para explicar por qu\u00e9 pipenv crea un Pipfile.lock . El concepto de bloqueo de archivos no es exclusivo de Python o Pipenv; de hecho ya est\u00e1 presente en los gestores de paquetes de los lenguajes de programaci\u00f3n m\u00e1s modernos: Gemfile.lock en Ruby, yarn.lock en JavaScript, composer.lock en PHP, etc. Pipenv fue el primer proyecto popular en incorporarlos en la paqueter\u00eda de Python. La ventaja de un archivo de bloqueo es que esto conduce a una construcci\u00f3n determinista: no importa cu\u00e1ntas veces se instalen los paquetes de software, se obtendr\u00e1 el mismo resultado. Sin un fichero lock que \"bloquee\" las dependencias y su orden, no se cumplir\u00eda necesariamente. Lo que significa que dos miembros del equipo que instalan la misma lista de software pueden tener instalaciones de construcci\u00f3n ligeramente diferentes. Cuando estamos trabajando con Docker donde hay c\u00f3digo tanto local en nuestro ordenador como tambi\u00e9n dentro de Docker, el potencial de conflictos de Pipfile.lock surge cuando se actualizan paquetes de software. Siguiendo adelante usamos el comando RUN para instalar primero pipenv y luego pipenv install para instalar los paquetes de software listados en nuestro Pipfile.lock, actualmente s\u00f3lo Django. Es un es importante a\u00f1adir tambi\u00e9n el indicador --system , ya que por defecto Pipenv buscar\u00e1 el par\u00e1metro en el que instalar cualquier paquete, pero como estamos dentro de Docker ahora, t\u00e9cnicamente no hay ning\u00fan entorno virtual. En cierto modo, el contenedor Docker es nuestro entorno virtual y mucho m\u00e1s. As\u00ed que debemos usar la bandera --system para asegurarnos de que nuestros paquestes est\u00e1n disponibles en todo el Docker para nosotros. Como paso final copiamos el resto de nuestro c\u00f3digo local en el directorio /code/ dentro de Docker. \u00bfPor qu\u00e9 copiamos el c\u00f3digo local dos veces, primero el Pipfile y Pipfile.lock y luego el resto? La raz\u00f3n es que las im\u00e1genes se crean en base a instrucciones de arriba hacia abajo por lo que queremos que las cosas que cambian a menudo -como nuestro c\u00f3digo local- sea el \u00faltimo. De esta manera s\u00f3lo tenemos que regenerar esa parte de la imagen ante un cambio y no se reinstala todo cada vez que lo haya. Como el software de los paquetes contenidos en nuestros Pipfile y Pipfile.lock cambian con poca frecuencia, implica que no tiene sentido copiarlos e instalarlos antes. Nuestras instrucciones de imagen ya est\u00e1n hechas, as\u00ed que vamos a construir la imagen usando el comando docker build . . El punto . indica que el directorio actual es donde se debe ejecutar el comando comando. Se genera una gran cantidad de texto en pantalla; s\u00f3lo se incluye las dos primeras l\u00edneas y las tres \u00faltimas. $ docker build . Sending build context to Docker daemon 154.1kB Step 1/7 : FROM python:3.8 ... Step 7/7 : COPY . /code/ ---> a48b2acb1fcc Successfully built a48b2acb1fcc Pasando a lo siguiente, ahora necesitamos crear un archivo docker-composition.yml para controlar c\u00f3mo ejecutar el comando que ser\u00e1 construido en base a nuestra imagen de Dockerfile . $ touch docker-compose.yml Contendr\u00e1 el siguiente c\u00f3digo version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 En la l\u00ednea superior se especifica la versi\u00f3n m\u00e1s reciente de Docker Compose que es actualmente 3.7 (no confundir con la versi\u00f3n de Python que puede ser bien parecida) A continuaci\u00f3n, especificamos qu\u00e9 services (o contenedores) queremos que funcionen en nuestro \"Docker host\". Es posible tener varios services funcionando, pero por ahora s\u00f3lo tenemos uno para el servidor web . Especificaremos c\u00f3mo construir el contenedor diciendo, \"Busca el directorio en curso . el Dockerfile \" . Luego, dentro del contenedor, ejecute el comando para arrancar el servidor local. El montaje de los vol\u00famenes sincroniza autom\u00e1ticamente el sistema de archivos Docker con nuestro sistema de archivos local. \u00a1Esto significa que no tenemos que reconstruir la imagen cada vez que cambiamos un solo fichero!. Por \u00faltimo especificamos los puertos ( ports ) a exponer dentro de Docker que solo ser\u00e1 el 8000, que es el puerto Django por defecto. Si es la primera vez que utiliza Docker, es muy probable que se est\u00e9 muy confundido en este momento. No hay motivo de preocupaci\u00f3n. Crearemos m\u00faltiples im\u00e1genes y contenedores Docker y, con la pr\u00e1ctica, el flujo comenzar\u00e1 a tener m\u00e1s sentido. Se ver\u00e1 como se usan archivos Dockerfile y docker-composition.yml muy similares en cada uno de los proyectos. El paso final es ejecutar nuestro contenedor Docker usando el comando docker-compose up . Este comando resultar\u00e1 en otro largo flujo de texto de salida en la l\u00ednea de comandos. $ docker-compose up Creating network \"hello_default\" with the default driver Building web Step 1/7 : FROM python:3.8 ... Creating hello_web_1 ... done Attaching to hello_web_1 web_1 | Performing system checks... web_1 | web_1 | System check identified no issues (0 silenced). web_1 | September 20, 2019 - 17:21:57 web_1 | Django version 2.2.5, using settings 'hello_project.settings' web_1 | Starting development server at http://0.0.0.0:8000/ web_1 | Quit the server with CONTROL-C. Para confirmar que realmente funcion\u00f3, volveremos a poner http://127.0.0.1:8000/ en el navegador web. Actualizaremos la p\u00e1gina y aparecer\u00e1 la p\u00e1gina \"Hello, World\". Django se est\u00e1 ejecutando ahora puramente dentro de un contenedor Docker. No estamos trabajando dentro de un entorno virtual local. No ejecutamos el comando runserver . Todo nuestro c\u00f3digo y nuestro servidor Django se est\u00e1 ejecutando desde dentro de un Docker aut\u00f3nomo. !Todo un \u00e9xito! Detendremos el contenedor con Ctrl+C y adem\u00e1s escribiremos docker-compose down . Los contenedores absorben una gran cantidad de memoria, as\u00ed que es una buena idea detenerlos de esta manera cuando hayamos terminado de usarlos. Los contenedores se han concebido para ser est\u00e1ticos (no pueden cambiar), por lo que utilizamos volumes para copiar nuestro c\u00f3digo en sitios donde si que pueda guardarse. $ docker-compose down Removing hello_web_1 ... done Removing network hello_default","title":"18.7. Im\u00e1genes, Contenedores y el \"Docker Host\""},{"location":"18_ postgresql/","text":"19. PostgreSQL Una de las diferencias m\u00e1s inmediatas entre trabajar en una \"aplicaci\u00f3n de juguete\" en Django y una aplicaci\u00f3n lista para producci\u00f3n es la base de datos. Django se suministra con SQLite como opci\u00f3n predeterminada para el desarrollo local porque es peque\u00f1a, r\u00e1pida y basada en archivos, lo que la hace f\u00e1cil de usar. No se requiere ninguna instalaci\u00f3n o configuraci\u00f3n adicional. Sin embargo, esta comodidad tiene un coste. En general, SQLite no es una buena elecci\u00f3n de base de datos para sitios web profesionales. Por lo tanto, aunque est\u00e1 bien usar SQLite localmente mientras se hace un prototipo de una idea, es raro usar realmente SQLite como la base de datos en un proyecto de producci\u00f3n. Django se suministra con soporte incorporado para cuatro bases de datos : SQLite, PostgreSQL, MySQL y Oracle. Utilizaremos PostgreSQL en este libro ya que es la opci\u00f3n m\u00e1s popular para los desarrolladores de Django, sin embargo, la belleza del ORM de Django es que incluso si quisi\u00e9ramos utilizar MySQL u Oracle, el c\u00f3digo real de Django que escribamos ser\u00e1 casi id\u00e9ntico. El ORM de Django se encarga de la traducci\u00f3n del c\u00f3digo Python a las bases de datos por uno, lo cual es bastante sorprendente si se piensa. El reto de utilizar estas tres bases de datos es que cada una de ellas debe estar instalada y funcionar localmente si se quiere imitar fielmente un entorno de producci\u00f3n en la computadora local. \u00a1Y eso es lo que se quiere! Aunque Django se encarga de los detalles del cambio entre bases de datos, inevitablemente hay peque\u00f1os errores dif\u00edciles de detectar que pueden surgir si se utiliza SQLite para el desarrollo local, pero una base de datos diferente en producci\u00f3n. Por lo tanto, la mejor pr\u00e1ctica es usar la misma base de datos localmente y en producci\u00f3n. Se comenzar\u00e1 un nuevo proyecto Django con una base de datos SQLite y luego se pasar\u00e1 a Docker y PostgreSQL. 19.1. Empezando Crear un nuevo directorio postgresql para el nuevo c\u00f3digo. $ cd .. $ mkdir postgresql && cd postgresql Ahora instalar Django, iniciar el shell y crear un proyecto b\u00e1sico de Django llamado postgresql_-project . No olvidar el punto... \u00a1al final del comando! $ pipenv install django $ pipenv shell (postgresql) $ django-admin startproject postgresql_project . Hasta ahora todo bien. Ahora se puede migrar la base de datos para inicializarla y usar el servidor de ejecuci\u00f3n para iniciar el servidor local. NOTA Normalmente no se recomienda ejecutar la migraci\u00f3n en nuevos proyectos hasta que se haya configurado un modelo de usuario personalizado . De lo contrario, Django vincular\u00e1 la base de datos al modelo de usuario incorporado, que es dif\u00edcil de modificar m\u00e1s adelante en el proyecto. Se cubrir\u00e1 esto adecuadamente m\u00e1s adelante, pero se est\u00e1 aqu\u00ed principalmente con fines de demostraci\u00f3n, usar el modelo de usuario por defecto aqu\u00ed es una excepci\u00f3n por una vez. (postgresql) $ python manage.py migrate (postgresql) $ python manage.py runserver Confirmar que todo funciona navegando a http://127.0.0.1:8000 en el navegador. Puede que se necesite refrescar la p\u00e1gina, pero se deber\u00eda ver la conocida p\u00e1gina de bienvenida de Django. Detener el servidor local con <Control>+C y luego usar el comando ls para listar todos los archivos y directorios. (postresql) $ ls Pipfile Pipfile.lock db.sqlite3 manage.py postgresql_project 19.2. Docker Para pasar a Docker, primero hay que salir del entorno virtual y luego crear un Dockerfile y los archivos docker-compose.yml que controlar\u00e1n la imagen y el contenedor Docker respectivamente. (postgresql) $ exit $ touch Dockerfile $ touch docker-compose.yml El Dockerfile es el mismo del cap\u00edtulo anterior. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Go ahead and build the initial image now using the docker build . command. Did you notice that the Dockerfile built an image much faster this time around? That\u2019s because Docker looks locally on your computer first for a specific image. If it doesn\u2019t find an image locally it will then download it. And since many of these images were Chapter 2: PostgreSQL 33 already on the computer from the previous chapter, Docker didn\u2019t need to download them all again! Time now for the docker-compose.yml file which also matches what we saw previously in Chapter 1. docker-compose.yml version: '3.8' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 19.3. Modo Independiente Ahora se pondr\u00e1 en marcha el contenedor, pero esta vez en modo 'detached', lo que requiere la bandera -d o -detach . $ docker-compose up -d El modo independiente ejecuta los contenedores en background , lo que significa que se puede usar una unica consola de l\u00ednea de comandos sin necesidad de abrir una separada. Esto ahorra tener que cambiar constantemente entre dos pesta\u00f1as de l\u00ednea de comandos. La desventaja es que si/cuando hay un error, la salida no siempre ser\u00e1 visible. As\u00ed que si pantalla no coincide con lo descrito aqu\u00ed, probar a escribir los logs de docker-compose para ver la salida actual y depurar cualquier problema. Es probable que se vea una \"Warning: Image for service web was built because it did not already exists\" (Advertencia: La imagen para el servicio web se construy\u00f3 porque no exist\u00eda) al final del comando. Docker cre\u00f3 autom\u00e1ticamente una nueva imagen dentro del contenedor. Como se ver\u00e1 m\u00e1s adelante, es necesario a\u00f1adir la bandera --build para forzar la construcci\u00f3n de una imagen cuando se actualizan los paquetes de software porque, de forma predeterminada, Docker buscar\u00e1 una copia local en la cach\u00e9 del software y utilizar\u00e1 la que mejore el rendimiento. Para confirmar que las cosas funcionan correctamente, volver a http://127.0.0.1:8000/ en el navegador web. Como ahora se est\u00e1 trabajando dentro de Docker en lugar de hacerlo localmente, se debe preceder los comandos tradicionales con docker-compose exec [servicio] donde se especifica el nombre del servicio. Por ejemplo, para crear una cuenta de superusuario en lugar de escribir python manage.py createsuperuser , el comando actualizado se ver\u00eda ahora como la l\u00ednea de abajo, usando el servicio web. $ docker-compose exec web python manage.py createsuperuser Como nombre de usuario elegir sqliteadmin , sqliteadmin@email.com como direcci\u00f3n de correo electr\u00f3nico, y seleccionar una contrase\u00f1a a discreci\u00f3n. navegue directamente al administrador en http://127.0.0.1:8000/admin e inicie sesi\u00f3n. Ser\u00e1 redirigido a la p\u00e1gina principal del administrador. Notar en la esquina superior derecha que sqliteadmin es el nombre de usuario. Si se hace clic en el bot\u00f3n Users se llega a la p\u00e1gina de Usuarios donde se puede confirmar que s\u00f3lo se ha creado un usuario. Es importante destacar otro aspecto de Docker en este punto: hasta ahora se ha estado actualizando la base de datos, representada actualmente por el archivo db.sqlite3 , dentro de Docker. Eso significa que el archivo actual db.sqlite3 est\u00e1 cambiando cada vez. Y gracias a los vol\u00famenes montados en la configuraci\u00f3n docker-compose.yml cada cambio en el archivo ha sido copiado en un archivo db.sqlite3 en el ordenador local tambi\u00e9n. Se podr\u00eda salir de Docker, iniciar el shell, iniciar el servidor con python manage.py runserver , y ver exactamente el mismo inicio de sesi\u00f3n de administrador en este punto porque la base de datos subyacente SQLite es la misma. 19.4. PostgreSQL Ahora es el momento de cambiar a PostgreSQL, que requiere tres pasos adicionales: 1.- Instalar un adaptador de base de datos, psycopg2 , para que Python pueda hablar con PostgreSQL 2.- Actualizar la configuraci\u00f3n de la BASE DE DATOS en nuestro archivo settings.py 3.- Instalar y ejecutar PostgreSQL localmente \u00bfListo? Aqu\u00ed vamos. Detener el contenedor Docker en marcha con docker-compose down . $ docker-compose down Stopping postgresql_web_1 ... done Removing postgresql_web_1 ... done Removing network postgresql_default Entonces dentro del archivo docker-compose.yml agregar un nuevo servicio llamado db . Esto significa que habr\u00e1 dos servicios separados, cada uno un contenedor, corriendo dentro del host Docker: web para el servidor local de Django y db para la base de datos PostgreSQL. La versi\u00f3n PostgreSQL ser\u00e1 fijada a la \u00faltima versi\u00f3n, la 11. Si no se hubiera especificado un n\u00famero de versi\u00f3n y en su lugar se hubiera usado s\u00f3lo postgres , entonces seria descargada la \u00faltima versi\u00f3n de PostgreSQL aunque, en una fecha posterior, sea Postgres 12, que probablemente tenga requerimientos diferentes. Finalmente agregamos una l\u00ednea de dependencias al servicio web ya que literalmente depende de la base de datos a ejecutar. Esto significa que db se iniciar\u00e1 antes que web . FICHERO: docker-compose.yml version: '3.7' 38 services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 Ahora ejecutar docker-compose up -d que reconstruir\u00e1 la imagen y har\u00e1 ponerse en marcha a dos contenedores, uno ejecutando PostgreSQL dentro de db y el otro el servidor web Django. $ docker-compose up -d Creating network \"postgresql_default\" with the default driver ... Creating postgresql_db_1 ... done Creating postgresql_web_1 ... done Es importante se\u00f1alar en este punto que una base de datos de producci\u00f3n como PostgreSQL no est\u00e1 basada en archivos. Se ejecuta completamente dentro del servicio db y es ef\u00edmero; cuando se ejecuta docker-compose down todos los datos dentro de ella se perder\u00e1n. Esto contrasta con el c\u00f3digo en el contenedor web que tiene un montaje de vol\u00famenes para sincronizar el c\u00f3digo local y el de Docker. Pr\u00f3ximamente se aprender\u00e1 c\u00f3mo a\u00f1adir un montaje de vol\u00famenes para que en el servicio db persista la informaci\u00f3n de la base de datos. 19.5. Ajustes Con el editor de texto, abrir el archivo posgresql_project/settings.py y bajar hasta la configuraci\u00f3n de Bases de Datos. La configuraci\u00f3n actual es esta: Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } Por defecto, Django especifica sqlite3 como motor de la base de datos, le da el nombre de db.sqlite3 , y lo coloca en BASE_DIR que implica al directorio de nivel de proyecto. Dado que la estructura del directorio es a menudo un punto de confusi\u00f3n, \"nivel de proyecto\" significa el directorio superior del proyecto que contiene a postgresql_project , manage.py , Pipfile , Pipfile.lock , y el archivo db.slite3 . (postgresql) $ ls Dockerfile Pipfile.lock docker-compose.yml postgresql_project Pipfile db.sqlite3 manage.py Para cambiar a PostgreSQL actualizaremos la configuraci\u00f3n de ENGINE . PostgreSQL requiere un NOMBRE, USUARIO, CONTRASE\u00d1A, HOST y PUERTO. Para mayor comodidad, configuraremos los tres primeros a postgres, el HOST a db que es el nombre de nuestro servicio establecido en docker-compose.yml , y el PORT a 5432 que es el predeterminado Puerto PostgreSQL. Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': 5432 } } Se ver\u00e1 un error si se refresca la p\u00e1gina \u00bfQu\u00e9 es lo que est\u00e1 pasando? Dado que se est\u00e1 ejecutando Docker en modo detach con la bandera -d no est\u00e1 claro inmediatamente. Es hora de revisar los logs . $ docker-componer registros ... web_1 | django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 module: No module named 'psycopg2' Habr\u00e1 mucha salida pero en la parte inferior de la secci\u00f3n web_1 se ver\u00e1n las l\u00edneas de arriba que indican que a\u00fan no se ha instalado el driver psycopg2 . 19.5.Psycopg PostgreSQL es una base de datos que puede ser utilizada por casi cualquier lenguaje de programaci\u00f3n. Pero si se piensa, \u00bfc\u00f3mo un lenguaje de programaci\u00f3n, y todos ellos var\u00edan de alguna u otra menera, se conecta a la base de datos? \u00a1La respuesta es a trav\u00e9s de un adaptador de base de datos! Y eso es lo que es Psycopg , el adaptador de base de datos m\u00e1s popular para Python. Si quieres saber m\u00e1s sobre el funcionamiento de Psycopg, aqu\u00ed tienes un enlace a una descripci\u00f3n m\u00e1s completa en la p\u00e1gina oficial . Se puede instalar Pyscopg con Pipenv. En la l\u00ednea de comandos, introducir el siguiente comando para que se instale en nuestro host Docker. $ docker-compose exec web pipenv install psycopg2-binary==2.8.3 \u00bfPor qu\u00e9 instalarse dentro de Docker en vez de localmente, nos preguntamos? La respuesta corta es que instalar consistentemente nuevos paquetes de software dentro de Docker y luego reconstruir la imagen desde cero nos salvar\u00e1 de potenciales conflictos de Pipfile.lock . La generaci\u00f3n de Pipfile.lock depende en gran medida del sistema operativo que se utilice. Se ha especificado todo el sistema operativo en Docker, incluyendo el uso de Python 3.8. Pero si se instala psycopg2 localmente en el ordenador, que tiene un entorno diferente, el archivo Pipfile.lock resultante tambi\u00e9n ser\u00e1 diferente. Pero entonces el montaje de los vol\u00famenes en el archivo docker-compose.yml , que sincroniza autom\u00e1ticamente los sistemas de archivos locales y Docker, har\u00e1 que el Pipfile.lock local sobreescriba la versi\u00f3n dentro de Docker. As\u00ed que ahora nuestro contenedor Docker intenta ejecutar un archivo Pipfile.lock incorrecto. Una forma de evitar estos problemas es instalar sistem\u00e1ticamente nuevos paquetes de software en Docker en lugar de hacerlo localmente. Si ahora se actualiza la p\u00e1gina web..... se seguir\u00e1 viendo un error. Se revisan de nuevo los logs. $ docker-compose logs \u00a1Es lo mismo que antes! \u00bfPor qu\u00e9 sucede esto? Docker almacena autom\u00e1ticamente las im\u00e1genes a menos que algo cambie por razones de rendimiento. Se quiere que reconstruya autom\u00e1ticamente la imagen con el nuevo Pipfile y Pipfile.lock pero porque la \u00faltima l\u00ednea del Dockerfile es COPY . /code/ s\u00f3lo se copiar\u00e1n los archivos; la imagen subyacente no se reconstruir\u00e1 a s\u00ed misma a menos que la forcemos tambi\u00e9n. Esto puede hacerse a\u00f1adiendo la bandera --build . Reconsiderar: siempre que se agregue un nuevo paquete primero instalarlo dentro de Docker, detener los contenedores, forzar una reconstrucci\u00f3n de la imagen, y luego iniciar los contenedores de nuevo. $ docker-compose down $ docker-compose up -d --build Si se actualiza la p\u00e1gina principal de nuevo la p\u00e1gina de bienvenida de Django en http://127.0.0.1:8000/ \u00a1ahora funciona! Eso es porque Django se ha conectado con \u00e9xito a PostgreSQL a trav\u00e9s de Docker. 19.6. Nueva base de datos Sin embargo, ya que se est\u00e1 usando PostgreSQL ahora, no SQLite, la base de datos est\u00e1 vac\u00eda. Si se miran los registros actuales de nuevo escribiendo docker-compose logs se ver\u00e1n quejas como \"Tienes 15 migraciones no aplicadas\" . Para reforzar este punto visitar Admin en http://127.0.0.1:8000/admin/ e iniciar sesi\u00f3n. \u00bfFuncionar\u00e1 nuestra anterior cuenta de superusuario de sqliteadmin? \u00a1No! Vemos ProgrammingError at /admin que se queja de que auth_user ni siquiera existe porque a\u00fan no se ha hecho la migraci\u00f3n! Adem\u00e1s, tampoco se tiene un superusuario en la base de datos PostgreSQL. Para arreglar esta situaci\u00f3n se puede tanto migrar como crear un superusuario dentro de Docker que acceda a la base de datos PostgreSQL. $ docker-compose exec web python manage.py migrate $ docker-compose exec web python manage.py createsuperuser \u00bfC\u00f3mo se deber\u00eda llamar al superusuario? Usemos postgresadmin y para prop\u00f3sitos de prueba poner el correo electr\u00f3nico a postgresadmin@email.com y la contrase\u00f1a. En el navegador web navegar a la p\u00e1gina de administraci\u00f3n en http://127.0.0.1:8000/admin/ y entrar la informaci\u00f3n de acceso del nuevo superusuario. En la esquina superior derecha se muestra que estamos conectados con postgresadmin ahora no sqliteadmin. Tambi\u00e9n puede hacer clic en la pesta\u00f1a de Usuarios en la p\u00e1gina de inicio y visitar la secci\u00f3n de Usuarios para ver nuestro \u00fanico usuario es la nueva cuenta de superusuario. Recordar detener el contenedor en marcha con el docker-compose down . $ docker-compose down 19.7. Git Guardar los cambios de nuevo inicializando Git para este nuevo proyecto, a\u00f1adir los cambios, e incluir un mensaje de confirmaci\u00f3n. $ git init $ git status $ git add . $ git commit -m 'ch2' 19.8. Conclusi\u00f3n El objetivo de este cap\u00edtulo era demostrar c\u00f3mo Docker y PostgreSQL trabajan juntos en un proyecto de Django. Cambiar entre una base de datos SQLite y un PostgreSQL es un salto mental para muchos desarrolladores inicialmente. El punto clave es que con Docker ya no se necesita estar en un entorno virtual local. Docker es el nuevo entorno virtual... y la base de datos y m\u00e1s si se desea. El host de Docker esencialmente reemplaza al sistema operativo local y dentro de \u00e9l se pueden ejecutar m\u00faltiples contenedores, como para la aplicaci\u00f3n web y para la base de datos, que pueden ser aislados y ejecutados por separado.","title":"19. PostgreSQL"},{"location":"18_ postgresql/#19-postgresql","text":"Una de las diferencias m\u00e1s inmediatas entre trabajar en una \"aplicaci\u00f3n de juguete\" en Django y una aplicaci\u00f3n lista para producci\u00f3n es la base de datos. Django se suministra con SQLite como opci\u00f3n predeterminada para el desarrollo local porque es peque\u00f1a, r\u00e1pida y basada en archivos, lo que la hace f\u00e1cil de usar. No se requiere ninguna instalaci\u00f3n o configuraci\u00f3n adicional. Sin embargo, esta comodidad tiene un coste. En general, SQLite no es una buena elecci\u00f3n de base de datos para sitios web profesionales. Por lo tanto, aunque est\u00e1 bien usar SQLite localmente mientras se hace un prototipo de una idea, es raro usar realmente SQLite como la base de datos en un proyecto de producci\u00f3n. Django se suministra con soporte incorporado para cuatro bases de datos : SQLite, PostgreSQL, MySQL y Oracle. Utilizaremos PostgreSQL en este libro ya que es la opci\u00f3n m\u00e1s popular para los desarrolladores de Django, sin embargo, la belleza del ORM de Django es que incluso si quisi\u00e9ramos utilizar MySQL u Oracle, el c\u00f3digo real de Django que escribamos ser\u00e1 casi id\u00e9ntico. El ORM de Django se encarga de la traducci\u00f3n del c\u00f3digo Python a las bases de datos por uno, lo cual es bastante sorprendente si se piensa. El reto de utilizar estas tres bases de datos es que cada una de ellas debe estar instalada y funcionar localmente si se quiere imitar fielmente un entorno de producci\u00f3n en la computadora local. \u00a1Y eso es lo que se quiere! Aunque Django se encarga de los detalles del cambio entre bases de datos, inevitablemente hay peque\u00f1os errores dif\u00edciles de detectar que pueden surgir si se utiliza SQLite para el desarrollo local, pero una base de datos diferente en producci\u00f3n. Por lo tanto, la mejor pr\u00e1ctica es usar la misma base de datos localmente y en producci\u00f3n. Se comenzar\u00e1 un nuevo proyecto Django con una base de datos SQLite y luego se pasar\u00e1 a Docker y PostgreSQL.","title":"19. PostgreSQL"},{"location":"18_ postgresql/#191-empezando","text":"Crear un nuevo directorio postgresql para el nuevo c\u00f3digo. $ cd .. $ mkdir postgresql && cd postgresql Ahora instalar Django, iniciar el shell y crear un proyecto b\u00e1sico de Django llamado postgresql_-project . No olvidar el punto... \u00a1al final del comando! $ pipenv install django $ pipenv shell (postgresql) $ django-admin startproject postgresql_project . Hasta ahora todo bien. Ahora se puede migrar la base de datos para inicializarla y usar el servidor de ejecuci\u00f3n para iniciar el servidor local. NOTA Normalmente no se recomienda ejecutar la migraci\u00f3n en nuevos proyectos hasta que se haya configurado un modelo de usuario personalizado . De lo contrario, Django vincular\u00e1 la base de datos al modelo de usuario incorporado, que es dif\u00edcil de modificar m\u00e1s adelante en el proyecto. Se cubrir\u00e1 esto adecuadamente m\u00e1s adelante, pero se est\u00e1 aqu\u00ed principalmente con fines de demostraci\u00f3n, usar el modelo de usuario por defecto aqu\u00ed es una excepci\u00f3n por una vez. (postgresql) $ python manage.py migrate (postgresql) $ python manage.py runserver Confirmar que todo funciona navegando a http://127.0.0.1:8000 en el navegador. Puede que se necesite refrescar la p\u00e1gina, pero se deber\u00eda ver la conocida p\u00e1gina de bienvenida de Django. Detener el servidor local con <Control>+C y luego usar el comando ls para listar todos los archivos y directorios. (postresql) $ ls Pipfile Pipfile.lock db.sqlite3 manage.py postgresql_project","title":"19.1. Empezando"},{"location":"18_ postgresql/#192-docker","text":"Para pasar a Docker, primero hay que salir del entorno virtual y luego crear un Dockerfile y los archivos docker-compose.yml que controlar\u00e1n la imagen y el contenedor Docker respectivamente. (postgresql) $ exit $ touch Dockerfile $ touch docker-compose.yml El Dockerfile es el mismo del cap\u00edtulo anterior. # Pull base image FROM python:3.8 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system # Copy project COPY . /code/ Go ahead and build the initial image now using the docker build . command. Did you notice that the Dockerfile built an image much faster this time around? That\u2019s because Docker looks locally on your computer first for a specific image. If it doesn\u2019t find an image locally it will then download it. And since many of these images were Chapter 2: PostgreSQL 33 already on the computer from the previous chapter, Docker didn\u2019t need to download them all again! Time now for the docker-compose.yml file which also matches what we saw previously in Chapter 1. docker-compose.yml version: '3.8' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000","title":"19.2. Docker"},{"location":"18_ postgresql/#193-modo-independiente","text":"Ahora se pondr\u00e1 en marcha el contenedor, pero esta vez en modo 'detached', lo que requiere la bandera -d o -detach . $ docker-compose up -d El modo independiente ejecuta los contenedores en background , lo que significa que se puede usar una unica consola de l\u00ednea de comandos sin necesidad de abrir una separada. Esto ahorra tener que cambiar constantemente entre dos pesta\u00f1as de l\u00ednea de comandos. La desventaja es que si/cuando hay un error, la salida no siempre ser\u00e1 visible. As\u00ed que si pantalla no coincide con lo descrito aqu\u00ed, probar a escribir los logs de docker-compose para ver la salida actual y depurar cualquier problema. Es probable que se vea una \"Warning: Image for service web was built because it did not already exists\" (Advertencia: La imagen para el servicio web se construy\u00f3 porque no exist\u00eda) al final del comando. Docker cre\u00f3 autom\u00e1ticamente una nueva imagen dentro del contenedor. Como se ver\u00e1 m\u00e1s adelante, es necesario a\u00f1adir la bandera --build para forzar la construcci\u00f3n de una imagen cuando se actualizan los paquetes de software porque, de forma predeterminada, Docker buscar\u00e1 una copia local en la cach\u00e9 del software y utilizar\u00e1 la que mejore el rendimiento. Para confirmar que las cosas funcionan correctamente, volver a http://127.0.0.1:8000/ en el navegador web. Como ahora se est\u00e1 trabajando dentro de Docker en lugar de hacerlo localmente, se debe preceder los comandos tradicionales con docker-compose exec [servicio] donde se especifica el nombre del servicio. Por ejemplo, para crear una cuenta de superusuario en lugar de escribir python manage.py createsuperuser , el comando actualizado se ver\u00eda ahora como la l\u00ednea de abajo, usando el servicio web. $ docker-compose exec web python manage.py createsuperuser Como nombre de usuario elegir sqliteadmin , sqliteadmin@email.com como direcci\u00f3n de correo electr\u00f3nico, y seleccionar una contrase\u00f1a a discreci\u00f3n. navegue directamente al administrador en http://127.0.0.1:8000/admin e inicie sesi\u00f3n. Ser\u00e1 redirigido a la p\u00e1gina principal del administrador. Notar en la esquina superior derecha que sqliteadmin es el nombre de usuario. Si se hace clic en el bot\u00f3n Users se llega a la p\u00e1gina de Usuarios donde se puede confirmar que s\u00f3lo se ha creado un usuario. Es importante destacar otro aspecto de Docker en este punto: hasta ahora se ha estado actualizando la base de datos, representada actualmente por el archivo db.sqlite3 , dentro de Docker. Eso significa que el archivo actual db.sqlite3 est\u00e1 cambiando cada vez. Y gracias a los vol\u00famenes montados en la configuraci\u00f3n docker-compose.yml cada cambio en el archivo ha sido copiado en un archivo db.sqlite3 en el ordenador local tambi\u00e9n. Se podr\u00eda salir de Docker, iniciar el shell, iniciar el servidor con python manage.py runserver , y ver exactamente el mismo inicio de sesi\u00f3n de administrador en este punto porque la base de datos subyacente SQLite es la misma.","title":"19.3. Modo Independiente"},{"location":"18_ postgresql/#194-postgresql","text":"Ahora es el momento de cambiar a PostgreSQL, que requiere tres pasos adicionales: 1.- Instalar un adaptador de base de datos, psycopg2 , para que Python pueda hablar con PostgreSQL 2.- Actualizar la configuraci\u00f3n de la BASE DE DATOS en nuestro archivo settings.py 3.- Instalar y ejecutar PostgreSQL localmente \u00bfListo? Aqu\u00ed vamos. Detener el contenedor Docker en marcha con docker-compose down . $ docker-compose down Stopping postgresql_web_1 ... done Removing postgresql_web_1 ... done Removing network postgresql_default Entonces dentro del archivo docker-compose.yml agregar un nuevo servicio llamado db . Esto significa que habr\u00e1 dos servicios separados, cada uno un contenedor, corriendo dentro del host Docker: web para el servidor local de Django y db para la base de datos PostgreSQL. La versi\u00f3n PostgreSQL ser\u00e1 fijada a la \u00faltima versi\u00f3n, la 11. Si no se hubiera especificado un n\u00famero de versi\u00f3n y en su lugar se hubiera usado s\u00f3lo postgres , entonces seria descargada la \u00faltima versi\u00f3n de PostgreSQL aunque, en una fecha posterior, sea Postgres 12, que probablemente tenga requerimientos diferentes. Finalmente agregamos una l\u00ednea de dependencias al servicio web ya que literalmente depende de la base de datos a ejecutar. Esto significa que db se iniciar\u00e1 antes que web . FICHERO: docker-compose.yml version: '3.7' 38 services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 Ahora ejecutar docker-compose up -d que reconstruir\u00e1 la imagen y har\u00e1 ponerse en marcha a dos contenedores, uno ejecutando PostgreSQL dentro de db y el otro el servidor web Django. $ docker-compose up -d Creating network \"postgresql_default\" with the default driver ... Creating postgresql_db_1 ... done Creating postgresql_web_1 ... done Es importante se\u00f1alar en este punto que una base de datos de producci\u00f3n como PostgreSQL no est\u00e1 basada en archivos. Se ejecuta completamente dentro del servicio db y es ef\u00edmero; cuando se ejecuta docker-compose down todos los datos dentro de ella se perder\u00e1n. Esto contrasta con el c\u00f3digo en el contenedor web que tiene un montaje de vol\u00famenes para sincronizar el c\u00f3digo local y el de Docker. Pr\u00f3ximamente se aprender\u00e1 c\u00f3mo a\u00f1adir un montaje de vol\u00famenes para que en el servicio db persista la informaci\u00f3n de la base de datos.","title":"19.4. PostgreSQL"},{"location":"18_ postgresql/#195-ajustes","text":"Con el editor de texto, abrir el archivo posgresql_project/settings.py y bajar hasta la configuraci\u00f3n de Bases de Datos. La configuraci\u00f3n actual es esta: Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } Por defecto, Django especifica sqlite3 como motor de la base de datos, le da el nombre de db.sqlite3 , y lo coloca en BASE_DIR que implica al directorio de nivel de proyecto. Dado que la estructura del directorio es a menudo un punto de confusi\u00f3n, \"nivel de proyecto\" significa el directorio superior del proyecto que contiene a postgresql_project , manage.py , Pipfile , Pipfile.lock , y el archivo db.slite3 . (postgresql) $ ls Dockerfile Pipfile.lock docker-compose.yml postgresql_project Pipfile db.sqlite3 manage.py Para cambiar a PostgreSQL actualizaremos la configuraci\u00f3n de ENGINE . PostgreSQL requiere un NOMBRE, USUARIO, CONTRASE\u00d1A, HOST y PUERTO. Para mayor comodidad, configuraremos los tres primeros a postgres, el HOST a db que es el nombre de nuestro servicio establecido en docker-compose.yml , y el PORT a 5432 que es el predeterminado Puerto PostgreSQL. Code # postgresql_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': 5432 } } Se ver\u00e1 un error si se refresca la p\u00e1gina \u00bfQu\u00e9 es lo que est\u00e1 pasando? Dado que se est\u00e1 ejecutando Docker en modo detach con la bandera -d no est\u00e1 claro inmediatamente. Es hora de revisar los logs . $ docker-componer registros ... web_1 | django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 module: No module named 'psycopg2' Habr\u00e1 mucha salida pero en la parte inferior de la secci\u00f3n web_1 se ver\u00e1n las l\u00edneas de arriba que indican que a\u00fan no se ha instalado el driver psycopg2 .","title":"19.5. Ajustes"},{"location":"18_ postgresql/#195psycopg","text":"PostgreSQL es una base de datos que puede ser utilizada por casi cualquier lenguaje de programaci\u00f3n. Pero si se piensa, \u00bfc\u00f3mo un lenguaje de programaci\u00f3n, y todos ellos var\u00edan de alguna u otra menera, se conecta a la base de datos? \u00a1La respuesta es a trav\u00e9s de un adaptador de base de datos! Y eso es lo que es Psycopg , el adaptador de base de datos m\u00e1s popular para Python. Si quieres saber m\u00e1s sobre el funcionamiento de Psycopg, aqu\u00ed tienes un enlace a una descripci\u00f3n m\u00e1s completa en la p\u00e1gina oficial . Se puede instalar Pyscopg con Pipenv. En la l\u00ednea de comandos, introducir el siguiente comando para que se instale en nuestro host Docker. $ docker-compose exec web pipenv install psycopg2-binary==2.8.3 \u00bfPor qu\u00e9 instalarse dentro de Docker en vez de localmente, nos preguntamos? La respuesta corta es que instalar consistentemente nuevos paquetes de software dentro de Docker y luego reconstruir la imagen desde cero nos salvar\u00e1 de potenciales conflictos de Pipfile.lock . La generaci\u00f3n de Pipfile.lock depende en gran medida del sistema operativo que se utilice. Se ha especificado todo el sistema operativo en Docker, incluyendo el uso de Python 3.8. Pero si se instala psycopg2 localmente en el ordenador, que tiene un entorno diferente, el archivo Pipfile.lock resultante tambi\u00e9n ser\u00e1 diferente. Pero entonces el montaje de los vol\u00famenes en el archivo docker-compose.yml , que sincroniza autom\u00e1ticamente los sistemas de archivos locales y Docker, har\u00e1 que el Pipfile.lock local sobreescriba la versi\u00f3n dentro de Docker. As\u00ed que ahora nuestro contenedor Docker intenta ejecutar un archivo Pipfile.lock incorrecto. Una forma de evitar estos problemas es instalar sistem\u00e1ticamente nuevos paquetes de software en Docker en lugar de hacerlo localmente. Si ahora se actualiza la p\u00e1gina web..... se seguir\u00e1 viendo un error. Se revisan de nuevo los logs. $ docker-compose logs \u00a1Es lo mismo que antes! \u00bfPor qu\u00e9 sucede esto? Docker almacena autom\u00e1ticamente las im\u00e1genes a menos que algo cambie por razones de rendimiento. Se quiere que reconstruya autom\u00e1ticamente la imagen con el nuevo Pipfile y Pipfile.lock pero porque la \u00faltima l\u00ednea del Dockerfile es COPY . /code/ s\u00f3lo se copiar\u00e1n los archivos; la imagen subyacente no se reconstruir\u00e1 a s\u00ed misma a menos que la forcemos tambi\u00e9n. Esto puede hacerse a\u00f1adiendo la bandera --build . Reconsiderar: siempre que se agregue un nuevo paquete primero instalarlo dentro de Docker, detener los contenedores, forzar una reconstrucci\u00f3n de la imagen, y luego iniciar los contenedores de nuevo. $ docker-compose down $ docker-compose up -d --build Si se actualiza la p\u00e1gina principal de nuevo la p\u00e1gina de bienvenida de Django en http://127.0.0.1:8000/ \u00a1ahora funciona! Eso es porque Django se ha conectado con \u00e9xito a PostgreSQL a trav\u00e9s de Docker.","title":"19.5.Psycopg"},{"location":"18_ postgresql/#196-nueva-base-de-datos","text":"Sin embargo, ya que se est\u00e1 usando PostgreSQL ahora, no SQLite, la base de datos est\u00e1 vac\u00eda. Si se miran los registros actuales de nuevo escribiendo docker-compose logs se ver\u00e1n quejas como \"Tienes 15 migraciones no aplicadas\" . Para reforzar este punto visitar Admin en http://127.0.0.1:8000/admin/ e iniciar sesi\u00f3n. \u00bfFuncionar\u00e1 nuestra anterior cuenta de superusuario de sqliteadmin? \u00a1No! Vemos ProgrammingError at /admin que se queja de que auth_user ni siquiera existe porque a\u00fan no se ha hecho la migraci\u00f3n! Adem\u00e1s, tampoco se tiene un superusuario en la base de datos PostgreSQL. Para arreglar esta situaci\u00f3n se puede tanto migrar como crear un superusuario dentro de Docker que acceda a la base de datos PostgreSQL. $ docker-compose exec web python manage.py migrate $ docker-compose exec web python manage.py createsuperuser \u00bfC\u00f3mo se deber\u00eda llamar al superusuario? Usemos postgresadmin y para prop\u00f3sitos de prueba poner el correo electr\u00f3nico a postgresadmin@email.com y la contrase\u00f1a. En el navegador web navegar a la p\u00e1gina de administraci\u00f3n en http://127.0.0.1:8000/admin/ y entrar la informaci\u00f3n de acceso del nuevo superusuario. En la esquina superior derecha se muestra que estamos conectados con postgresadmin ahora no sqliteadmin. Tambi\u00e9n puede hacer clic en la pesta\u00f1a de Usuarios en la p\u00e1gina de inicio y visitar la secci\u00f3n de Usuarios para ver nuestro \u00fanico usuario es la nueva cuenta de superusuario. Recordar detener el contenedor en marcha con el docker-compose down . $ docker-compose down","title":"19.6. Nueva base de datos"},{"location":"18_ postgresql/#197-git","text":"Guardar los cambios de nuevo inicializando Git para este nuevo proyecto, a\u00f1adir los cambios, e incluir un mensaje de confirmaci\u00f3n. $ git init $ git status $ git add . $ git commit -m 'ch2'","title":"19.7. Git"},{"location":"18_ postgresql/#198-conclusion","text":"El objetivo de este cap\u00edtulo era demostrar c\u00f3mo Docker y PostgreSQL trabajan juntos en un proyecto de Django. Cambiar entre una base de datos SQLite y un PostgreSQL es un salto mental para muchos desarrolladores inicialmente. El punto clave es que con Docker ya no se necesita estar en un entorno virtual local. Docker es el nuevo entorno virtual... y la base de datos y m\u00e1s si se desea. El host de Docker esencialmente reemplaza al sistema operativo local y dentro de \u00e9l se pueden ejecutar m\u00faltiples contenedores, como para la aplicaci\u00f3n web y para la base de datos, que pueden ser aislados y ejecutados por separado.","title":"19.8. Conclusi\u00f3n"},{"location":"19_/","text":"19. Proyecto Bookstore \u200b Es hora de construir el proyecto principal del curso, una librer\u00eda en l\u00ednea . Se comenzar\u00e1 con un nuevo proyecto, se cambiar\u00e1 a Docker, se le a\u00f1adir\u00e1 un modelo de usuario personalizado y se implementar\u00e1n las primeras pruebas. Se comienza creando un nuevo proyecto Django con Pipenv localmente y luego se cambiar\u00e1 a Docker. \u200b Se crear\u00e1 un directorio books para el c\u00f3digo, y luego se instalar\u00e1 django. Tambi\u00e9n se usar\u00e1 PostgreSQL por lo que se instalar\u00e1 tambi\u00e9n el adaptador psycopg2 . S\u00f3lo despu\u00e9s de que se haya construido la imagen inicial, se empezar\u00e1n a instalar los futuros paquetes de software dentro del propio Docker. Por \u00faltimo, se usar\u00e1 el comando shell para entrar en el nuevo entorno virtual. $ cd .. $ mkdir books && cd books $ pipenv install django==2.2.7 psycopg2-binary==2.8.4 $ pipenv shell \u200b Le daremos un nombre a nuestro nuevo proyecto de librer\u00eda de Django. Aseg\u00farate de no olvidar ese punto, ., al final del comando o Django crear\u00e1 un directorio extra que no necesitamos. Luego usa el servidor de ejecuci\u00f3n para iniciar el servidor web local de Django y confirmar que todo funciona correctamente. (books) $ django-admin startproject bookstore_project . (books) $ python manage.py runserver En tu navegador de Internet ve a http://127.0.0.1:8000/49 y deber\u00edas ver la amistosa p\u00e1gina de bienvenida de Django. En la l\u00ednea de comandos es probable que veas una advertencia sobre \"migraci\u00f3n(es) no aplicada(s)\". Es seguro ignorar esto por ahora ya que estamos a punto de cambiar a Docker y PostgreSQL. Docker Ahora podemos cambiar a Docker en nuestro proyecto. Adelante, detenga el servidor local Control+c y tambi\u00e9n salga del shell del entorno virtual. (books) $ exit $ Docker ya deber\u00eda estar instalado y la aplicaci\u00f3n de escritorio funcionando desde el cap\u00edtulo anterior. Por lo general necesitamos crear un archivo Dockerfile y un archivo docker-compose.yml. $ touch Dockerfile $ touch docker-compose.yml El Dockerfile ser\u00e1 el mismo que antes. Dockerfile # Pull base image FROM python:3.7 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies Chapter 3: Bookstore Project COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system 52 # Copy project COPY . /code/ Pero para el archivo docker-compose.yml a\u00f1adiremos una caracter\u00edstica adicional que es un volumen dedicado para nuestra base de datos para que persista incluso cuando los contenedores de servicios se detengan. La eliminaci\u00f3n del volumen en s\u00ed es un proceso separado. Podemos hacerlo especificando una ruta para los vol\u00famenes dentro del contenedor db y luego especificando un volumen fuera de nuestros servicios con el mismo nombre postgres_data. Puedes ver la documentaci\u00f3n de Docker sobre vol\u00famenes50 para una explicaci\u00f3n m\u00e1s t\u00e9cnica de c\u00f3mo funciona todo esto si est\u00e1s interesado. docker-compose.yml \u00ba\u00ba\u00ba version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: \u00ba\u00ba\u00ba\u00ba image: postgres:11 volumes: - postgres_data:/var/lib/postgresql/data/ volumes: postgres_data: \u00ba\u00ba\u00ba Podemos construir nuestra imagen y hacer funcionar los contenedores con una sola orden. \u00ba\u00ba\u00ba $ docker-compose up -d --build \u00ba\u00ba\u00ba Si ves un error aqu\u00ed como Bindfor 0.0.0.0:8000 failed: port is already allocated then you didn't fully stop the Docker container from Chapter 2. Intenta ejecutar docker-compose en el directorio donde lo ejecutaste anteriormente, probablemente postgresql. Luego intenta construir y ejecutar nuestra nueva imagen y contenedor de nuevo. Si ese enfoque sigue fallando, puedes salir completamente de la aplicaci\u00f3n de escritorio Docker y volver a abrirla. Vaya al navegador web ahora en http://127.0.0.1:8000/51 y haga clic en refrescar. Deber\u00eda ser la misma p\u00e1gina de bienvenida amistosa de Django, aunque ahora corriendo dentro de Docker. PostgreSQL Aunque ya hemos instalado psycopg y tenemos PostgreSQL disponible en nuestro archivo docker-compose.yml, todav\u00eda debemos dirigir a Django para que cambie a \u00e9l en lugar de la base de datos SQLite por defecto. Hazlo ahora. El c\u00f3digo es el mismo que en el cap\u00edtulo anterior. \u00ba\u00ba\u00ba bookstore_project/settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': 5432 } } \u00ba\u00ba\u00ba Actualiza el navegador de la p\u00e1gina principal para confirmar que todo funciona bien... Rect\u00edcamente. Modelo de usuario personalizado Es hora de implementar un modelo de usuario personalizado que la documentaci\u00f3n oficial de Django \"recomienda encarecidamente\".52 \u00bfPor qu\u00e9? Porque tendr\u00e1s que hacer cambios en el modelo de usuario incorporado en alg\u00fan momento de la vida de tu proyecto. Si no has comenzado con un modelo de usuario personalizado desde el primer comando de migraci\u00f3n que ejecutas, entonces te espera un mundo de dolor porque User est\u00e1 estrechamente entrelazado con el resto de Django internamente. Es un desaf\u00edo cambiar a un modelo de usuario personalizado a mitad del proyecto. 52 https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#using-a-custom-user-model-when- inicio de un proyecto Un punto de confusi\u00f3n para muchas personas es que los modelos de usuario personalizados s\u00f3lo se a\u00f1adieron en Django 1.5. Hasta ese momento el enfoque recomendado era a\u00f1adir un One-ToOneField53, a menudo llamado modelo de perfil, al usuario. A menudo ver\u00e1s esta configuraci\u00f3n en proyectos m\u00e1s antiguos. Pero hoy en d\u00eda usar un modelo de usuario personalizado es el enfoque m\u00e1s com\u00fan. Sin embargo, como ocurre con muchas cosas relacionadas con Django, hay opciones de implementaci\u00f3n: extender AbstractUser54 que mantiene los campos y permisos de usuario predeterminados o extender Ab- stractBaseUser55 que es a\u00fan m\u00e1s granular y flexible, pero requiere m\u00e1s trabajo. Nos quedaremos con el AbstractUser m\u00e1s simple en este libro ya que AbstractBaseUser puede ser a\u00f1adido m\u00e1s tarde si es necesario. Hay cuatro pasos para a\u00f1adir un modelo de usuario personalizado a nuestro proyecto: 1. Crear un modelo de Usuario Personalizado 2. Actualizar ajustes.py 3. Personalizar el UserCreationForm y el UserChangeForm 4. A\u00f1adir el modelo de usuario personalizado a admin.py El primer paso es crear un modelo de usuario personalizado que vivir\u00e1 dentro de su propia aplicaci\u00f3n. Me gusta ponerle nombre a esta aplicaci\u00f3n. Podr\u00edamos hacer esto localmente dentro de nuestro entorno virtual, lo que significa que ir\u00edamos al shell de pipenv y luego ejecutar\u00edamos python manage.py startapp users. Sin embargo, para mayor consistencia, ejecutaremos la mayor\u00eda de nuestros comandos dentro del mismo Docker. \u00ba\u00ba\u00ba $ docker-compose exec web python manage.py startapp users \u00ba\u00ba\u00ba Crear un nuevo modelo de CustomUser que ampl\u00eda el AbstractUser. Esto significa que estamos haciendo esencialmente una copia donde CustomUser ahora ha heredado toda la funcionalidad de AbstractUser, pero podemos anular o a\u00f1adir nueva funcionalidad seg\u00fan sea necesario. No estamos haciendo ning\u00fan cambio todav\u00eda, as\u00ed que incluye la declaraci\u00f3n de paso de Python que act\u00faa como un marcador de posici\u00f3n para nuestro futuro c\u00f3digo. \u00ba\u00ba\u00ba users/models.py from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): pass \u00ba\u00ba\u00ba Ahora entra y actualiza nuestro archivo settings.py en la secci\u00f3n INSTALLED_APPS para informar a Django sobre nuestra nueva aplicaci\u00f3n de usuarios. Tambi\u00e9n queremos a\u00f1adir una configuraci\u00f3n AUTH_USER_MODEL en la parte inferior del archivo, lo que har\u00e1 que nuestro proyecto utilice CustomUser en lugar del modelo de usuario por defecto. Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', Local 'users.apps.UsersConfig', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' # new 57 \u00bfPor qu\u00e9 hacemos users.apps.UsersConfigurar aqu\u00ed en lugar de s\u00f3lo el enfoque de los usuarios m\u00e1s antiguos? Ambos funcionan pero la forma m\u00e1s larga es una mejor pr\u00e1ctica ya que aprovecha las configuraciones adicionales que se pueden a\u00f1adir en AppConfiga . ahttps://docs.djangoproject.com/en/2.2/ref/applications/#django.apps.AppConfig Es hora de crear un archivo de migraciones para los cambios. A\u00f1adiremos el nombre opcional de la aplicaci\u00f3n usuarios al comando para que s\u00f3lo se incluyan los cambios de esa aplicaci\u00f3n. \u00ba\u00ba\u00ba $ docker-compose exec web python manage.py makemigrations users \u00ba\u00ba\u00ba Migrations for 'users': users/migrations/0001_initial.py - Create model CustomUser Then run migrate to initialize the database for the very first time. \u00ba\u00ba\u00ba $ docker-compose exec web python manage.py migrate \u00ba\u00ba\u00ba Formularios de usuario personalizados Un modelo de usuario puede ser creado y editado dentro del administrador de Django. As\u00ed que tendremos que actualizar tambi\u00e9n los formularios incorporados para que apunten a CustomUser en lugar de User. Crear un archivo users/forms.py. \u00ba\u00ba\u00ba $ touch users/forms.py \u00ba\u00ba\u00ba En tu editor de texto escribe el siguiente c\u00f3digo para pasar a CustomUser. \u00ba\u00ba\u00ba# users/forms.py from django.contrib.auth import get_user_model from django.contrib.auth.forms import UserCreationForm, UserChangeForm class CustomUserCreationForm(UserCreationForm): class Meta: model = get_user_model() fields = ('email', 'username',) class CustomUserChangeForm(UserChangeForm): class Meta: model = get_user_model() fields = ('email', 'username',) \u00ba\u00ba\u00ba En la parte superior hemos importado el modelo CustomUser a trav\u00e9s de get_user_model56 que mira a nuestro AUTH_USER_MODEL config en settings.py. Esto puede parecer un poco m\u00e1s circular que importar directamente CustomUser aqu\u00ed, pero refuerza la idea de hacer una sola referencia al modelo de usuario personalizado en lugar de referirse directamente a \u00e9l en todo nuestro proyecto. A continuaci\u00f3n importamos UserCreationForm57 y UserChangeForm58 que ser\u00e1n ambos extendidos. Luego creamos dos nuevos formularios -CustomUserCreationForm y CustomUserChangeForm- que ampl\u00edan los formularios de usuario base importados anteriormente y especifican el intercambio en nuestro modelo CustomUser y la visualizaci\u00f3n de los campos email y nombre de usuario. El campo de la contrase\u00f1a est\u00e1 incluido impl\u00edcitamente por defecto, por lo que no es necesario nombrarlo expl\u00edcitamente aqu\u00ed tambi\u00e9n. Administrador de Usuario Personalizado Finalmente tenemos que actualizar nuestro archivo users/admin.py. El admin es un lugar com\u00fan para manipular los datos de los usuarios y hay un estrecho acoplamiento entre el usuario incorporado y el admin. Extenderemos el UserAdmin existente a CustomUserAdmin y le diremos a Django que utilice nuestros nuevos formularios, el modelo de usuario personalizado, y que ponga en la lista s\u00f3lo el correo electr\u00f3nico y el nombre de usuario de un usuario. Si quisi\u00e9ramos, podr\u00edamos a\u00f1adir m\u00e1s de los campos de usuario existentes59 a list_display como is_staff. \u00ba\u00ba\u00ba users/admin.py from django.contrib import admin from django.contrib.auth import get_user_model from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm CustomUser = get_user_model() class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm 59 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/ Chapter 3: Bookstore Project 61 form = CustomUserChangeForm model = CustomUser list_display = ['email', 'username',] admin.site.register(CustomUser, CustomUserAdmin) \u00ba\u00ba\u00ba Uf. Un poco de c\u00f3digo por adelantado, pero esto ahorra un mont\u00f3n de dolores de cabeza m\u00e1s tarde. Superusuario Una buena manera de confirmar que nuestro modelo de usuario personalizado est\u00e1 funcionando correctamente es crear una cuenta de superusuario para que podamos acceder al administrador. Este comando acceder\u00e1 a CustomUserCreationForm bajo el cap\u00f3. Command Line $ docker-compose exec web python manage.py createsuperuser \u00ba\u00ba\u00ba He usado el nombre de usuario wsv, la direcci\u00f3n de correo electr\u00f3nico will@wsvincent.com, y la contrase\u00f1a testpass123. Puedes usar tus propias variaciones preferidas aqu\u00ed. Ahora ve a http://127.0.0.1:8000/admin60 y confirma que puedes entrar. Deber\u00edas ver tu nombre de superusuario en la esquina superior derecha de la p\u00e1gina de entrada al sistema. 60 http://127.0.0.1:8000/admin Cap\u00edtulo 3: Proyecto de librer\u00eda 62 P\u00e1gina de inicio del administrador de Django Tambi\u00e9n puedes hacer clic en la secci\u00f3n de usuarios para ver el correo electr\u00f3nico y el nombre de usuario de tu cuenta de superusuario. P\u00e1gina de usuarios de Django Pruebas Ya que hemos a\u00f1adido nuevas funciones a nuestro proyecto, deber\u00edamos probarlo. Tanto si eres un desarrollador en solitario como si trabajas en equipo, las pruebas son importantes. En palabras del cofundador de Django, Jacob Kaplan-Moss, \"El c\u00f3digo sin pruebas se rompe tal y como est\u00e1 dise\u00f1ado\". Hay dos tipos principales de pruebas: - Las pruebas unitarias son peque\u00f1as, r\u00e1pidas y aisladas a una pieza espec\u00edfica de funcionalidad - Las pruebas de integraci\u00f3n son grandes, lentas y se utilizan para probar una aplicaci\u00f3n entera o un el flujo de usuarios como el pago que cubre m\u00faltiples pantallas Deber\u00edas escribir muchas pruebas de unidad y un peque\u00f1o n\u00famero de pruebas de integraci\u00f3n. El lenguaje de programaci\u00f3n Python contiene su propio marco de pruebas unitarias61 y el marco de pruebas automatizadas de Django62 lo ampl\u00eda con m\u00faltiples adiciones en un contexto web. No hay excusa para no escribir muchas pruebas; te ahorrar\u00e1n tiempo. Es importante se\u00f1alar que no todo necesita ser probado. Por ejemplo, cualquier caracter\u00edstica incorporada de Django ya contiene pruebas en el c\u00f3digo fuente. Si utiliz\u00e1ramos el modelo de usuario por defecto en nuestro proyecto no necesitar\u00edamos probarlo. Pero ya que hemos creado un modelo de Usuario Personalizado deber\u00edamos. Pruebas unitarias Para escribir pruebas unitarias en Django usamos TestCase63 que es, en s\u00ed mismo, una extensi\u00f3n del TestCase64 de Python. La aplicaci\u00f3n de nuestros usuarios ya contiene un archivo tests.py que es auto- 61 https://docs.python.org/3.7/library/unittest.html 62 https://docs.djangoproject.com/en/2.2/topics/testing/ 63 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.TestCase 64 https://docs.python.org/3/library/unittest.html#unittest.TestCase Cap\u00edtulo 3: Proyecto de librer\u00eda 64 maticamente a\u00f1adido cuando se usa el comando startapp. Actualmente est\u00e1 en blanco. Arreglemos eso! Cada m\u00e9todo debe ser precedido por una prueba para ser ejecutado por el conjunto de pruebas de Django. Tambi\u00e9n es una buena idea ser demasiado descriptivo con los nombres de las pruebas de la unidad ya que los proyectos maduros tienen cientos, si no miles de pruebas! C\u00f3digo users/tests.py from django.contrib.auth import get_user_model from django.test import TestCase class CustomUserTests(TestCase): def test_create_user(self): User = get_user_model() user = User.objects.create_user( username='will', email='will@email.com', password='testpass123' ) self.assertEqual(user.username, 'will') self.assertEqual(user.email, 'will@email.com') self.assertTrue(user.is_active) self.assertFalse(user.is_staff) self.assertFalse(user.is_superuser) def test_create_superuser(self): User = get_user_model() admin_user = User.objects.create_superuser( username='superadmin', email='superadmin@email.com', password='testpass123' ) self.assertEqual(admin_user.username, 'superadmin') self.assertEqual(admin_user.email, 'superadmin@email.com') self.assertTrue(admin_user.is_active) self.assertTrue(admin_user.is_staff) self.assertTrue(admin_user.is_superuser) En la parte superior hemos importado tanto get_user_model como TestCase antes de crear una clase CustomUserTests. Dentro de ella hay dos pruebas separadas. test_create_user confirma que se puede crear un nuevo usuario. Primero establecemos nuestro modelo de usuario a la variable User y luego creamos uno a trav\u00e9s del m\u00e9todo manager create_user65 que hace el trabajo real de crear un nuevo usuario con los permisos adecuados. Para test_create_superuser seguimos un patr\u00f3n similar pero referenciamos create_superuser66 en lugar de create_user. La diferencia entre los dos usuarios es que un superusuario debe tener ambos is_staff y is_superuser puesto a True. Para ejecutar nuestros tests en Docker pondremos el prefijo docker-compose exec web al comando tradicional python manage.py test. user 66 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.UserManager.create_ superuser Chapter 3: Bookstore Project Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .. Ran 2 tests in 0.268s OK Destroying test database for alias 'default'... All the tests pass so we can proceed. 66 Git Hemos logrado bastante en este cap\u00edtulo, as\u00ed que es un buen punto para hacer una pausa y confirmar nuestro trabajo inicializando un nuevo repositorio Git, a\u00f1adiendo cambios, e incluyendo un mensaje de confirmaci\u00f3n. Command Line $ git init $ git status $ git add . $ git commit -m 'ch3' Puedes compararlo con el c\u00f3digo fuente oficial de este cap\u00edtulo de Github67 . 67 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch3-books Cap\u00edtulo 3: Proyecto de librer\u00eda 67 Conclusi\u00f3n Nuestro proyecto de la librer\u00eda est\u00e1 ahora funcionando con Docker y PostgreSQL y hemos configurado un modelo de usuario personalizado. Lo siguiente ser\u00e1 una aplicaci\u00f3n de p\u00e1ginas para nuestras p\u00e1ginas est\u00e1ticas.","title":"19. Proyecto Bookstore"},{"location":"19_/#19-proyecto-bookstore","text":"\u200b Es hora de construir el proyecto principal del curso, una librer\u00eda en l\u00ednea . Se comenzar\u00e1 con un nuevo proyecto, se cambiar\u00e1 a Docker, se le a\u00f1adir\u00e1 un modelo de usuario personalizado y se implementar\u00e1n las primeras pruebas. Se comienza creando un nuevo proyecto Django con Pipenv localmente y luego se cambiar\u00e1 a Docker. \u200b Se crear\u00e1 un directorio books para el c\u00f3digo, y luego se instalar\u00e1 django. Tambi\u00e9n se usar\u00e1 PostgreSQL por lo que se instalar\u00e1 tambi\u00e9n el adaptador psycopg2 . S\u00f3lo despu\u00e9s de que se haya construido la imagen inicial, se empezar\u00e1n a instalar los futuros paquetes de software dentro del propio Docker. Por \u00faltimo, se usar\u00e1 el comando shell para entrar en el nuevo entorno virtual. $ cd .. $ mkdir books && cd books $ pipenv install django==2.2.7 psycopg2-binary==2.8.4 $ pipenv shell \u200b Le daremos un nombre a nuestro nuevo proyecto de librer\u00eda de Django. Aseg\u00farate de no olvidar ese punto, ., al final del comando o Django crear\u00e1 un directorio extra que no necesitamos. Luego usa el servidor de ejecuci\u00f3n para iniciar el servidor web local de Django y confirmar que todo funciona correctamente. (books) $ django-admin startproject bookstore_project . (books) $ python manage.py runserver En tu navegador de Internet ve a http://127.0.0.1:8000/49 y deber\u00edas ver la amistosa p\u00e1gina de bienvenida de Django. En la l\u00ednea de comandos es probable que veas una advertencia sobre \"migraci\u00f3n(es) no aplicada(s)\". Es seguro ignorar esto por ahora ya que estamos a punto de cambiar a Docker y PostgreSQL.","title":"19. Proyecto Bookstore"},{"location":"19_/#docker","text":"Ahora podemos cambiar a Docker en nuestro proyecto. Adelante, detenga el servidor local Control+c y tambi\u00e9n salga del shell del entorno virtual. (books) $ exit $ Docker ya deber\u00eda estar instalado y la aplicaci\u00f3n de escritorio funcionando desde el cap\u00edtulo anterior. Por lo general necesitamos crear un archivo Dockerfile y un archivo docker-compose.yml. $ touch Dockerfile $ touch docker-compose.yml El Dockerfile ser\u00e1 el mismo que antes. Dockerfile # Pull base image FROM python:3.7 # Set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 # Set work directory WORKDIR /code # Install dependencies Chapter 3: Bookstore Project COPY Pipfile Pipfile.lock /code/ RUN pip install pipenv && pipenv install --system 52 # Copy project COPY . /code/ Pero para el archivo docker-compose.yml a\u00f1adiremos una caracter\u00edstica adicional que es un volumen dedicado para nuestra base de datos para que persista incluso cuando los contenedores de servicios se detengan. La eliminaci\u00f3n del volumen en s\u00ed es un proceso separado. Podemos hacerlo especificando una ruta para los vol\u00famenes dentro del contenedor db y luego especificando un volumen fuera de nuestros servicios con el mismo nombre postgres_data. Puedes ver la documentaci\u00f3n de Docker sobre vol\u00famenes50 para una explicaci\u00f3n m\u00e1s t\u00e9cnica de c\u00f3mo funciona todo esto si est\u00e1s interesado. docker-compose.yml \u00ba\u00ba\u00ba version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: \u00ba\u00ba\u00ba\u00ba image: postgres:11 volumes: - postgres_data:/var/lib/postgresql/data/ volumes: postgres_data: \u00ba\u00ba\u00ba Podemos construir nuestra imagen y hacer funcionar los contenedores con una sola orden. \u00ba\u00ba\u00ba $ docker-compose up -d --build \u00ba\u00ba\u00ba Si ves un error aqu\u00ed como Bindfor 0.0.0.0:8000 failed: port is already allocated then you didn't fully stop the Docker container from Chapter 2. Intenta ejecutar docker-compose en el directorio donde lo ejecutaste anteriormente, probablemente postgresql. Luego intenta construir y ejecutar nuestra nueva imagen y contenedor de nuevo. Si ese enfoque sigue fallando, puedes salir completamente de la aplicaci\u00f3n de escritorio Docker y volver a abrirla. Vaya al navegador web ahora en http://127.0.0.1:8000/51 y haga clic en refrescar. Deber\u00eda ser la misma p\u00e1gina de bienvenida amistosa de Django, aunque ahora corriendo dentro de Docker.","title":"Docker"},{"location":"19_/#postgresql","text":"Aunque ya hemos instalado psycopg y tenemos PostgreSQL disponible en nuestro archivo docker-compose.yml, todav\u00eda debemos dirigir a Django para que cambie a \u00e9l en lugar de la base de datos SQLite por defecto. Hazlo ahora. El c\u00f3digo es el mismo que en el cap\u00edtulo anterior. \u00ba\u00ba\u00ba","title":"PostgreSQL"},{"location":"19_/#bookstore_projectsettingspy","text":"DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': 5432 } } \u00ba\u00ba\u00ba Actualiza el navegador de la p\u00e1gina principal para confirmar que todo funciona bien... Rect\u00edcamente.","title":"bookstore_project/settings.py"},{"location":"19_/#modelo-de-usuario-personalizado","text":"Es hora de implementar un modelo de usuario personalizado que la documentaci\u00f3n oficial de Django \"recomienda encarecidamente\".52 \u00bfPor qu\u00e9? Porque tendr\u00e1s que hacer cambios en el modelo de usuario incorporado en alg\u00fan momento de la vida de tu proyecto. Si no has comenzado con un modelo de usuario personalizado desde el primer comando de migraci\u00f3n que ejecutas, entonces te espera un mundo de dolor porque User est\u00e1 estrechamente entrelazado con el resto de Django internamente. Es un desaf\u00edo cambiar a un modelo de usuario personalizado a mitad del proyecto. 52 https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#using-a-custom-user-model-when- inicio de un proyecto Un punto de confusi\u00f3n para muchas personas es que los modelos de usuario personalizados s\u00f3lo se a\u00f1adieron en Django 1.5. Hasta ese momento el enfoque recomendado era a\u00f1adir un One-ToOneField53, a menudo llamado modelo de perfil, al usuario. A menudo ver\u00e1s esta configuraci\u00f3n en proyectos m\u00e1s antiguos. Pero hoy en d\u00eda usar un modelo de usuario personalizado es el enfoque m\u00e1s com\u00fan. Sin embargo, como ocurre con muchas cosas relacionadas con Django, hay opciones de implementaci\u00f3n: extender AbstractUser54 que mantiene los campos y permisos de usuario predeterminados o extender Ab- stractBaseUser55 que es a\u00fan m\u00e1s granular y flexible, pero requiere m\u00e1s trabajo. Nos quedaremos con el AbstractUser m\u00e1s simple en este libro ya que AbstractBaseUser puede ser a\u00f1adido m\u00e1s tarde si es necesario. Hay cuatro pasos para a\u00f1adir un modelo de usuario personalizado a nuestro proyecto: 1. Crear un modelo de Usuario Personalizado 2. Actualizar ajustes.py 3. Personalizar el UserCreationForm y el UserChangeForm 4. A\u00f1adir el modelo de usuario personalizado a admin.py El primer paso es crear un modelo de usuario personalizado que vivir\u00e1 dentro de su propia aplicaci\u00f3n. Me gusta ponerle nombre a esta aplicaci\u00f3n. Podr\u00edamos hacer esto localmente dentro de nuestro entorno virtual, lo que significa que ir\u00edamos al shell de pipenv y luego ejecutar\u00edamos python manage.py startapp users. Sin embargo, para mayor consistencia, ejecutaremos la mayor\u00eda de nuestros comandos dentro del mismo Docker. \u00ba\u00ba\u00ba $ docker-compose exec web python manage.py startapp users \u00ba\u00ba\u00ba Crear un nuevo modelo de CustomUser que ampl\u00eda el AbstractUser. Esto significa que estamos haciendo esencialmente una copia donde CustomUser ahora ha heredado toda la funcionalidad de AbstractUser, pero podemos anular o a\u00f1adir nueva funcionalidad seg\u00fan sea necesario. No estamos haciendo ning\u00fan cambio todav\u00eda, as\u00ed que incluye la declaraci\u00f3n de paso de Python que act\u00faa como un marcador de posici\u00f3n para nuestro futuro c\u00f3digo. \u00ba\u00ba\u00ba","title":"Modelo de usuario personalizado"},{"location":"19_/#usersmodelspy","text":"from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): pass \u00ba\u00ba\u00ba Ahora entra y actualiza nuestro archivo settings.py en la secci\u00f3n INSTALLED_APPS para informar a Django sobre nuestra nueva aplicaci\u00f3n de usuarios. Tambi\u00e9n queremos a\u00f1adir una configuraci\u00f3n AUTH_USER_MODEL en la parte inferior del archivo, lo que har\u00e1 que nuestro proyecto utilice CustomUser en lugar del modelo de usuario por defecto. Code","title":"users/models.py"},{"location":"19_/#bookstore_projectsettingspy_1","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles',","title":"bookstore_project/settings.py"},{"location":"19_/#local","text":"'users.apps.UsersConfig', # new ] ... AUTH_USER_MODEL = 'users.CustomUser' # new 57 \u00bfPor qu\u00e9 hacemos users.apps.UsersConfigurar aqu\u00ed en lugar de s\u00f3lo el enfoque de los usuarios m\u00e1s antiguos? Ambos funcionan pero la forma m\u00e1s larga es una mejor pr\u00e1ctica ya que aprovecha las configuraciones adicionales que se pueden a\u00f1adir en AppConfiga . ahttps://docs.djangoproject.com/en/2.2/ref/applications/#django.apps.AppConfig Es hora de crear un archivo de migraciones para los cambios. A\u00f1adiremos el nombre opcional de la aplicaci\u00f3n usuarios al comando para que s\u00f3lo se incluyan los cambios de esa aplicaci\u00f3n. \u00ba\u00ba\u00ba $ docker-compose exec web python manage.py makemigrations users \u00ba\u00ba\u00ba Migrations for 'users': users/migrations/0001_initial.py - Create model CustomUser Then run migrate to initialize the database for the very first time. \u00ba\u00ba\u00ba $ docker-compose exec web python manage.py migrate \u00ba\u00ba\u00ba Formularios de usuario personalizados Un modelo de usuario puede ser creado y editado dentro del administrador de Django. As\u00ed que tendremos que actualizar tambi\u00e9n los formularios incorporados para que apunten a CustomUser en lugar de User. Crear un archivo users/forms.py. \u00ba\u00ba\u00ba $ touch users/forms.py \u00ba\u00ba\u00ba En tu editor de texto escribe el siguiente c\u00f3digo para pasar a CustomUser. \u00ba\u00ba\u00ba# users/forms.py from django.contrib.auth import get_user_model from django.contrib.auth.forms import UserCreationForm, UserChangeForm class CustomUserCreationForm(UserCreationForm): class Meta: model = get_user_model() fields = ('email', 'username',) class CustomUserChangeForm(UserChangeForm): class Meta: model = get_user_model() fields = ('email', 'username',) \u00ba\u00ba\u00ba En la parte superior hemos importado el modelo CustomUser a trav\u00e9s de get_user_model56 que mira a nuestro AUTH_USER_MODEL config en settings.py. Esto puede parecer un poco m\u00e1s circular que importar directamente CustomUser aqu\u00ed, pero refuerza la idea de hacer una sola referencia al modelo de usuario personalizado en lugar de referirse directamente a \u00e9l en todo nuestro proyecto. A continuaci\u00f3n importamos UserCreationForm57 y UserChangeForm58 que ser\u00e1n ambos extendidos. Luego creamos dos nuevos formularios -CustomUserCreationForm y CustomUserChangeForm- que ampl\u00edan los formularios de usuario base importados anteriormente y especifican el intercambio en nuestro modelo CustomUser y la visualizaci\u00f3n de los campos email y nombre de usuario. El campo de la contrase\u00f1a est\u00e1 incluido impl\u00edcitamente por defecto, por lo que no es necesario nombrarlo expl\u00edcitamente aqu\u00ed tambi\u00e9n. Administrador de Usuario Personalizado Finalmente tenemos que actualizar nuestro archivo users/admin.py. El admin es un lugar com\u00fan para manipular los datos de los usuarios y hay un estrecho acoplamiento entre el usuario incorporado y el admin. Extenderemos el UserAdmin existente a CustomUserAdmin y le diremos a Django que utilice nuestros nuevos formularios, el modelo de usuario personalizado, y que ponga en la lista s\u00f3lo el correo electr\u00f3nico y el nombre de usuario de un usuario. Si quisi\u00e9ramos, podr\u00edamos a\u00f1adir m\u00e1s de los campos de usuario existentes59 a list_display como is_staff. \u00ba\u00ba\u00ba","title":"Local"},{"location":"19_/#usersadminpy","text":"from django.contrib import admin from django.contrib.auth import get_user_model from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm CustomUser = get_user_model() class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm 59 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/ Chapter 3: Bookstore Project 61 form = CustomUserChangeForm model = CustomUser list_display = ['email', 'username',] admin.site.register(CustomUser, CustomUserAdmin) \u00ba\u00ba\u00ba Uf. Un poco de c\u00f3digo por adelantado, pero esto ahorra un mont\u00f3n de dolores de cabeza m\u00e1s tarde. Superusuario Una buena manera de confirmar que nuestro modelo de usuario personalizado est\u00e1 funcionando correctamente es crear una cuenta de superusuario para que podamos acceder al administrador. Este comando acceder\u00e1 a CustomUserCreationForm bajo el cap\u00f3. Command Line $ docker-compose exec web python manage.py createsuperuser \u00ba\u00ba\u00ba He usado el nombre de usuario wsv, la direcci\u00f3n de correo electr\u00f3nico will@wsvincent.com, y la contrase\u00f1a testpass123. Puedes usar tus propias variaciones preferidas aqu\u00ed. Ahora ve a http://127.0.0.1:8000/admin60 y confirma que puedes entrar. Deber\u00edas ver tu nombre de superusuario en la esquina superior derecha de la p\u00e1gina de entrada al sistema. 60 http://127.0.0.1:8000/admin Cap\u00edtulo 3: Proyecto de librer\u00eda 62 P\u00e1gina de inicio del administrador de Django Tambi\u00e9n puedes hacer clic en la secci\u00f3n de usuarios para ver el correo electr\u00f3nico y el nombre de usuario de tu cuenta de superusuario. P\u00e1gina de usuarios de Django Pruebas Ya que hemos a\u00f1adido nuevas funciones a nuestro proyecto, deber\u00edamos probarlo. Tanto si eres un desarrollador en solitario como si trabajas en equipo, las pruebas son importantes. En palabras del cofundador de Django, Jacob Kaplan-Moss, \"El c\u00f3digo sin pruebas se rompe tal y como est\u00e1 dise\u00f1ado\". Hay dos tipos principales de pruebas: - Las pruebas unitarias son peque\u00f1as, r\u00e1pidas y aisladas a una pieza espec\u00edfica de funcionalidad - Las pruebas de integraci\u00f3n son grandes, lentas y se utilizan para probar una aplicaci\u00f3n entera o un el flujo de usuarios como el pago que cubre m\u00faltiples pantallas Deber\u00edas escribir muchas pruebas de unidad y un peque\u00f1o n\u00famero de pruebas de integraci\u00f3n. El lenguaje de programaci\u00f3n Python contiene su propio marco de pruebas unitarias61 y el marco de pruebas automatizadas de Django62 lo ampl\u00eda con m\u00faltiples adiciones en un contexto web. No hay excusa para no escribir muchas pruebas; te ahorrar\u00e1n tiempo. Es importante se\u00f1alar que no todo necesita ser probado. Por ejemplo, cualquier caracter\u00edstica incorporada de Django ya contiene pruebas en el c\u00f3digo fuente. Si utiliz\u00e1ramos el modelo de usuario por defecto en nuestro proyecto no necesitar\u00edamos probarlo. Pero ya que hemos creado un modelo de Usuario Personalizado deber\u00edamos. Pruebas unitarias Para escribir pruebas unitarias en Django usamos TestCase63 que es, en s\u00ed mismo, una extensi\u00f3n del TestCase64 de Python. La aplicaci\u00f3n de nuestros usuarios ya contiene un archivo tests.py que es auto- 61 https://docs.python.org/3.7/library/unittest.html 62 https://docs.djangoproject.com/en/2.2/topics/testing/ 63 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.TestCase 64 https://docs.python.org/3/library/unittest.html#unittest.TestCase Cap\u00edtulo 3: Proyecto de librer\u00eda 64 maticamente a\u00f1adido cuando se usa el comando startapp. Actualmente est\u00e1 en blanco. Arreglemos eso! Cada m\u00e9todo debe ser precedido por una prueba para ser ejecutado por el conjunto de pruebas de Django. Tambi\u00e9n es una buena idea ser demasiado descriptivo con los nombres de las pruebas de la unidad ya que los proyectos maduros tienen cientos, si no miles de pruebas! C\u00f3digo","title":"users/admin.py"},{"location":"19_/#userstestspy","text":"from django.contrib.auth import get_user_model from django.test import TestCase class CustomUserTests(TestCase): def test_create_user(self): User = get_user_model() user = User.objects.create_user( username='will', email='will@email.com', password='testpass123' ) self.assertEqual(user.username, 'will') self.assertEqual(user.email, 'will@email.com') self.assertTrue(user.is_active) self.assertFalse(user.is_staff) self.assertFalse(user.is_superuser) def test_create_superuser(self): User = get_user_model() admin_user = User.objects.create_superuser( username='superadmin', email='superadmin@email.com', password='testpass123' ) self.assertEqual(admin_user.username, 'superadmin') self.assertEqual(admin_user.email, 'superadmin@email.com') self.assertTrue(admin_user.is_active) self.assertTrue(admin_user.is_staff) self.assertTrue(admin_user.is_superuser) En la parte superior hemos importado tanto get_user_model como TestCase antes de crear una clase CustomUserTests. Dentro de ella hay dos pruebas separadas. test_create_user confirma que se puede crear un nuevo usuario. Primero establecemos nuestro modelo de usuario a la variable User y luego creamos uno a trav\u00e9s del m\u00e9todo manager create_user65 que hace el trabajo real de crear un nuevo usuario con los permisos adecuados. Para test_create_superuser seguimos un patr\u00f3n similar pero referenciamos create_superuser66 en lugar de create_user. La diferencia entre los dos usuarios es que un superusuario debe tener ambos is_staff y is_superuser puesto a True. Para ejecutar nuestros tests en Docker pondremos el prefijo docker-compose exec web al comando tradicional python manage.py test. user 66 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.UserManager.create_ superuser Chapter 3: Bookstore Project Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .. Ran 2 tests in 0.268s OK Destroying test database for alias 'default'... All the tests pass so we can proceed. 66 Git Hemos logrado bastante en este cap\u00edtulo, as\u00ed que es un buen punto para hacer una pausa y confirmar nuestro trabajo inicializando un nuevo repositorio Git, a\u00f1adiendo cambios, e incluyendo un mensaje de confirmaci\u00f3n. Command Line $ git init $ git status $ git add . $ git commit -m 'ch3' Puedes compararlo con el c\u00f3digo fuente oficial de este cap\u00edtulo de Github67 . 67 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch3-books Cap\u00edtulo 3: Proyecto de librer\u00eda 67 Conclusi\u00f3n Nuestro proyecto de la librer\u00eda est\u00e1 ahora funcionando con Docker y PostgreSQL y hemos configurado un modelo de usuario personalizado. Lo siguiente ser\u00e1 una aplicaci\u00f3n de p\u00e1ginas para nuestras p\u00e1ginas est\u00e1ticas.","title":"users/tests.py"},{"location":"20_/","text":"Chapter 4: Pages App Construyamos una p\u00e1gina web para nuestro nuevo proyecto. Por ahora esta ser\u00e1 una p\u00e1gina est\u00e1tica que significa no interactuar\u00e1 con la base de datos de ninguna manera. M\u00e1s tarde ser\u00e1 una p\u00e1gina din\u00e1mica exhibiendo libros a la venta pero... una cosa a la vez. Es com\u00fan tener varias p\u00e1ginas est\u00e1ticas incluso en un proyecto maduro como un About as\u00ed que vamos a crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para ellos. En la l\u00ednea de comandos use el comando startapp de nuevo para hacer una aplicaci\u00f3n de p\u00e1ginas. L\u00ednea de comandos $ docker-componer ejecutivo web python manage.py startapp pages Entonces a\u00f1\u00e1delo a nuestro ajuste INSTALLED_APPS. Tambi\u00e9n actualizaremos TEMPLATES para que Django buscar\u00e1 una carpeta de plantillas a nivel de proyecto. De forma predeterminada, Django busca dentro de cada aplicaci\u00f3n para una carpeta de plantillas, pero organizar todas las plantillas en un espacio es m\u00e1s f\u00e1cil de manejar. C\u00f3digo bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', Chapter 4: Pages App Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', # new ] TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], # new ... } ] 69 Ten en cuenta que actualizar la configuraci\u00f3n de DIRS significa que Django tambi\u00e9n buscar\u00e1 en esta nueva carpeta; seguir\u00e1 buscando cualquier carpeta de plantillas dentro de una aplicaci\u00f3n. Plantillas Es hora de crear ese nuevo directorio de plantillas y poner dos archivos dentro de \u00e9l: base.html y home.html. El primer archivo de nivel base ser\u00e1 heredado por todos los dem\u00e1s archivos; home.html ser\u00e1 nuestra p\u00e1gina de inicio. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas L\u00ednea de mando $ mkdir templates $ touch templates/_base.html $ touch templates/home.html 70 \u00bfPor qu\u00e9 llamar a la plantilla base _base.html con el subrayado en lugar de base.html? Este es opcional, pero algunos desarrolladores prefieren a\u00f1adir un gui\u00f3n bajo _ para denotar un archivo que es destinado a ser heredado por otros archivos y no se muestra por s\u00ed solo. En el archivo base incluiremos el m\u00ednimo necesario y a\u00f1adiremos etiquetas de bloque para ambos t\u00edtulo y contenido. Las etiquetas de bloque dan a las plantillas de nivel superior la opci\u00f3n de anular s\u00f3lo el contenido dentro de las etiquetas. Por ejemplo, la p\u00e1gina de inicio tendr\u00e1 un t\u00edtulo de \"Inicio\" pero queremos que aparezca entre las etiquetas html . Usar etiquetas de bloque hace que m\u00e1s f\u00e1cil de actualizar este contenido, seg\u00fan sea necesario, en plantillas heredadas. \u00bfPor qu\u00e9 usar el nombre de contenido para el contenido principal de nuestro proyecto? Este nombre podr\u00eda ser cualquier cosa -principal o alg\u00fan otro indicador gen\u00e9rico-, pero utilizar el contenido es una pr\u00e1ctica com\u00fan convenci\u00f3n de nombres en el mundo de Django. \u00bfPuedes usar algo m\u00e1s? Por supuesto. Es contenido el m\u00e1s com\u00fan que ver\u00e1s? S\u00ed. Chapter 4: Pages App Code <!DOCTYPE html> {% block title %}Bookstore{% endblock title %} {% block content %} {% endblock content %} Now for the homepage which will simply say \u201cHomepage\u201d for now. Code {% extends '_base.html' %} {% block title %}Home{% endblock title %} {% block content %} Homepage {% endblock content %} 71 Chapter 4: Pages App 72 URLs y vistas Cada p\u00e1gina web de nuestro proyecto Django necesita un archivo urls.py y views.py que vaya con la plantilla. Para los principiantes el hecho de que el orden no importa aqu\u00ed, necesitamos los 3 archivos y muy a menudo un cuarto, models.py, para la base de datos- es confuso. Generalmente yo prefieren empezar con las urls y trabajar desde all\u00ed, pero no hay una \"manera correcta\" de construir de esta red conectada de archivos de Django. Comencemos con nuestro proyecto urls.py para establecer la ruta apropiada para las p\u00e1ginas web dentro de la aplicaci\u00f3n de las p\u00e1ginas. Como queremos crear una p\u00e1gina de inicio no a\u00f1adimos ning\u00fan prefijo adicional a la La ruta URL que se designa con la cadena vac\u00eda ''. Tambi\u00e9n importamos incluir en el segunda l\u00ednea para a\u00f1adir de forma concisa la aplicaci\u00f3n de las p\u00e1ginas a nuestro archivo principal urls.py. C\u00f3digo bookstore_project/urls.py from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] A continuaci\u00f3n creamos un archivo urls.py dentro de las p\u00e1ginas de la aplicaci\u00f3n. L\u00ednea de comandos $ touch pages/urls.py Este archivo importar\u00e1 el HomePageView y establecer\u00e1 la ruta, de nuevo, a la cadena vac\u00eda ''. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 73 Note que proveemos un opcional, pero recomendado, llamado URL68 de 'home' en el fin. Esto ser\u00e1 \u00fatil en breve. Code pages/urls.py from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Finalmente necesitamos un archivo views.py. Podemos aprovechar el TemplateView69 incorporado en Django para que el \u00fanico ajuste necesario es especificar nuestra plantilla deseada, home.html. C\u00f3digo pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya casi hemos terminado. Si navega a la p\u00e1gina principal ahora en http://127.0.0.1:8000/70 ...en realidad ver\u00e1s un error. \u00bfPero qu\u00e9 lo causa? Ya que estamos ejecutando el contenedor 68 https://docs.djangoproject.com/en/2.2/topics/http/urls/#naming-url-patterns 69 https://docs.djangoproject.com/en/2.2/ref/class-based-views/base/#django.views.generic.base.TemplateView 70 http://127.0.0.1:8000/ Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 74 en el modo de fondo separado, esa -d bandera- debemos expl\u00edcitamente revisar los registros para ver salida de la consola. As\u00ed que teclea docker-componer registros que dar\u00e1n un error \"ModuleNotFoundError\": No m\u00f3dulo llamado 'pages.urls'\". Lo que pasa es que Django no hace autom\u00e1ticamente actualizar el archivo settings.py para nosotros en base a un cambio. En un mundo no-Docker que se detiene y reiniciar el servidor hace el truco. Debemos hacer lo mismo aqu\u00ed, lo que significa escribiendo docker-compose abajo y luego docker-compose arriba -d para cargar la nueva aplicaci\u00f3n de libros en forma adecuada. Actualice la p\u00e1gina web ahora y funcionar\u00e1. P\u00e1gina de inicio Pruebas Es hora de hacer pruebas. Para nuestra p\u00e1gina web podemos usar el SimpleTestCase71 de Django que es un un subconjunto especial del TestCase de Django que est\u00e1 dise\u00f1ado para p\u00e1ginas web que no tienen un modelo incluido. Las pruebas pueden resultar abrumadoras al principio, pero r\u00e1pidamente se vuelven un poco aburridas. Usar\u00e1s la misma estructura y t\u00e9cnicas una y otra vez. En tu editor de texto, actualiza el archivo existente de pages/tests.py. Empezaremos probando la plantilla. 71 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#simpletestcase Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas C\u00f3digo pages/tests.py from django.test import SimpleTestCase from django.urls import reverse 75 class HomepageTests(SimpleTestCase): def test_homepage_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_homepage_url_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) En la parte superior importamos SimpleTestCase as\u00ed como reverse72 que es \u00fatil para probar nuestros URLs. Luego creamos una clase llamada HomepageTests que extiende SimpleTestCase y dentro de ella agregar un m\u00e9todo para cada unidad de prueba. Note que nos estamos a\u00f1adiendo a nosotros mismos como el primer argumento de cada prueba unitaria. Este es un Python convenci\u00f3n73 que vale la pena repetir. Es mejor ser demasiado descriptivo con los nombres de las pruebas de las unidades, pero tened en cuenta que cada una de ellas El m\u00e9todo debe comenzar con una prueba para ser ejecutada por el conjunto de pruebas de Django. Las dos pruebas de aqu\u00ed comprueban que el c\u00f3digo de estado HTTP de la p\u00e1gina principal es igual a 200, lo que significa que existe. Todav\u00eda no nos dice nada espec\u00edfico sobre la contenidos de la p\u00e1gina. Para test_homepageview_status_code estamos creando una variable 72 https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#reverse 73 https://docs.python.org/3/tutorial/classes.html#random-remarks Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 76 llamada respuesta que accede a la p\u00e1gina de inicio (/) y luego utiliza la afirmaci\u00f3n de PythonEqual74 para comprobar que el c\u00f3digo de estado coincide con el 200. Un patr\u00f3n similar existe para test_homepage_- url_name excepto que estamos llamando al nombre de la URL de casa por el m\u00e9todo inverso. Recordemos que a\u00f1adimos esto al archivo pages/urls.py como mejor pr\u00e1ctica. Incluso si cambiamos la ruta real de esta p\u00e1gina en el futuro, todav\u00eda podemos referirnos a ella por el mismo URL de inicio nombre. Para realizar nuestras pruebas ejecutamos el comando de prueba python manage.py aunque con el prefijo docker-componer la web ejecutiva para que funcione dentro del propio Docker. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .. Ran 4 tests in 0.277s OK Destroying test database for alias 'default'... \u00bfPor qu\u00e9 dice 4 pruebas cuando s\u00f3lo creamos 2? Porque estamos probando todo el Proyecto Django y en el cap\u00edtulo anterior bajo usuarios/tests.py a\u00f1adimos dos pruebas para el modelo de usuario personalizado. Si quisi\u00e9ramos hacer s\u00f3lo pruebas para la aplicaci\u00f3n de las p\u00e1ginas, simplemente A\u00f1ade ese nombre al comando para que docker-compose ejecute web python manage.py p\u00e1ginas de prueba. 74 https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 77 Plantillas de prueba Hasta ahora hemos probado que la p\u00e1gina web existe, pero tambi\u00e9n deber\u00edamos confirmar que utiliza la plantilla correcta. SimpleTestCase viene con un m\u00e9todo assertTemplateUsed75 justo para este prop\u00f3sito! Us\u00e9moslo. Code pages/tests.py from django.test import SimpleTestCase from django.urls import reverse class HomepageTests(SimpleTestCase): def test_homepage_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_homepage_url_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_homepage_template(self): # new response = self.client.get('/') self.assertTemplateUsed(response, 'home.html') Hemos creado una variable de respuesta de nuevo y luego hemos comprobado que la plantilla home.html se utiliza. Hagamos las pruebas de nuevo. 75 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.SimpleTestCase.assertTemplateUsed Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas L\u00ednea de mando $ docker-compose exec web python manage.py test pages Creating test database for alias 'default'... System check identified no issues (0 silenced). ... Ran 3 tests in 0.023s 78 OK Destroying test database for alias 'default'... \u00bfNot\u00f3 algo diferente en ese comando? Hemos a\u00f1adido el nombre de nuestra aplicaci\u00f3n p\u00e1ginas para que s\u00f3lo se ejecutaran las pruebas dentro de esa aplicaci\u00f3n. En este estado temprano est\u00e1 bien ejecutar todas las pruebas, pero en proyectos m\u00e1s grandes si sabes que s\u00f3lo has a\u00f1adido pruebas dentro de un aplicaci\u00f3n espec\u00edfica, puede ahorrar tiempo al ejecutar s\u00f3lo las pruebas actualizadas/nuevas y no toda la suite. Probando HTML Ahora confirmemos que nuestra p\u00e1gina web tiene el c\u00f3digo HTML correcto y adem\u00e1s no tienen un texto incorrecto. Siempre es bueno probar tanto que las pruebas pasan como que las pruebas que esperan fallar, en realidad, fallan! Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas Code pages/tests.py from django.test import SimpleTestCase from django.urls import reverse, resolve from .views import HomePageView class HomepageTests(SimpleTestCase): def test_homepage_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_homepage_url_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_homepage_template(self): response = self.client.get('/') self.assertTemplateUsed(response, 'home.html') def test_homepage_contains_correct_html(self): # new response = self.client.get('/') self.assertContains(response, 'Homepage') def test_homepage_does_not_contain_incorrect_html(self): # new response = self.client.get('/') self.assertNotContains( 79 Chapter 4: Pages App response, 'Hi there! I should not be on the page.') Run the tests again. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ..... Ran 7 tests in 0.279s OK Destroying test database for alias 'default'... 80 setUp Method \u00bfHa notado que parece que nos repetimos con estas pruebas de unidad? Para cada uno una que estamos cargando una variable de respuesta. Eso parece un desperdicio y propenso a errores. Ser\u00eda es mejor pegarse a algo m\u00e1s SECO (No te repitas). Dado que las pruebas de la unidad se ejecutan de arriba a abajo podemos a\u00f1adir un m\u00e9todo de configuraci\u00f3n que antes de cada prueba. Se establecer\u00e1 una auto-respuesta en nuestra p\u00e1gina web para que ya no necesitan definir una variable de respuesta para cada prueba. Esto tambi\u00e9n significa que podemos eliminar la test_homepage_url_name test ya que estamos usando el reverso en home cada vez en setUp. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas Code pages/tests.py from django.test import SimpleTestCase from django.urls import reverse 81 class HomepageTests(SimpleTestCase): # new def setUp(self): url = reverse('home') self.response = self.client.get(url) def test_homepage_status_code(self): self.assertEqual(self.response.status_code, 200) def test_homepage_template(self): self.assertTemplateUsed(self.response, 'home.html') def test_homepage_contains_correct_html(self): self.assertContains(self.response, 'Homepage') def test_homepage_does_not_contain_incorrect_html(self): self.assertNotContains( self.response, 'Hi there! I should not be on the page.') Ahora haz las pruebas de nuevo. Porque el SetUp es un m\u00e9todo de ayuda y no empieza con no se considerar\u00e1 una prueba de unidad en el recuento final. As\u00ed que s\u00f3lo se har\u00e1n 4 pruebas. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas Command Line $ docker-compose exec web python manage.py test pages Creating test database for alias 'default'... System check identified no issues (0 silenced). .... Ran 4 tests in 0.278s OK Destroying test database for alias 'default'... 82 Resolve Una \u00faltima comprobaci\u00f3n de las vistas que podemos hacer es que nuestra HomePageView \"resuelve\" una ruta URL dada. Django contiene la funci\u00f3n de utilidad resolve76 para este prop\u00f3sito. Necesitaremos importar tanto la resoluci\u00f3n como la HomePageView en la parte superior del archivo. Nuestra prueba real, test_homepage_url_resolves_homepageview, comprueba que el nombre de la vista usada para resolver / coincide con HomePageView. 76 https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#resolve Chapter 4: Pages App Code pages/tests.py from django.test import SimpleTestCase from django.urls import reverse, resolve # new from .views import HomePageView # new class HomepageTests(SimpleTestCase): def setUp(self): url = reverse('home') self.response = self.client.get(url) def test_homepage_status_code(self): self.assertEqual(self.response.status_code, 200) def test_homepage_template(self): self.assertTemplateUsed(self.response, 'home.html') def test_homepage_contains_correct_html(self): self.assertContains(self.response, 'Homepage') def test_homepage_does_not_contain_incorrect_html(self): self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_homepage_url_resolves_homepageview(self): # new view = resolve('/') 83 Chapter 4: Pages App self.assertEqual( view.func. name , HomePageView.as_view(). name ) Phew. That\u2019s our last test. Let\u2019s confirm that everything passes. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ..... Ran 7 tests in 0.282s OK Destroying test database for alias 'default'... 84 Git Es hora de a\u00f1adir nuestros nuevos cambios en el control de la fuente con Git. Chapter 4: Pages App Command Line $ git status $ git add . $ git commit -m 'ch4' Puedes compararlo con el c\u00f3digo fuente oficial de Github77 para este cap\u00edtulo. 85 Conclusi\u00f3n Hemos configurado nuestras plantillas y a\u00f1adido la primera p\u00e1gina a nuestro proyecto, una est\u00e1tica p\u00e1gina web. Tambi\u00e9n hemos a\u00f1adido pruebas que siempre deben ser incluidas con el nuevo c\u00f3digo cambios. Algunos desarrolladores prefieren un m\u00e9todo llamado \"Test-Driven Development\" en el que escriben las pruebas primero y luego el c\u00f3digo. Personalmente prefiero escribir las pruebas inmediatamente despu\u00e9s de lo cual es lo que haremos aqu\u00ed. Ambos enfoques funcionan, la clave es ser rigurosos con las pruebas. Django los proyectos crecen r\u00e1pidamente en tama\u00f1o donde es imposible recordar todas las piezas de trabajo en tu cabeza. Y si est\u00e1s trabajando en un equipo, es una pesadilla trabajar en un equipo no probado base de c\u00f3digo. \u00bfQui\u00e9n sabe qu\u00e9 se romper\u00e1? En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos el registro de usuario a nuestro proyecto: entrar, salir y firmar arriba. 77 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch4-pages","title":"Chapter 4: Pages App"},{"location":"20_/#chapter-4-pages-app","text":"Construyamos una p\u00e1gina web para nuestro nuevo proyecto. Por ahora esta ser\u00e1 una p\u00e1gina est\u00e1tica que significa no interactuar\u00e1 con la base de datos de ninguna manera. M\u00e1s tarde ser\u00e1 una p\u00e1gina din\u00e1mica exhibiendo libros a la venta pero... una cosa a la vez. Es com\u00fan tener varias p\u00e1ginas est\u00e1ticas incluso en un proyecto maduro como un About as\u00ed que vamos a crear una aplicaci\u00f3n de p\u00e1ginas dedicadas para ellos. En la l\u00ednea de comandos use el comando startapp de nuevo para hacer una aplicaci\u00f3n de p\u00e1ginas. L\u00ednea de comandos $ docker-componer ejecutivo web python manage.py startapp pages Entonces a\u00f1\u00e1delo a nuestro ajuste INSTALLED_APPS. Tambi\u00e9n actualizaremos TEMPLATES para que Django buscar\u00e1 una carpeta de plantillas a nivel de proyecto. De forma predeterminada, Django busca dentro de cada aplicaci\u00f3n para una carpeta de plantillas, pero organizar todas las plantillas en un espacio es m\u00e1s f\u00e1cil de manejar. C\u00f3digo","title":"Chapter 4: Pages App"},{"location":"20_/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', Chapter 4: Pages App","title":"bookstore_project/settings.py"},{"location":"20_/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig', # new ] TEMPLATES = [ { ... 'DIRS': [os.path.join(BASE_DIR, 'templates')], # new ... } ] 69 Ten en cuenta que actualizar la configuraci\u00f3n de DIRS significa que Django tambi\u00e9n buscar\u00e1 en esta nueva carpeta; seguir\u00e1 buscando cualquier carpeta de plantillas dentro de una aplicaci\u00f3n. Plantillas Es hora de crear ese nuevo directorio de plantillas y poner dos archivos dentro de \u00e9l: base.html y home.html. El primer archivo de nivel base ser\u00e1 heredado por todos los dem\u00e1s archivos; home.html ser\u00e1 nuestra p\u00e1gina de inicio. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas L\u00ednea de mando $ mkdir templates $ touch templates/_base.html $ touch templates/home.html 70 \u00bfPor qu\u00e9 llamar a la plantilla base _base.html con el subrayado en lugar de base.html? Este es opcional, pero algunos desarrolladores prefieren a\u00f1adir un gui\u00f3n bajo _ para denotar un archivo que es destinado a ser heredado por otros archivos y no se muestra por s\u00ed solo. En el archivo base incluiremos el m\u00ednimo necesario y a\u00f1adiremos etiquetas de bloque para ambos t\u00edtulo y contenido. Las etiquetas de bloque dan a las plantillas de nivel superior la opci\u00f3n de anular s\u00f3lo el contenido dentro de las etiquetas. Por ejemplo, la p\u00e1gina de inicio tendr\u00e1 un t\u00edtulo de \"Inicio\" pero queremos que aparezca entre las etiquetas html . Usar etiquetas de bloque hace que m\u00e1s f\u00e1cil de actualizar este contenido, seg\u00fan sea necesario, en plantillas heredadas. \u00bfPor qu\u00e9 usar el nombre de contenido para el contenido principal de nuestro proyecto? Este nombre podr\u00eda ser cualquier cosa -principal o alg\u00fan otro indicador gen\u00e9rico-, pero utilizar el contenido es una pr\u00e1ctica com\u00fan convenci\u00f3n de nombres en el mundo de Django. \u00bfPuedes usar algo m\u00e1s? Por supuesto. Es contenido el m\u00e1s com\u00fan que ver\u00e1s? S\u00ed. Chapter 4: Pages App Code <!DOCTYPE html> {% block title %}Bookstore{% endblock title %} {% block content %} {% endblock content %} Now for the homepage which will simply say \u201cHomepage\u201d for now. Code {% extends '_base.html' %} {% block title %}Home{% endblock title %} {% block content %}","title":"Local"},{"location":"20_/#bookstore_projecturlspy","text":"from django.contrib import admin from django.urls import path, include # new urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), # new ] A continuaci\u00f3n creamos un archivo urls.py dentro de las p\u00e1ginas de la aplicaci\u00f3n. L\u00ednea de comandos $ touch pages/urls.py Este archivo importar\u00e1 el HomePageView y establecer\u00e1 la ruta, de nuevo, a la cadena vac\u00eda ''. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 73 Note que proveemos un opcional, pero recomendado, llamado URL68 de 'home' en el fin. Esto ser\u00e1 \u00fatil en breve. Code","title":"bookstore_project/urls.py"},{"location":"20_/#pagesurlspy","text":"from django.urls import path from .views import HomePageView urlpatterns = [ path('', HomePageView.as_view(), name='home'), ] Finalmente necesitamos un archivo views.py. Podemos aprovechar el TemplateView69 incorporado en Django para que el \u00fanico ajuste necesario es especificar nuestra plantilla deseada, home.html. C\u00f3digo","title":"pages/urls.py"},{"location":"20_/#pagesviewspy","text":"from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' Ya casi hemos terminado. Si navega a la p\u00e1gina principal ahora en http://127.0.0.1:8000/70 ...en realidad ver\u00e1s un error. \u00bfPero qu\u00e9 lo causa? Ya que estamos ejecutando el contenedor 68 https://docs.djangoproject.com/en/2.2/topics/http/urls/#naming-url-patterns 69 https://docs.djangoproject.com/en/2.2/ref/class-based-views/base/#django.views.generic.base.TemplateView 70 http://127.0.0.1:8000/ Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 74 en el modo de fondo separado, esa -d bandera- debemos expl\u00edcitamente revisar los registros para ver salida de la consola. As\u00ed que teclea docker-componer registros que dar\u00e1n un error \"ModuleNotFoundError\": No m\u00f3dulo llamado 'pages.urls'\". Lo que pasa es que Django no hace autom\u00e1ticamente actualizar el archivo settings.py para nosotros en base a un cambio. En un mundo no-Docker que se detiene y reiniciar el servidor hace el truco. Debemos hacer lo mismo aqu\u00ed, lo que significa escribiendo docker-compose abajo y luego docker-compose arriba -d para cargar la nueva aplicaci\u00f3n de libros en forma adecuada. Actualice la p\u00e1gina web ahora y funcionar\u00e1. P\u00e1gina de inicio Pruebas Es hora de hacer pruebas. Para nuestra p\u00e1gina web podemos usar el SimpleTestCase71 de Django que es un un subconjunto especial del TestCase de Django que est\u00e1 dise\u00f1ado para p\u00e1ginas web que no tienen un modelo incluido. Las pruebas pueden resultar abrumadoras al principio, pero r\u00e1pidamente se vuelven un poco aburridas. Usar\u00e1s la misma estructura y t\u00e9cnicas una y otra vez. En tu editor de texto, actualiza el archivo existente de pages/tests.py. Empezaremos probando la plantilla. 71 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#simpletestcase Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas C\u00f3digo","title":"pages/views.py"},{"location":"20_/#pagestestspy","text":"from django.test import SimpleTestCase from django.urls import reverse 75 class HomepageTests(SimpleTestCase): def test_homepage_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_homepage_url_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) En la parte superior importamos SimpleTestCase as\u00ed como reverse72 que es \u00fatil para probar nuestros URLs. Luego creamos una clase llamada HomepageTests que extiende SimpleTestCase y dentro de ella agregar un m\u00e9todo para cada unidad de prueba. Note que nos estamos a\u00f1adiendo a nosotros mismos como el primer argumento de cada prueba unitaria. Este es un Python convenci\u00f3n73 que vale la pena repetir. Es mejor ser demasiado descriptivo con los nombres de las pruebas de las unidades, pero tened en cuenta que cada una de ellas El m\u00e9todo debe comenzar con una prueba para ser ejecutada por el conjunto de pruebas de Django. Las dos pruebas de aqu\u00ed comprueban que el c\u00f3digo de estado HTTP de la p\u00e1gina principal es igual a 200, lo que significa que existe. Todav\u00eda no nos dice nada espec\u00edfico sobre la contenidos de la p\u00e1gina. Para test_homepageview_status_code estamos creando una variable 72 https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#reverse 73 https://docs.python.org/3/tutorial/classes.html#random-remarks Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 76 llamada respuesta que accede a la p\u00e1gina de inicio (/) y luego utiliza la afirmaci\u00f3n de PythonEqual74 para comprobar que el c\u00f3digo de estado coincide con el 200. Un patr\u00f3n similar existe para test_homepage_- url_name excepto que estamos llamando al nombre de la URL de casa por el m\u00e9todo inverso. Recordemos que a\u00f1adimos esto al archivo pages/urls.py como mejor pr\u00e1ctica. Incluso si cambiamos la ruta real de esta p\u00e1gina en el futuro, todav\u00eda podemos referirnos a ella por el mismo URL de inicio nombre. Para realizar nuestras pruebas ejecutamos el comando de prueba python manage.py aunque con el prefijo docker-componer la web ejecutiva para que funcione dentro del propio Docker. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .. Ran 4 tests in 0.277s OK Destroying test database for alias 'default'... \u00bfPor qu\u00e9 dice 4 pruebas cuando s\u00f3lo creamos 2? Porque estamos probando todo el Proyecto Django y en el cap\u00edtulo anterior bajo usuarios/tests.py a\u00f1adimos dos pruebas para el modelo de usuario personalizado. Si quisi\u00e9ramos hacer s\u00f3lo pruebas para la aplicaci\u00f3n de las p\u00e1ginas, simplemente A\u00f1ade ese nombre al comando para que docker-compose ejecute web python manage.py p\u00e1ginas de prueba. 74 https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas 77 Plantillas de prueba Hasta ahora hemos probado que la p\u00e1gina web existe, pero tambi\u00e9n deber\u00edamos confirmar que utiliza la plantilla correcta. SimpleTestCase viene con un m\u00e9todo assertTemplateUsed75 justo para este prop\u00f3sito! Us\u00e9moslo. Code","title":"pages/tests.py"},{"location":"20_/#pagestestspy_1","text":"from django.test import SimpleTestCase from django.urls import reverse class HomepageTests(SimpleTestCase): def test_homepage_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_homepage_url_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_homepage_template(self): # new response = self.client.get('/') self.assertTemplateUsed(response, 'home.html') Hemos creado una variable de respuesta de nuevo y luego hemos comprobado que la plantilla home.html se utiliza. Hagamos las pruebas de nuevo. 75 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.SimpleTestCase.assertTemplateUsed Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas L\u00ednea de mando $ docker-compose exec web python manage.py test pages Creating test database for alias 'default'... System check identified no issues (0 silenced). ... Ran 3 tests in 0.023s 78 OK Destroying test database for alias 'default'... \u00bfNot\u00f3 algo diferente en ese comando? Hemos a\u00f1adido el nombre de nuestra aplicaci\u00f3n p\u00e1ginas para que s\u00f3lo se ejecutaran las pruebas dentro de esa aplicaci\u00f3n. En este estado temprano est\u00e1 bien ejecutar todas las pruebas, pero en proyectos m\u00e1s grandes si sabes que s\u00f3lo has a\u00f1adido pruebas dentro de un aplicaci\u00f3n espec\u00edfica, puede ahorrar tiempo al ejecutar s\u00f3lo las pruebas actualizadas/nuevas y no toda la suite. Probando HTML Ahora confirmemos que nuestra p\u00e1gina web tiene el c\u00f3digo HTML correcto y adem\u00e1s no tienen un texto incorrecto. Siempre es bueno probar tanto que las pruebas pasan como que las pruebas que esperan fallar, en realidad, fallan! Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas Code","title":"pages/tests.py"},{"location":"20_/#pagestestspy_2","text":"from django.test import SimpleTestCase from django.urls import reverse, resolve from .views import HomePageView class HomepageTests(SimpleTestCase): def test_homepage_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_homepage_url_name(self): response = self.client.get(reverse('home')) self.assertEqual(response.status_code, 200) def test_homepage_template(self): response = self.client.get('/') self.assertTemplateUsed(response, 'home.html') def test_homepage_contains_correct_html(self): # new response = self.client.get('/') self.assertContains(response, 'Homepage') def test_homepage_does_not_contain_incorrect_html(self): # new response = self.client.get('/') self.assertNotContains( 79 Chapter 4: Pages App response, 'Hi there! I should not be on the page.') Run the tests again. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ..... Ran 7 tests in 0.279s OK Destroying test database for alias 'default'... 80 setUp Method \u00bfHa notado que parece que nos repetimos con estas pruebas de unidad? Para cada uno una que estamos cargando una variable de respuesta. Eso parece un desperdicio y propenso a errores. Ser\u00eda es mejor pegarse a algo m\u00e1s SECO (No te repitas). Dado que las pruebas de la unidad se ejecutan de arriba a abajo podemos a\u00f1adir un m\u00e9todo de configuraci\u00f3n que antes de cada prueba. Se establecer\u00e1 una auto-respuesta en nuestra p\u00e1gina web para que ya no necesitan definir una variable de respuesta para cada prueba. Esto tambi\u00e9n significa que podemos eliminar la test_homepage_url_name test ya que estamos usando el reverso en home cada vez en setUp. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas Code","title":"pages/tests.py"},{"location":"20_/#pagestestspy_3","text":"from django.test import SimpleTestCase from django.urls import reverse 81 class HomepageTests(SimpleTestCase): # new def setUp(self): url = reverse('home') self.response = self.client.get(url) def test_homepage_status_code(self): self.assertEqual(self.response.status_code, 200) def test_homepage_template(self): self.assertTemplateUsed(self.response, 'home.html') def test_homepage_contains_correct_html(self): self.assertContains(self.response, 'Homepage') def test_homepage_does_not_contain_incorrect_html(self): self.assertNotContains( self.response, 'Hi there! I should not be on the page.') Ahora haz las pruebas de nuevo. Porque el SetUp es un m\u00e9todo de ayuda y no empieza con no se considerar\u00e1 una prueba de unidad en el recuento final. As\u00ed que s\u00f3lo se har\u00e1n 4 pruebas. Cap\u00edtulo 4: Aplicaci\u00f3n de las p\u00e1ginas Command Line $ docker-compose exec web python manage.py test pages Creating test database for alias 'default'... System check identified no issues (0 silenced). .... Ran 4 tests in 0.278s OK Destroying test database for alias 'default'... 82 Resolve Una \u00faltima comprobaci\u00f3n de las vistas que podemos hacer es que nuestra HomePageView \"resuelve\" una ruta URL dada. Django contiene la funci\u00f3n de utilidad resolve76 para este prop\u00f3sito. Necesitaremos importar tanto la resoluci\u00f3n como la HomePageView en la parte superior del archivo. Nuestra prueba real, test_homepage_url_resolves_homepageview, comprueba que el nombre de la vista usada para resolver / coincide con HomePageView. 76 https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#resolve Chapter 4: Pages App Code","title":"pages/tests.py"},{"location":"20_/#pagestestspy_4","text":"from django.test import SimpleTestCase from django.urls import reverse, resolve # new from .views import HomePageView # new class HomepageTests(SimpleTestCase): def setUp(self): url = reverse('home') self.response = self.client.get(url) def test_homepage_status_code(self): self.assertEqual(self.response.status_code, 200) def test_homepage_template(self): self.assertTemplateUsed(self.response, 'home.html') def test_homepage_contains_correct_html(self): self.assertContains(self.response, 'Homepage') def test_homepage_does_not_contain_incorrect_html(self): self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_homepage_url_resolves_homepageview(self): # new view = resolve('/') 83 Chapter 4: Pages App self.assertEqual( view.func. name , HomePageView.as_view(). name ) Phew. That\u2019s our last test. Let\u2019s confirm that everything passes. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ..... Ran 7 tests in 0.282s OK Destroying test database for alias 'default'... 84 Git Es hora de a\u00f1adir nuestros nuevos cambios en el control de la fuente con Git. Chapter 4: Pages App Command Line $ git status $ git add . $ git commit -m 'ch4' Puedes compararlo con el c\u00f3digo fuente oficial de Github77 para este cap\u00edtulo. 85 Conclusi\u00f3n Hemos configurado nuestras plantillas y a\u00f1adido la primera p\u00e1gina a nuestro proyecto, una est\u00e1tica p\u00e1gina web. Tambi\u00e9n hemos a\u00f1adido pruebas que siempre deben ser incluidas con el nuevo c\u00f3digo cambios. Algunos desarrolladores prefieren un m\u00e9todo llamado \"Test-Driven Development\" en el que escriben las pruebas primero y luego el c\u00f3digo. Personalmente prefiero escribir las pruebas inmediatamente despu\u00e9s de lo cual es lo que haremos aqu\u00ed. Ambos enfoques funcionan, la clave es ser rigurosos con las pruebas. Django los proyectos crecen r\u00e1pidamente en tama\u00f1o donde es imposible recordar todas las piezas de trabajo en tu cabeza. Y si est\u00e1s trabajando en un equipo, es una pesadilla trabajar en un equipo no probado base de c\u00f3digo. \u00bfQui\u00e9n sabe qu\u00e9 se romper\u00e1? En el pr\u00f3ximo cap\u00edtulo a\u00f1adiremos el registro de usuario a nuestro proyecto: entrar, salir y firmar arriba. 77 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch4-pages","title":"pages/tests.py"},{"location":"21/","text":"Chapter 5: User Registration User registration is a core feature in any dynamic website. And it will be in our Bookstore project, too. In this chapter we will implement log in, log out, and sign up functionality. The first two are relatively straightforward since Django provides us with the necessary views and urls for them, however sign up is more challenging since there is no built-in solution. Auth App Let\u2019s begin by implementing log in and log out using Django\u2019s own auth78 app. Django provides us with the necessary views and urls which means we only need to update a template for things to work. This saves us a lot of time as developers and it ensures that we don\u2019t make a mistake since the underlying code has already been tested and used by millions of developers. However this simplicity comes at the cost of feeling \u201cmagical\u201d to Django newcomers. We covered some of these steps previously in my book, Django for Beginners79, but we did not slow down and look at the underlying source code. The intention for a beginner was to broadly explain and demonstrate \u201chow\u201d to implement user registration properly, but this came at the cost of truly diving into \u201cwhy\u201d we used the code we did. Since this is a more advanced book, we delve deeper to understand the underlying source code better. The approach here can also be used to explore any other built-in Django functionality on your own. 78 https://docs.djangoproject.com/en/2.2/topics/auth/default/ 79 https://djangoforbeginners.com Chapter 5: User Registration 87 The first thing we need to do is make sure the auth app is included in our INSTALLED_- APPS setting. We have added our own apps here previously, but have you ever taken a close look at the built-in apps Django adds automatically for us? Most likely the answer is no. Let\u2019s do that now! Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', # Yoohoo!!!! 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', There are, in fact, 6 apps already there that Django provides for us which power the site. The first is admin and the second is auth. This is how we know the auth app is already present in our Django project. When we earlier ran the migrate command for the first time all of these apps were linked together in the initial database. And remember that we used the AUTH_USER_- MODEL setting to tell Django to use our custom user model, not the default User model here. This is why we had to wait until that configuration was complete before running migrate for the first time. Chapter 5: User Registration 88 Auth URLs and Views To use Django\u2019s built-in auth app we must explicitly add it to our bookstore_- project/urls.py file. The easiest approach is to use accounts/ as the prefix since that is commonly used in the Django community. Make the one line change below. Note that as our urls.py file grows in length, adding comments for each type of URL\u2013admin, user management, local apps, etc.\u2013helps with readability. Code bookstore_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('admin/', admin.site.urls), User management path('accounts/', include('django.contrib.auth.urls')), # new Local apps path('', include('pages.urls')), ] What\u2019s included in the auth app? A lot it turns out. First off, there are a number of associated urls. Chapter 5: User Registration Code accounts/login/ [name='login'] accounts/logout/ [name='logout'] accounts/password_change/ [name='password_change'] accounts/password_change/done/ [name='password_change_done'] accounts/password_reset/ [name='password_reset'] accounts/password_reset/done/ [name='password_reset_done'] accounts/reset/ / / [name='password_reset_confirm'] accounts/reset/done/ [name='password_reset_complete'] 89 How did I know that? Two ways. The first is the official auth docs80 tell us so! But a second, deeper approach is to look at the Django source code which is available on Github81 . If we navigate or search around we\u2019ll find our way to the auth app itself82. And within that we can find the urls.py file at this link83 which shows the complete source code. It takes practice to understand the Django source code, but it is well worth the time. Homepage What\u2019s next? Let\u2019s update our existing homepage so that it will notify us if a user is already logged in or not which currently can only happen via the admin. Here is the new code for the templates/home.html file. It uses the Django templating engine\u2019s if/else84 tags for basic logic. 80 https://docs.djangoproject.com/en/2.2/topics/auth/default/#module-django.contrib.auth.views 81 https://github.com/django/django 82 https://github.com/django/django/tree/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth 83 https://github.com/django/django/blob/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth/ urls.py 84 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#if Chapter 5: User Registration Code {% extends '_base.html' %} {% block title %}Home{% endblock title %} 90 {% block content %} Homepage {% if user.is_authenticated %} Hi {{ user.email }}! {% else %} You are not logged in Log In {% endif %} {% endblock content %} If the user is logged in (authenticated), we display a greeting that says \u201cHi\u201d and includes their email address. These are both variables85 which we can use with Django\u2019s template engine via double opening {{ and closing }} brackets. The default User contains numerous fields including is_authenticated86 and email87 which are referenced here. And the logout and login are URL names. The url88 template tag means if we specify the URL name the link will automatically refer to that URL path. For example, in the previous chapter we set the name of our homepage URL to home so a link to the homepage would take the format of {% url 'home' %}. More on this shortly. 85 https://docs.djangoproject.com/en/2.2/topics/templates/#variables 86 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.User.is_authenticated 87 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.User.email 88 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#url Chapter 5: User Registration 91 If you look at the homepage now at http://127.0.0.1:8000/89 it will likely show the email address of your superuser account since we used it previously to log in. Homepage with greeting In the admin over at http://127.0.0.1:8000/admin/90 if you click on the \u201cLog out\u201d button in the upper right corner we can log out of the admin and by extension the Django project. Admin logout link Return to the homepage at http://127.0.0.1:8000/91 and refresh the page. 89 http://127.0.0.1:8000/ 90 http://127.0.0.1:8000/admin/ 91 http://127.0.0.1:8000/ Chapter 5: User Registration 92 Django Source Code You might have been able to piece together these steps on your own from reading the official docs92 . But the deeper\u2013and better\u2013approach is to learn how to read the Django source code on your own. One question is, how was the user and its related variables magically available in our template? The answer is that Django has a concept called the template context93 which means each template is loaded with data from the corresponding views.py file. We can use user within template tags to access User attributes. In other words, Django just gives this to us automatically. So to check if a user is logged in or not, we access user and then can use the boolean is_authenticated94 attribute. If a user is logged in, it will return True and we can do things like display the user\u2019s email. Or if no user is logged in, the result will be False. Moving on we have the URL name login. Where did that come from? The answer, of course, is from Django itself! Let\u2019s unpack the code snippet {% url 'login' %} piece by piece. First up we\u2019re using the url template tag95 which takes as its first argument a named URL pattern96 . That\u2019s the optional name section we add as a best practice to all our URL paths. Therefore there must be a 'login' name attached to the URL used by Django for log ins, right! There are two ways we could have known this. In other words, if I hadn\u2019t just told you that we wanted to use {% url 'login' %}, how could you have figured it out? First look at the official documentation97 . Personally I often use the search feature so 92 https://docs.djangoproject.com/en/2.2/topics/auth/default/ 93 https://docs.djangoproject.com/en/2.2/topics/auth/default/#authentication-data-in-templates 94 https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.User.is_authenticated 95 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#url 96 https://docs.djangoproject.com/en/2.2/topics/http/urls/#naming-url-patterns 97 https://docs.djangoproject.com/en/2.2/ Chapter 5: User Registration 93 I would have typed in something like \u201clogin\u201d and then clicked around until I found a description of log in. The one we want is actually called authentication views98 and lists the corresponding URL patterns for us. Code accounts/login/ [name='login'] accounts/logout/ [name='logout'] accounts/password_change/ [name='password_change'] accounts/password_change/done/ [name='password_change_done'] accounts/password_reset/ [name='password_reset'] accounts/password_reset/done/ [name='password_reset_done'] accounts/reset/ / / [name='password_reset_confirm'] accounts/reset/done/ [name='password_reset_complete'] This tells us at the path accounts/login/ is where \u201clogin\u201d is located and its name is 'login'. A little confusing at first, but here is the info we need. Going a step deeper to phase two, we can investigate the underlying Django source code to see \u201clogout\u201d in action. If you perform a search over on Github99 you\u2019ll eventually find the auth app itself100 . Ok, now let\u2019s start by investigating the urls.py file. Here is the link101 to the complete code: 98 https://docs.djangoproject.com/en/2.2/topics/auth/default/#module-django.contrib.auth.views 99 https://github.com/django/django 100 https://github.com/django/django/tree/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth 101 https://github.com/django/django/blob/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth/ urls.py Chapter 5: User Registration Code django/contrib/auth/urls.py from django.contrib.auth import views from django.urls import path 94 urlpatterns = [ path('login/', views.LoginView.as_view(), name='login'), path('logout/', views.LogoutView.as_view(), name='logout'), ] path('password_change/', views.PasswordChangeView.as_view(), name='password_change'), path('password_change/done/', views.PasswordChangeDoneView.as_view(), name='password_change_done'), path('password_reset/', views.PasswordResetView.as_view(), name='password_reset'), path('password_reset/done/', views.PasswordResetDoneView.as_view(), name='password_reset_done'), path('reset/ / /', views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'), path('reset/done/', views.PasswordResetCompleteView.as_view(), name='password_reset_complete'), Here is the underlying code Django uses itself for the auth app. I hope you can see that the \u201clogout\u201d route is not magic. It\u2019s right there in plain sight, it uses the view LogoutView and has the URL name 'logout'. Not magic at all! Just a little challenging to find the first time. This three-step process is a great way to learn: either remember the Django shortcut, Chapter 5: User Registration 95 look it up in the docs, or on occasion dive into the source code and truly understand where all this goodness comes from. Log In Back on our basic homepage, click on the \u201cLog In\u201d link and... it results in an error! Log in template not exist error Django is throwing a TemplateDoesNotExist error at us. Specifically, it seems to expect a log in template at registration/login.html. In addition to Django telling us this, we can look in the documentation102 and see that the desired template_name has that location. But let\u2019s really be sure and check the source code so we can remove any perceived magic here. After all, it\u2019s just Django. Back in the auth/views.py103 file we can see on line 45 for LoginView that the template_name is 'registration/login.html'. So if we wanted to change the default location we could, but it would mean overriding LoginView which seems like overkill. 102 https://docs.djangoproject.com/en/2.2/topics/auth/default/#all-authentication-views 103 https://github.com/django/django/blob/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth/ views.py Chapter 5: User Registration 96 Let\u2019s just use what Django gives us here. Create a new registration folder within the existing templates directory and then add our login.html file there, too. Command Line $ mkdir templates/registration $ touch templates/registration/login.html The actual code is as follows. We extend our base template, add a title, and then specify that we want to use a form that will \u201cpost\u201d or send the data. Code {% extends ' base.html' %} {% block title %}Log In{% endblock title %} {% block content %} Log In {% csrf_token %} {{ form.as_p }} Log In {% endblock content %} You should always add CSRF protection104 on any submittable form. Otherwise a malicious website can change the link and attack the site and the user. Django has 104 https://docs.djangoproject.com/en/2.2/ref/csrf/ Chapter 5: User Registration 97 CSRF middleware to handle this for us; all we need to do is add {% csrf_token %} tags at the start of the form. Next we can control the look of the form contents. For now we\u2019ll use as_p()105 so that each form field is displayed within a paragraph p tag. With that explanation out of the way, let\u2019s check if our new template is working correctly. Go to http://127.0.0.1:8000/accounts/login/106. Log in page And there is our page! Lovely. You can navigate back to the homepage and confirm that the \u201cLog In\u201d link works too if you like. As a final step, go ahead and try log in. Redirects Did you notice I said \u201ctry\u201d in that last sentence? If you click on the \u201cLog In\u201d link it brings up a Page not found (404) error. 105 https://docs.djangoproject.com/en/2.2/ref/forms/api/#as-p 106 http://127.0.0.1:8000/accounts/login/ Chapter 5: User Registration 98 Page not found error It seems Django has redirected us to 127.0.0.1:8000/accounts/profile/ yet no such page exists. Now why would Django do this? Well, if you think about it, how does Django know where we want to redirect the user after log in? Maybe it\u2019s the home- page. But maybe it\u2019s a user profile page. Or any number of options. The final piece of the log in puzzle is to set the proper configuration for LOGIN - REDIRECT_URL107 because by default it redirects to accounts/profile. Fortunately this is a quick fix. We\u2019ll send the user to our homepage. And since we specified a URL name of home that\u2019s all we need to redirect logged in users to the homepage. At the bottom of the bookstore_project/settings.py file add this one line. 107 https://docs.djangoproject.com/en/2.2/ref/settings/#login-redirect-url Chapter 5: User Registration 99 Code bookstore_project/settings.py LOGIN_REDIRECT_URL = 'home' Refresh the webpage and you will see it notices the change and provides us with the generic \u201cYou are not logged in\u201d greeting. Homepage logged out Log Out Now let\u2019s add a log out option to our homepage since only a superuser will have access to the admin. How do we do this? If you look at the auth views above we can see that logout uses LogoutView, which we could explore in the source code, and has a URL name of logout. That means we can refer to it with a template tag as just logout. But we can set this ourself, if desired, using LOGOUT_REDIRECT_URL108 which can be added to the bottom of our bookstore_project/settings.py file. Let\u2019s do that so a logged out user is redirected to the homepage. 108 https://docs.djangoproject.com/en/2.2/ref/settings/#logout-redirect-url Chapter 5: User Registration Code bookstore_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' # new Then add the logout link to templates/home.html. Code {% extends '_base.html' %} 100 {% block title %}Home{% endblock title %} {% block content %} Homepage {% if user.is_authenticated %} Hi {{ user.email }}! Log Out {% else %} You are not logged in Log In {% endif %} {% endblock content %} Go back into the admin at http://127.0.0.1:8000/admin/109 to log in. Then navigate to the homepage http://127.0.0.1:8000/110 which now has the \u201cLog out\u201d link. 109 http://127.0.0.1:8000/admin/ 110 http://127.0.0.1:8000/ Chapter 5: User Registration 101 Homepage with logout link If you click on it you will be logged out and see our homepage with a log in link. Sign Up Implementing a sign up page for user registration is completely up to us. We\u2019ll go through the standard steps for any new page: \u2022 add a URL path in users/urls.py \u2022 update bookstore_project/urls.py to point to the users app \u2022 create a users/views.py file \u2022 create a signup.html template \u2022 update _base.html to display the sign up page A common question is: what\u2019s the right order for implementing these steps? Honestly it doesn\u2019t matter since we need all of them for the sign up page to work properly. Generally I like to start with urls, then switch to views, and finally templates but it\u2019s a matter of personal preference. To start create a urls.py file within the users app. Up to this point it only contains our CustomUser in the models.py file; we haven\u2019t configured any routes or views. Chapter 5: User Registration Command Line $ touch users/urls.py 102 The URL path for the sign up page will take a view called SignupPageView (which we\u2019ll create next), at the route signup/, and have a name of signup which we can later use to refer to the page with a url template tag. The existing url names for login and signup are written within the built-in Django app file django/contrib/auth/urls.py we saw above. Code users/urls.py from django.urls import path from .views import SignupPageView urlpatterns = [ path('signup/', SignupPageView.as_view(), name='signup'), ] Next update the bookstore_project/urls.py file to include the users app. We can create any route we like but it\u2019s common to use the same accounts/ one used by the default auth app. Note that it\u2019s important to include the path for users.urls below: URL paths are loaded top-to-bottom so this ensures that any auth URL paths will be loaded first. Chapter 5: User Registration 103 Code bookstore_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('admin/', admin.site.urls), User management path('accounts/', include('django.contrib.auth.urls')), Local apps path('accounts/', include('users.urls')), # new path('', include('pages.urls')), ] Now we can create our view which will be called SignupPageView. It references the CustomUserCreationForm, has a success_url that points to the login page meaning after the form is submitted the user will be redirected there. And the template_name will be signup.html. Chapter 5: User Registration Code users/views.py from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm 104 class SignupPageView(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Finally we have our template. Create a signup.html file within our existing templates directory. Command Line $ touch templates/signup.html The code is basically identical to the log in page. Chapter 5: User Registration Code {% extends ' base.html' %} {% block title %}Sign Up{% endblock title %} 105 {% block content %} Sign Up {% csrf_token %} {{ form.as_p }} Sign Up {% endblock content %} As a final step we can add a line for \u201cSign Up\u201d to our home.html template right below the link for \u201cLog In\u201d. This is a one-line change. Code {% extends '_base.html' %} {% block title %}Home{% endblock title %} {% block content %} Homepage {% if user.is_authenticated %} Hi {{ user.email }}! Log Out Chapter 5: User Registration {% else %} You are not logged in Log In Sign Up {% endif %} {% endblock content %} All done! Reload the homepage to see our work. 106 Homepage with Signup The \u201cSign Up\u201d link will redirect us to http://127.0.0.1:8000/accounts/signup/111. Signup page Create a new user with the email address testuser@email.com, username of testuser, 111 http://127.0.0.1:8000/accounts/signup/ Chapter 5: User Registration 107 and testpass123 for the password. Upon submission it will redirect us to the Log In page. Attempt to log in with this new account. Homepage with testuser greeting Tests For tests we do not need to test log in and log out features since those are built into Django and already have tests. We do need to test our sign up functionality though! Let\u2019s start by creating a setUp method that loads our page. Then we\u2019ll populate test - signup_template with tests for the status code, template used, and both included and excluded text similarly to how we did it in the last chapter for the homepage. In your text editor, update the users/tests.py file with these changes. Code users/tests.py from django.contrib.auth import get_user_model from django.test import TestCase from django.urls import reverse # new class CustomUserTests(TestCase): ... Chapter 5: User Registration 108 class SignupPageTests(TestCase): # new def setUp(self): url = reverse('signup') self.response = self.client.get(url) def test_signup_template(self): self.assertEqual(self.response.status_code, 200) self.assertTemplateUsed(self.response, 'signup.html') self.assertContains(self.response, 'Sign Up') self.assertNotContains( self.response, 'Hi there! I should not be on the page.') Then run our tests. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ........ Ran 8 tests in 0.329s OK Destroying test database for alias 'default'... Next we can test that our CustomUserCreationForm is being used and that the page resolves to SignupPageView. Chapter 5: User Registration Code users/tests.py from django.contrib.auth import get_user_model from django.test import TestCase from django.urls import reverse, resolve # new from .forms import CustomUserCreationForm # new from .views import SignupPageView # new class CustomUserTests(TestCase): ... class SignupPageTests(TestCase): def setUp(self): url = reverse('signup') self.response = self.client.get(url) def test_signup_template(self): self.assertEqual(self.response.status_code, 200) self.assertTemplateUsed(self.response, 'signup.html') self.assertContains(self.response, 'Sign Up') self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_signup_form(self): # new form = self.response.context.get('form') self.assertIsInstance(form, CustomUserCreationForm) 109 Chapter 5: User Registration self.assertContains(self.response,'csrfmiddlewaretoken') 110 def test_signup_view(self): # new view = resolve('/accounts/signup/') self.assertEqual( view.func. name , SignupPageView.as_view(). name ) Run our tests again. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .......... Ran 10 tests in 0.328s OK Destroying test database for alias 'default'... All done. setUpTestData() Django 1.8 introduced a major update to TestCase112 that added the ability to run tests both within a whole class and for each individual test. In particular, setUpTestData()113 112 https://docs.djangoproject.com/en/2.2/releases/1.8/#testcase-data-setup 113 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.TestCase.setUpTestData Chapter 5: User Registration 111 allows the creation of initial data at the class level that can be applied to the entire TestCase. This results in much faster tests than using setUp(), however, care must be taken not to modify any objects created in setUpTestData() in your test methods. We will use setUp() in this book, but be aware that if your test suite seems sluggish, setUpTestData() is a potential optimization to look into. Git As ever make sure to save our work by adding changes into Git. Command Line $ git status $ git add . $ git commit -m 'ch5' The official source code is located on Github114 if you want to compare your code. Conclusion Our Bookstore project is not the most beautiful site in the world, but it is very functional at this point. In the next chapter we\u2019ll configure our static assets and add Bootstrap for improved styling. 114 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch5-user-registration","title":"21"},{"location":"21/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', # Yoohoo!!!! 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ]","title":"bookstore_project/settings.py"},{"location":"21/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig', There are, in fact, 6 apps already there that Django provides for us which power the site. The first is admin and the second is auth. This is how we know the auth app is already present in our Django project. When we earlier ran the migrate command for the first time all of these apps were linked together in the initial database. And remember that we used the AUTH_USER_- MODEL setting to tell Django to use our custom user model, not the default User model here. This is why we had to wait until that configuration was complete before running migrate for the first time. Chapter 5: User Registration 88 Auth URLs and Views To use Django\u2019s built-in auth app we must explicitly add it to our bookstore_- project/urls.py file. The easiest approach is to use accounts/ as the prefix since that is commonly used in the Django community. Make the one line change below. Note that as our urls.py file grows in length, adding comments for each type of URL\u2013admin, user management, local apps, etc.\u2013helps with readability. Code","title":"Local"},{"location":"21/#bookstore_projecturlspy","text":"from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"21/#django-admin","text":"path('admin/', admin.site.urls),","title":"Django admin"},{"location":"21/#user-management","text":"path('accounts/', include('django.contrib.auth.urls')), # new","title":"User management"},{"location":"21/#local-apps","text":"path('', include('pages.urls')), ] What\u2019s included in the auth app? A lot it turns out. First off, there are a number of associated urls. Chapter 5: User Registration Code accounts/login/ [name='login'] accounts/logout/ [name='logout'] accounts/password_change/ [name='password_change'] accounts/password_change/done/ [name='password_change_done'] accounts/password_reset/ [name='password_reset'] accounts/password_reset/done/ [name='password_reset_done'] accounts/reset/ / / [name='password_reset_confirm'] accounts/reset/done/ [name='password_reset_complete'] 89 How did I know that? Two ways. The first is the official auth docs80 tell us so! But a second, deeper approach is to look at the Django source code which is available on Github81 . If we navigate or search around we\u2019ll find our way to the auth app itself82. And within that we can find the urls.py file at this link83 which shows the complete source code. It takes practice to understand the Django source code, but it is well worth the time. Homepage What\u2019s next? Let\u2019s update our existing homepage so that it will notify us if a user is already logged in or not which currently can only happen via the admin. Here is the new code for the templates/home.html file. It uses the Django templating engine\u2019s if/else84 tags for basic logic. 80 https://docs.djangoproject.com/en/2.2/topics/auth/default/#module-django.contrib.auth.views 81 https://github.com/django/django 82 https://github.com/django/django/tree/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth 83 https://github.com/django/django/blob/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth/ urls.py 84 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#if Chapter 5: User Registration Code {% extends '_base.html' %} {% block title %}Home{% endblock title %} 90 {% block content %}","title":"Local apps"},{"location":"21/#djangocontribauthurlspy","text":"from django.contrib.auth import views from django.urls import path 94 urlpatterns = [ path('login/', views.LoginView.as_view(), name='login'), path('logout/', views.LogoutView.as_view(), name='logout'), ] path('password_change/', views.PasswordChangeView.as_view(), name='password_change'), path('password_change/done/', views.PasswordChangeDoneView.as_view(), name='password_change_done'), path('password_reset/', views.PasswordResetView.as_view(), name='password_reset'), path('password_reset/done/', views.PasswordResetDoneView.as_view(), name='password_reset_done'), path('reset/ / /', views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'), path('reset/done/', views.PasswordResetCompleteView.as_view(), name='password_reset_complete'), Here is the underlying code Django uses itself for the auth app. I hope you can see that the \u201clogout\u201d route is not magic. It\u2019s right there in plain sight, it uses the view LogoutView and has the URL name 'logout'. Not magic at all! Just a little challenging to find the first time. This three-step process is a great way to learn: either remember the Django shortcut, Chapter 5: User Registration 95 look it up in the docs, or on occasion dive into the source code and truly understand where all this goodness comes from. Log In Back on our basic homepage, click on the \u201cLog In\u201d link and... it results in an error! Log in template not exist error Django is throwing a TemplateDoesNotExist error at us. Specifically, it seems to expect a log in template at registration/login.html. In addition to Django telling us this, we can look in the documentation102 and see that the desired template_name has that location. But let\u2019s really be sure and check the source code so we can remove any perceived magic here. After all, it\u2019s just Django. Back in the auth/views.py103 file we can see on line 45 for LoginView that the template_name is 'registration/login.html'. So if we wanted to change the default location we could, but it would mean overriding LoginView which seems like overkill. 102 https://docs.djangoproject.com/en/2.2/topics/auth/default/#all-authentication-views 103 https://github.com/django/django/blob/b9cf764be62e77b4777b3a75ec256f6209a57671/django/contrib/auth/ views.py Chapter 5: User Registration 96 Let\u2019s just use what Django gives us here. Create a new registration folder within the existing templates directory and then add our login.html file there, too. Command Line $ mkdir templates/registration $ touch templates/registration/login.html The actual code is as follows. We extend our base template, add a title, and then specify that we want to use a form that will \u201cpost\u201d or send the data. Code {% extends ' base.html' %} {% block title %}Log In{% endblock title %} {% block content %}","title":"django/contrib/auth/urls.py"},{"location":"21/#bookstore_projectsettingspy_1","text":"LOGIN_REDIRECT_URL = 'home' Refresh the webpage and you will see it notices the change and provides us with the generic \u201cYou are not logged in\u201d greeting. Homepage logged out Log Out Now let\u2019s add a log out option to our homepage since only a superuser will have access to the admin. How do we do this? If you look at the auth views above we can see that logout uses LogoutView, which we could explore in the source code, and has a URL name of logout. That means we can refer to it with a template tag as just logout. But we can set this ourself, if desired, using LOGOUT_REDIRECT_URL108 which can be added to the bottom of our bookstore_project/settings.py file. Let\u2019s do that so a logged out user is redirected to the homepage. 108 https://docs.djangoproject.com/en/2.2/ref/settings/#logout-redirect-url Chapter 5: User Registration Code","title":"bookstore_project/settings.py"},{"location":"21/#bookstore_projectsettingspy_2","text":"LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' # new Then add the logout link to templates/home.html. Code {% extends '_base.html' %} 100 {% block title %}Home{% endblock title %} {% block content %}","title":"bookstore_project/settings.py"},{"location":"21/#usersurlspy","text":"from django.urls import path from .views import SignupPageView urlpatterns = [ path('signup/', SignupPageView.as_view(), name='signup'), ] Next update the bookstore_project/urls.py file to include the users app. We can create any route we like but it\u2019s common to use the same accounts/ one used by the default auth app. Note that it\u2019s important to include the path for users.urls below: URL paths are loaded top-to-bottom so this ensures that any auth URL paths will be loaded first. Chapter 5: User Registration 103 Code","title":"users/urls.py"},{"location":"21/#bookstore_projecturlspy_1","text":"from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"21/#django-admin_1","text":"path('admin/', admin.site.urls),","title":"Django admin"},{"location":"21/#user-management_1","text":"path('accounts/', include('django.contrib.auth.urls')),","title":"User management"},{"location":"21/#local-apps_1","text":"path('accounts/', include('users.urls')), # new path('', include('pages.urls')), ] Now we can create our view which will be called SignupPageView. It references the CustomUserCreationForm, has a success_url that points to the login page meaning after the form is submitted the user will be redirected there. And the template_name will be signup.html. Chapter 5: User Registration Code","title":"Local apps"},{"location":"21/#usersviewspy","text":"from django.urls import reverse_lazy from django.views import generic from .forms import CustomUserCreationForm 104 class SignupPageView(generic.CreateView): form_class = CustomUserCreationForm success_url = reverse_lazy('login') template_name = 'signup.html' Finally we have our template. Create a signup.html file within our existing templates directory. Command Line $ touch templates/signup.html The code is basically identical to the log in page. Chapter 5: User Registration Code {% extends ' base.html' %} {% block title %}Sign Up{% endblock title %} 105 {% block content %}","title":"users/views.py"},{"location":"21/#userstestspy","text":"from django.contrib.auth import get_user_model from django.test import TestCase from django.urls import reverse # new class CustomUserTests(TestCase): ... Chapter 5: User Registration 108 class SignupPageTests(TestCase): # new def setUp(self): url = reverse('signup') self.response = self.client.get(url) def test_signup_template(self): self.assertEqual(self.response.status_code, 200) self.assertTemplateUsed(self.response, 'signup.html') self.assertContains(self.response, 'Sign Up') self.assertNotContains( self.response, 'Hi there! I should not be on the page.') Then run our tests. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ........ Ran 8 tests in 0.329s OK Destroying test database for alias 'default'... Next we can test that our CustomUserCreationForm is being used and that the page resolves to SignupPageView. Chapter 5: User Registration Code","title":"users/tests.py"},{"location":"21/#userstestspy_1","text":"from django.contrib.auth import get_user_model from django.test import TestCase from django.urls import reverse, resolve # new from .forms import CustomUserCreationForm # new from .views import SignupPageView # new class CustomUserTests(TestCase): ... class SignupPageTests(TestCase): def setUp(self): url = reverse('signup') self.response = self.client.get(url) def test_signup_template(self): self.assertEqual(self.response.status_code, 200) self.assertTemplateUsed(self.response, 'signup.html') self.assertContains(self.response, 'Sign Up') self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_signup_form(self): # new form = self.response.context.get('form') self.assertIsInstance(form, CustomUserCreationForm) 109 Chapter 5: User Registration self.assertContains(self.response,'csrfmiddlewaretoken') 110 def test_signup_view(self): # new view = resolve('/accounts/signup/') self.assertEqual( view.func. name , SignupPageView.as_view(). name ) Run our tests again. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .......... Ran 10 tests in 0.328s OK Destroying test database for alias 'default'... All done. setUpTestData() Django 1.8 introduced a major update to TestCase112 that added the ability to run tests both within a whole class and for each individual test. In particular, setUpTestData()113 112 https://docs.djangoproject.com/en/2.2/releases/1.8/#testcase-data-setup 113 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.TestCase.setUpTestData Chapter 5: User Registration 111 allows the creation of initial data at the class level that can be applied to the entire TestCase. This results in much faster tests than using setUp(), however, care must be taken not to modify any objects created in setUpTestData() in your test methods. We will use setUp() in this book, but be aware that if your test suite seems sluggish, setUpTestData() is a potential optimization to look into. Git As ever make sure to save our work by adding changes into Git. Command Line $ git status $ git add . $ git commit -m 'ch5' The official source code is located on Github114 if you want to compare your code. Conclusion Our Bookstore project is not the most beautiful site in the world, but it is very functional at this point. In the next chapter we\u2019ll configure our static assets and add Bootstrap for improved styling. 114 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch5-user-registration","title":"users/tests.py"},{"location":"22/","text":"Chapter 6: Static Assets Static assets like CSS, JavaScript, and images are a core component of any website and Django provides us with a large degree of flexibility around their configuration and storage. In this chapter we\u2019ll configure our initial static assets and add Bootstrap115 to our project for improved styling. staticfiles app Django relies on the staticfiles app116 to manage static files from across our entire project, make them accessible for rapid local development on the file system, and also combine them into a single location that can be served in a better performing manner in production. This process and the distinction between local and production static files confuses many Django newcomers. To start we\u2019ll update the staticfiles app117 configuration in settings.py. STATIC_URL The first static file setting, STATIC_URL118 , is already included for us in the bookstore_- project/settings.py file. 115 https://getbootstrap.com/ 116 https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/ 117 https://docs.djangoproject.com/en/2.2/ref/settings/#static-files 118 https://docs.djangoproject.com/en/2.2/ref/settings/#static-url Chapter 6: Static Assets 113 Code bookstore_project/settings.py STATIC_URL = '/static/' This sets the URL that we can use to use to reference static files. Note that it is important to include a trailing slash / at the end of the directory name. STATICFILES_DIRS Next up is STATICFILES_DIRS119 which defines the location of static files in local development. In our project these will all live within a top-level static directory. Code bookstore_project/settings.py STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] # new It\u2019s often the case that there will be multiple directories with static files within a project so Python brackets [], which denote a list120, are typically added here to accommodate future additions. STATIC_ROOT STATIC_ROOT121 is the location of static files for production so it must be set to a different name, typically staticfiles. When it comes time to deploy a Django project, the collectstatic122 command will automatically compile all available static 119 https://docs.djangoproject.com/en/2.2/ref/settings/#staticfiles-dirs 120 https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists 121 https://docs.djangoproject.com/en/2.2/ref/settings/#static-root 122 https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#django-admin-collectstatic Chapter 6: Static Assets 114 files throughout the entire project into a single directory. This is far faster than having static files sprinkled across the project as is the case in local development. Code bookstore_project/settings.py STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new STATICFILES_FINDERS The last setting is STATICFILES_FINDERS123 which tells Django how to look for static file directories. It is implicitly set for us and although this is an optional step, I prefer to make it explicit in all projects. Code bookstore_project/settings.py STATICFILES_FINDERS = [ \"django.contrib.staticfiles.finders.FileSystemFinder\", \"django.contrib.staticfiles.finders.AppDirectoriesFinder\", ] The FileSystemFinder looks within the STATICFILES_DIRS setting, which we set to static, for any static files. Then the AppDirectoriesFinder looks for any directories named static located within an app, as opposed to located at a project-level static directory. This setting is read top-to-bottom meaning if a file called static/img.jpg is first found by FileSystemFinder it will be in place of an img.jpg file located within, say, the pages app at pages/static/img.jpg. 123 https://docs.djangoproject.com/en/2.2/ref/settings/#staticfiles-finders Chapter 6: Static Assets Our final group of settings therefore should look as follows: Code bookstore_project/settings.py STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') STATICFILES_FINDERS = [ \"django.contrib.staticfiles.finders.FileSystemFinder\", \"django.contrib.staticfiles.finders.AppDirectoriesFinder\", ] 115 Static Directory Let\u2019s now add some static files and incorporate them into our project. Even though we\u2019re referring to a static directory for our files it\u2019s up to us to create it so do that now along with new subdirectories for CSS, JavaScript, and images. Command Line $ mkdir static $ mkdir static/css $ mkdir static/js $ mkdir static/images Next create a base.css file. Chapter 6: Static Assets 116 Command Line $ touch static/css/base.css We\u2019ll keep things basic and have our h1 headline be red. The point is to show how CSS can be added to our project, not to delve too deeply into CSS itself. Code / static/css/base.css / h1 { color: red; } If you refresh the homepage now you\u2019ll see that nothing has changed. That\u2019s because static assets must be explicitly loaded into the templates. First load all static files at the top of the page with {% load static %} and then include a link to the base.css file. The static124 template tag uses STATIC_URL, which we set to /static/, so rather than needing to write out static/css/base.css we can simply refer to css/base.css. Code {% load static %} <!DOCTYPE html> {% block title %}Bookstore{% endblock %} 124 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#std:templatetag-static Chapter 6: Static Assets ... Refresh the homepage to see our work. There\u2019s our CSS in action! 117 Homepage with red text If instead you see an error screen saying Invalid block tag on line 7: 'static'. Did you forget to register or load this tag? then you forgot to include the line {% load static %} at the top of the file. I do this all the time myself. Images How about an image? You can download the book cover for Django for Professionals at this link125 . Save it into the directory books/static/images as djangoforprofessionals.jpg. To display it on the homepage, update templates/home.html. Add both the {% load static %} tags at the top and on the next-to-last line the link for the file. 125 https://wsvincent.com/assets/images/djangoforprofessionals.jpg Chapter 6: Static Assets Code {% extends '_base.html' %} {% load static %} {% block title %}Home{% endblock title %} 118 {% block content %} Homepage {% if user.is_authenticated %} Hi {{ user.email }}! Log Out {% else %} You are not logged in Log In | Sign Up {% endif %} {% endblock content %} Refreshing the homepage you\u2019ll see the raw file is quite large! Let\u2019s control that with some additional CSS. Chapter 6: Static Assets Code / static/css/base.css / h1 { color: red; } .bookcover { height: 300px; width: auto; } Now update the homepage and the book cover image fits nicely. 119 Homepage with Book Cover Chapter 6: Static Assets 120 JavaScript To add JavaScript we\u2019ll go through a similar process. Create a new file called base.js. Command Line $ touch static/js/base.js Often I put a tracking code of some kind here, such as for Google Analytics, but for demonstration purposes we\u2019ll add a console.log statement so we can confirm the JavaScript loaded correctly. Code // static/js/base.js console.log('JavaScript here!') Now add it to our _base.html template. JavaScript should be added at the bottom of the file so it is loaded last, after the HTML, CSS, and other assets that appear first on the screen when rendered in the web browser. This gives the appearance of the complete webpage loading faster. Chapter 6: Static Assets Code {% load static %} <!DOCTYPE html> {% block title %}Bookstore{% endblock title %} {% block content %} {% endblock content %} {% block javascript %} {% endblock javascript %} 121 In your web browser, make the JavaScript console available. This involves opening up Developer Tools and making sure you\u2019re on the \u201cConsole\u201d section. On Chrome which is being used for the images in this book, go to View in the top menu, then Developer -> Developer Tools which will open a sidebar. Make sure Console is selected from the options. If you refresh the page, you should see the following: Chapter 6: Static Assets 122 Homepage JavaScript console view collectstatic Imagine we wanted to deploy our website right away. Among other steps, we\u2019d need to run collectstatic126 to create a single, production-ready directory of all the static files in our project. Command Line $ docker-compose exec web python manage.py collectstatic 122 static files copied to '/code/staticfiles'. If you look within your text editor, there is now a staticfiles directory with four subdirectories: admin, css, images, and js. The first one is the static assets of the Django admin app and the other three we specified. That\u2019s why there are 122 files copied over. 126 https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#collectstatic Chapter 6: Static Assets 123 Bootstrap Writing custom CSS for your website is a worthy goal and something I advise all software developers, even back-end ones, to try at some point. But practically speaking there is a reason front-end frameworks like Bootstrap127 exist: they save you a ton of time when starting a new project. Unless you have a dedicated designer to collaborate with, stick with a framework for the early iterations of your website. In this section we\u2019ll add Bootstrap to our project alongside our existing base.css file. Typing all this out by hand would take a while and be error prone so this is a rare case where I advise simply copy/pasting from the official source code128 . Note that order matters here for both the CSS and JavaScript. The file will be loaded top-to-bottom so our base.css file comes after the Bootstrap CSS so our h1 style overrides the Bootstrap default. At the bottom of the file, it\u2019s similarly important to load jQuery first, then PopperJS, and only then the Bootstrap JavaScript file. Finally observe that a navigation header has been added to the project with basic logic so if a user is logged in, only the \u201cLog Out\u201d link is visible while a logged out user will see both \u201cLog In\u201d and \u201cSign Up\u201d links. 127 https://getbootstrap.com/ 128 https://github.com/wsvincent/djangoforprofessionals/blob/master/ch6-static-assets/templates/_base.html Chapter 6: Static Assets 124 Code {% load static %} <!DOCTYPE html> {% block title %}Bookstore{% endblock title %} Bookstore About {% if user.is_authenticated %} Log Out {% else %} Log In Sign Up {% endif %} {% block content %} {% endblock content %} 125 It\u2019s best not to attempt to type this code. Instead copy and paste it from the official repo129 with one noticeable change: on line 18 of the source code, make sure to change the href tag to # not {% url 'about' %}. In other words it should match the above code and look like this: 129 https://github.com/wsvincent/djangoforprofessionals/blob/master/ch6-static-assets/templates/_base.html Chapter 6: Static Assets 126 Code About We\u2019ll add the about page URL route in the next section. If you refresh the homepage after making these changes it should look as follows: Homepage with Bootstrap About Page Did you notice the navbar link for an About page? Trouble is the page and the link don\u2019t exist yet. But because we already have a handy pages app it\u2019s quite quick to make one. Since this will be a static page we don\u2019t need a database model involved. However we will need a template, view, and url. Let\u2019s start with the template called about.html. Chapter 6: Static Assets 127 Command Line $ touch templates/about.html The page will literally just say \u201cAbout Page\u201d for now while inheriting from _base.html. Code {% extends '_base.html' %} {% block title %}About{% endblock title %} {% block content %} About Page {% endblock content %} The view can rely on Django\u2019s built-in TemplateView just like our homepage. Code pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): # new template_name = 'about.html' And the URL path will be pretty similar as well. Set it to about/, import the appropriate view, and provide a URL name of about. Chapter 6: Static Assets Code pages/urls.py from django.urls import path from .views import HomePageView, AboutPageView # new 128 urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), # new path('', HomePageView.as_view(), name='home'), ] If you go now to http://127.0.0.1:8000/about/130 you can see the About page. About Page As a final step, update the link in the navbar to the page. Because we provided a name in the URL path of about that\u2019s what we\u2019ll use. On line 18 of base.html change the line with the About page link to the following: 130 http://127.0.0.1:8000/about/ Chapter 6: Static Assets Code About 129 Django Crispy Forms One last update concerns our forms. The popular 3rd party package django-crispy- forms131 provides a host of welcome upgrades. We\u2019ll follow the usual pattern to install it which is: install within Docker, stop our Docker container and then rebuild it. Command Line $ docker-compose exec web pipenv install django-crispy-forms==1.8.0 $ docker-compose down $ docker-compose up -d --build Now add crispy forms to the INSTALLED_APPS setting. Note that it\u2019s name needs to be cripsy_forms here. A nice additional feature is to specify bootstrap4 under CRISPY - TEMPLATE_PACK which will provide pre-styled forms for us. 131 https://github.com/django-crispy-forms/django-crispy-forms Chapter 6: Static Assets Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', Third-party 'crispy_forms', # new 130 ] Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', django-crispy-forms CRISPY_TEMPLATE_PACK = 'bootstrap4' # new To use Crispy Forms we load crispy_forms_tags at the top of a template and add {{ form|crispy }} to replace {{ form.as_p}} for displaying form fields. We will take this time to also add Bootstrap styling to the Submit button. Start with templates/signup.html. Make the updates below. Chapter 6: Static Assets Code {% extends '_base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock title %} {% block content %} Sign Up {% csrf_token %} {{ form|crispy }} Sign Up {% endblock content %} 131 Chapter 6: Static Assets 132 Sign Up Page with Crispy Forms Update login.html as well with crispy_forms_tags at the top and {{ form|crispy }} in the form. Chapter 6: Static Assets Code {% extends '_base.html' %} {% load crispy_forms_tags %} {% block title %}Log In{% endblock title %} {% block content %} Log In {% csrf_token %} {{ form|crispy }} Log In {% endblock content %} 133 Log In Page with Crispy Forms Chapter 6: Static Assets 134 Tests Time for tests which will be very similar to those we added previously for our homepage. Code pages/tests.py from django.test import SimpleTestCase from django.urls import reverse, resolve from .views import HomePageView, AboutPageView # new class HomepageTests(SimpleTestCase): ... class AboutPageTests(SimpleTestCase): # new def setUp(self): url = reverse('about') self.response = self.client.get(url) def test_aboutpage_status_code(self): self.assertEqual(self.response.status_code, 200) def test_aboutpage_template(self): self.assertTemplateUsed(self.response, 'about.html') Chapter 6: Static Assets def test_aboutpage_contains_correct_html(self): self.assertContains(self.response, 'About Page') def test_aboutpage_does_not_contain_incorrect_html(self): self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_aboutpage_url_resolves_aboutpageview(self): view = resolve('/about/') self.assertEqual( view.func. name , AboutPageView.as_view(). name ) Run the tests. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ............... Ran 15 tests in 0.433s OK Destroying test database for alias 'default'... 135 Chapter 6: Static Assets 136 Git Check the status of our changes in this chapter, add them all, and then provide a commit message. Command Line $ git status $ git add . $ git commit -m 'ch6' As alway you can compare your code with the official code on Github132 if there are any issues. Conclusion Static assets are a core part of every website and in Django we have to take a number of additional steps so they are compiled and hosted efficiently in production. Later on in the book we\u2019ll learn how to use a dedicated content delivery network (CDN) for hosting and displaying our project\u2019s static files. 132 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch6-static-assets Chapter 7: Advanced User Registration At this point we have the standard Django user registration implemented. But often that\u2019s just the starting point on professional projects. What about customizing things a bit? For example, Django\u2019s default username/email/password pattern is somewhat dated these days. It\u2019s far more common to simply require email/password for sign up and log in. And really every part of the authentication flow\u2013the forms, emails, pages\u2013 can be customized if so desired. Another major factor in many projects is the need for social authentication, that is handling sign up and log in via a third-party service like Google, Facebook, and so on. We could implement our own solutions here from scratch but there are some definite risks: user registration is a complex area with many moving parts and one area where we really do not want to make a security mistake. For this reason, many professional Django developers rely on the popular third- party django-allauth133 . Adding any third party package should come with a degree of caution since you are adding another dependency to your technical stack. It\u2019s important to make sure any package is both up-to-date and well tested. Fortunately django-allauth is both. At the cost of a little bit of magic it addresses all of these concerns and makes customization much, much easier. 133 https://github.com/pennersr/django-allauth Chapter 7: Advanced User Registration 138 django-allauth Start by installing django-allauth. Because we\u2019re using Pipenv we want to avoid conflicts with the Pipfile.lock so we\u2019ll install it within Dock","title":"22"},{"location":"22/#bookstore_projectsettingspy","text":"STATIC_URL = '/static/' This sets the URL that we can use to use to reference static files. Note that it is important to include a trailing slash / at the end of the directory name. STATICFILES_DIRS Next up is STATICFILES_DIRS119 which defines the location of static files in local development. In our project these will all live within a top-level static directory. Code","title":"bookstore_project/settings.py"},{"location":"22/#bookstore_projectsettingspy_1","text":"STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] # new It\u2019s often the case that there will be multiple directories with static files within a project so Python brackets [], which denote a list120, are typically added here to accommodate future additions. STATIC_ROOT STATIC_ROOT121 is the location of static files for production so it must be set to a different name, typically staticfiles. When it comes time to deploy a Django project, the collectstatic122 command will automatically compile all available static 119 https://docs.djangoproject.com/en/2.2/ref/settings/#staticfiles-dirs 120 https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists 121 https://docs.djangoproject.com/en/2.2/ref/settings/#static-root 122 https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#django-admin-collectstatic Chapter 6: Static Assets 114 files throughout the entire project into a single directory. This is far faster than having static files sprinkled across the project as is the case in local development. Code","title":"bookstore_project/settings.py"},{"location":"22/#bookstore_projectsettingspy_2","text":"STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # new STATICFILES_FINDERS The last setting is STATICFILES_FINDERS123 which tells Django how to look for static file directories. It is implicitly set for us and although this is an optional step, I prefer to make it explicit in all projects. Code","title":"bookstore_project/settings.py"},{"location":"22/#bookstore_projectsettingspy_3","text":"STATICFILES_FINDERS = [ \"django.contrib.staticfiles.finders.FileSystemFinder\", \"django.contrib.staticfiles.finders.AppDirectoriesFinder\", ] The FileSystemFinder looks within the STATICFILES_DIRS setting, which we set to static, for any static files. Then the AppDirectoriesFinder looks for any directories named static located within an app, as opposed to located at a project-level static directory. This setting is read top-to-bottom meaning if a file called static/img.jpg is first found by FileSystemFinder it will be in place of an img.jpg file located within, say, the pages app at pages/static/img.jpg. 123 https://docs.djangoproject.com/en/2.2/ref/settings/#staticfiles-finders Chapter 6: Static Assets Our final group of settings therefore should look as follows: Code","title":"bookstore_project/settings.py"},{"location":"22/#bookstore_projectsettingspy_4","text":"STATIC_URL = '/static/' STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') STATICFILES_FINDERS = [ \"django.contrib.staticfiles.finders.FileSystemFinder\", \"django.contrib.staticfiles.finders.AppDirectoriesFinder\", ] 115 Static Directory Let\u2019s now add some static files and incorporate them into our project. Even though we\u2019re referring to a static directory for our files it\u2019s up to us to create it so do that now along with new subdirectories for CSS, JavaScript, and images. Command Line $ mkdir static $ mkdir static/css $ mkdir static/js $ mkdir static/images Next create a base.css file. Chapter 6: Static Assets 116 Command Line $ touch static/css/base.css We\u2019ll keep things basic and have our h1 headline be red. The point is to show how CSS can be added to our project, not to delve too deeply into CSS itself. Code / static/css/base.css / h1 { color: red; } If you refresh the homepage now you\u2019ll see that nothing has changed. That\u2019s because static assets must be explicitly loaded into the templates. First load all static files at the top of the page with {% load static %} and then include a link to the base.css file. The static124 template tag uses STATIC_URL, which we set to /static/, so rather than needing to write out static/css/base.css we can simply refer to css/base.css. Code {% load static %} <!DOCTYPE html> {% block title %}Bookstore{% endblock %} 124 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#std:templatetag-static Chapter 6: Static Assets ... Refresh the homepage to see our work. There\u2019s our CSS in action! 117 Homepage with red text If instead you see an error screen saying Invalid block tag on line 7: 'static'. Did you forget to register or load this tag? then you forgot to include the line {% load static %} at the top of the file. I do this all the time myself. Images How about an image? You can download the book cover for Django for Professionals at this link125 . Save it into the directory books/static/images as djangoforprofessionals.jpg. To display it on the homepage, update templates/home.html. Add both the {% load static %} tags at the top and on the next-to-last line the link for the file. 125 https://wsvincent.com/assets/images/djangoforprofessionals.jpg Chapter 6: Static Assets Code {% extends '_base.html' %} {% load static %} {% block title %}Home{% endblock title %} 118 {% block content %}","title":"bookstore_project/settings.py"},{"location":"22/#pagesviewspy","text":"from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): # new template_name = 'about.html' And the URL path will be pretty similar as well. Set it to about/, import the appropriate view, and provide a URL name of about. Chapter 6: Static Assets Code","title":"pages/views.py"},{"location":"22/#pagesurlspy","text":"from django.urls import path from .views import HomePageView, AboutPageView # new 128 urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), # new path('', HomePageView.as_view(), name='home'), ] If you go now to http://127.0.0.1:8000/about/130 you can see the About page. About Page As a final step, update the link in the navbar to the page. Because we provided a name in the URL path of about that\u2019s what we\u2019ll use. On line 18 of base.html change the line with the About page link to the following: 130 http://127.0.0.1:8000/about/ Chapter 6: Static Assets Code About 129 Django Crispy Forms One last update concerns our forms. The popular 3rd party package django-crispy- forms131 provides a host of welcome upgrades. We\u2019ll follow the usual pattern to install it which is: install within Docker, stop our Docker container and then rebuild it. Command Line $ docker-compose exec web pipenv install django-crispy-forms==1.8.0 $ docker-compose down $ docker-compose up -d --build Now add crispy forms to the INSTALLED_APPS setting. Note that it\u2019s name needs to be cripsy_forms here. A nice additional feature is to specify bootstrap4 under CRISPY - TEMPLATE_PACK which will provide pre-styled forms for us. 131 https://github.com/django-crispy-forms/django-crispy-forms Chapter 6: Static Assets Code","title":"pages/urls.py"},{"location":"22/#bookstore_projectsettingspy_5","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles',","title":"bookstore_project/settings.py"},{"location":"22/#third-party","text":"'crispy_forms', # new 130 ]","title":"Third-party"},{"location":"22/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig',","title":"Local"},{"location":"22/#django-crispy-forms","text":"CRISPY_TEMPLATE_PACK = 'bootstrap4' # new To use Crispy Forms we load crispy_forms_tags at the top of a template and add {{ form|crispy }} to replace {{ form.as_p}} for displaying form fields. We will take this time to also add Bootstrap styling to the Submit button. Start with templates/signup.html. Make the updates below. Chapter 6: Static Assets Code {% extends '_base.html' %} {% load crispy_forms_tags %} {% block title %}Sign Up{% endblock title %} {% block content %}","title":"django-crispy-forms"},{"location":"22/#pagestestspy","text":"from django.test import SimpleTestCase from django.urls import reverse, resolve from .views import HomePageView, AboutPageView # new class HomepageTests(SimpleTestCase): ... class AboutPageTests(SimpleTestCase): # new def setUp(self): url = reverse('about') self.response = self.client.get(url) def test_aboutpage_status_code(self): self.assertEqual(self.response.status_code, 200) def test_aboutpage_template(self): self.assertTemplateUsed(self.response, 'about.html') Chapter 6: Static Assets def test_aboutpage_contains_correct_html(self): self.assertContains(self.response, 'About Page') def test_aboutpage_does_not_contain_incorrect_html(self): self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_aboutpage_url_resolves_aboutpageview(self): view = resolve('/about/') self.assertEqual( view.func. name , AboutPageView.as_view(). name ) Run the tests. Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ............... Ran 15 tests in 0.433s OK Destroying test database for alias 'default'... 135 Chapter 6: Static Assets 136 Git Check the status of our changes in this chapter, add them all, and then provide a commit message. Command Line $ git status $ git add . $ git commit -m 'ch6' As alway you can compare your code with the official code on Github132 if there are any issues. Conclusion Static assets are a core part of every website and in Django we have to take a number of additional steps so they are compiled and hosted efficiently in production. Later on in the book we\u2019ll learn how to use a dedicated content delivery network (CDN) for hosting and displaying our project\u2019s static files. 132 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch6-static-assets Chapter 7: Advanced User Registration At this point we have the standard Django user registration implemented. But often that\u2019s just the starting point on professional projects. What about customizing things a bit? For example, Django\u2019s default username/email/password pattern is somewhat dated these days. It\u2019s far more common to simply require email/password for sign up and log in. And really every part of the authentication flow\u2013the forms, emails, pages\u2013 can be customized if so desired. Another major factor in many projects is the need for social authentication, that is handling sign up and log in via a third-party service like Google, Facebook, and so on. We could implement our own solutions here from scratch but there are some definite risks: user registration is a complex area with many moving parts and one area where we really do not want to make a security mistake. For this reason, many professional Django developers rely on the popular third- party django-allauth133 . Adding any third party package should come with a degree of caution since you are adding another dependency to your technical stack. It\u2019s important to make sure any package is both up-to-date and well tested. Fortunately django-allauth is both. At the cost of a little bit of magic it addresses all of these concerns and makes customization much, much easier. 133 https://github.com/pennersr/django-allauth Chapter 7: Advanced User Registration 138 django-allauth Start by installing django-allauth. Because we\u2019re using Pipenv we want to avoid conflicts with the Pipfile.lock so we\u2019ll install it within Dock","title":"pages/tests.py"},{"location":"23/","text":"Chapter 7: Advanced User Registration At this point we have the standard Django user registration implemented. But often that\u2019s just the starting point on professional projects. What about customizing things a bit? For example, Django\u2019s default username/email/password pattern is somewhat dated these days. It\u2019s far more common to simply require email/password for sign up and log in. And really every part of the authentication flow\u2013the forms, emails, pages\u2013 can be customized if so desired. Another major factor in many projects is the need for social authentication, that is handling sign up and log in via a third-party service like Google, Facebook, and so on. We could implement our own solutions here from scratch but there are some definite risks: user registration is a complex area with many moving parts and one area where we really do not want to make a security mistake. For this reason, many professional Django developers rely on the popular third- party django-allauth133 . Adding any third party package should come with a degree of caution since you are adding another dependency to your technical stack. It\u2019s important to make sure any package is both up-to-date and well tested. Fortunately django-allauth is both. At the cost of a little bit of magic it addresses all of these concerns and makes customization much, much easier. 133 https://github.com/pennersr/django-allauth Chapter 7: Advanced User Registration 138 django-allauth Start by installing django-allauth. Because we\u2019re using Pipenv we want to avoid conflicts with the Pipfile.lock so we\u2019ll install it within Docker first, then stop Docker, and rebuild our image with the --build flag which prevents the default image caching and ensures that our entire image is built from scratch. Command Line $ docker-compose exec web pipenv install django-allauth==0.40.0 $ docker-compose down $ docker-compose up -d --build Our website will still function the same as before since we haven\u2019t explicitly told Django about this new django-allauth package. To do that we need to update the INSTALLED_APPS config within our settings.py file adding Django\u2019s built-in, but op- tional, sites framework134 , as well as allauth and its account feature allauth.account. Django\u2019s sites framework is a powerful feature that allows one Django project to control multiple sites. Given we only have one site in our project, we\u2019ll set the SITE_ID to 1. If we added a second site it would have an ID of 2, a third site would have an ID of 3, and so on. 134 https://docs.djangoproject.com/en/2.2/ref/contrib/sites/ Chapter 7: Advanced User Registration Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites', # new Third-party 'crispy_forms', 'allauth', # new 'allauth.account', # new ] Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', django-allauth config SITE_ID = 1 # new 139 AUTHENTICATION_BACKENDS The settings.py file created by Django for any new project contains a number of explicit settings\u2013those that we see in the file already\u2013as well as a longer additional Chapter 7: Advanced User Registration 140 list of implicit settings that exist but aren\u2019t visible. This can be confusing at first. The complete list of settings configurations is available here135 . An example is the AUTHENTICATION_BACKENDS136 setting. Under the hood Django sets this to 'django.contrib.auth.backends.ModelBackend' which is used when Django attempts to authenticate a user. We could add the following line to settings.py and the current behavior would remain unchanged: Code AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', ) However for django-allauth we need to add its specific authentication options, too, which will allow us to switch over to using login via e-mail in a moment. So at the bottom of your settings.py file add the following section: Code bookstore_project/settings.py django-allauth config SITE_ID = 1 AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', # new ) 135 https://docs.djangoproject.com/en/2.2/ref/settings/ 136 https://docs.djangoproject.com/en/2.2/ref/settings/#authentication-backends Chapter 7: Advanced User Registration 141 EMAIL_BACKEND Another configuration implicitly set is EMAIL_BACKEND137 . By default Django will look for a configured SMTP server138 to send emails. django-allauth will send such an email upon a successful user registration, which we can and will customize later, but since we don\u2019t yet have a SMTP server properly configured, it will result in an error. The solution, for now, is to have Django output any emails to the command line console instead. Thus we can override the default, implicit config by using console139 instead of smtp. Add this at the bottom of the settings.py file. Code bookstore_project/settings.py django-allauth config SITE_ID = 1 AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', ) EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # new 137 https://docs.djangoproject.com/en/2.2/ref/settings/#email-backend 138 https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol 139 https://docs.djangoproject.com/en/2.2/topics/email/#console-backend Chapter 7: Advanced User Registration 142 ACCOUNT_LOGOUT_REDIRECT There\u2019s one more subtle change to make to our configurations at this time. If you look at the configurations page140 again you\u2019ll see there is a setting for ACCOUNT_LOGOUT_- REDIRECT that defaults to the path of the homepage at /. In our current settings.py file we have the following two lines for redirects which point to the homepage via its URL name of 'home'. Code bookstore_project/settings.py LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' The issue is that django-allauth\u2019s ACCOUNT_LOGOUT_REDIRECT actually overrides the built-in LOGOUT_REDIRECT_URL, however, since they both point to the homepage this change may not be apparent. To future-proof our application since maybe we don\u2019t want to always redirect to the homepage on logout, we should be explicit here with the logout redirect. We can also move the two redirect lines under our django-allauth config section. This is what the entire django-allauth config section should look like at this time. 140 https://django-allauth.readthedocs.io/en/latest/configuration.html Chapter 7: Advanced User Registration Code bookstore_project/settings.py django-allauth config LOGIN_REDIRECT_URL = 'home' ACCOUNT_LOGOUT_REDIRECT = 'home' # new SITE_ID = 1 AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', ) EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Given that we have made many changes to our bookstore_project/settings.pylet\u2019s now run migrate to update our database. Command Line $ docker-compose exec web python manage.py migrate Operations to perform: Apply all migrations: account, admin, auth, contenttypes, sess ions, sites, users Running migrations: Applying account.0001_initial... OK Applying account.0002_email_max_length... OK Applying sites.0001_initial... OK Applying sites.0002_alter_domain_unique... OK 143 file Chapter 7: Advanced User Registration 144 URLs We also need to swap out the built-in auth app URLs for django-allauth\u2019s own allauth app. We\u2019ll still use the same accounts/ URL path, however, since we\u2019ll be using django allauth\u2019s templates and routes for sign up we can delete the URL path for our users app, too. Code bookstore_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('admin/', admin.site.urls), User management path('accounts/', include('allauth.urls')), # new Local apps path('', include('pages.urls')), ] At this point we could further delete users/urls.py and users/views.py which were both created solely for our hand-written sign up page and are no longer being used. Chapter 7: Advanced User Registration 145 Templates Django\u2019s auth app looks for templates within a templates/registration directory, but django-allauth prefers they be located within a templates/account directory. So we will create a new templates/account directory and then copy over our existing login.html and signup.html templates into it. Command Line $ mkdir templates/account $ mv templates/registration/login.html templates/account/login.html $ mv templates/signup.html templates/account/signup.html It\u2019s easy to add an s onto account here by accident, but don\u2019t or you\u2019ll get an error. The correct directory is templates/account/. We can delete the templates/registration directory at this point since it is no longer needed. Command Line $ rm -r templates/registration rm means remove and r means do it recursively, which is necessary whenever you are dealing with a directory. If you\u2019d like further information on this command you can type man rm to read the manual. The last step is to update the URL links within both templates/ base.html and templates/home.html to use django-allauth\u2019s URL names rather than Django\u2019s. We do this by adding an account prefix so Django\u2019s 'logout' will now be 'account_logout', 'login' will be 'account_login', and signup will be account_signup. Chapter 7: Advanced User Registration 146 Code ... About {% if user.is_authenticated %} Log Out {% else %} Log In Sign Up {% endif %} ... Code {% extends '_base.html' %} {% load static %} {% block title %}Home{% endblock title %} {% block content %} Homepage {% if user.is_authenticated %} Hi {{ user.email }}! Log Out {% else %} Chapter 7: Advanced User Registration 147 You are not logged in Log In | Sign Up {% endif %} {% endblock content %} And we\u2019re done! Log In If you refresh the homepage at http://127.0.0.1:8000141 and then click on the \u201cLog in\u201d link you\u2019ll see an updated page. Log In Page Note the new \u201cRemember Me\u201d box option. This is the first of many configurations142 that django-allauth provides. The default None asks the user if they want their session 141 http://127.0.0.1:8000 142 https://django-allauth.readthedocs.io/en/latest/configuration.html Chapter 7: Advanced User Registration 148 to be remembered so they don\u2019t have to log in again. It can also be set to False to not remember or True to always remember. We\u2019ll choose True which is how a traditional Django log in page would work. Under our # django-allauth config section of the bookstore_project/settings.py file add a new line for this. Code bookstore_project/settings.py django-allauth config ... ACCOUNT_SESSION_REMEMBER = True # new Refresh the \u201cLog In\u201d page and the box is gone! Log In Page No Box If you try out the log in form with your superuser account it will redirect back to the homepage with a welcome message. Click on the \u201cLog Out\u201d link. Chapter 7: Advanced User Registration 149 Log Out Page Rather than directly log us out django-allauth has an intermediary \u201cLog Out\u201d page which we can customize to match the rest of our project. Log Out Update the default Log Out template by creating a templates/account/logout.html file to override it. Command Line $ touch templates/account/logout.html Like our other templates it will extend _base.html and include Bootstrap styling on the submitted button. Chapter 7: Advanced User Registration Code {% extends '_base.html' %} {% load crispy_forms_tags %} {% block title %}Log Out{% endblock %} {% block content %} Log Out Are you sure you want to log out? {% csrf_token %} {{ form|crispy }} Log Out {% endblock content %} Go ahead and refresh the page. 150 Chapter 7: Advanced User Registration 151 Custom Log Out Page Sign Up At the top of our website, in the nav bar, click on link for \u201cSign Up\u201d which has Bootstrap and django-crispy-forms styling. Chapter 7: Advanced User Registration 152 Sign Up Page An optional customization we can make via django-allauth is to only ask for a password once. Since we\u2019ll configure password change and reset options later, there\u2019s less of a risk that a user who types in the password incorrectly will be locked out of their account. This change is, if you look at the django-allauth configuration options143 , is a one-liner. 143 https://django-allauth.readthedocs.io/en/latest/configuration.html Chapter 7: Advanced User Registration Code bookstore_project/settings.py django-allauth config ... ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False # new 153 Refresh the page and the form will update itself to remove the additional password line. Sign Up with Single Password Now create a new user to confirm everything works. We can call the user testuser1, use testuser1@email.com as email, and testpass123 as the password. Upon submit it will redirect you to the homepage. Chapter 7: Advanced User Registration 154 testuser Homepage Remember how we configured email to output to the console? django-allauth auto- matically sends an email upon registration which we can view by typing docker-compose logs. Command Line $ docker-compose logs ... web_1 | Content-Type: text/plain; charset=\"utf-8\" web_1 | MIME-Version: 1.0 web_1 | Content-Transfer-Encoding: 7bit web_1 | Subject: [example.com] Please Confirm Your E-mail Address web_1 | From: webmaster@localhost web_1 | To: testuser@email.com web_1 | Date: Sat, 13 Jul 2019 14:04:15 -0000 Chapter 7: Advanced User Registration 155 web_1 | Message-ID: 155266195771.15.17095643701553564393@cdab877c4af3 web_1 | web_1 | Hello from example.com! web_1 | web_1 | You're receiving this e-mail because user testuser has given yours as an e-mail address to connect their account. web_1 | web_1 | To confirm this is correct, go to http://127.0.0.1:8000/accounts/ confirm-emailMQ:1h4oIn:GYETeK5dRClGjcgA8NbuOoyvafA/ web_1 | web_1 | Thank you from example.com! web_1 | example.com web_1 | ----------------------------------------------------------------------- ... There it is. Later on we\u2019ll customize this message and configure a proper email service to send it to actual users. Admin Log in to the admin with your superuser account at http://127.0.0.1:8000/admin/144 and we can see it, too, has changed now that django-allauth is involved. 144 http://127.0.0.1:8000/admin/ Chapter 7: Advanced User Registration 156 Admin Homepage There are two new sections: Accounts and Sites courtesy of our recent work. If you click on the Users section we see our traditional view that shows the three current user accounts. Chapter 7: Advanced User Registration 157 Admin Users Go back to the homepage and click on the section for Sites to see what the Django sites framework provides. We\u2019ll update both the Domain Name and the Display Name in a later chapter on configuring email. Chapter 7: Advanced User Registration 158 Admin Sites Email Only Login It\u2019s time to really use django-allauth\u2019s extensive list of configurations145 by switching over to using just email for login, not username. This requires a few changes. First we\u2019ll make a username not required, but set email instead to required. Then we\u2019ll require email to be unique and the authentication method of choice. 145 https://django-allauth.readthedocs.io/en/latest/configuration.html Chapter 7: Advanced User Registration Code bookstore_project/settings.py django-allauth config ... ACCOUNT_USERNAME_REQUIRED = False # new ACCOUNT_AUTHENTICATION_METHOD = 'email' # new ACCOUNT_EMAIL_REQUIRED = True # new ACCOUNT_UNIQUE_EMAIL = True # new 159 Navigate back to the homepage and click on \u201cLog Out\u201d since you\u2019ll be logged in with your superuser account. Then click on the navbar link for \u201cSign Up\u201d and create an account for testuser2@email.com with testpass123 as the password. Sign Up Email Only After being redirected to the homepage upon success, now go into the admin at http://127.0.0.1:8000/admin/146 to inspect what actually happened. Log in with your superuser account and navigate to the Users section. 146 http://127.0.0.1:8000/admin/ Chapter 7: Advanced User Registration 160 Admin Users We can see that django-allauth automatically populated a username for us based on the email part before the @. This is because our underlying CustomUser model still has a username field. We didn\u2019t delete it. While this approach may seem a little hackish, but in fact it works just fine. Fully removing the username from the custom user model requires the use of Abstract- BaseUser147 , which is an additional, optional step some developers take. It requires far more coding and understanding so it is not recommended unless you really know your way around Django\u2019s authentication system! There is, however, an edge case here that we should confirm which is: what happens if we have testuser2@email.com and then a sign up for testuser2@example.com? Wouldn\u2019t that result in a username of testuser2 for both which would cause a conflict? Let\u2019s 147 https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#django.contrib.auth.models. AbstractBaseUser Chapter 7: Advanced User Registration 161 try it out! Log out of the admin, go to the Sign Up Page again and create an account for testuser2@example.com. Sign Up Form Now log back into the admin and go to our Users section. Chapter 7: Advanced User Registration 162 Admin Users django-allauth automtically adds a two-digit string to the username. In this case it is 49 so testuser2 becomes testuser249. This two-digit string will be randomly generated for us. Tests Time for tests. Like any good third-party package django-allauth comes with its own tests so we don\u2019t need to re-test its core functionality, just confirm that our project works as expected. If you run our current test suite there are 3 errors related to SignupPageTests since we\u2019re using django-allauth now for this rather than our own views, forms, and urls. Chapter 7: Advanced User Registration Command Line $ docker-compose exec web python manage.py test ... Ran 15 tests in 0.363s 163 FAILED (errors=3) Let\u2019s update the tests. The first issue is that signup is no longer the correct URL name, instead we\u2019re using account_signup which is the name django-allauth provides. How did I know that? I looked at the source code148 and found the URL name. Another change is the location of the signup.html template which is now located at account/signup.html. We\u2019re also not using CustomUserCreationForm anymore, but instead, that provided by django-allauth so we can remove that test. Remove as well the imports for CustomUserCreationForm and SignupPageView at the top of the file. Code users/tests.py from django.contrib.auth import get_user_model from django.test import TestCase from django.urls import reverse, resolve class CustomUserTests(TestCase): ... 148 https://github.com/pennersr/django-allauth/blob/master/allauth/account/urls.py Chapter 7: Advanced User Registration class SignupTests(TestCase): # new username = 'newuser' email = 'newuser@email.com' def setUp(self): url = reverse('account_signup') self.response = self.client.get(url) def test_signup_template(self): self.assertEqual(self.response.status_code, 200) self.assertTemplateUsed(self.response, 'account/signup.html') self.assertContains(self.response, 'Sign Up') self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) Run the tests again. 164 Chapter 7: Advanced User Registration Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .............. Ran 14 tests in 0.410s 165 OK Destroying test database for alias 'default'... Social If you want to add social authentication it\u2019s just a few settings. I have a complete tutorial online149 for integrating Github. The process is similar for Google, Facebook, and all the rest django-allauth supports. Here is the complete list of providers150 . Git As always commit the code changes with Git. 149 https://wsvincent.com/django-allauth-tutorial/ 150 https://django-allauth.readthedocs.io/en/latest/providers.html Chapter 7: Advanced User Registration 166 Command Line $ git status $ git add . $ git commit -m 'ch7' And if there are any issues, compare with the official source code on Github151. Conclusion We now have a user registration flow that works and can be quickly extended into social authentication if needed. In the next chapter we\u2019ll add environment variables to our project for greater security and flexibility. 151 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch7-advanced-user-registration","title":"23"},{"location":"23/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites', # new","title":"bookstore_project/settings.py"},{"location":"23/#third-party","text":"'crispy_forms', 'allauth', # new 'allauth.account', # new ]","title":"Third-party"},{"location":"23/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig',","title":"Local"},{"location":"23/#django-allauth-config","text":"SITE_ID = 1 # new 139 AUTHENTICATION_BACKENDS The settings.py file created by Django for any new project contains a number of explicit settings\u2013those that we see in the file already\u2013as well as a longer additional Chapter 7: Advanced User Registration 140 list of implicit settings that exist but aren\u2019t visible. This can be confusing at first. The complete list of settings configurations is available here135 . An example is the AUTHENTICATION_BACKENDS136 setting. Under the hood Django sets this to 'django.contrib.auth.backends.ModelBackend' which is used when Django attempts to authenticate a user. We could add the following line to settings.py and the current behavior would remain unchanged: Code AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', ) However for django-allauth we need to add its specific authentication options, too, which will allow us to switch over to using login via e-mail in a moment. So at the bottom of your settings.py file add the following section: Code","title":"django-allauth config"},{"location":"23/#bookstore_projectsettingspy_1","text":"","title":"bookstore_project/settings.py"},{"location":"23/#django-allauth-config_1","text":"SITE_ID = 1 AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', # new ) 135 https://docs.djangoproject.com/en/2.2/ref/settings/ 136 https://docs.djangoproject.com/en/2.2/ref/settings/#authentication-backends Chapter 7: Advanced User Registration 141 EMAIL_BACKEND Another configuration implicitly set is EMAIL_BACKEND137 . By default Django will look for a configured SMTP server138 to send emails. django-allauth will send such an email upon a successful user registration, which we can and will customize later, but since we don\u2019t yet have a SMTP server properly configured, it will result in an error. The solution, for now, is to have Django output any emails to the command line console instead. Thus we can override the default, implicit config by using console139 instead of smtp. Add this at the bottom of the settings.py file. Code","title":"django-allauth config"},{"location":"23/#bookstore_projectsettingspy_2","text":"","title":"bookstore_project/settings.py"},{"location":"23/#django-allauth-config_2","text":"SITE_ID = 1 AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', ) EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # new 137 https://docs.djangoproject.com/en/2.2/ref/settings/#email-backend 138 https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol 139 https://docs.djangoproject.com/en/2.2/topics/email/#console-backend Chapter 7: Advanced User Registration 142 ACCOUNT_LOGOUT_REDIRECT There\u2019s one more subtle change to make to our configurations at this time. If you look at the configurations page140 again you\u2019ll see there is a setting for ACCOUNT_LOGOUT_- REDIRECT that defaults to the path of the homepage at /. In our current settings.py file we have the following two lines for redirects which point to the homepage via its URL name of 'home'. Code","title":"django-allauth config"},{"location":"23/#bookstore_projectsettingspy_3","text":"LOGIN_REDIRECT_URL = 'home' LOGOUT_REDIRECT_URL = 'home' The issue is that django-allauth\u2019s ACCOUNT_LOGOUT_REDIRECT actually overrides the built-in LOGOUT_REDIRECT_URL, however, since they both point to the homepage this change may not be apparent. To future-proof our application since maybe we don\u2019t want to always redirect to the homepage on logout, we should be explicit here with the logout redirect. We can also move the two redirect lines under our django-allauth config section. This is what the entire django-allauth config section should look like at this time. 140 https://django-allauth.readthedocs.io/en/latest/configuration.html Chapter 7: Advanced User Registration Code","title":"bookstore_project/settings.py"},{"location":"23/#bookstore_projectsettingspy_4","text":"","title":"bookstore_project/settings.py"},{"location":"23/#django-allauth-config_3","text":"LOGIN_REDIRECT_URL = 'home' ACCOUNT_LOGOUT_REDIRECT = 'home' # new SITE_ID = 1 AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', ) EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' Given that we have made many changes to our bookstore_project/settings.pylet\u2019s now run migrate to update our database. Command Line $ docker-compose exec web python manage.py migrate Operations to perform: Apply all migrations: account, admin, auth, contenttypes, sess ions, sites, users Running migrations: Applying account.0001_initial... OK Applying account.0002_email_max_length... OK Applying sites.0001_initial... OK Applying sites.0002_alter_domain_unique... OK 143 file Chapter 7: Advanced User Registration 144 URLs We also need to swap out the built-in auth app URLs for django-allauth\u2019s own allauth app. We\u2019ll still use the same accounts/ URL path, however, since we\u2019ll be using django allauth\u2019s templates and routes for sign up we can delete the URL path for our users app, too. Code","title":"django-allauth config"},{"location":"23/#bookstore_projecturlspy","text":"from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"23/#django-admin","text":"path('admin/', admin.site.urls),","title":"Django admin"},{"location":"23/#user-management","text":"path('accounts/', include('allauth.urls')), # new","title":"User management"},{"location":"23/#local-apps","text":"path('', include('pages.urls')), ] At this point we could further delete users/urls.py and users/views.py which were both created solely for our hand-written sign up page and are no longer being used. Chapter 7: Advanced User Registration 145 Templates Django\u2019s auth app looks for templates within a templates/registration directory, but django-allauth prefers they be located within a templates/account directory. So we will create a new templates/account directory and then copy over our existing login.html and signup.html templates into it. Command Line $ mkdir templates/account $ mv templates/registration/login.html templates/account/login.html $ mv templates/signup.html templates/account/signup.html It\u2019s easy to add an s onto account here by accident, but don\u2019t or you\u2019ll get an error. The correct directory is templates/account/. We can delete the templates/registration directory at this point since it is no longer needed. Command Line $ rm -r templates/registration rm means remove and r means do it recursively, which is necessary whenever you are dealing with a directory. If you\u2019d like further information on this command you can type man rm to read the manual. The last step is to update the URL links within both templates/ base.html and templates/home.html to use django-allauth\u2019s URL names rather than Django\u2019s. We do this by adding an account prefix so Django\u2019s 'logout' will now be 'account_logout', 'login' will be 'account_login', and signup will be account_signup. Chapter 7: Advanced User Registration 146 Code ... About {% if user.is_authenticated %} Log Out {% else %} Log In Sign Up {% endif %} ... Code {% extends '_base.html' %} {% load static %} {% block title %}Home{% endblock title %} {% block content %}","title":"Local apps"},{"location":"23/#bookstore_projectsettingspy_5","text":"","title":"bookstore_project/settings.py"},{"location":"23/#django-allauth-config_4","text":"... ACCOUNT_SESSION_REMEMBER = True # new Refresh the \u201cLog In\u201d page and the box is gone! Log In Page No Box If you try out the log in form with your superuser account it will redirect back to the homepage with a welcome message. Click on the \u201cLog Out\u201d link. Chapter 7: Advanced User Registration 149 Log Out Page Rather than directly log us out django-allauth has an intermediary \u201cLog Out\u201d page which we can customize to match the rest of our project. Log Out Update the default Log Out template by creating a templates/account/logout.html file to override it. Command Line $ touch templates/account/logout.html Like our other templates it will extend _base.html and include Bootstrap styling on the submitted button. Chapter 7: Advanced User Registration Code {% extends '_base.html' %} {% load crispy_forms_tags %} {% block title %}Log Out{% endblock %} {% block content %}","title":"django-allauth config"},{"location":"23/#bookstore_projectsettingspy_6","text":"","title":"bookstore_project/settings.py"},{"location":"23/#django-allauth-config_5","text":"... ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False # new 153 Refresh the page and the form will update itself to remove the additional password line. Sign Up with Single Password Now create a new user to confirm everything works. We can call the user testuser1, use testuser1@email.com as email, and testpass123 as the password. Upon submit it will redirect you to the homepage. Chapter 7: Advanced User Registration 154 testuser Homepage Remember how we configured email to output to the console? django-allauth auto- matically sends an email upon registration which we can view by typing docker-compose logs. Command Line $ docker-compose logs ... web_1 | Content-Type: text/plain; charset=\"utf-8\" web_1 | MIME-Version: 1.0 web_1 | Content-Transfer-Encoding: 7bit web_1 | Subject: [example.com] Please Confirm Your E-mail Address web_1 | From: webmaster@localhost web_1 | To: testuser@email.com web_1 | Date: Sat, 13 Jul 2019 14:04:15 -0000 Chapter 7: Advanced User Registration 155 web_1 | Message-ID: 155266195771.15.17095643701553564393@cdab877c4af3 web_1 | web_1 | Hello from example.com! web_1 | web_1 | You're receiving this e-mail because user testuser has given yours as an e-mail address to connect their account. web_1 | web_1 | To confirm this is correct, go to http://127.0.0.1:8000/accounts/ confirm-emailMQ:1h4oIn:GYETeK5dRClGjcgA8NbuOoyvafA/ web_1 | web_1 | Thank you from example.com! web_1 | example.com web_1 | ----------------------------------------------------------------------- ... There it is. Later on we\u2019ll customize this message and configure a proper email service to send it to actual users. Admin Log in to the admin with your superuser account at http://127.0.0.1:8000/admin/144 and we can see it, too, has changed now that django-allauth is involved. 144 http://127.0.0.1:8000/admin/ Chapter 7: Advanced User Registration 156 Admin Homepage There are two new sections: Accounts and Sites courtesy of our recent work. If you click on the Users section we see our traditional view that shows the three current user accounts. Chapter 7: Advanced User Registration 157 Admin Users Go back to the homepage and click on the section for Sites to see what the Django sites framework provides. We\u2019ll update both the Domain Name and the Display Name in a later chapter on configuring email. Chapter 7: Advanced User Registration 158 Admin Sites Email Only Login It\u2019s time to really use django-allauth\u2019s extensive list of configurations145 by switching over to using just email for login, not username. This requires a few changes. First we\u2019ll make a username not required, but set email instead to required. Then we\u2019ll require email to be unique and the authentication method of choice. 145 https://django-allauth.readthedocs.io/en/latest/configuration.html Chapter 7: Advanced User Registration Code","title":"django-allauth config"},{"location":"23/#bookstore_projectsettingspy_7","text":"","title":"bookstore_project/settings.py"},{"location":"23/#django-allauth-config_6","text":"... ACCOUNT_USERNAME_REQUIRED = False # new ACCOUNT_AUTHENTICATION_METHOD = 'email' # new ACCOUNT_EMAIL_REQUIRED = True # new ACCOUNT_UNIQUE_EMAIL = True # new 159 Navigate back to the homepage and click on \u201cLog Out\u201d since you\u2019ll be logged in with your superuser account. Then click on the navbar link for \u201cSign Up\u201d and create an account for testuser2@email.com with testpass123 as the password. Sign Up Email Only After being redirected to the homepage upon success, now go into the admin at http://127.0.0.1:8000/admin/146 to inspect what actually happened. Log in with your superuser account and navigate to the Users section. 146 http://127.0.0.1:8000/admin/ Chapter 7: Advanced User Registration 160 Admin Users We can see that django-allauth automatically populated a username for us based on the email part before the @. This is because our underlying CustomUser model still has a username field. We didn\u2019t delete it. While this approach may seem a little hackish, but in fact it works just fine. Fully removing the username from the custom user model requires the use of Abstract- BaseUser147 , which is an additional, optional step some developers take. It requires far more coding and understanding so it is not recommended unless you really know your way around Django\u2019s authentication system! There is, however, an edge case here that we should confirm which is: what happens if we have testuser2@email.com and then a sign up for testuser2@example.com? Wouldn\u2019t that result in a username of testuser2 for both which would cause a conflict? Let\u2019s 147 https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#django.contrib.auth.models. AbstractBaseUser Chapter 7: Advanced User Registration 161 try it out! Log out of the admin, go to the Sign Up Page again and create an account for testuser2@example.com. Sign Up Form Now log back into the admin and go to our Users section. Chapter 7: Advanced User Registration 162 Admin Users django-allauth automtically adds a two-digit string to the username. In this case it is 49 so testuser2 becomes testuser249. This two-digit string will be randomly generated for us. Tests Time for tests. Like any good third-party package django-allauth comes with its own tests so we don\u2019t need to re-test its core functionality, just confirm that our project works as expected. If you run our current test suite there are 3 errors related to SignupPageTests since we\u2019re using django-allauth now for this rather than our own views, forms, and urls. Chapter 7: Advanced User Registration Command Line $ docker-compose exec web python manage.py test ... Ran 15 tests in 0.363s 163 FAILED (errors=3) Let\u2019s update the tests. The first issue is that signup is no longer the correct URL name, instead we\u2019re using account_signup which is the name django-allauth provides. How did I know that? I looked at the source code148 and found the URL name. Another change is the location of the signup.html template which is now located at account/signup.html. We\u2019re also not using CustomUserCreationForm anymore, but instead, that provided by django-allauth so we can remove that test. Remove as well the imports for CustomUserCreationForm and SignupPageView at the top of the file. Code","title":"django-allauth config"},{"location":"23/#userstestspy","text":"from django.contrib.auth import get_user_model from django.test import TestCase from django.urls import reverse, resolve class CustomUserTests(TestCase): ... 148 https://github.com/pennersr/django-allauth/blob/master/allauth/account/urls.py Chapter 7: Advanced User Registration class SignupTests(TestCase): # new username = 'newuser' email = 'newuser@email.com' def setUp(self): url = reverse('account_signup') self.response = self.client.get(url) def test_signup_template(self): self.assertEqual(self.response.status_code, 200) self.assertTemplateUsed(self.response, 'account/signup.html') self.assertContains(self.response, 'Sign Up') self.assertNotContains( self.response, 'Hi there! I should not be on the page.') def test_signup_form(self): new_user = get_user_model().objects.create_user( self.username, self.email) self.assertEqual(get_user_model().objects.all().count(), 1) self.assertEqual(get_user_model().objects.all() [0].username, self.username) self.assertEqual(get_user_model().objects.all() [0].email, self.email) Run the tests again. 164 Chapter 7: Advanced User Registration Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). .............. Ran 14 tests in 0.410s 165 OK Destroying test database for alias 'default'... Social If you want to add social authentication it\u2019s just a few settings. I have a complete tutorial online149 for integrating Github. The process is similar for Google, Facebook, and all the rest django-allauth supports. Here is the complete list of providers150 . Git As always commit the code changes with Git. 149 https://wsvincent.com/django-allauth-tutorial/ 150 https://django-allauth.readthedocs.io/en/latest/providers.html Chapter 7: Advanced User Registration 166 Command Line $ git status $ git add . $ git commit -m 'ch7' And if there are any issues, compare with the official source code on Github151. Conclusion We now have a user registration flow that works and can be quickly extended into social authentication if needed. In the next chapter we\u2019ll add environment variables to our project for greater security and flexibility. 151 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch7-advanced-user-registration","title":"users/tests.py"},{"location":"24/","text":"Chapter 8: Environment Variables Environment variables152 are variables that can be loaded into the operating envi- ronment of a project at run time as opposed to hard coded into the codebase itself. They are considered an integral part of the popular Twelve-Factor App Design153 methodology and a Django best practice because they allow a greater level of security and simpler local/production configurations. Why greater security? Because we can store truly secret information\u2013database credentials, API keys, and so on\u2013separate from the actual code base. This is a good idea because using a version control system, like git, means that it only takes one bad commit for credentials to be added in there forever. Which means that anyone with access to the codebase has full control over the project. This is very, very dangerous. It\u2019s much better to limit who has access to the application and environment variables provide an elegant way to do so. A secondary advantage is that environment variables greatly simplify having differ- ent environments for both local and production code. As we will see, there are a number of setting configurations that Django uses by default intended to make local development easier, but which must be changed once the same project is ready for production. In a non-Docker environment the current best practice is to use django-environ154, however, since we\u2019re using Docker it\u2019s possible to add environment variables directly via our docker-compose.yml file which is what we\u2019ll do. 152 https://en.wikipedia.org/wiki/Environment_variable 153 https://12factor.net/ 154 https://github.com/joke2k/django-environ Chapter 8: Environment Variables 168 .env files Note that it is also possible to use separate .env files to store the environment variables and reference them in a docker-compose.yml file. A file that begins with a period . is known as a hidden file155 and frequently used for configurations. It\u2019s not really hidden; the file is still there in the directory. However if you type ls, the default listing of files command to see the contents of a directory, hidden files will not appear. But they are still there and accessible if you add the flag ls -la. The advantage of a .env file is that it can be removed from Git via a separate .gitignore file. However in practice chaining together multiple .env files becomes quite complicated and while it might make sense on a larger project with many developers and many levels of access, we will stick to the more straightforward approach of plugging environment variables directly into a docker-compose.yml file in this book. SECRET_KEY For our first environment variable let\u2019s start with the SECRET_KEY156 configuration in the bookstore_project/settings.py file. This key is a randomly generated string used for cryptographic signing157 and created whenever the startproject command is run. There is a two-step process for adding environment variables: first we add the values to our docker-compose.yml file and then we replace the hardcoded bookstore_- project/settings.py value with the environment variable. Within the docker-compose.yml file start by adding a section called environment under web services. We will place all our environment variables here. Then add a line called 155 https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory 156 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECRET_KEY 157 https://docs.djangoproject.com/en/2.2/topics/signing/ Chapter 8: Environment Variables 169 SECRET_KEY that will = the desired value. This can be a little confusing because the = symbol can be included in secret keys! To make the structure crystal clear: if our secret key were dog then the line would be SECRET_KEY=dog. If the secret key were dog=abc then the line would be SECRET_KEY=dog=abc. That\u2019s it! Here is what my file looks like with the secret key generated for the project. Swap in your own secret key in place of it. Note that in the bookstore_project/settings.py file the secret key will be surrounded by quotes '' to signify it as a string. Do not include the quotes when copying the secret key over into docker-compose.yml! docker-compose.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 volumes: - postgres_data:/var/lib/postgresql/data/ Chapter 8: Environment Variables volumes: postgres_data: 170 Note that if your secret key includes a dollar sign, $, then you need to add an additional dollar sign, $$. This is due to how docker-compose handles variable substitutiona . Otherwise you will see an error! ahttps://docs.docker.com/compose/compose-file/#variable-substitution Step two, swap out the hard coded secret key value in bookstore_project/settings.py for a link to the environment variable. If you look at the bookstore_project/settings.py file the very first line import\u2019s os158 from Python. Using os.environ159 allows us to reference environment variables which are supplied via docker-compose.yml. Here\u2019s what your updated file should look like: Code bookstore_project/settings.py SECRET_KEY = os.environ.get('SECRET_KEY') It can be confusing when both an environment variable and the setting itself have the same name so to solidify the structure here, we could have called this environment variable NEW_SECRET_KEY in our docker-compose.yml file in which case the bookstore_- project/settings.py line would have been SECRET_KEY = os.environ.get('NEW_- SECRET_KEY'). However it is common to have the environment variable name match that of the setting it replaces. The final step is to stop and re-start our Docker containers since they are designed to be stateless so when the state has changed\u2013and environment variables are part of the 158 https://docs.python.org/3.7/library/os.html 159 https://docs.python.org/3.7/library/os.html#os.environ Chapter 8: Environment Variables 171 state!\u2013we need to quickly reload the containers to incorporate any new environment variables that have been set. Command Line $ docker-compose down $ docker-compose up -d All set. You should be able to navigate to the webpage again, refresh it, and everything still works as before. If the environment variable hadn\u2019t loaded you\u2019d see an error since a SECRET_KEY is required for any Django project. If that\u2019s the case run docker-compose logs from the command line to diagnose the issue. DEBUG Next up is DEBUG160 which is a boolean setting. By default Django sets this to True to help with debugging in local development, however, when it comes time to deploy a website in production this should be set to False. In Chapter 17: Security we will learn how to create a docker-compose-prod.yml file with production-only configurations that sets this to False. Since we\u2019re using variables our bookstore_project/settings.py file can remain the same and we only need to change the docker compose reference. But for now, since we\u2019re still in local development mode, let\u2019s set DEBUG to True. We could also set this to 1 and FALSE to 0 which is a choice you\u2019ll see some developers make. Update the docker-compose.yml file with a new environment variable for DEBUG. 160 https://docs.djangoproject.com/en/2.2/ref/settings/#debug Chapter 8: Environment Variables docker-compose.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 - DEBUG=1 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 volumes: - postgres_data:/var/lib/postgresql/data/ 172 volumes: postgres_data: Then update the DEBUG configuration within bookstore_project/settings.py to ref- erence the environment variable now. Note the addition of Python\u2019s built-in int161 function and a default of 0. 161 https://docs.python.org/3.7/library/functions.html#int Chapter 8: Environment Variables 173 Code bookstore_project/settings.py DEBUG = int(os.environ.get('DEBUG', default=0)) Remember to stop and start the Docker containers to load in the environment variables. Command Line $ docker-compose down $ docker-compose up -d Databases It\u2019s possible and recommended to have multiple levels of users and permissions in your PostgreSQL database. But, given this is a book on Django, covering the topic properly is well beyond our scope. However, using environment variables for such secret information is a good idea as well. Git Make sure to commit the code changes with Git. Chapter 8: Environment Variables 174 Command Line $ git status $ git add . $ git commit -m 'ch8' If any issues crop up, compare your files against the official source code on Github162. Conclusion Adding environment variables is a necessary step for any truly professional Django project. While a bit scary at first they are conceptually quite straightforward. In the next chapter we\u2019ll fully configure our email settings and add password reset functionality. 162 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch8-environment-variables","title":"24"},{"location":"24/#bookstore_projectsettingspy","text":"SECRET_KEY = os.environ.get('SECRET_KEY') It can be confusing when both an environment variable and the setting itself have the same name so to solidify the structure here, we could have called this environment variable NEW_SECRET_KEY in our docker-compose.yml file in which case the bookstore_- project/settings.py line would have been SECRET_KEY = os.environ.get('NEW_- SECRET_KEY'). However it is common to have the environment variable name match that of the setting it replaces. The final step is to stop and re-start our Docker containers since they are designed to be stateless so when the state has changed\u2013and environment variables are part of the 158 https://docs.python.org/3.7/library/os.html 159 https://docs.python.org/3.7/library/os.html#os.environ Chapter 8: Environment Variables 171 state!\u2013we need to quickly reload the containers to incorporate any new environment variables that have been set. Command Line $ docker-compose down $ docker-compose up -d All set. You should be able to navigate to the webpage again, refresh it, and everything still works as before. If the environment variable hadn\u2019t loaded you\u2019d see an error since a SECRET_KEY is required for any Django project. If that\u2019s the case run docker-compose logs from the command line to diagnose the issue. DEBUG Next up is DEBUG160 which is a boolean setting. By default Django sets this to True to help with debugging in local development, however, when it comes time to deploy a website in production this should be set to False. In Chapter 17: Security we will learn how to create a docker-compose-prod.yml file with production-only configurations that sets this to False. Since we\u2019re using variables our bookstore_project/settings.py file can remain the same and we only need to change the docker compose reference. But for now, since we\u2019re still in local development mode, let\u2019s set DEBUG to True. We could also set this to 1 and FALSE to 0 which is a choice you\u2019ll see some developers make. Update the docker-compose.yml file with a new environment variable for DEBUG. 160 https://docs.djangoproject.com/en/2.2/ref/settings/#debug Chapter 8: Environment Variables docker-compose.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 - DEBUG=1 volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 volumes: - postgres_data:/var/lib/postgresql/data/ 172 volumes: postgres_data: Then update the DEBUG configuration within bookstore_project/settings.py to ref- erence the environment variable now. Note the addition of Python\u2019s built-in int161 function and a default of 0. 161 https://docs.python.org/3.7/library/functions.html#int Chapter 8: Environment Variables 173 Code","title":"bookstore_project/settings.py"},{"location":"24/#bookstore_projectsettingspy_1","text":"DEBUG = int(os.environ.get('DEBUG', default=0)) Remember to stop and start the Docker containers to load in the environment variables. Command Line $ docker-compose down $ docker-compose up -d Databases It\u2019s possible and recommended to have multiple levels of users and permissions in your PostgreSQL database. But, given this is a book on Django, covering the topic properly is well beyond our scope. However, using environment variables for such secret information is a good idea as well. Git Make sure to commit the code changes with Git. Chapter 8: Environment Variables 174 Command Line $ git status $ git add . $ git commit -m 'ch8' If any issues crop up, compare your files against the official source code on Github162. Conclusion Adding environment variables is a necessary step for any truly professional Django project. While a bit scary at first they are conceptually quite straightforward. In the next chapter we\u2019ll fully configure our email settings and add password reset functionality. 162 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch8-environment-variables","title":"bookstore_project/settings.py"},{"location":"25/","text":"Chapter 9: Email In this chapter we will fully configure email and add password change and password reset functionality. Currently emails are not actually sent to users. They are simply outputted to our command line console. We\u2019ll change that by signing up for a third- party email service, obtaining API keys, and updating our settings.py file. Django takes care of the rest. So far all of our work\u2013custom user model, pages app, static assets, authentication with django-allauth, and environment variables\u2013could apply to almost any new project. After this chapter we will start building out the Bookstore site itself as opposed to foundational steps. Custom Confirmation Emails Let\u2019s sign up for a new user account to review the current user registration flow. Then we\u2019ll customize it. Make sure you are logged out and then navigate to the Sign Up page. I\u2019ve chosen to use testuser3@email.com and testpass123 as the password. Chapter 9: Email 176 testuser3 Sign Up Upon submission we are redirected to the homepage with a custom greeting and an email is sent to us within the command line console. You can see this by checking the logs with docker-compose logs. To customize this email we first need to find the existing templates. Navigate over to the django-allauth source code on Github163 and perform a search with a portion of the generated text. That leads to the discovery that there are in fact two files used: one for the subject line, email_confirmation_subject.txt, and one for the email body called email_confirmation_message.txt. To update both we\u2019ll override them by recreating the same structure of django-allauth which means making our own email directory within templates/account and then adding our own versions of the files there. 163 https://github.com/pennersr/django-allauth Chapter 9: Email Command Line $ mkdir templates/account/email $ touch templates/account/email/email_confirmation_subject.txt $ touch templates/account/email/email_confirmation_message.txt 177 Let\u2019s start with the subject line since it\u2019s the shorter of the two. Here is the default text from django-allauth. email_confirmation_subject.txt {% load i18n %} {% autoescape off %} {% blocktrans %}Please Confirm Your E-mail Address{% endblocktrans %} {% endautoescape %} The first line, {% load i18n %}, is to support Django\u2019s internationalization164 function- ality, the ability to support multiple languages. Then comes the Django template tag for autoescape165 . By default it is \u201con\u201d and protects against security issues like cross site scripting. But since we can trust the content of the text here, it is turned off. Finally we come to our text itself which is wrapped in blocktrans166 template tags to support translations. Let\u2019s change the text to demonstrate that we can. 164 https://docs.djangoproject.com/en/2.2/topics/i18n/ 165 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#autoescape 166 https://docs.djangoproject.com/en/2.2/topics/i18n/translation/#std:templatetag-blocktrans Chapter 9: Email 178 email_confirmation_subject.txt {% load i18n %} {% autoescape off %} {% blocktrans %}Confirm Your Sign Up{% endblocktrans %} {% endautoescape %} Now turn to the email confirmation message itself. Here is the current default167: email_confirmation_message.txt {% load account %}{% user_display user as user_display %}{% load i18n %} {% autoescape off %}{% blocktrans with site_name=current_site.name\\ site_domain=current_site.domain %}Hello from {{ site_name }}! You're receiving this e-mail because user {{ user_display }} has given yours\\ as an e-mail address to connect their account. To confirm this is correct, go to {{ activate_url }} {% endblocktrans %}{% endautoescape %} {% blocktrans with site_name=current_site.name site_domain=current_site.\\ domain %}Thank you from {{ site_name }}! {{ site_domain }}{% endblocktrans %} You probably noticed that the default email sent referred to our site as example.com which is displayed here as {{ site_name }}. Where does that come from? The answer is the sites section of the Django admin, which is used by django-allauth. So head to the admin at http://127.0.0.1:8000/admin/168 and click on the Sites link on the homepage. 167 https://github.com/pennersr/django-allauth/blob/41f84f5530b75431cfd4cf2b89cd805ced009e7d/allauth/ templates/account/email/email_confirmation_message.txt 168 http://127.0.0.1:8000/admin/ Chapter 9: Email 179 Admin Sites There is a \u201cDomain Name\u201d and a \u201cDisplay Name\u201d here. Click on example.com under \u201cDomain Name\u201d so we can edit it. Admin Change Site The Domain Name169 is the full domain name for a site, for example it might be djangobookstore.com, while the Display Name170 is a human-readable name for the 169 https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#django.contrib.sites.models.Site.domain 170 https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#django.contrib.sites.models.Site.name Chapter 9: Email 180 site such as Django Bookstore. Make these updates and click the \u201cSave\u201d button in the lower right corner when done. Admin Sites - DjangoBookstore.com Ok, back to our email. Let\u2019s customize it a bit by changing the greeting from \u201cHello\u201d to \u201cHi\u201d. Note that backslashes \\ are included for formatting but are not necessary in the raw code. In other words, you can remove them from the code below\u2013and other code examples\u2013as needed. email_confirmation_message.txt {% load account %}{% user_display user as user_display %}{% load i18n %}\\ {% autoescape off %}{% blocktrans with site_name=current_site.name site_domain=current_site.domain %}Hi from {{ site_name }}! You're receiving this e-mail because user {{ user_display }} has given yours as an e-mail address to connect their account. To confirm this is correct, go to {{ activate_url }} {% endblocktrans %}{% endautoescape %} {% blocktrans with site_name=current_site.name site_domain=current_site\\ Chapter 9: Email .domain %}Thank you from {{ site_name }}! {{ site_domain }}{% endblocktrans %} 181 One final item to change. Did you notice the email was from webmaster@localhost? That\u2019s a default setting we can also update via DEFAULT_FROM_EMAIL171. Let\u2019s do that now by adding the following line at the bottom of the bookstore_project/settings.py file. Code bookstore_project/settings.py DEFAULT_FROM_EMAIL = 'admin@djangobookstore.com' Make sure you are logged out of the site and go to the Sign Up page again to create a new user. I\u2019ve used testuser4@email.com for convenience. After being redirected to the homepage check the command line to see the message by typing docker-compose logs. Command Line ... web_1 | Content-Transfer-Encoding: 7bit web_1 | Subject: [Django Bookstore] Confirm Your Sign Up web_1 | From: admin@djangobookstore.com web_1 | To: testuser4@email.com web_1 | Date: Sat, 13 Jul 2019 18:34:50 -0000 web_1 | Message-ID: 156312929025.27.2332096239397833769@87d045aff8f7 web_1 | web_1 | Hi from Django Bookstore! web_1 | web_1 | You're receiving this e-mail because user testuser4 has given yours\\ 171 https://docs.djangoproject.com/en/2.2/ref/settings/#default-from-email Chapter 9: Email 182 as an e-mail address to connect their account. web_1 | web_1 | To confirm this is correct, go to http://127.0.0.1:8000/accounts/\\ confirm-email/NA:1hmjKk:6MiDB5XoLW3HAhePuZ5WucR0Fiw/ web_1 | web_1 | Thank you from Django Bookstore! web_1 | djangobookstore.com And there it is with the new From setting, the new message, and the new domain djangobookstore.com that sent the email. Email Confirmation Page Click on the unique URL link in the email which redirects to the email confirm page. Confirm Email Page Not very attractive. Let\u2019s update it to match the look of the rest of our site. Searching again in the django-allauth source code on Github172 reveals the name and location of this file is templates/account/email_confirm.html. So let\u2019s create our own template. 172 https://github.com/pennersr/django-allauth Chapter 9: Email Command Line $ touch templates/account/email_confirm.html And then update it to extend _base.html and use Bootstrap for the button. Code {% extends '_base.html' %} {% load i18n %} {% load account %} {% block head_title %}{% trans \"Confirm E-mail Address\" %}{% endblock %} 183 {% block content %} {% trans \"Confirm E-mail Address\" %} {% if confirmation %} {% user_display confirmation.email_address.user as user_display %} {% blocktrans with confirmation.email_address.email as email %}Please confirm that {{ email }} is an e-mail address for user {{ user_display }}.{% endblocktrans %} {% csrf_token %} {% trans 'Confirm' %} Chapter 9: Email 184 {% else %} {% url 'account_email' as email_url %} {% blocktrans %}This e-mail confirmation link expired or is invalid. Please issue a new e-mail confirmation request . {% endblocktrans %} {% endif %} {% endblock %} Refresh the page to see our update. Confirm Email Page Updated Chapter 9: Email 185 Password Reset and Password Change Django and django-allauth also come with support for additional user account features such as the ability to reset a forgotten password and change your existing password if already logged in. The locations of the default password reset and password change pages are as follows: \u2022 http://127.0.0.1:8000/accounts/password/reset/173 \u2022 http://127.0.0.1:8000/accounts/password/change/174 If you go through the flow of each you can find the corresponding templates and email messages in the django-allauth source code. Email Service The emails we have configured so far are generally referred to as \u201cTransactional Emails\u201d as they occur based on a user action of some kind. This is in contrast to \u201cMarketing Emails\u201d such as, say, a monthly newsletter. There are many transactional email providers available including SendGrid, MailGun, Amazon\u2019s Simple Email Service. Django is agnostic about which provider is used; the steps are similar for all and many have a free tier available. After signing up for an account with your email service of choice you\u2019ll often have a choice between using SMTP175 or a Web API. SMTP is easier to configure, but a web API is more configurable and robust. Start with SMTP and work your way from there: email configurations can be quite complex in their own right. 173 http://127.0.0.1:8000/accounts/password/reset/ 174 http://127.0.0.1:8000/accounts/password/change/ 175 https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol Chapter 9: Email 186 After obtaining a username and password with an email provider, a few settings tweaks will allow Django to use them to send emails. The first step would be to update the EMAIL_BACKEND config which should be near the bottom of the bookstore_project/settings.py file since we previously updated it. Code bookstore_project/settings.py EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # new And then to configure EMAIL_HOST, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, EMAIL_PORT, and EMAIL_USE_TLS based on the instructions from your email provider as environment variables. In the official source code the EMAIL_BACKEND will remain console, but the previous steps are how to add an email service. If you find yourself frustrated properly configuring email, well, you\u2019re not alone! Django does at least make it far, far easier than implementing without the benefits of a batteries-included framework. Implementing email in Django with Git To commit this chapter\u2019s code updates make sure to check the status of changes, add them all, and include a commit message. Chapter 9: Email 187 Command Line $ git status $ git add . $ git commit -m 'ch9' If you have any issues compare your code against the official source code on Github176. Conclusion Configuring email properly is largely a one-time pain. But it is a necessary part of any production website. This concludes the foundational chapters for our Bookstore project. In the next chapter we\u2019ll finally start building out the Bookstore itself. 176 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch9-email","title":"25"},{"location":"25/#bookstore_projectsettingspy","text":"DEFAULT_FROM_EMAIL = 'admin@djangobookstore.com' Make sure you are logged out of the site and go to the Sign Up page again to create a new user. I\u2019ve used testuser4@email.com for convenience. After being redirected to the homepage check the command line to see the message by typing docker-compose logs. Command Line ... web_1 | Content-Transfer-Encoding: 7bit web_1 | Subject: [Django Bookstore] Confirm Your Sign Up web_1 | From: admin@djangobookstore.com web_1 | To: testuser4@email.com web_1 | Date: Sat, 13 Jul 2019 18:34:50 -0000 web_1 | Message-ID: 156312929025.27.2332096239397833769@87d045aff8f7 web_1 | web_1 | Hi from Django Bookstore! web_1 | web_1 | You're receiving this e-mail because user testuser4 has given yours\\ 171 https://docs.djangoproject.com/en/2.2/ref/settings/#default-from-email Chapter 9: Email 182 as an e-mail address to connect their account. web_1 | web_1 | To confirm this is correct, go to http://127.0.0.1:8000/accounts/\\ confirm-email/NA:1hmjKk:6MiDB5XoLW3HAhePuZ5WucR0Fiw/ web_1 | web_1 | Thank you from Django Bookstore! web_1 | djangobookstore.com And there it is with the new From setting, the new message, and the new domain djangobookstore.com that sent the email. Email Confirmation Page Click on the unique URL link in the email which redirects to the email confirm page. Confirm Email Page Not very attractive. Let\u2019s update it to match the look of the rest of our site. Searching again in the django-allauth source code on Github172 reveals the name and location of this file is templates/account/email_confirm.html. So let\u2019s create our own template. 172 https://github.com/pennersr/django-allauth Chapter 9: Email Command Line $ touch templates/account/email_confirm.html And then update it to extend _base.html and use Bootstrap for the button. Code {% extends '_base.html' %} {% load i18n %} {% load account %} {% block head_title %}{% trans \"Confirm E-mail Address\" %}{% endblock %} 183 {% block content %}","title":"bookstore_project/settings.py"},{"location":"25/#bookstore_projectsettingspy_1","text":"EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # new And then to configure EMAIL_HOST, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, EMAIL_PORT, and EMAIL_USE_TLS based on the instructions from your email provider as environment variables. In the official source code the EMAIL_BACKEND will remain console, but the previous steps are how to add an email service. If you find yourself frustrated properly configuring email, well, you\u2019re not alone! Django does at least make it far, far easier than implementing without the benefits of a batteries-included framework. Implementing email in Django with Git To commit this chapter\u2019s code updates make sure to check the status of changes, add them all, and include a commit message. Chapter 9: Email 187 Command Line $ git status $ git add . $ git commit -m 'ch9' If you have any issues compare your code against the official source code on Github176. Conclusion Configuring email properly is largely a one-time pain. But it is a necessary part of any production website. This concludes the foundational chapters for our Bookstore project. In the next chapter we\u2019ll finally start building out the Bookstore itself. 176 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch9-email","title":"bookstore_project/settings.py"},{"location":"26/","text":"Chapter 10: Books App In this chapter we will build a Books app for our project that displays all available books and has an individual page for each. We\u2019ll also explore different URL approaches starting with using an id, then switching to a slug, and finally using a UUID. To start we must create this new app which we\u2019ll call books. Command Line $ docker-compose exec web python manage.py startapp books And to ensure Django knows about our new app, open your text editor and add the new app to INSTALLED_APPS in our settings.py file: Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites', Third-party 'allauth', 'allauth.account', Chapter 10: Books App 'crispy_forms', Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', 'books.apps.BooksConfig', # new ] Ok, initial creation complete! 189 Models Ultimately we\u2019ll need a model, view, url, and template for each page so it\u2019s common to debate where start. The model is a good place to start as it sets the structure. Let\u2019s think about what fields we might want to include. To keep things simple we\u2019ll start with a title, author, and price. Update the books/models.py file to include our new Books model. Code books/models.py from django.db import models class Book(models.Model): title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) Chapter 10: Books App 190 def str (self): return self.title At the top we\u2019re importing the Django class models and then creating a Book model that subclasses it which means we automatically have access to everything within django.db.models.Models177 and can add additional fields and methods as desired. For title and author we\u2019re limiting the length to 200 characters and for price using a DecimalField178 which is a good choice when dealing with currency. Below we\u2019ve specified a str method to control how the object is outputted in the Admin and Django shell. Now that our new database model is created we need to create a new migration record for it. Command Line $ docker-compose exec web python manage.py makemigrations books Migrations for 'books': books/migrations/0001_initial.py - Create model Book And then apply the migration to our database. Command Line $ docker-compose exec web python manage.py migrate books Adding the name of the app books to each command is optional but a good habit as it keeps both the migrations file and the migrate command focused on just that app. If we\u2019d left the app name off then all changes would be included in the migrations file and database migrate which can be harder to debug later on. 177 https://docs.djangoproject.com/en/2.2/topics/db/models/ 178 https://docs.djangoproject.com/en/2.2/ref/models/fields/#decimalfield Chapter 10: Books App Our database is configured. Let\u2019s add some data to the admin. 191 Admin We need a way to access our data for which the Django admin is perfectly suited. Don\u2019t forget to update the books/admin.py file or else the app won\u2019t appear! I forget this step almost every time even after using Django for years. Code books/admin.py from django.contrib import admin from .models import Book admin.site.register(Book) If you look into the admin at http://127.0.0.1:8000/admin/179 the Books app is now there. 179 http://127.0.0.1:8000/admin/ Chapter 10: Books App 192 Admin Homepage Let\u2019s add a book entry for Django for Professionals. Click on the + Add button next to Books to create a new entry. The title is \u201cDjango for Professionals\u201d, the author is \u201cWilliam S. Vincent\u201d, and the price is $39.00. There\u2019s no need to include the dollar sign $ in the amount as we\u2019ll add that in our eventual template. Chapter 10: Books App 193 Admin - Django for Professionals book After clicking on the \u201cSave\u201d button we\u2019re redirected to the main Books page which only shows the title. Admin Books Page Let\u2019s update the books/admin.py file to specify which fields we also want displayed. Chapter 10: Books App Code books/admin.py from django.contrib import admin from .models import Book class BookAdmin(admin.ModelAdmin): list_display = (\"title\", \"author\", \"price\",) admin.site.register(Book, BookAdmin) Then refresh the page. 194 Admin Books List Page Now that our database model is complete we need to create the necessary views, URLs, and templates so we can display the information on our web application. Where to start is always a question and a confusing one at that for developers. Personally I often start with the URLs, then the Views, and the Templates. Chapter 10: Books App 195 URLs We need to update two urls.py files. The first is bookstore_project/urls.py to notify it of the proper path for our new books app. Code bookstore_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('admin/', admin.site.urls), User management path('accounts/', include('allauth.urls')), Local apps path('', include('pages.urls')), path('books/', include('books.urls')), # new ] Now create our books app URLs paths. We must create this file first. Command Line $ touch books/urls.py We\u2019ll use empty string '' so combined with the fact that all books app URLs will start at books/ that will also be the route for our main list view of each book. The view it references, BookListView, has yet to be created. Chapter 10: Books App Code books/urls.py from django.urls import path from .views import BookListView urlpatterns = [ path('', BookListView.as_view(), name='book_list'), ] 196 Views Moving on time for that BookListView we just referenced in our URLs file. This will rely on the built-in ListView180, a Generic Class-Based View provided for common use cases like this. All we must do is specify the proper model and template to be used. 180 https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-display/#django.views.generic.list. ListView Chapter 10: Books App Code books/views.py from django.views.generic import ListView from .models import Book 197 class BookListView(ListView): model = Book template_name = 'books/book_list.html' Note the template book_list.html does not exist yet. Templates It is optional to create an app specific folder within templates but it can help especially as number grows in size so we\u2019ll create one called books. Command Line $ mkdir templates/books/ $ touch templates/books/book_list.html Chapter 10: Books App Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} 198 {% block content %} {% for book in object_list %} {{ book.title }} {% endfor %} {% endblock content %} At the top we note that this template extends _base.html and then wraps our desired code with content blocks. We use the Django Templating Language to set up a simple for loop for each book. Note that object_list comes from ListView and contains all the objects in our view. The final step is to spin up and then down our containers to reload the Django settings.py file. Otherwise it won\u2019t realize we\u2019ve made a change and so there will be an error page and in the logs a message about \u201cModuleNotFoundError: No module named \u2018books.urls\u2019\u201d. Spin down and then up again our containers. Chapter 10: Books App Command Line $ docker-compose down $ docker-compose up -d If you go to http://127.0.0.1:8000/books/181 now the books page will work. 199 Books Page object_list ListView relies on object_list, as we just saw, but this is far from descriptive. A better approach is to rename it to a friendlier182 name using context_object_name. Update books/views.py as follows. 181 http://127.0.0.1:8000/books/ 182 https://docs.djangoproject.com/en/2.2/topics/class-based-views/generic-display/#making-friendly- template-contexts Chapter 10: Books App Code books/views.py from django.views.generic import ListView, DetailView from .models import Book 200 class BookListView(ListView): model = Book context_object_name = 'book_list' # new template_name = 'books/book_list.html' And then swap out object_list in our template for book_list. Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} {% block content %} {% for book in book_list %} {{ object.title }} {% endfor %} {% endblock content %} Refresh the page and it will still work as before! This technique is especially helpful Chapter 10: Books App 201 on larger projects where multiple developers are working on a project. It\u2019s hard for a front-end engineer to guess correctly what object_list means! To prove the list view works for multiple items add two more books to the site via the admin. I\u2019ve added my two other Django books\u2013Django for Beginners and Django for APIs\u2013which both have \u201cWilliam S. Vincent\u201d as the author and \u201c39.00\u201d as the price. Three Books Individual Book Page Now we can add individual pages for each book by using another Generic Class-Based View called DetailView183 . Our process is similar to the Books page and starts with the URL importing BookDetailView on the second line and then setting the path to be the primary key of each book which will be represented as an integer . 183 https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-display/#detailview Chapter 10: Books App Code books/urls.py from django.urls import path from .views import BookListView, BookDetailView # new 202 urlpatterns = [ path('', BookListView.as_view(), name='book_list'), path(' ', BookDetailView.as_view(), name='book_detail'), # new ] Django automatically adds an auto-incrementing primary key184 to our database models. So while we only declared the fields title, author, and body on our Book model, under-the-hood Django also added another field called id, which is our primary key. We can access it as either id or pk. The pk for our first book is 1. For the second one it will 2. And so on. Therefore when we go to the individual entry page for our first book, we can expect that its URL route will be books/1. Now on to the books/views.py file where we\u2019ll import DetailView and create a BookDetailView class that also specifies model and template_name fields. 184 https://docs.djangoproject.com/en/2.2/topics/db/models/#automatic-primary-key-fields Chapter 10: Books App Code books/views.py from django.views.generic import ListView, DetailView # new from .models import Book 203 class BookListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' class BookDetailView(DetailView): # new model = Book template_name = 'books/book_detail.html' And finally the template which we must first create. Command Line $ touch templates/books/book_detail.html Then have it display all the current fields. We can also showcase the title in the title tags so that it appears in the web browser tab. Chapter 10: Books App 204 Code {% extends ' base.html' %} {% block title %}{{ object.title }}{% endblock title %} {% block content %} {{ object.title }} Author: {{ object.author }} Price: {{ object.price }} {% endblock content %} If you navigate now to http://127.0.0.1:8000/books/1/185 you\u2019ll see a dedicated page for our first book. 185 http://127.0.0.1:8000/books/1/ Book Detail Page Chapter 10: Books App 205 context_object_name Just as ListView defaults to object_list which we updated to be more specific, so too DetailView defaults to object which we can make more descriptive using context - object_name. We\u2019ll set it to book. Code books/views.py ... class BookDetailView(DetailView): model = Book context_object_name = 'book' # new template_name = 'books/book_detail.html' Don\u2019t forget to update our template too with this change, swapping out object for book for our three fields. Code {% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} {% block content %} {{ book.title }} Author: {{ book.author }} Price: {{ book.price }} {% endblock content %} Chapter 10: Books App 206 As a final step update the URL link on the book list page to point to individual page. With the url template tag186 we can point to book_detail \u2013 the URL name set in books/urls.py \u2013 and then pass in the pk. Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} {% block content %} {% for book in book_list %} {{ book.title }} {% endfor %} {% endblock content %} Refresh the book list page at http://127.0.0.1:8000/books/187 and links are now all clickable and direct to the correct individual book page. get_absolute_url One additional step we haven\u2019t made yet, but should is to add a get_absolute_url()188 method which sets a canonical URL for the model. It is also required when using the 186 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#url 187 http://127.0.0.1:8000/books/ 188 https://docs.djangoproject.com/en/2.2/ref/models/instances/#get-absolute-url Chapter 10: Books App 207 reverse()189 function which is commonly used. Here\u2019s how to add it to our books/models.py file. Import reverse at the top. Then add the get_absolute_url method which will be the reverse of our URL name, book_detail, and passes in the id as a string. Code books/models.py from django.db import models from django.urls import reverse # new class Book(models.Model): title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) def__str__(self): return self.title def get_absolute_url(self): # new return reverse('book_detail', args=[str(self.id)]) Then we can update the templates. Currently our a href link is using {% url 'book_- detail' book.pk %}. However we can instead use get_absolute_url directly which already has the pk passed in. 189 https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#django.urls.reverse Chapter 10: Books App Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} 208 {% block content %} {% for book in book_list %} {{ book.title }} {% endfor %} {% endblock content %} There\u2019s no need to use the url template tag either, just one canonical reference that can be changed, if needed, in the books/models.py file and will propagate throughout the project from there. This is a cleaner approach and should be used whenever you need individual pages for an object. Primary Keys vs. IDs It can be confusing whether to use a primary key (PK) or an ID in a project, especially since Django\u2019s DetailView treats them interchangeably. However there is a subtle difference. The id is a model field automatically set by Django internally to auto-increment. So the first book has an id of 1, the second entry of 2, and so on. This is also, by default, treated as the primary key pk of a model. Chapter 10: Books App 209 However it\u2019s possible to manually change what the primary key is for a model. It doesn\u2019t have to be id, but could be something like object_id depending on the use case. Additionally Python has a built-in id()190 object which can sometimes cause confusion and/or bugs. By contrast the primary key pk refers to the primary key field of a model so you\u2019re safer using pk when in doubt. And in fact in the next section we will update the id of our model! Slugs vs. UUIDs Using the pk field in the URL of our DetailView is quick and easy, but not ideal for a real-world project. The pk is currently the same as our auto-incrementing id. Among other concerns, it tells a potential hacker exactly how many records you have in your database; it tells them exactly what the id is which can be used in a potential attack; and there can be synchronization issues if you have multiple front-ends. There are two alternative approaches. The first is called a \u201cslug,\u201d a newspaper term for a short label for something that is often used in URLs. For example, in our example of \u201cDjango for Professionals\u201d its slug could be django-for-professionals. There\u2019s even a SlugField191 model field that can be used and either added when creating the title field by hand or auto-populated upon save. The main challenge with slugs is handling duplicates, though this can be solved by adding random strings or numbers to a given slug field. The synchronization issue remains though. A better approach is to use a UUID (Universally Unique IDentifier)192 which Django now supports via a dedicated UUIDField193 . 190 https://docs.python.org/3.7/library/functions.html#id 191 https://docs.djangoproject.com/en/2.2/ref/models/fields/#slugfield 192 https://docs.python.org/3/library/uuid.html?highlight=uuid#module-uuid 193 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.UUIDField Chapter 10: Books App 210 Let\u2019s implement a UUID now by adding a new field to our model and then updating the URL path. Import uuid at the top and then update the id field to actually be a UUIDField that is now the primary key. We also use uuid4 for the encryption. This allows us to use DetailView which requires either a slug or pk field; it won\u2019t work with a UUID field without significant modification. Code books/models.py import uuid # new from django.db import models from django.urls import reverse class Book(models.Model): id = models.UUIDField( # new primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) def__str__(self): return self.title def get_absolute_url(self): return reverse('book_detail', args=[str(self.id)]) Chapter 10: Books App In the URL path swap out int for uuid in the detail view. Code books/urls.py from django.urls import path from .views import BookListView, BookDetailView 211 urlpatterns = [ path('', BookListView.as_view(), name='book_list'), path(' ', BookDetailView.as_view(), name='book_detail'), # new ] But now we are faced with a problem: there are existing book entries, three in fact, with their own ids as well as related migration files that use them. Creating a new migration like this causes real problems194 . The simplest approach, which we will use, is the most destructive: to simply delete old books migrations and start over. Command Line $ docker-compose exec web rm -r books/migrations $ docker-compose down One last issue is that we are also persisting our PostgreSQL database via a volume mount that still has records to the older id fields. You can see this with the docker volume ls command. 194 https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#migrations-that-add-unique-fields Chapter 10: Books App Command Line $ docker volume ls DRIVER local VOLUME NAME books_postgres_data 212 The simplest approach is again to simply delete the volume and start over with Docker. As we\u2019re early enough in the project we\u2019ll take this route; a more mature project would require considering a more complex approach. The steps involve starting up our web and db containers; adding a new initial migration file for the books app, applying all updates with migrate, and then creating a superuser account again. Command Line $ docker volume rm books_postgres_data $ docker-compose up -d $ docker-compose exec web python manage.py makemigrations books $ docker-compose exec web python manage.py migrate $ docker-compose exec web python manage.py createsuperuser Now go into admin and add the three books again. If you then navigate to the main books page and click on an individual book you\u2019ll be taken to a new detail page with a UUID in the URL. Chapter 10: Books App 213 Django for Professionals book UUID Navbar Let\u2019s add a link to the books page in our navbar. We can use the url template tag and the URL name of the page which is book_list. Code Books About Updated NavBar Chapter 10: Books App 214 Tests We need to test our model and views now. We want to ensure that the Books model works as expected, including its str representation. And we want to test both ListView and DetailView. Here\u2019s what sample tests look like in the books/tests.py file. Code books/tests.py from django.test import Client, TestCase from django.urls import reverse from .models import Book class BookTests(TestCase): def setUp(self): self.book = Book.objects.create( title='Harry Potter', author='JK Rowling', price='25.00', ) def test_book_listing(self): self.assertEqual(f'{self.book.title}', 'Harry Potter') self.assertEqual(f'{self.book.author}', 'JK Rowling') self.assertEqual(f'{self.book.price}', '25.00') Chapter 10: Books App def test_book_list_view(self): response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_list.html') 215 def test_book_detail_view(self): response = self.client.get(self.book.get_absolute_url()) no_response = self.client.get('/books/12345/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_detail.html') We import TestCase which we\u2019ve seen before and also Client()195 which is new and used as a dummy Web browser for simulating GET and POST requests on a URL. In other words, whenever you\u2019re testing views you should use Client(). In our setUp method we add a sample book to test. test_book_listing checks that both its string representation and content are correct. Then we use test_book_list_view to confirm that our homepage returns a 200 HTTP status code, contains our body text, and uses the correct books/book_list.html template. Finally, test_book_detail_view tests that our detail page works as expected and that an incorrect page returns a 404. It\u2019s always good both to test that something does exist and that something incorrect doesn\u2019t exist in your tests. Go ahead and run these tests now. They should all pass. 195 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.Client Chapter 10: Books App Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ................. Ran 17 tests in 0.369s 216 OK Destroying test database for alias 'default'... Git We\u2019ve done a lot of work in this chapter so add it all to version control now with Git by adding new files and adding a commit message. Command Line $ git status $ git add . $ git commit -m 'ch10' The official source code for this chapter is available on Github196 for reference. Conclusion We\u2019re at the end of quite a long chapter, but the architecture of our Bookstore project is now much clearer. We\u2019ve added a books model, learned how to change the URL structure, and switched to the much more secure UUID pattern. 196 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch10-books Chapter 10: Books App 217 In the next chapter we\u2019ll learn about foreign key relationships and add a reviews option to our project.","title":"26"},{"location":"26/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites',","title":"bookstore_project/settings.py"},{"location":"26/#third-party","text":"'allauth', 'allauth.account', Chapter 10: Books App 'crispy_forms',","title":"Third-party"},{"location":"26/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig', 'books.apps.BooksConfig', # new ] Ok, initial creation complete! 189 Models Ultimately we\u2019ll need a model, view, url, and template for each page so it\u2019s common to debate where start. The model is a good place to start as it sets the structure. Let\u2019s think about what fields we might want to include. To keep things simple we\u2019ll start with a title, author, and price. Update the books/models.py file to include our new Books model. Code","title":"Local"},{"location":"26/#booksmodelspy","text":"from django.db import models class Book(models.Model): title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) Chapter 10: Books App 190 def str (self): return self.title At the top we\u2019re importing the Django class models and then creating a Book model that subclasses it which means we automatically have access to everything within django.db.models.Models177 and can add additional fields and methods as desired. For title and author we\u2019re limiting the length to 200 characters and for price using a DecimalField178 which is a good choice when dealing with currency. Below we\u2019ve specified a str method to control how the object is outputted in the Admin and Django shell. Now that our new database model is created we need to create a new migration record for it. Command Line $ docker-compose exec web python manage.py makemigrations books Migrations for 'books': books/migrations/0001_initial.py - Create model Book And then apply the migration to our database. Command Line $ docker-compose exec web python manage.py migrate books Adding the name of the app books to each command is optional but a good habit as it keeps both the migrations file and the migrate command focused on just that app. If we\u2019d left the app name off then all changes would be included in the migrations file and database migrate which can be harder to debug later on. 177 https://docs.djangoproject.com/en/2.2/topics/db/models/ 178 https://docs.djangoproject.com/en/2.2/ref/models/fields/#decimalfield Chapter 10: Books App Our database is configured. Let\u2019s add some data to the admin. 191 Admin We need a way to access our data for which the Django admin is perfectly suited. Don\u2019t forget to update the books/admin.py file or else the app won\u2019t appear! I forget this step almost every time even after using Django for years. Code","title":"books/models.py"},{"location":"26/#booksadminpy","text":"from django.contrib import admin from .models import Book admin.site.register(Book) If you look into the admin at http://127.0.0.1:8000/admin/179 the Books app is now there. 179 http://127.0.0.1:8000/admin/ Chapter 10: Books App 192 Admin Homepage Let\u2019s add a book entry for Django for Professionals. Click on the + Add button next to Books to create a new entry. The title is \u201cDjango for Professionals\u201d, the author is \u201cWilliam S. Vincent\u201d, and the price is $39.00. There\u2019s no need to include the dollar sign $ in the amount as we\u2019ll add that in our eventual template. Chapter 10: Books App 193 Admin - Django for Professionals book After clicking on the \u201cSave\u201d button we\u2019re redirected to the main Books page which only shows the title. Admin Books Page Let\u2019s update the books/admin.py file to specify which fields we also want displayed. Chapter 10: Books App Code","title":"books/admin.py"},{"location":"26/#booksadminpy_1","text":"from django.contrib import admin from .models import Book class BookAdmin(admin.ModelAdmin): list_display = (\"title\", \"author\", \"price\",) admin.site.register(Book, BookAdmin) Then refresh the page. 194 Admin Books List Page Now that our database model is complete we need to create the necessary views, URLs, and templates so we can display the information on our web application. Where to start is always a question and a confusing one at that for developers. Personally I often start with the URLs, then the Views, and the Templates. Chapter 10: Books App 195 URLs We need to update two urls.py files. The first is bookstore_project/urls.py to notify it of the proper path for our new books app. Code","title":"books/admin.py"},{"location":"26/#bookstore_projecturlspy","text":"from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"26/#django-admin","text":"path('admin/', admin.site.urls),","title":"Django admin"},{"location":"26/#user-management","text":"path('accounts/', include('allauth.urls')),","title":"User management"},{"location":"26/#local-apps","text":"path('', include('pages.urls')), path('books/', include('books.urls')), # new ] Now create our books app URLs paths. We must create this file first. Command Line $ touch books/urls.py We\u2019ll use empty string '' so combined with the fact that all books app URLs will start at books/ that will also be the route for our main list view of each book. The view it references, BookListView, has yet to be created. Chapter 10: Books App Code","title":"Local apps"},{"location":"26/#booksurlspy","text":"from django.urls import path from .views import BookListView urlpatterns = [ path('', BookListView.as_view(), name='book_list'), ] 196 Views Moving on time for that BookListView we just referenced in our URLs file. This will rely on the built-in ListView180, a Generic Class-Based View provided for common use cases like this. All we must do is specify the proper model and template to be used. 180 https://docs.djangoproject.com/en/2.2/ref/class-based-views/generic-display/#django.views.generic.list. ListView Chapter 10: Books App Code","title":"books/urls.py"},{"location":"26/#booksviewspy","text":"from django.views.generic import ListView from .models import Book 197 class BookListView(ListView): model = Book template_name = 'books/book_list.html' Note the template book_list.html does not exist yet. Templates It is optional to create an app specific folder within templates but it can help especially as number grows in size so we\u2019ll create one called books. Command Line $ mkdir templates/books/ $ touch templates/books/book_list.html Chapter 10: Books App Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} 198 {% block content %} {% for book in object_list %}","title":"books/views.py"},{"location":"26/#booksviewspy_1","text":"from django.views.generic import ListView, DetailView from .models import Book 200 class BookListView(ListView): model = Book context_object_name = 'book_list' # new template_name = 'books/book_list.html' And then swap out object_list in our template for book_list. Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} {% block content %} {% for book in book_list %}","title":"books/views.py"},{"location":"26/#booksurlspy_1","text":"from django.urls import path from .views import BookListView, BookDetailView # new 202 urlpatterns = [ path('', BookListView.as_view(), name='book_list'), path(' ', BookDetailView.as_view(), name='book_detail'), # new ] Django automatically adds an auto-incrementing primary key184 to our database models. So while we only declared the fields title, author, and body on our Book model, under-the-hood Django also added another field called id, which is our primary key. We can access it as either id or pk. The pk for our first book is 1. For the second one it will 2. And so on. Therefore when we go to the individual entry page for our first book, we can expect that its URL route will be books/1. Now on to the books/views.py file where we\u2019ll import DetailView and create a BookDetailView class that also specifies model and template_name fields. 184 https://docs.djangoproject.com/en/2.2/topics/db/models/#automatic-primary-key-fields Chapter 10: Books App Code","title":"books/urls.py"},{"location":"26/#booksviewspy_2","text":"from django.views.generic import ListView, DetailView # new from .models import Book 203 class BookListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' class BookDetailView(DetailView): # new model = Book template_name = 'books/book_detail.html' And finally the template which we must first create. Command Line $ touch templates/books/book_detail.html Then have it display all the current fields. We can also showcase the title in the title tags so that it appears in the web browser tab. Chapter 10: Books App 204 Code {% extends ' base.html' %} {% block title %}{{ object.title }}{% endblock title %} {% block content %}","title":"books/views.py"},{"location":"26/#booksviewspy_3","text":"... class BookDetailView(DetailView): model = Book context_object_name = 'book' # new template_name = 'books/book_detail.html' Don\u2019t forget to update our template too with this change, swapping out object for book for our three fields. Code {% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} {% block content %}","title":"books/views.py"},{"location":"26/#booksmodelspy_1","text":"from django.db import models from django.urls import reverse # new class Book(models.Model): title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) def__str__(self): return self.title def get_absolute_url(self): # new return reverse('book_detail', args=[str(self.id)]) Then we can update the templates. Currently our a href link is using {% url 'book_- detail' book.pk %}. However we can instead use get_absolute_url directly which already has the pk passed in. 189 https://docs.djangoproject.com/en/2.2/ref/urlresolvers/#django.urls.reverse Chapter 10: Books App Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} 208 {% block content %} {% for book in book_list %}","title":"books/models.py"},{"location":"26/#booksmodelspy_2","text":"import uuid # new from django.db import models from django.urls import reverse class Book(models.Model): id = models.UUIDField( # new primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) def__str__(self): return self.title def get_absolute_url(self): return reverse('book_detail', args=[str(self.id)]) Chapter 10: Books App In the URL path swap out int for uuid in the detail view. Code","title":"books/models.py"},{"location":"26/#booksurlspy_2","text":"from django.urls import path from .views import BookListView, BookDetailView 211 urlpatterns = [ path('', BookListView.as_view(), name='book_list'), path(' ', BookDetailView.as_view(), name='book_detail'), # new ] But now we are faced with a problem: there are existing book entries, three in fact, with their own ids as well as related migration files that use them. Creating a new migration like this causes real problems194 . The simplest approach, which we will use, is the most destructive: to simply delete old books migrations and start over. Command Line $ docker-compose exec web rm -r books/migrations $ docker-compose down One last issue is that we are also persisting our PostgreSQL database via a volume mount that still has records to the older id fields. You can see this with the docker volume ls command. 194 https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#migrations-that-add-unique-fields Chapter 10: Books App Command Line $ docker volume ls DRIVER local VOLUME NAME books_postgres_data 212 The simplest approach is again to simply delete the volume and start over with Docker. As we\u2019re early enough in the project we\u2019ll take this route; a more mature project would require considering a more complex approach. The steps involve starting up our web and db containers; adding a new initial migration file for the books app, applying all updates with migrate, and then creating a superuser account again. Command Line $ docker volume rm books_postgres_data $ docker-compose up -d $ docker-compose exec web python manage.py makemigrations books $ docker-compose exec web python manage.py migrate $ docker-compose exec web python manage.py createsuperuser Now go into admin and add the three books again. If you then navigate to the main books page and click on an individual book you\u2019ll be taken to a new detail page with a UUID in the URL. Chapter 10: Books App 213 Django for Professionals book UUID Navbar Let\u2019s add a link to the books page in our navbar. We can use the url template tag and the URL name of the page which is book_list. Code Books About Updated NavBar Chapter 10: Books App 214 Tests We need to test our model and views now. We want to ensure that the Books model works as expected, including its str representation. And we want to test both ListView and DetailView. Here\u2019s what sample tests look like in the books/tests.py file. Code","title":"books/urls.py"},{"location":"26/#bookstestspy","text":"from django.test import Client, TestCase from django.urls import reverse from .models import Book class BookTests(TestCase): def setUp(self): self.book = Book.objects.create( title='Harry Potter', author='JK Rowling', price='25.00', ) def test_book_listing(self): self.assertEqual(f'{self.book.title}', 'Harry Potter') self.assertEqual(f'{self.book.author}', 'JK Rowling') self.assertEqual(f'{self.book.price}', '25.00') Chapter 10: Books App def test_book_list_view(self): response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_list.html') 215 def test_book_detail_view(self): response = self.client.get(self.book.get_absolute_url()) no_response = self.client.get('/books/12345/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_detail.html') We import TestCase which we\u2019ve seen before and also Client()195 which is new and used as a dummy Web browser for simulating GET and POST requests on a URL. In other words, whenever you\u2019re testing views you should use Client(). In our setUp method we add a sample book to test. test_book_listing checks that both its string representation and content are correct. Then we use test_book_list_view to confirm that our homepage returns a 200 HTTP status code, contains our body text, and uses the correct books/book_list.html template. Finally, test_book_detail_view tests that our detail page works as expected and that an incorrect page returns a 404. It\u2019s always good both to test that something does exist and that something incorrect doesn\u2019t exist in your tests. Go ahead and run these tests now. They should all pass. 195 https://docs.djangoproject.com/en/2.2/topics/testing/tools/#django.test.Client Chapter 10: Books App Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ................. Ran 17 tests in 0.369s 216 OK Destroying test database for alias 'default'... Git We\u2019ve done a lot of work in this chapter so add it all to version control now with Git by adding new files and adding a commit message. Command Line $ git status $ git add . $ git commit -m 'ch10' The official source code for this chapter is available on Github196 for reference. Conclusion We\u2019re at the end of quite a long chapter, but the architecture of our Bookstore project is now much clearer. We\u2019ve added a books model, learned how to change the URL structure, and switched to the much more secure UUID pattern. 196 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch10-books Chapter 10: Books App 217 In the next chapter we\u2019ll learn about foreign key relationships and add a reviews option to our project.","title":"books/tests.py"},{"location":"27/","text":"Chapter 11: Reviews App In this chapter we\u2019ll add a reviews app so that readers can leave reviews of their favorite books. It gives us a chance to discuss foreign keys, app structure, and dive into forms. Foreign Keys We\u2019ve already used a foreign key with our user model, but didn\u2019t have to think about it. Now we do! Fundamentally a database table can be thought of as similar to a spreadsheet with rows and columns. There needs to be a primary key field that is unique and refers to each record. In the last chapter we changed that from id to a UUID, but one still exists! This matters when we want to link two tables together. For example, our Books model will link to a Reviews model since each review has to be connected to a relevant book. This implies a foreign key relationship. There are three possible types of foreign key relationships: \u2022 One-to-one197 \u2022 One-to-many198 \u2022 Many-to-many199 197 https://docs.djangoproject.com/en/2.2/ref/models/fields/#onetoonefield 198 https://docs.djangoproject.com/en/2.2/ref/models/fields/#foreignkey 199 https://docs.djangoproject.com/en/2.2/ref/models/fields/#manytomanyfield Chapter 11: Reviews App 219 A one-to-one relationship is the simplest kind. An example would be a table of people\u2019s names and a table of social security numbers. Each person has only one social security number and each social security number is linked to only one person. In practice one-to-one relationships are rare. It\u2019s unusual for both sides of a relation- ship to only be matched to one counterpart. Some other examples though would be country-flag or person-passport. A one-to-many relationship is far more common and is the default foreign key200 setting within Django. For example, one student can sign up for many classes. Or an employee has one job title, maybe \u201cSoftware Engineer,\u201d but there can be many software engineers within a given company. It\u2019s also possible to have a ManyToManyField201 relationship. Let\u2019s consider a list of books and a list of authors: each book could have more than one author and each author can write more than one book. That\u2019s a many-to-many relationship. Just as with the previous two examples you need a linked Foreign Key field to connect the two lists. Additional examples include doctors and patients (every doctor sees multiple patients and vice versa) or employees and tasks (each employee has multiple tasks while each task is worked on by multiple employees). Database design is a fascinating, deep topic that is both an art and a science. As the number of tables grow in a project over time it is almost inevitable that a refactoring will need to occur to address issues around inefficiency, bloat, and outright errors. Normalization202 is the process of structuring a relational database though far beyond the scope of this book. 200 ForeignKey 201 https://docs.djangoproject.com/en/2.2/ref/models/fields/#manytomanyfield 202 https://en.wikipedia.org/wiki/Database_normalization Chapter 11: Reviews App 220 Reviews model Coming back to our basic reviews app, the first consideration is what type of foreign key relationship will there be. If we are going to link a user to a review, then it is a straightforward one-to-many relationship. However it could also be possible to link books to reviews which would be many-to-many. The \u201ccorrect\u201d choice quickly becomes somewhat subjective and certainly dependent upon the particular needs of the project. In this project we\u2019ll treat the reviews app as a one-to-many between authors and reviews as it\u2019s the simpler approach. Here again we face a choice around how to design our project. Do we add the Reviews model within our existing books/models.py file or create a dedicated reviews app that we then link to? Let\u2019s start by adding a Reviews model to the books app. Code books/models.py import uuid from django.contrib.auth import get_user_model # new from django.db import models from django.urls import reverse class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) Chapter 11: Reviews App author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) def str (self): return self.title def get_absolute_url(self): return reverse('book_detail', kwargs={'pk': str(self.pk)}) 221 class Review(models.Model): # new book = models.ForeignKey( Book, on_delete=models.CASCADE, related_name='reviews', ) review = models.CharField(max_length=255) author = models.ForeignKey( get_user_model(), on_delete=models.CASCADE, ) def__str__(self): return self.review At the top under imports include get_user_model which is needed to refer to our CustomUser model, then create a dedicated Review model. The book field is the one-to- many foreign key that links Book to Review and we\u2019re following the standard practice of naming it the same as the linked model. All many-to-one relationships now require Chapter 11: Reviews App 222 we specify an on_delete203 option, too. The review field contains the actual content which perhaps could be a TextField204 depending on how much space you want to provide for review length! For now, we\u2019ll force reviews to be short at 255 characters or less. And then we\u2019ll also link to the author field to auto-populate the current user with the review. For all many-to-one relationships such as a ForeignKey we must also specify an on_- delete205 option. And we\u2019re using get_user_model206 to reference our custom user model. Create a new migrations file for our changes and then run migrate to apply them. Command Line $ docker-compose exec web python manage.py makemigrations books Migrations for 'books': books/migrations/0002_review.py - Create model Review $ docker-compose exec web python manage.py migrate Admin For the reviews app to appear in the admin we need to update books/admin.py substantially by adding the Review model and specifying a display of TabularInline207 . 203 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ForeignKey.on_delete 204 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.TextField 205 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ForeignKey.on_delete 206 https://wsvincent.com/django-referencing-the-user-model/ 207 https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#django.contrib.admin.TabularInline Chapter 11: Reviews App Code books/admin.py from django.contrib import admin from .models import Book, Review class ReviewInline(admin.TabularInline): model = Review 223 class BookAdmin(admin.ModelAdmin): inlines = [ ReviewInline, ] list_display = (\"title\", \"author\", \"price\",) admin.site.register(Book, BookAdmin) Now navigate to the books section at http://127.0.0.1:8000/admin/books/book/208 and then click on any of the books to see the reviews visible on the individual book page. 208 http://127.0.0.1:8000/admin/books/book/ Chapter 11: Reviews App 224 Django for Professionals Admin Reviews We\u2019re limited to reviews by existing users at this point, although we have previously created a testuser@email.com that was deleted when we removed the database volume mount in the previous chapter. There are two options for adding this account: we could go to the main site and use the \u201cSign Up\u201d link or we can add it directly from the admin. Let\u2019s do the latter. From the Users section on the Admin homepage click on the \u201c+ Add\u201d button. Add a new user called testuser. Chapter 11: Reviews App 225 Admin testuser Then on the next page add testuser@email.com as the email address. Scroll down to the bottom of the page and click the \u201cSave\u201d button. Chapter 11: Reviews App 226 Admin testuser Ok, finally, we can add reviews to the \u201cDjango for Professionals\u201d book using testuser. Navigate back to the Books section and click on the correct book. Write two reviews and as AUTHOR make sure to select testuser. Chapter 11: Reviews App 227 Add Two Reviews Templates With the reviews model set it\u2019s time to update our templates to display reviews on the individual page for each book. Add a basic \u201cReviews\u201d section and then loop over all existing reviews. Since this is a foreign key relationship we follow it by using book.reviews.all. Then display the review field with review.review and the author with review.author. Chapter 11: Reviews App Code templates/books/book_detail.html {% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} 228 {% block content %} {{ book.title }} Author: {{ book.author }} Price: {{ book.price }} Reviews {% for review in book.reviews.all %} {{ review.review }} ({{ review.author }}) {% endfor %} {% endblock content %} That\u2019s it! Navigate over to the \u201cDjango for Professionals\u201d individual page to see the result. Your url will be different than the one here because we\u2019re using a UUID. Chapter 11: Reviews App 229 Reviews on Detail Page Tests Time for tests. We need to create a new user for our review and add a review to the setUp method in our test suite. Then we can test that the book object contains the correct review. This involves importing get_user_model as well as adding the Review model at the top. We can use create_user to make a new user called reviewuser and then a review object that is linked to our single book object. Finally under test_book_detail_view we can add an additional assertContains test to the response object. Chapter 11: Reviews App Code books/tests.py from django.contrib.auth import get_user_model # new from django.test import Client, TestCase from django.urls import reverse from .models import Book, Review # new class BookTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( # new username='reviewuser', email='reviewuser@email.com', password='testpass123' ) self.book = Book.objects.create( title='Harry Potter', author='JK Rowling', price='25.00', ) self.review = Review.objects.create( # new book = self.book, author = self.user, review = 'An excellent review', ) 230 Chapter 11: Reviews App def test_book_listing(self): self.assertEqual(f'{self.book.title}', 'Harry Potter') self.assertEqual(f'{self.book.author}', 'JK Rowling') self.assertEqual(f'{self.book.price}', '25.00') def test_book_list_view(self): response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_list.html') def test_book_detail_view(self): response = self.client.get(self.book.get_absolute_url()) no_response = self.client.get('/books/12345/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'Harry Potter') self.assertContains(response, 'An excellent review') # new self.assertTemplateUsed(response, 'books/book_detail.html') If you run the tests now they all should pass. 231 Chapter 11: Reviews App Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ................. Ran 17 tests in 0.675s 232 OK Destroying test database for alias 'default'... Git Add our new code changes to Git and include a commit message for the chapter. Command Line $ git status .... $ git add . $ git commit -m 'ch11' The code for this chapter can be found on the official Github repository209 . Conclusion With more time we might update the reviews\u2019 functionality with a form on the page itself, however this means AJAX calls using jQuery, React, Vue, or another dedicated 209 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch11-reviews Chapter 11: Reviews App 233 JavaScript framework. Unfortunately covering that fully is well beyond the scope of this book. As the project grows it might also make sense to split reviews off into its own dedicated app. Doing so is a very subjective call. In general, keeping things as simple as possible\u2013adding foreign keys within an existing app until it becomes too large to easily understand\u2013is a solid approach. In the next chapter we will add image uploads to our site so there can be covers for each book.","title":"27"},{"location":"27/#booksmodelspy","text":"import uuid from django.contrib.auth import get_user_model # new from django.db import models from django.urls import reverse class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) Chapter 11: Reviews App author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) def str (self): return self.title def get_absolute_url(self): return reverse('book_detail', kwargs={'pk': str(self.pk)}) 221 class Review(models.Model): # new book = models.ForeignKey( Book, on_delete=models.CASCADE, related_name='reviews', ) review = models.CharField(max_length=255) author = models.ForeignKey( get_user_model(), on_delete=models.CASCADE, ) def__str__(self): return self.review At the top under imports include get_user_model which is needed to refer to our CustomUser model, then create a dedicated Review model. The book field is the one-to- many foreign key that links Book to Review and we\u2019re following the standard practice of naming it the same as the linked model. All many-to-one relationships now require Chapter 11: Reviews App 222 we specify an on_delete203 option, too. The review field contains the actual content which perhaps could be a TextField204 depending on how much space you want to provide for review length! For now, we\u2019ll force reviews to be short at 255 characters or less. And then we\u2019ll also link to the author field to auto-populate the current user with the review. For all many-to-one relationships such as a ForeignKey we must also specify an on_- delete205 option. And we\u2019re using get_user_model206 to reference our custom user model. Create a new migrations file for our changes and then run migrate to apply them. Command Line $ docker-compose exec web python manage.py makemigrations books Migrations for 'books': books/migrations/0002_review.py - Create model Review $ docker-compose exec web python manage.py migrate Admin For the reviews app to appear in the admin we need to update books/admin.py substantially by adding the Review model and specifying a display of TabularInline207 . 203 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ForeignKey.on_delete 204 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.TextField 205 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ForeignKey.on_delete 206 https://wsvincent.com/django-referencing-the-user-model/ 207 https://docs.djangoproject.com/en/2.2/ref/contrib/admin/#django.contrib.admin.TabularInline Chapter 11: Reviews App Code","title":"books/models.py"},{"location":"27/#booksadminpy","text":"from django.contrib import admin from .models import Book, Review class ReviewInline(admin.TabularInline): model = Review 223 class BookAdmin(admin.ModelAdmin): inlines = [ ReviewInline, ] list_display = (\"title\", \"author\", \"price\",) admin.site.register(Book, BookAdmin) Now navigate to the books section at http://127.0.0.1:8000/admin/books/book/208 and then click on any of the books to see the reviews visible on the individual book page. 208 http://127.0.0.1:8000/admin/books/book/ Chapter 11: Reviews App 224 Django for Professionals Admin Reviews We\u2019re limited to reviews by existing users at this point, although we have previously created a testuser@email.com that was deleted when we removed the database volume mount in the previous chapter. There are two options for adding this account: we could go to the main site and use the \u201cSign Up\u201d link or we can add it directly from the admin. Let\u2019s do the latter. From the Users section on the Admin homepage click on the \u201c+ Add\u201d button. Add a new user called testuser. Chapter 11: Reviews App 225 Admin testuser Then on the next page add testuser@email.com as the email address. Scroll down to the bottom of the page and click the \u201cSave\u201d button. Chapter 11: Reviews App 226 Admin testuser Ok, finally, we can add reviews to the \u201cDjango for Professionals\u201d book using testuser. Navigate back to the Books section and click on the correct book. Write two reviews and as AUTHOR make sure to select testuser. Chapter 11: Reviews App 227 Add Two Reviews Templates With the reviews model set it\u2019s time to update our templates to display reviews on the individual page for each book. Add a basic \u201cReviews\u201d section and then loop over all existing reviews. Since this is a foreign key relationship we follow it by using book.reviews.all. Then display the review field with review.review and the author with review.author. Chapter 11: Reviews App Code","title":"books/admin.py"},{"location":"27/#templatesbooksbook_detailhtml","text":"{% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} 228 {% block content %}","title":"templates/books/book_detail.html"},{"location":"27/#bookstestspy","text":"from django.contrib.auth import get_user_model # new from django.test import Client, TestCase from django.urls import reverse from .models import Book, Review # new class BookTests(TestCase): def setUp(self): self.user = get_user_model().objects.create_user( # new username='reviewuser', email='reviewuser@email.com', password='testpass123' ) self.book = Book.objects.create( title='Harry Potter', author='JK Rowling', price='25.00', ) self.review = Review.objects.create( # new book = self.book, author = self.user, review = 'An excellent review', ) 230 Chapter 11: Reviews App def test_book_listing(self): self.assertEqual(f'{self.book.title}', 'Harry Potter') self.assertEqual(f'{self.book.author}', 'JK Rowling') self.assertEqual(f'{self.book.price}', '25.00') def test_book_list_view(self): response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_list.html') def test_book_detail_view(self): response = self.client.get(self.book.get_absolute_url()) no_response = self.client.get('/books/12345/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'Harry Potter') self.assertContains(response, 'An excellent review') # new self.assertTemplateUsed(response, 'books/book_detail.html') If you run the tests now they all should pass. 231 Chapter 11: Reviews App Command Line $ docker-compose exec web python manage.py test Creating test database for alias 'default'... System check identified no issues (0 silenced). ................. Ran 17 tests in 0.675s 232 OK Destroying test database for alias 'default'... Git Add our new code changes to Git and include a commit message for the chapter. Command Line $ git status .... $ git add . $ git commit -m 'ch11' The code for this chapter can be found on the official Github repository209 . Conclusion With more time we might update the reviews\u2019 functionality with a form on the page itself, however this means AJAX calls using jQuery, React, Vue, or another dedicated 209 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch11-reviews Chapter 11: Reviews App 233 JavaScript framework. Unfortunately covering that fully is well beyond the scope of this book. As the project grows it might also make sense to split reviews off into its own dedicated app. Doing so is a very subjective call. In general, keeping things as simple as possible\u2013adding foreign keys within an existing app until it becomes too large to easily understand\u2013is a solid approach. In the next chapter we will add image uploads to our site so there can be covers for each book.","title":"books/tests.py"},{"location":"30/","text":"Chapter 12: File/Image Uploads We previously configured static assets such as images in Chapter 6, but user- uploaded files, such as book covers, are somewhat different. To start with, Django refers to the former as static whereas anything uploaded by a user, whether it be a file or an image, is referred to as media. The process for adding this feature for files or images is similar, but for images the Python image processing library Pillow210 must be installed which includes additional features such as basic validation. Let\u2019s install pillow using our by-now-familiar pattern of installing it within Docker, stopping our containers, and forcing a build of the new image. Command Line $ docker-compose exec web pipenv install pillow==6.2.1 $ docker-compose down $ docker-compose up -d --build Media Files Fundamentally the difference between static and media files is that we can trust the former, but we definitely can\u2019t trust the latter by default. There are always security concerns211 when dealing with user-uploaded content212. Notably, it\u2019s important to validate all uploaded files to ensure they are what they say they are. There are a 210 https://python-pillow.org/ 211 https://docs.djangoproject.com/en/2.2/ref/models/fields/#file-upload-security 212 https://docs.djangoproject.com/en/2.2/topics/security/#user-uploaded-content Chapter 12: File/Image Uploads 235 number of nasty ways a malicious actor can attack a website that blindly accepts user uploads. To start let\u2019s add two new configurations to the bookstore_project/settings.py file. By default MEDIA_URL and MEDIA_ROOT are empty and not displayed so we need to configure them: \u2022 MEDIA_ROOT213 is the absolute file system path to the directory for user- uploaded files \u2022 MEDIA_URL214 is the URL we can use in our templates for the files For convenience lump the static and media file configurations together so add both of these settings after STATICFILES_FINDERS near the bottom of the file. We\u2019ll use the common convention of calling both media. Don\u2019t forget to include the trailing slash / for MEDIA_URL! Code bookstore_project/settings.py MEDIA_URL = '/media/' # new MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # new Next add a new directory called media and a subdirectory called covers within it. Command Line $ mkdir media $ mkdir media/covers And finally since user-uploaded content is assumed to exist in a production context, to see media items locally we need to update bookstore_project/urls.py to show the files locally. This involves importing both settings and static at the top and then adding an additional line at the bottom. 213 https://docs.djangoproject.com/en/2.2/ref/settings/#media-root 214 https://docs.djangoproject.com/en/2.2/ref/settings/#media-url Chapter 12: File/Image Uploads Code bookstore_project/urls.py from django.conf import settings # new from django.conf.urls.static import static # new from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('admin/', admin.site.urls), 236 User management path('accounts/', include('allauth.urls')), Local apps path('', include('pages.urls')), path('books/', include('books.urls')), ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) # new Models With our generic media configuration out of the way we can now turn to our models. To store these images we\u2019ll use Django\u2019s ImageField215 which comes with some basic image processing validation included. The name of the field is cover and we specify the location of the uploaded image will be in MEDIA_ROOT/covers (the MEDIA_ROOT part is implied based on our earlier settings.py config). 215 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ImageField Chapter 12: File/Image Uploads Code books/models.py class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) cover = models.ImageField(upload_to='covers/') # new def__str__(self): return self.title def get_absolute_url(self): return reverse('book_detail', kwargs={'pk': str(self.pk)}) 237 If we wanted to allow uploads of a regular file rather than an image file the only difference could be to change ImageField to FileField. Since we\u2019ve updated the model it\u2019s time to create a migrations file. Chapter 12: File/Image Uploads 238 Command Line $ docker-compose exec web python manage.py makemigrations books You are trying to add a non-nullable field 'cover_image' to book without a default; we can't do that (the database needs something to populate existing rows). Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.py Select an option: Oops! What happened? We\u2019re adding a new database field, but we already have three entries in our database for each book. Yet we failed to set a default value for cover. To fix this type 2 to quit and we\u2019ll add a blank216 field set to True for existing images. Code bookstore_project/models.py cover = models.ImageField(upload_to='covers/', blank=True) # new It\u2019s common to see blank and nulla used together to set a default value on a field. A gotcha is that the field type \u2013 ImageField vs. CharField and so on \u2013 dictates how to use them properly so closely read the documentation for future use. ahttps://docs.djangoproject.com/en/2.2/ref/models/fields/#null Now we can create a migrations file without errors. 216 https://docs.djangoproject.com/en/2.2/ref/models/fields/#blank Chapter 12: File/Image Uploads Command Line $ docker-compose exec web python manage.py makemigrations books Migrations for 'books': books/migrations/0003_book_cover.py - Add field cover to book 239 And then apply the migration to our database. Command Line $ docker-compose exec web python manage.py migrate Operations to perform: Apply all migrations: account, admin, auth, books, contenttypes, reviews, ses sions, sites, users Running migrations: Applying books.0003_book_cover... OK Admin We\u2019re in the home stretch now! Navigate over to the admin and to the entry for the book \u201cDjango for Professionals.\u201d The cover field is visible already and we already have a copy of it locally within static/images/djangoforprofessionals.jpg so use that file for the upload and then click the \u201cSave\u201d button in bottom right. Chapter 12: File/Image Uploads 240 Admin add cover This will redirect back to the main Books section. Click on the link again for \u201cDjango for Profesionals\u201d and we can see it currently exists in our desired location of covers/. Chapter 12: File/Image Uploads 241 Admin with cover Template OK, final step. Let\u2019s update our template to display the book cover on the individual page. The route will be book.cover.url pointing to the location of the cover in our file system. Chapter 12: File/Image Uploads 242 Here\u2019s what the updated book_detail.html file looks like with this one line change above the title. Code templates/books/book_detail.html {% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} {% block content %} {{ book.title }} Author: {{ book.author }} Price: {{ book.price }} Reviews {% for review in book.reviews.all %} {{ review.review }} ({{ review.author }}) {% endfor %} {% endblock content %} If you now visit the page for \u201cDjango for Professionals\u201d you\u2019ll see the cover image proudly there! Chapter 12: File/Image Uploads 243 Cover image One potential gotcha is that our template now expects a cover to be present. If you navigate to either of the two other books, for which we have not added a cover, you\u2019ll see the following error message. Chapter 12: File/Image Uploads 244 Cover image error We must add some basic logic to our template so that if a cover is not present the template doesn\u2019t look for it! This can be done using an if statement that checks for book.cover and displays it if it exists. Code templates/books/book_detail.html {% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} {% block content %} {% if book.cover %} {% endif %} Author: {{ book.author }} Chapter 12: File/Image Uploads 245 ... If you refresh either book page now you\u2019ll see they display the correct page albeit without a cover. Next Steps There are several additional steps that might be nice to take in a project, but are beyond the scope of this book. These include adding dedicated create/edit/delete forms for the creation of books and cover image. A quite lengthy list of extra validations can and should be placed on the image-uploading form to ensure that only a normal image is added to the database. A further step would be to store media files in a dedicated CDN (Content Delivery Network) for additional security. This can also be helpful for performance on very large sites for static files, but for media files is a good idea regardless of the size. Finally tests would be nice to have here although they would be primarily focused on the form validation section, not the basic image-uploading via the admin. Again this is an area that can become quite complex, but is worthy of further study. Git Make sure to create a new Git commit for the changes in this chapter. Chapter 12: File/Image Uploads 246 Command Line $ git status $ git add . $ git commit -m 'ch12' As always you can compare your code against the official source code on Github217 . Conclusion This chapter demonstrated how to add user files to a project. In practice it is straightforward, but the additional layer of security concerns makes it an area worthy of focus at scale. In the next chapter we will add permissions to our site to lock it down. 217 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch12-file-image-uploads","title":"30"},{"location":"30/#bookstore_projectsettingspy","text":"MEDIA_URL = '/media/' # new MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # new Next add a new directory called media and a subdirectory called covers within it. Command Line $ mkdir media $ mkdir media/covers And finally since user-uploaded content is assumed to exist in a production context, to see media items locally we need to update bookstore_project/urls.py to show the files locally. This involves importing both settings and static at the top and then adding an additional line at the bottom. 213 https://docs.djangoproject.com/en/2.2/ref/settings/#media-root 214 https://docs.djangoproject.com/en/2.2/ref/settings/#media-url Chapter 12: File/Image Uploads Code","title":"bookstore_project/settings.py"},{"location":"30/#bookstore_projecturlspy","text":"from django.conf import settings # new from django.conf.urls.static import static # new from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"30/#django-admin","text":"path('admin/', admin.site.urls), 236","title":"Django admin"},{"location":"30/#user-management","text":"path('accounts/', include('allauth.urls')),","title":"User management"},{"location":"30/#local-apps","text":"path('', include('pages.urls')), path('books/', include('books.urls')), ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) # new Models With our generic media configuration out of the way we can now turn to our models. To store these images we\u2019ll use Django\u2019s ImageField215 which comes with some basic image processing validation included. The name of the field is cover and we specify the location of the uploaded image will be in MEDIA_ROOT/covers (the MEDIA_ROOT part is implied based on our earlier settings.py config). 215 https://docs.djangoproject.com/en/2.2/ref/models/fields/#django.db.models.ImageField Chapter 12: File/Image Uploads Code","title":"Local apps"},{"location":"30/#booksmodelspy","text":"class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) cover = models.ImageField(upload_to='covers/') # new def__str__(self): return self.title def get_absolute_url(self): return reverse('book_detail', kwargs={'pk': str(self.pk)}) 237 If we wanted to allow uploads of a regular file rather than an image file the only difference could be to change ImageField to FileField. Since we\u2019ve updated the model it\u2019s time to create a migrations file. Chapter 12: File/Image Uploads 238 Command Line $ docker-compose exec web python manage.py makemigrations books You are trying to add a non-nullable field 'cover_image' to book without a default; we can't do that (the database needs something to populate existing rows). Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.py Select an option: Oops! What happened? We\u2019re adding a new database field, but we already have three entries in our database for each book. Yet we failed to set a default value for cover. To fix this type 2 to quit and we\u2019ll add a blank216 field set to True for existing images. Code","title":"books/models.py"},{"location":"30/#bookstore_projectmodelspy","text":"cover = models.ImageField(upload_to='covers/', blank=True) # new It\u2019s common to see blank and nulla used together to set a default value on a field. A gotcha is that the field type \u2013 ImageField vs. CharField and so on \u2013 dictates how to use them properly so closely read the documentation for future use. ahttps://docs.djangoproject.com/en/2.2/ref/models/fields/#null Now we can create a migrations file without errors. 216 https://docs.djangoproject.com/en/2.2/ref/models/fields/#blank Chapter 12: File/Image Uploads Command Line $ docker-compose exec web python manage.py makemigrations books Migrations for 'books': books/migrations/0003_book_cover.py - Add field cover to book 239 And then apply the migration to our database. Command Line $ docker-compose exec web python manage.py migrate Operations to perform: Apply all migrations: account, admin, auth, books, contenttypes, reviews, ses sions, sites, users Running migrations: Applying books.0003_book_cover... OK Admin We\u2019re in the home stretch now! Navigate over to the admin and to the entry for the book \u201cDjango for Professionals.\u201d The cover field is visible already and we already have a copy of it locally within static/images/djangoforprofessionals.jpg so use that file for the upload and then click the \u201cSave\u201d button in bottom right. Chapter 12: File/Image Uploads 240 Admin add cover This will redirect back to the main Books section. Click on the link again for \u201cDjango for Profesionals\u201d and we can see it currently exists in our desired location of covers/. Chapter 12: File/Image Uploads 241 Admin with cover Template OK, final step. Let\u2019s update our template to display the book cover on the individual page. The route will be book.cover.url pointing to the location of the cover in our file system. Chapter 12: File/Image Uploads 242 Here\u2019s what the updated book_detail.html file looks like with this one line change above the title. Code","title":"bookstore_project/models.py"},{"location":"30/#templatesbooksbook_detailhtml","text":"{% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} {% block content %}","title":"templates/books/book_detail.html"},{"location":"30/#templatesbooksbook_detailhtml_1","text":"{% extends '_base.html' %} {% block title %}{{ book.title }}{% endblock title %} {% block content %} {% if book.cover %} {% endif %} Author: {{ book.author }} Chapter 12: File/Image Uploads 245 ... If you refresh either book page now you\u2019ll see they display the correct page albeit without a cover. Next Steps There are several additional steps that might be nice to take in a project, but are beyond the scope of this book. These include adding dedicated create/edit/delete forms for the creation of books and cover image. A quite lengthy list of extra validations can and should be placed on the image-uploading form to ensure that only a normal image is added to the database. A further step would be to store media files in a dedicated CDN (Content Delivery Network) for additional security. This can also be helpful for performance on very large sites for static files, but for media files is a good idea regardless of the size. Finally tests would be nice to have here although they would be primarily focused on the form validation section, not the basic image-uploading via the admin. Again this is an area that can become quite complex, but is worthy of further study. Git Make sure to create a new Git commit for the changes in this chapter. Chapter 12: File/Image Uploads 246 Command Line $ git status $ git add . $ git commit -m 'ch12' As always you can compare your code against the official source code on Github217 . Conclusion This chapter demonstrated how to add user files to a project. In practice it is straightforward, but the additional layer of security concerns makes it an area worthy of focus at scale. In the next chapter we will add permissions to our site to lock it down. 217 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch12-file-image-uploads","title":"templates/books/book_detail.html"},{"location":"31/","text":"Chapter 13: Permissions Currently there are no permissions set on our Bookstore project. Any user, even one not logged in, can visit any page and perform any available action. While this is fine for prototyping, implementing a robust permissions structure is a must before deploying a website to production. Django comes with built-in authorization options218 for locking down pages to either logged in users, specific groups, or users with the proper individual permission. Logged-In Users Only Confusingly there are multiple ways to add even the most basic permission: re- stricting access only to logged-in users. It can be done in a raw way219 using the login_required()220 decorator, or since we are using class-based views so far via the LoginRequired mixin221 . Let\u2019s start by limiting access to the Books pages only to logged-in users. There is a link for it in the navbar so this is not the case of a user accidentally finding a URL (which also can happen); in this case the URL is quite public. First import LoginRequiredMixin at the top and then add it before ListView since mixins are loaded from left-to-right. That way the first thing that is checked is whether the user is logged in; if they\u2019re not there\u2019s no need to load the ListView. The other part is setting a login_url for the user to be redirected to. This is the URL name for 218 https://docs.djangoproject.com/en/2.2/topics/auth/default/#permissions-and-authorization 219 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-raw-way 220 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-login-required-decorator 221 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-login-required-decorator Chapter 13: Permissions 248 log in which, since we\u2019re using django-allauth is account_login. If we were using the traditional Django authentication system then this link would be called simply login. The structure for BookDetailView is the same: add LoginRequiredMixin and a login_url route. Code books/views.py from django.contrib.auth.mixins import LoginRequiredMixin # new from django.views.generic import ListView, DetailView from .models import Book class BookListView(LoginRequiredMixin, ListView): # new model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' login_url = 'account_login' # new class BookDetailView(LoginRequiredMixin, DetailView): # new model = Book context_object_name = 'book' template_name = 'books/book_detail.html' login_url = 'account_login' # new And that\u2019s it! If you now log out of your account and click on the \u201cBooks\u201d link it will automatically redirect you to the Log In page. However if you are logged in, the Books page loads normally. Chapter 13: Permissions 249 Even if you somehow knew the UUID of a specific book page you\u2019d be redirected to Log In as well! Permissions Django comes with a basic permissions system222 that is controlled through the Django admin. To demonstrate it we need to create a new user account. Navigate back to the Admin homepage and then click on \u201c+ Add\u201d next to Users. We\u2019ll call this new user special and set a password of testpass123. Click on the \u201cSave\u201d button. Add User The second page allows us to set an \u201cEmail address\u201d to special@email.com. We\u2019re using 222 https://docs.djangoproject.com/en/2.2/topics/auth/default/#permissions-and-authorization Chapter 13: Permissions 250 django-allauth so that our log in page requires only email and the sign up page also only uses email, but since we didn\u2019t customize the admin as well it still expects a username when creating a new user this way. User Email If we had wanted to fully rip out the default user system that would mean using AbstractBaseUsera rather than AbstractUser back in Chapter 3 when we configured our custom user model. ahttps://docs.djangoproject.com/en/2.2/topics/auth/customizing/#django.contrib.auth.models. AbstractBaseUser Scrolling down further on the page to the bottom there are options to set Groups as well as User permissions. This is a long list of defaults Django provides. Chapter 13: Permissions 251 User Permissions For now we won\u2019t use them since we\u2019ll create a custom permission in the next section so just click on the \u201cSave\u201d button in the lower right corner so that our email address is updated for the user account. Chapter 13: Permissions 252 Custom Permissions Setting custom permissions223 is a much more common occurrence in a Django project. We can set them via the Meta class on our database models. For example, let\u2019s add a special status so that an author can read all books. In other words they have access to the DetailView. We could be much more specific with the permissions, restricting them per book, but this is a good first step. In the books/models.py file we\u2019ll add a Meta class and set both the permission name and a description which will be visible in the admin. Code books/models.py ... class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) cover = models.ImageField(upload_to='covers/', blank=True) class Meta: # new permissions = [ ('special_status', 'Can read all books'), ] 223 https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#custom-permissions Chapter 13: Permissions 253 def str (self): return self.title def get_absolute_url(self): return reverse('book_detail', args=[str(self.id)]) ... The order of the inner classes and methods here is deliberate. It follows the Model stylea section from the Django documentation. ahttps://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/ model-style Since we have updated our database model we must create a new migrations file and then apply it. Command Line $ docker-compose exec web python manage.py makemigrations books $ docker-compose exec web python manage.py migrate User Permissions Now we need to apply this custom permission to our new special user. Thanks to the admin this is not a difficult task. Navigate to the Users section where the three exist- ing users are listed: special@email.com, testuser@email.com, and will@wsvincent.com which is my superuser account. Chapter 13: Permissions 254 Three Users Click on the special@email.com user and then scroll down to User permissions near the bottom of the page. Within it search for books | book | Can read all books and select it by clicking on the -> arrow to add it to \u201cChosen user permissions.\u201d Don\u2019t forget to click the \u201cSave\u201d button at the bottom of the page. Chapter 13: Permissions 255 Add Permission PermissionRequiredMixin The last step is to apply the custom permission using the PermissionRequiredMixin224. One of the many great features of class-based views is we can implement advanced 224 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-permissionrequiredmixin-mixin Chapter 13: Permissions 256 functionality with very little code on our part and this particular mixin is a good example of that. Add PermissionRequiredMixin to our list of imports on the top line. Then add it to DetailView after LoginRequiredMixin but before DetailView. The order should make sense: if a user isn\u2019t already logged in it makes no sense to do the additional check of whether they have permission. Finally add a permission_required field which specifies the desired permission. In our case its name is special_status and it exists on the books model. Code books/views.py from django.contrib.auth.mixins import ( LoginRequiredMixin, PermissionRequiredMixin # new ) from django.views.generic import ListView, DetailView from .models import Book class BookListView(LoginRequiredMixin, ListView): model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' login_url = 'account_login' class BookDetailView( LoginRequiredMixin, Chapter 13: Permissions PermissionRequiredMixin, # new DetailView): model = Book context_object_name = 'book' template_name = 'books/book_detail.html' login_url = 'account_login' permission_required = 'books.special_status' # new 257 Although we are not doing it here it is possible to add multiple permissions225 via the permission_required field. To try out our work, log out of the admin. This is necessary because the superuser account is used for the admin and by default has access to everything. Not a great user account to test with! Log in to the Bookstore site using the testuser@email.com account and then navigate to the Books page listing the three available titles. If you then click on any one of the books, you\u2019ll see a \u201c403 Forbidden\u201d error because permission was denied. 403 Error Page Now go back to the homepage at http://127.0.0.1:8000/226 and log out. Then log in using the special@email.com account. Navigate again to the Books page and each individual book page is accessible. 225 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-permissionrequiredmixin-mixin 226 http://127.0.0.1:8000/ Chapter 13: Permissions 258 Groups & UserPassesTestMixin The third permissions mixin available is UserPassesTestMixin227 which restricts a view\u2019s access only to users who pass a specific test. And in large projects Groups228, which are Django\u2019s way of applying permissions to a category of users, become prominent. If you look on the Admin homepage there is a dedicated Groups section where they can be added and have permissions set. This is far more efficient than adding permissions on a per-user basis. An example of groups is if you have a premium section on your website, a user upgrading could switch them into the premium group and then have access to however many specific extra permissions that involves. Tests It\u2019s a good idea to run tests whenever a code change has been made. After all, the whole point of testing is to check that we did not inadvertently cause another part of the application to fail. 227 https://docs.djangoproject.com/en/2.2/topics/auth/default/#django.contrib.auth.mixins.UserPassesTestMixin 228 https://docs.djangoproject.com/en/2.2/topics/auth/default/#groups Chapter 13: Permissions Command Line $ docker-compose exec web python manage.py test ... Ran 17 tests in 0.519s 259 FAILED (failures=2) It turns out we do have some failing tests! Specifically test_book_list_view and test_- book_detail_view are both complain of a 302 status code, meaning a redirection, rather than a 200 for success. This is because we\u2019ve just added the requirement that log in is required to view the list of books and for a detail page the user must have a special_- status permission. The first step is to import Permission from the built-in auth models. Then within our BookTests in books/tests.py add the special_status permission to the setUp method so it is available for all our tests. We\u2019ll transfer the existing single test_book_list_view test into one for logged in users and one for logged out users. And we\u2019ll update the detail view test to check if a user has the correct permission. Code books/tests.py from django.contrib.auth import get_user_model from django.contrib.auth.models import Permission # new from django.test import Client, TestCase from django.urls import reverse from .models import Book, Review class BookTests(TestCase): Chapter 13: Permissions 260 def setUp(self): self.user = get_user_model().objects.create_user( username='reviewuser', email='reviewuser@email.com', password='testpass123' ) self.special_permission = Permission.objects.get(codename='special_status') \\ new self.book = Book.objects.create( title='Harry Potter', author='JK Rowling', price='25.00', ) self.review = Review.objects.create( book = self.book, author = self.user, review = 'An excellent review', ) deftest_book_listing(self): ... def test_book_list_view_for_logged_in_user(self): # new self.client.login(email='reviewuser@email.com', password='testpass123') response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_list.html') Chapter 13: Permissions def test_book_list_view_for_logged_out_user(self): # new self.client.logout() response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 302) self.assertRedirects( response, '%s?next=/books/' % (reverse('account_login'))) response = self.client.get( '%s?next=/books/' % (reverse('account_login'))) self.assertContains(response, 'Log In') def test_book_detail_view_with_permissions(self): # new self.client.login(email='reviewuser@email.com', password='testpass123') self.user.user_permissions.add(self.special_permission) response = self.client.get(self.book.get_absolute_url()) no_response = self.client.get('/books/12345/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'Harry Potter') self.assertContains(response, 'An excellent review') self.assertTemplateUsed(response, 'books/book_detail.html') If you run the test suite again all tests should pass. 261 Chapter 13: Permissions Command Line $ docker-compose exec web python manage.py test ... Ran 18 tests in 0.944s OK 262 Git Make sure to create a new Git commit for the changes in this chapter. Command Line $ git status $ git add . $ git commit -m 'ch13' As always you can compare your code again the official source code on Github229 . Conclusion Permissions and groups are a highly subjective area that vary widely from project to project. However the basics remain the same and mimic what we\u2019ve covered here. The first pass is typically to restrict access to only logged in users, then add additional custom permissions from there around groups or users. In the next chapter we\u2019ll build upon this by adding payments to our Bookstore site. 229 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch13-permissions","title":"31"},{"location":"31/#booksviewspy","text":"from django.contrib.auth.mixins import LoginRequiredMixin # new from django.views.generic import ListView, DetailView from .models import Book class BookListView(LoginRequiredMixin, ListView): # new model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' login_url = 'account_login' # new class BookDetailView(LoginRequiredMixin, DetailView): # new model = Book context_object_name = 'book' template_name = 'books/book_detail.html' login_url = 'account_login' # new And that\u2019s it! If you now log out of your account and click on the \u201cBooks\u201d link it will automatically redirect you to the Log In page. However if you are logged in, the Books page loads normally. Chapter 13: Permissions 249 Even if you somehow knew the UUID of a specific book page you\u2019d be redirected to Log In as well! Permissions Django comes with a basic permissions system222 that is controlled through the Django admin. To demonstrate it we need to create a new user account. Navigate back to the Admin homepage and then click on \u201c+ Add\u201d next to Users. We\u2019ll call this new user special and set a password of testpass123. Click on the \u201cSave\u201d button. Add User The second page allows us to set an \u201cEmail address\u201d to special@email.com. We\u2019re using 222 https://docs.djangoproject.com/en/2.2/topics/auth/default/#permissions-and-authorization Chapter 13: Permissions 250 django-allauth so that our log in page requires only email and the sign up page also only uses email, but since we didn\u2019t customize the admin as well it still expects a username when creating a new user this way. User Email If we had wanted to fully rip out the default user system that would mean using AbstractBaseUsera rather than AbstractUser back in Chapter 3 when we configured our custom user model. ahttps://docs.djangoproject.com/en/2.2/topics/auth/customizing/#django.contrib.auth.models. AbstractBaseUser Scrolling down further on the page to the bottom there are options to set Groups as well as User permissions. This is a long list of defaults Django provides. Chapter 13: Permissions 251 User Permissions For now we won\u2019t use them since we\u2019ll create a custom permission in the next section so just click on the \u201cSave\u201d button in the lower right corner so that our email address is updated for the user account. Chapter 13: Permissions 252 Custom Permissions Setting custom permissions223 is a much more common occurrence in a Django project. We can set them via the Meta class on our database models. For example, let\u2019s add a special status so that an author can read all books. In other words they have access to the DetailView. We could be much more specific with the permissions, restricting them per book, but this is a good first step. In the books/models.py file we\u2019ll add a Meta class and set both the permission name and a description which will be visible in the admin. Code","title":"books/views.py"},{"location":"31/#booksmodelspy","text":"... class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) title = models.CharField(max_length=200) author = models.CharField(max_length=200) price = models.DecimalField(max_digits=6, decimal_places=2) cover = models.ImageField(upload_to='covers/', blank=True) class Meta: # new permissions = [ ('special_status', 'Can read all books'), ] 223 https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#custom-permissions Chapter 13: Permissions 253 def str (self): return self.title def get_absolute_url(self): return reverse('book_detail', args=[str(self.id)]) ... The order of the inner classes and methods here is deliberate. It follows the Model stylea section from the Django documentation. ahttps://docs.djangoproject.com/en/2.2/internals/contributing/writing-code/coding-style/","title":"books/models.py"},{"location":"31/#model-style","text":"Since we have updated our database model we must create a new migrations file and then apply it. Command Line $ docker-compose exec web python manage.py makemigrations books $ docker-compose exec web python manage.py migrate User Permissions Now we need to apply this custom permission to our new special user. Thanks to the admin this is not a difficult task. Navigate to the Users section where the three exist- ing users are listed: special@email.com, testuser@email.com, and will@wsvincent.com which is my superuser account. Chapter 13: Permissions 254 Three Users Click on the special@email.com user and then scroll down to User permissions near the bottom of the page. Within it search for books | book | Can read all books and select it by clicking on the -> arrow to add it to \u201cChosen user permissions.\u201d Don\u2019t forget to click the \u201cSave\u201d button at the bottom of the page. Chapter 13: Permissions 255 Add Permission PermissionRequiredMixin The last step is to apply the custom permission using the PermissionRequiredMixin224. One of the many great features of class-based views is we can implement advanced 224 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-permissionrequiredmixin-mixin Chapter 13: Permissions 256 functionality with very little code on our part and this particular mixin is a good example of that. Add PermissionRequiredMixin to our list of imports on the top line. Then add it to DetailView after LoginRequiredMixin but before DetailView. The order should make sense: if a user isn\u2019t already logged in it makes no sense to do the additional check of whether they have permission. Finally add a permission_required field which specifies the desired permission. In our case its name is special_status and it exists on the books model. Code","title":"model-style"},{"location":"31/#booksviewspy_1","text":"from django.contrib.auth.mixins import ( LoginRequiredMixin, PermissionRequiredMixin # new ) from django.views.generic import ListView, DetailView from .models import Book class BookListView(LoginRequiredMixin, ListView): model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' login_url = 'account_login' class BookDetailView( LoginRequiredMixin, Chapter 13: Permissions PermissionRequiredMixin, # new DetailView): model = Book context_object_name = 'book' template_name = 'books/book_detail.html' login_url = 'account_login' permission_required = 'books.special_status' # new 257 Although we are not doing it here it is possible to add multiple permissions225 via the permission_required field. To try out our work, log out of the admin. This is necessary because the superuser account is used for the admin and by default has access to everything. Not a great user account to test with! Log in to the Bookstore site using the testuser@email.com account and then navigate to the Books page listing the three available titles. If you then click on any one of the books, you\u2019ll see a \u201c403 Forbidden\u201d error because permission was denied. 403 Error Page Now go back to the homepage at http://127.0.0.1:8000/226 and log out. Then log in using the special@email.com account. Navigate again to the Books page and each individual book page is accessible. 225 https://docs.djangoproject.com/en/2.2/topics/auth/default/#the-permissionrequiredmixin-mixin 226 http://127.0.0.1:8000/ Chapter 13: Permissions 258 Groups & UserPassesTestMixin The third permissions mixin available is UserPassesTestMixin227 which restricts a view\u2019s access only to users who pass a specific test. And in large projects Groups228, which are Django\u2019s way of applying permissions to a category of users, become prominent. If you look on the Admin homepage there is a dedicated Groups section where they can be added and have permissions set. This is far more efficient than adding permissions on a per-user basis. An example of groups is if you have a premium section on your website, a user upgrading could switch them into the premium group and then have access to however many specific extra permissions that involves. Tests It\u2019s a good idea to run tests whenever a code change has been made. After all, the whole point of testing is to check that we did not inadvertently cause another part of the application to fail. 227 https://docs.djangoproject.com/en/2.2/topics/auth/default/#django.contrib.auth.mixins.UserPassesTestMixin 228 https://docs.djangoproject.com/en/2.2/topics/auth/default/#groups Chapter 13: Permissions Command Line $ docker-compose exec web python manage.py test ... Ran 17 tests in 0.519s 259 FAILED (failures=2) It turns out we do have some failing tests! Specifically test_book_list_view and test_- book_detail_view are both complain of a 302 status code, meaning a redirection, rather than a 200 for success. This is because we\u2019ve just added the requirement that log in is required to view the list of books and for a detail page the user must have a special_- status permission. The first step is to import Permission from the built-in auth models. Then within our BookTests in books/tests.py add the special_status permission to the setUp method so it is available for all our tests. We\u2019ll transfer the existing single test_book_list_view test into one for logged in users and one for logged out users. And we\u2019ll update the detail view test to check if a user has the correct permission. Code","title":"books/views.py"},{"location":"31/#bookstestspy","text":"from django.contrib.auth import get_user_model from django.contrib.auth.models import Permission # new from django.test import Client, TestCase from django.urls import reverse from .models import Book, Review class BookTests(TestCase): Chapter 13: Permissions 260 def setUp(self): self.user = get_user_model().objects.create_user( username='reviewuser', email='reviewuser@email.com', password='testpass123' ) self.special_permission = Permission.objects.get(codename='special_status') \\","title":"books/tests.py"},{"location":"31/#new","text":"self.book = Book.objects.create( title='Harry Potter', author='JK Rowling', price='25.00', ) self.review = Review.objects.create( book = self.book, author = self.user, review = 'An excellent review', ) deftest_book_listing(self): ... def test_book_list_view_for_logged_in_user(self): # new self.client.login(email='reviewuser@email.com', password='testpass123') response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 200) self.assertContains(response, 'Harry Potter') self.assertTemplateUsed(response, 'books/book_list.html') Chapter 13: Permissions def test_book_list_view_for_logged_out_user(self): # new self.client.logout() response = self.client.get(reverse('book_list')) self.assertEqual(response.status_code, 302) self.assertRedirects( response, '%s?next=/books/' % (reverse('account_login'))) response = self.client.get( '%s?next=/books/' % (reverse('account_login'))) self.assertContains(response, 'Log In') def test_book_detail_view_with_permissions(self): # new self.client.login(email='reviewuser@email.com', password='testpass123') self.user.user_permissions.add(self.special_permission) response = self.client.get(self.book.get_absolute_url()) no_response = self.client.get('/books/12345/') self.assertEqual(response.status_code, 200) self.assertEqual(no_response.status_code, 404) self.assertContains(response, 'Harry Potter') self.assertContains(response, 'An excellent review') self.assertTemplateUsed(response, 'books/book_detail.html') If you run the test suite again all tests should pass. 261 Chapter 13: Permissions Command Line $ docker-compose exec web python manage.py test ... Ran 18 tests in 0.944s OK 262 Git Make sure to create a new Git commit for the changes in this chapter. Command Line $ git status $ git add . $ git commit -m 'ch13' As always you can compare your code again the official source code on Github229 . Conclusion Permissions and groups are a highly subjective area that vary widely from project to project. However the basics remain the same and mimic what we\u2019ve covered here. The first pass is typically to restrict access to only logged in users, then add additional custom permissions from there around groups or users. In the next chapter we\u2019ll build upon this by adding payments to our Bookstore site. 229 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch13-permissions","title":"new"},{"location":"32/","text":"Chapter 14: Orders with Stripe Stripe230 is one of the most popular payment providers and what we\u2019ll use in this book to power book order purchases. It has two main offerings from Stripe: Checkout231 which allows for the use of pre-built forms from Stripe and Connect232 which is used for a marketplace with multiple buyers and sellers. For example if we added book authors as users and wanted to process payments on their behalf, taking a commission for ourselves on the Bookstore website, then we would use Connect. But since we are just processing payments we will use Checkout. Checkout itself is undergoing rapid iteration. There are now two Checkout options233 available to developers: a \u201cClient Integration\u201d where the payment form is hosted on Stripe itself and a \u201cServer Integration\u201d where we host the form ourselves. Since we\u2019re using Django we\u2019ll opt for the Server Integration approach. The second major change is a new API that relies on Sessions234, however, as of the writing of this book, Sessions is not fully implemented and poorly documented. Therefore we will use the traditional Stripe approach which will be supported well into the future. Once you\u2019ve understood how Stripe works under-the-hood making the switch in the future will be much easier. It\u2019s easy to become lost in all the complexity around payments, however, the important part for this book is understanding how payments are securely processed. That is what we\u2019ll do here. By the end of this chapter we\u2019ll have a working payments solution and the ability to further customize it as needed. 230 https://stripe.com/ 231 https://stripe.com/docs/payments/checkout 232 https://stripe.com/docs/connect 233 https://stripe.com/docs/payments/checkout#choose-your-integration-path 234 https://stripe.com/docs/api/checkout/sessions Chapter 14: Orders with Stripe 264 Payments Flow Before we become lost in the implementation details, let\u2019s plan out how the payments flow should work. Currently there is a books page that lists all available books and then individual pages for each book. In the last chapter we saw how to add a permission for access to all books. Ultimately when an order is successfully completed, that user needs to have this permission flag flipped in the database. That\u2019s all we\u2019re doing here! When a user is on the books page we\u2019ll include a link to a dedicated orders page which, upon success, will redirect back to the books page with all books now available. We can add in some template logic to replace \u201cOrder\u201d buttons with \u201cRead\u201d buttons for the appropriate user. Keep this high-level flow in mind as we go through the implementation process! Orders app We\u2019ll create a dedicated orders app and then configure it in the standard way: adding to INSTALLED_APPS configuration, updating urls.py files, creating views, and then templates. Ready? Here we go. Start by creating a new orders app. Command Line $ docker-compose exec web python manage.py startapp orders Then add it to the INSTALLED_APPS configuration in bookstore_project/settings.py. Chapter 14: Orders with Stripe Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites', Third-party 'crispy_forms', 'allauth', 'allauth.account', 265 ] Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', 'books.apps.BooksConfig', 'orders.apps.OrdersConfig', # new Update the top-level bookstore_project/urls.py file with orders routes which will live at orders/. Chapter 14: Orders with Stripe 266 Code bookstore_project/urls.py from django.conf import settings from django.conf.urls.static import static from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('admin/', admin.site.urls), User management path('accounts/', include('allauth.urls')), Local apps path('', include('pages.urls')), path('books/', include('books.urls')), path('orders/', include('orders.urls')), # new ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) And then create a orders/urls.py file to create app-level URL routes. Command Line $ touch orders/urls.py Since the top-level urls.py file is at orders/ we can simply use the empty string '' for the main orders page. Provide a name of the path of orders and reference the view OrdersPageView which we\u2019ll create next. Chapter 14: Orders with Stripe 267 Code orders/urls.py from django.urls import path from .views import OrdersPageView urlpatterns = [ path('', OrdersPageView.as_view(), name='orders'), ] The view file will simply use TemplateView for now. Code orders/views.py from django.views.generic.base import TemplateView class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' Finally we have the template which will live in a templates/orders/ directory. Command Line $ mkdir templates/orders $ touch templates/orders/purchase.html Let\u2019s just use a placeholder heading of \u201cOrders page\u201d for now to test that it\u2019s working correctly. Chapter 14: Orders with Stripe 268 Code {% extends '_base.html' %} {% block title %}Orders{% endblock title %} {% block content %} Orders page {% endblock content %} The code is all done. But we must restart our containers so that the settings.py file update\u2013adding orders to INSTALLED_APPS\u2013is loaded into Django. Command Line $ docker-compose down $ docker-compose up -d In your web browser visit http://127.0.0.1:8000/orders/235 to see our new orders page. 235 http://127.0.0.1:8000/orders/ Orders Page Chapter 14: Orders with Stripe 269 Stripe We turn our attention to Stripe which needs to be installed locally. The Python library for Stripe is currently undergoing rapid iteration and is available on Github236 . Command Line $ docker-compose exec web pipenv install stripe==2.32.0 $ docker-compose down $ docker-compose up -d --build Then go to the Stripe website and register for a new account237 . Stripe regularly updates its new user onboarding flow, but as of the writing of this book the next page asks whether you want to use the Stripe API or an app. We want the API so select that option which redirects to the dashboard238 page. Adding an account name is optional but recommended in the upper left corner. I\u2019ve selected \u201cDFP Book\u201d. Now click on the \u201cDevelopers\u201d link in the left sidebar. 236 https://github.com/stripe/stripe-python 237 https://dashboard.stripe.com/register 238 https://dashboard.stripe.com/test/dashboard Chapter 14: Orders with Stripe Developers Link From dropdown list click on \u201cAPI keys\u201d. 270 Chapter 14: Orders with Stripe 271 API Keys Link Each Stripe account has four API keys: two for testing and two for live use in production. Currently we are viewing the Test keys. We know this because there is a \u201cTEST DATA\u201d indicator at the top of the page and the keys (also called tokens) contain test in the name. Chapter 14: Orders with Stripe 272 Test Keys Viewing live keys requires both confirming your account via email and filling out an \u201cActivate Your Account\u201d page that is prompted if you click on the link at the top to toggle the keys. Chapter 14: Orders with Stripe 273 Activate Your Account Filling this page out is somewhat onerous, but we are dealing with money here so the extra information is warranted. However doing so now is optional. We can use the test keys and later swap in the live keys when we actually deploy the final site. Publishable & Secret Keys There are two types of keys for testing: a \u201cpublishable key\u201d and a \u201csecret key\u201d. The publishable key will be embedded in the JavaScript on our webpage; it is therefore public and visible. The secret key is stored on the server and is for private use only. Keep this key secret! That means using environment variables which we\u2019ll do now. At the bottom of your bookstore_project/settings.py file, add the following two lines. Chapter 14: Orders with Stripe Code bookstore_project/settings.py Stripe STRIPE_TEST_PUBLISHABLE_KEY=os.environ.get('STRIPE_TEST_PUBLISHABLE_KEY') STRIPE_TEST_SECRET_KEY=os.environ.get('STRIPE_TEST_SECRET_KEY') Add the environment variables to docker-compose.yml in the web section. docker-compose.yml version: '3.7' 274 services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 - DEBUG=True - STRIPE_TEST_PUBLISHABLE_KEY= - STRIPE_TEST_SECRET_KEY= volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 volumes: Chapter 14: Orders with Stripe 275 - postgres_data:/var/lib/postgresql/data/ volumes: postgres_data: Note that both environment variables should be filled with your unique API keys. Never share\u2013especially in a book!\u2013your actual Stripe secret key. Then restart the Docker containers to load in the environment variables. Command Line $ docker-compose down $ docker-compose up -d Stripe Checkout Step one is to add the Stripe Checkout form to our orders/purchase.html template. Code {% extends '_base.html' %} {% block title %}Orders{% endblock title %} {% block content %} Orders page Buy for $39.00 {% endblock content %} 276 If you refresh the web page at http://127.0.0.1:8000/orders/239 the default Stripe Checkout blue button appears. Orders Page Click on the \u201cPay with Card\u201d button and the Checkout modal appears. We can test the form by using one of several test card numbers 240 Stripe provides. Let\u2019s use 4242 4242 4242 4242. Make sure the expiration date is in the future and add any 3 numbers for the CVC. 239 http://127.0.0.1:8000/orders/ 240 https://stripe.com/docs/testing#cards Chapter 14: Orders with Stripe 277 Checkout Modal But there\u2019s a problem after clicking on the \u201cPay $39.00\u201d blue button. Stripe notes that we did not set a valid publishable key! Chapter 14: Orders with Stripe 278 Checkout Modal Error This value needs to be passed into our template and while we could hard code this it\u2019s far better to pass in the value as a variable matching our environment variable setting. In Django each template is rendered with context data provided by the views.py file. By overriding get_context_data()241 we can elegantly pass this information in with our TemplateView. Update orders/views.py as follows. 241 https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-simple/#django.views.generic.base. ContextMixin.get_context_data Chapter 14: Orders with Stripe Code orders/views.py from django.conf import settings # new from django.views.generic.base import TemplateView class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' 279 def get_context_data(self, kwargs): # new context = super().get_context_data( kwargs) context['stripe_key'] = settings.STRIPE_TEST_PUBLISHABLE_KEY return context Now refresh the web page and try again. It will \u201cwork\u201d in that the button turns green with a checkmark indicating payment went through. If you look at the Stripe Dashboard and click on \u201cLogs\u201d under \u201cDevelopers\u201d in the left menu, you can see that tokens were created. Chapter 14: Orders with Stripe 280 Stripe Dashboard Logs But if you then click on \u201cPayments\u201d in the same lefthand menu, there are no charges. So what\u2019s happening? Think back to the Stripe flow. We have used the publishable key to send the credit card information to Stripe, and Stripe has sent us back a unique token for the order. But we haven\u2019t used that token yet to make a charge! Recall that we send an order form to Stripe with the Publishable Key, Stripe validates it and sends back a token, and then we process the charge using both the token and our own Secret Key. That\u2019s the missing charge piece which we\u2019ll implement now. Chapter 14: Orders with Stripe 281 Charges Creating a charge is not as hard as it seems. The first step is to make our payment button a Django form so we can pass in additional information via a charge view that we\u2019ll define next. And since it is a POST we include the {% csrf_token %} for additional security. Code {% extends '_base.html' %} {% block title %}Orders{% endblock title %} {% block content %} Orders page Buy for $39.00 {% csrf_token %} {% endblock content %} Note it will redirect to a charge page so let\u2019s create that now. Chapter 14: Orders with Stripe Command Line $ touch templates/orders/charge.html Add some text to it. Code {% extends '_base.html' %} {% block title %}Charge{% endblock title %} {% block content %} Thank you for your order! You now have access to All Books . {% endblock content %} Then update our URL routes with the new orders/charge/ page. Code orders/urls.py from django.urls import path from .views import OrdersPageView, charge # new urlpatterns = [ path('charge/', charge, name='charge'), # new path('', OrdersPageView.as_view(), name='orders'), ] 282 Chapter 14: Orders with Stripe 283 Now for the \u201cmagic\u201d logic which will occur in the orders/views.py file. Create a charge view that receives the token from Stripe, makes the charge, and then redirects to the charge page upon success. At the top of the file import the stripe library we already installed. It will look for a secret key called stripe.api_key which we can set to that value. Then also import render242 which will be used for the function-based charge view. Code orders/views.py import stripe # new from django.conf import settings from django.views.generic.base import TemplateView from django.shortcuts import render # new stripe.api_key = settings.STRIPE_TEST_SECRET_KEY # new class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' def get_context_data(self, kwargs): context = super().get_context_data( kwargs) context['stripe_key'] = settings.STRIPE_TEST_PUBLISHABLE_KEY return context def charge(request): # new if request.method == 'POST': charge = stripe.Charge.create( amount=3900, 242 https://docs.djangoproject.com/en/2.2/topics/templates/#django.template.backends.base.Template.render Chapter 14: Orders with Stripe currency='usd', description='Purchase all books', source=request.POST['stripeToken'] ) return render(request, 'orders/charge.html') 284 The charge function-based view assumes a POST request: we are sending data to Stripe here. We make a charge that includes the amount, currency, description, and crucially the source which has the unique token Stripe generated for this transaction called stripeToken. Then we return the request object and load the charge.html template. Adding robust error handling here is probably warranted on a large site, but beyond the scope of this chapter. Ok, refresh the orders page at http://127.0.0.1:8000/orders/243. Click on the \u201cPay with Card\u201d button again and use the credit card number 4242 4242 4242 4242, an expiration date in the future such as 01/22, and you\u2019ll end up on our charge page. 243 http://127.0.0.1:8000/orders/ Charge Page Chapter 14: Orders with Stripe 285 To confirm a charge was actually made, go back to the Stripe dashboard under \u201cPayments\u201d on the lefthand sidebar. It worked! Stripe Payment Stripe + Permissions There\u2019s one last step we must implement and that\u2019s to link up the order with a change in the given user\u2019s permissions. In other words, currently we are charging $39 successfully but the user is not getting anything in return! There is still no access to the individual books. But this is easily fixed. Again we\u2019ll focus solely on the orders/views.py file. At the top import Permission and then under the charge we first access the appropriate Chapter 14: Orders with Stripe 286 permission which is called special_status. Then we find the current user using request.user. And finally we add the given permission change to the user\u2019s permission set. Here is what it looks like in code: Code orders/views.py import stripe from django.conf import settings from django.contrib.auth.models import Permission # new from django.views.generic.base import TemplateView from django.shortcuts import render stripe.api_key = settings.STRIPE_TEST_SECRET_KEY class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' def get_context_data(self, kwargs): context = super().get_context_data( kwargs) context['stripe_key'] = settings.STRIPE_TEST_PUBLISHABLE_KEY return context def charge(request): # new Get the permission permission = Permission.objects.get(codename='special_status') Get user u = request.user Chapter 14: Orders with Stripe 287 Add to user's permission set u.user_permissions.add(permission) if request.method == 'POST': charge = stripe.Charge.create( amount=3900, currency='usd', description='Purchase all books', source=request.POST['stripeToken'] ) return render(request, 'orders/charge.html') To test this out log in with our testuser@email.com acccount. It does not have access to this special permission which can be confirmed both within the Users section of the Admin under \u201cPermissions\u201d and also by the simple fact that if you try to access any individual books with this account, you won\u2019t be able to! Refresh the orders page and attempt to make a charge again. It will complete. Now visit the books list page and you can click through to each individual book. Success! Templates The final step is to add a button that links to the Orders page from the Books page. That means updating the books/book_list.html template by adding a Bootstrap styled button. Since the URL name of the orders page is orders\u2013recall that this was set in orders/urls.py\u2013we can use the url template tag to link to it. The ultimate code is a one-line update at the top of the content in the file. Chapter 14: Orders with Stripe 288 Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} {% block content %} Purchase All Books {% for book in book_list %} {{ book.title }} {% endfor %} {% endblock content %} Refresh the books page and the button is now visible. Orders Link Clicking on it redirects to the Orders page. An additional step would be to add template logic that checks if the current logged-in user already has the proper Chapter 14: Orders with Stripe 289 permission, in which case the button would not be visible. That can be done by adding an if statement and checking if a user has special_status permission. Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} {% block content %} {% if not perms.books.special_status %} Purchase All Books {% endif %} {% for book in book_list %} {{ book.title }} {% endfor %} {% endblock content %} Tests Typically the next step would be to add testing, but this example highlights an important point: it\u2019s hard to test integrations that involve 3rd party services. Doing so goes well beyond the abilities of core Django. However, it can be done with various mocking libraries and potentially using a service like Cypress244 , but covering this is well beyond the scope of the book. 244 https://www.cypress.io Chapter 14: Orders with Stripe 290 Git There have been a lot of code changes in this chapter so make sure to commit everything with Git. Command Line $ git status $ git add . $ git commit -m 'ch14' And if you have any errors make sure to look at your logs with docker-compose logs and compare your code with the official source code on Github245. Conclusion This chapter demonstrated how to add payments to a Django site. To review we used Stripe Checkout and our publishable key to send a customer\u2019s credit card information to Stripe. The Stripe API then sent us back a unique token for the customer, which we used alongside our secret key on the server to submit a charge. Alongside this charge we also updated the given user\u2019s permissions. There are a number of additional steps that might be taken such as allowing payments for an individual book, a bundle, and so on. The process is the same as what we\u2019ve done here: create a permission or even a group potentially and then link the charge to that. 245 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch14-orders-with-stripe","title":"32"},{"location":"32/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites',","title":"bookstore_project/settings.py"},{"location":"32/#third-party","text":"'crispy_forms', 'allauth', 'allauth.account', 265 ]","title":"Third-party"},{"location":"32/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig', 'books.apps.BooksConfig', 'orders.apps.OrdersConfig', # new Update the top-level bookstore_project/urls.py file with orders routes which will live at orders/. Chapter 14: Orders with Stripe 266 Code","title":"Local"},{"location":"32/#bookstore_projecturlspy","text":"from django.conf import settings from django.conf.urls.static import static from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"32/#django-admin","text":"path('admin/', admin.site.urls),","title":"Django admin"},{"location":"32/#user-management","text":"path('accounts/', include('allauth.urls')),","title":"User management"},{"location":"32/#local-apps","text":"path('', include('pages.urls')), path('books/', include('books.urls')), path('orders/', include('orders.urls')), # new ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) And then create a orders/urls.py file to create app-level URL routes. Command Line $ touch orders/urls.py Since the top-level urls.py file is at orders/ we can simply use the empty string '' for the main orders page. Provide a name of the path of orders and reference the view OrdersPageView which we\u2019ll create next. Chapter 14: Orders with Stripe 267 Code","title":"Local apps"},{"location":"32/#ordersurlspy","text":"from django.urls import path from .views import OrdersPageView urlpatterns = [ path('', OrdersPageView.as_view(), name='orders'), ] The view file will simply use TemplateView for now. Code","title":"orders/urls.py"},{"location":"32/#ordersviewspy","text":"from django.views.generic.base import TemplateView class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' Finally we have the template which will live in a templates/orders/ directory. Command Line $ mkdir templates/orders $ touch templates/orders/purchase.html Let\u2019s just use a placeholder heading of \u201cOrders page\u201d for now to test that it\u2019s working correctly. Chapter 14: Orders with Stripe 268 Code {% extends '_base.html' %} {% block title %}Orders{% endblock title %} {% block content %}","title":"orders/views.py"},{"location":"32/#bookstore_projectsettingspy_1","text":"","title":"bookstore_project/settings.py"},{"location":"32/#stripe","text":"STRIPE_TEST_PUBLISHABLE_KEY=os.environ.get('STRIPE_TEST_PUBLISHABLE_KEY') STRIPE_TEST_SECRET_KEY=os.environ.get('STRIPE_TEST_SECRET_KEY') Add the environment variables to docker-compose.yml in the web section. docker-compose.yml version: '3.7' 274 services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 - DEBUG=True - STRIPE_TEST_PUBLISHABLE_KEY= - STRIPE_TEST_SECRET_KEY= volumes: - .:/code ports: - 8000:8000 depends_on: - db db: image: postgres:11 volumes: Chapter 14: Orders with Stripe 275 - postgres_data:/var/lib/postgresql/data/ volumes: postgres_data: Note that both environment variables should be filled with your unique API keys. Never share\u2013especially in a book!\u2013your actual Stripe secret key. Then restart the Docker containers to load in the environment variables. Command Line $ docker-compose down $ docker-compose up -d Stripe Checkout Step one is to add the Stripe Checkout form to our orders/purchase.html template. Code {% extends '_base.html' %} {% block title %}Orders{% endblock title %} {% block content %}","title":"Stripe"},{"location":"32/#ordersviewspy_1","text":"from django.conf import settings # new from django.views.generic.base import TemplateView class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' 279 def get_context_data(self, kwargs): # new context = super().get_context_data( kwargs) context['stripe_key'] = settings.STRIPE_TEST_PUBLISHABLE_KEY return context Now refresh the web page and try again. It will \u201cwork\u201d in that the button turns green with a checkmark indicating payment went through. If you look at the Stripe Dashboard and click on \u201cLogs\u201d under \u201cDevelopers\u201d in the left menu, you can see that tokens were created. Chapter 14: Orders with Stripe 280 Stripe Dashboard Logs But if you then click on \u201cPayments\u201d in the same lefthand menu, there are no charges. So what\u2019s happening? Think back to the Stripe flow. We have used the publishable key to send the credit card information to Stripe, and Stripe has sent us back a unique token for the order. But we haven\u2019t used that token yet to make a charge! Recall that we send an order form to Stripe with the Publishable Key, Stripe validates it and sends back a token, and then we process the charge using both the token and our own Secret Key. That\u2019s the missing charge piece which we\u2019ll implement now. Chapter 14: Orders with Stripe 281 Charges Creating a charge is not as hard as it seems. The first step is to make our payment button a Django form so we can pass in additional information via a charge view that we\u2019ll define next. And since it is a POST we include the {% csrf_token %} for additional security. Code {% extends '_base.html' %} {% block title %}Orders{% endblock title %} {% block content %}","title":"orders/views.py"},{"location":"32/#ordersurlspy_1","text":"from django.urls import path from .views import OrdersPageView, charge # new urlpatterns = [ path('charge/', charge, name='charge'), # new path('', OrdersPageView.as_view(), name='orders'), ] 282 Chapter 14: Orders with Stripe 283 Now for the \u201cmagic\u201d logic which will occur in the orders/views.py file. Create a charge view that receives the token from Stripe, makes the charge, and then redirects to the charge page upon success. At the top of the file import the stripe library we already installed. It will look for a secret key called stripe.api_key which we can set to that value. Then also import render242 which will be used for the function-based charge view. Code","title":"orders/urls.py"},{"location":"32/#ordersviewspy_2","text":"import stripe # new from django.conf import settings from django.views.generic.base import TemplateView from django.shortcuts import render # new stripe.api_key = settings.STRIPE_TEST_SECRET_KEY # new class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' def get_context_data(self, kwargs): context = super().get_context_data( kwargs) context['stripe_key'] = settings.STRIPE_TEST_PUBLISHABLE_KEY return context def charge(request): # new if request.method == 'POST': charge = stripe.Charge.create( amount=3900, 242 https://docs.djangoproject.com/en/2.2/topics/templates/#django.template.backends.base.Template.render Chapter 14: Orders with Stripe currency='usd', description='Purchase all books', source=request.POST['stripeToken'] ) return render(request, 'orders/charge.html') 284 The charge function-based view assumes a POST request: we are sending data to Stripe here. We make a charge that includes the amount, currency, description, and crucially the source which has the unique token Stripe generated for this transaction called stripeToken. Then we return the request object and load the charge.html template. Adding robust error handling here is probably warranted on a large site, but beyond the scope of this chapter. Ok, refresh the orders page at http://127.0.0.1:8000/orders/243. Click on the \u201cPay with Card\u201d button again and use the credit card number 4242 4242 4242 4242, an expiration date in the future such as 01/22, and you\u2019ll end up on our charge page. 243 http://127.0.0.1:8000/orders/ Charge Page Chapter 14: Orders with Stripe 285 To confirm a charge was actually made, go back to the Stripe dashboard under \u201cPayments\u201d on the lefthand sidebar. It worked! Stripe Payment Stripe + Permissions There\u2019s one last step we must implement and that\u2019s to link up the order with a change in the given user\u2019s permissions. In other words, currently we are charging $39 successfully but the user is not getting anything in return! There is still no access to the individual books. But this is easily fixed. Again we\u2019ll focus solely on the orders/views.py file. At the top import Permission and then under the charge we first access the appropriate Chapter 14: Orders with Stripe 286 permission which is called special_status. Then we find the current user using request.user. And finally we add the given permission change to the user\u2019s permission set. Here is what it looks like in code: Code","title":"orders/views.py"},{"location":"32/#ordersviewspy_3","text":"import stripe from django.conf import settings from django.contrib.auth.models import Permission # new from django.views.generic.base import TemplateView from django.shortcuts import render stripe.api_key = settings.STRIPE_TEST_SECRET_KEY class OrdersPageView(TemplateView): template_name = 'orders/purchase.html' def get_context_data(self, kwargs): context = super().get_context_data( kwargs) context['stripe_key'] = settings.STRIPE_TEST_PUBLISHABLE_KEY return context def charge(request): # new","title":"orders/views.py"},{"location":"32/#get-the-permission","text":"permission = Permission.objects.get(codename='special_status')","title":"Get the permission"},{"location":"32/#get-user","text":"u = request.user Chapter 14: Orders with Stripe 287","title":"Get user"},{"location":"32/#add-to-users-permission-set","text":"u.user_permissions.add(permission) if request.method == 'POST': charge = stripe.Charge.create( amount=3900, currency='usd', description='Purchase all books', source=request.POST['stripeToken'] ) return render(request, 'orders/charge.html') To test this out log in with our testuser@email.com acccount. It does not have access to this special permission which can be confirmed both within the Users section of the Admin under \u201cPermissions\u201d and also by the simple fact that if you try to access any individual books with this account, you won\u2019t be able to! Refresh the orders page and attempt to make a charge again. It will complete. Now visit the books list page and you can click through to each individual book. Success! Templates The final step is to add a button that links to the Orders page from the Books page. That means updating the books/book_list.html template by adding a Bootstrap styled button. Since the URL name of the orders page is orders\u2013recall that this was set in orders/urls.py\u2013we can use the url template tag to link to it. The ultimate code is a one-line update at the top of the content in the file. Chapter 14: Orders with Stripe 288 Code {% extends '_base.html' %} {% block title %}Books{% endblock title %} {% block content %} Purchase All Books {% for book in book_list %}","title":"Add to user's permission set"},{"location":"33/","text":"Chapter 15: Search Search is a fundamental feature of most websites and certainly anything e-commerce related like our Bookstore. In this chapter we will learn how to implement basic search with forms and filters. Then we will improve it with additional logic and touch upon ways to go even more deeply with search options in Django. We only have three books in our database now but the code here will scale to as many books as we\u2019d like. Search functionality consists of two parts: a form to pass along a user search query and then a results page that performs a filter based on that query. Determining \u201cthe right\u201d type of filter is where search becomes interesting and hard. But first we need to create both a form and the search results page. We could start with either one at this point, but\u2019ll we configure the filtering first and then the form. Search Results Page We\u2019ll start with the search results page. As with all Django pages that means adding a dedicated URL, view, and template. The implementation order doesn\u2019t particularly matter, but we will add them in that order. Within books/urls.py add a search/ path that will take a view called SearchResultsListView and has a URL name of search_results. Chapter 15: Search 292 Code books/urls.py from django.urls import path from .views import BookListView, BookDetailView, SearchResultsListView # new urlpatterns = [ path('', BookListView.as_view(), name='book_list'), path(' ', BookDetailView.as_view(), name='book_detail'), path('search/', SearchResultsListView.as_view(), name='search_results'), # new ] Next up is the view SearchResultsListView which is, for now, a listing of all available books. That\u2019s a prime candidate for using ListView. Its template will be called search_- results.html and live within the templates/books/ directory. The only new code is for SearchResultsListView as we have previously imported both ListView and the Book model at the top of the file. Code books/views.py ... class SearchResultsListView(ListView): # new model = Book context_object_name = 'book_list' template_name = 'books/search_results.html' Last up is our template which must be created. Chapter 15: Search 293 Command Line $ touch templates/books/search_results.html For now it will list all available book\u2019s by title, author, and price. Code {% extends '_base.html' %} {% block title %}Search{% endblock title %} {% block content %} Search Results {% for book in book_list %} {{ book.title }} Author: {{ book.author }} Price: $ {{ book.price }} {% endfor %} {% endblock content %} The search results page is now available at http://127.0.0.1:8000/books/search/246. 246 http://127.0.0.1:8000/books/search/ Chapter 15: Search 294 And there it is! Search page Basic Filtering In Django a QuerySet247 is used to filter the results from a database model. Currently our search results page doesn\u2019t feel like one because it is outputting all results from the Book model. Ultimately we want to run the filter based on the user\u2019s search query, but first we\u2019ll work through multiple filtering options. It turns out there are multiple ways to customize a queryset including via a manager248 on the model itself but to keep things simple, we can add a filter with just one line. So let\u2019s do that! We can override the default queryset attribute on ListView which by default shows 247 https://docs.djangoproject.com/en/2.2/topics/db/queries/#retrieving-objects 248 https://docs.djangoproject.com/en/2.2/topics/db/managers/#django.db.models.Manager Chapter 15: Search 295 all results. The queryset documentation is quite robust and detailed, but often using contains249 (which is case sensitive) or icontains250 (which is not case sensitive) are good starting points. We will implement the filter based on the title that \u201ccontains\u201d the name \u201cbeginners\u201d. Code books/views.py class SearchResultsListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/search_results.html' queryset = Book.objects.filter(title__icontains='beginners') # new Refresh the search results page and now only a book with the title containing \u201cbeginners\u201d is displayed. Success! Search page for \u201cbeginners\u201d For basic filtering most of the time the built-in queryset methods251 of filter(), all(), get(), or exclude() will be enough. However there is also a very robust and detailed 249 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#contains 250 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#icontains 251 https://docs.djangoproject.com/en/2.2/topics/db/queries/#other-queryset-methods Chapter 15: Search QuerySet API252 available as well that is worthy of further study. 296 Q Objects Using filter() is powerful and it\u2019s even possible to chain filters253 together such as search for all titles that contain \u201cbeginners\u201d and \u201cdjango\u201d. However often you\u2019ll want more complex lookups that can use \u201cOR\u201d not just \u201cAND\u201d; that\u2019s when it is time to turn to Q objects254. Here\u2019s an example where we set the filter to look for a result that matches a title of either \u201cbeginners\u201d or \u201capi\u201d. It\u2019s as simple as importing Q at the top of the file and then subtly tweaking our existing query. The | symbol represents the \u201cor\u201d operator. We can filter on any available field: not just title but also author or price as desired. As the number of filters grows it can be helpful to separate out the queryset override via get_queryset(). That\u2019s what we\u2019ll do here but note that this choice is optional. Code books/views.py from django.db.models import Q # new ... class SearchResultsListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' def get_queryset(self): # new 252 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#queryset-api 253 https://docs.djangoproject.com/en/2.2/topics/db/queries/#chaining-filters 254 https://docs.djangoproject.com/en/2.2/topics/db/queries/#complex-lookups-with-q-objects Chapter 15: Search return Book.objects.filter( Q(title__icontains='beginners') | Q(title__icontains='api') ) Refresh the search results page to see the new result. 297 Search with Q objects Now let\u2019s turn our attention to the corresponding search form so that rather than hardcode our filters in we can populate them based on the user\u2019s search query. Forms Fundamentally a web form is simple: it takes user input and sends it to a URL via either a GET or POST method. However in practice this fundamental behavior of the web can be monstrously complex. The first issue is sending the form data: where does the data actually go and how do we handle it once there? Not to mention there are numerous security concerns whenever we allow users to submit data to a website. Chapter 15: Search 298 There are only two options for \u201chow\u201d a form is sent: either via GET or POST HTTP methods. A POST bundles up form data, encodes it for transmission, sends it to the server, and then receives a response. Any request that changes the state of the database\u2013creates, edits, or deletes data\u2013should use a POST. A GET bundles form data into a string that is added to the destination URL. GET should only be used for requests that do not affect the state of the application, such as a search where nothing within the database is changing, basically we\u2019re just doing a filtered list view. If you look at the URL after visiting Google.com you\u2019ll see your search query in the actual search results page URL itself. For more information, Mozilla has detailed guides on both sending form data255 and form data validation256 that are worth reviewing if you\u2019re not already familiar with form basics. Search Form Let\u2019s add a basic search form to the current homepage right now. It can easily be placed in the navbar or on a dedicated search page as desired in the future. We start with HTML tags and use Bootstrap\u2019s styling to make them look nice. The action specifies where to redirect the user after the form is submitted, which will be the search_results page. As with all URL links this is the URL name for the page. Then we indicate the desired method of get rather than post. The second part of the form is the input which contains the user search query. We provide it with a variable name, q, which will be later visible in the URL and also available 255 https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data 256 https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation Chapter 15: Search 299 in the views file. We add Bootstrap styling with the class, specify the type of input is text, add a Placeholder which is default text that prompts the user. The last part, aria-label, is the name provided to screen reader users. Accessibility is a big part of web development and should always be considered from the beginning: include aria-labels with all your forms! Code {% extends '_base.html' %} {% load static %} {% block title %}Home{% endblock title %} {% block content %} Homepage {% endblock content %} Navigate to the homepage and the new search box is present. Chapter 15: Search 300 Homepage with search box Try inputting a search, for example for \u201chello.\u201d Upon hitting Return you are redirected to the search results page. Note in particular the URL contains the search query http://127.0.0.1:8000/books/search/?q=hello257 . URL with query string However the results haven\u2019t changed! And that\u2019s because our SearchResultsListView still has the hardcoded values from before. The last step is to take the user\u2019s search query, represented by q in the URL, and pass it in to the actual search filters. 257 http://127.0.0.1:8000/books/search/?q=hello Chapter 15: Search Code books/views.py class SearchResultsListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/search_results.html' 301 def get_queryset(self): # new query = self.request.GET.get('q') return Book.objects.filter( Q(title__icontains=query) | Q(author__icontains=query) ) What changed? We added a query variable that takes the value of q from the form submission. Then updated our filter to use query on either a title or an author field. That\u2019s it! Refresh the search results page\u2013it still has the same URL with our query\u2013and the result is expected: no results on either title or author for \u201chello\u201d. Go back to the homepage and try a new search such as for \u201cdjango\u201d or \u201cbeginners\u201d or \u201cwilliam\u201d to see the complete search functionality in action. Git Make sure to save our current work in this chapter by committing the new code to Git. Chapter 15: Search Command Line $ git status $ git add . $ git commit -m 'ch15' The official source code for this chapter is available on Github258 . 302 Conclusion Our basic search is now complete, but we\u2019ve only scratched the surface of potential search optimizations. For example, maybe we want a button added to the search form that could be clicked in addition to hitting the Return key? Or better yet include form validation. Beyond filtering with ANDs and ORs there are other factors if we want a Google-quality search, things like relevancy and much more. A next-step would be to use a third-party package like django-watson259 or django- haystack260 to add more advanced search. Or given that we\u2019re using PostgreSQL as the database take advantage of its full text search261 . A final option is either use an enterprise-level solution like ElasticSearch262 that must be running on a separate server (not the hardest thing with Docker), or rely on a hosted solution like Swiftype263 or Algolia264 . In the next chapter we\u2019ll explore the many performance optimizations available in Django as we prepare our Bookstore project for eventual deployment. 258 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch15-search 259 https://github.com/etianen/django-watson 260 https://github.com/django-haystack/django-haystack 261 https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/ 262 https://www.elastic.co/ 263 https://swiftype.com/ 264 https://www.algolia.com/","title":"33"},{"location":"33/#booksurlspy","text":"from django.urls import path from .views import BookListView, BookDetailView, SearchResultsListView # new urlpatterns = [ path('', BookListView.as_view(), name='book_list'), path(' ', BookDetailView.as_view(), name='book_detail'), path('search/', SearchResultsListView.as_view(), name='search_results'), # new ] Next up is the view SearchResultsListView which is, for now, a listing of all available books. That\u2019s a prime candidate for using ListView. Its template will be called search_- results.html and live within the templates/books/ directory. The only new code is for SearchResultsListView as we have previously imported both ListView and the Book model at the top of the file. Code","title":"books/urls.py"},{"location":"33/#booksviewspy","text":"... class SearchResultsListView(ListView): # new model = Book context_object_name = 'book_list' template_name = 'books/search_results.html' Last up is our template which must be created. Chapter 15: Search 293 Command Line $ touch templates/books/search_results.html For now it will list all available book\u2019s by title, author, and price. Code {% extends '_base.html' %} {% block title %}Search{% endblock title %} {% block content %}","title":"books/views.py"},{"location":"33/#booksviewspy_1","text":"class SearchResultsListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/search_results.html' queryset = Book.objects.filter(title__icontains='beginners') # new Refresh the search results page and now only a book with the title containing \u201cbeginners\u201d is displayed. Success! Search page for \u201cbeginners\u201d For basic filtering most of the time the built-in queryset methods251 of filter(), all(), get(), or exclude() will be enough. However there is also a very robust and detailed 249 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#contains 250 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#icontains 251 https://docs.djangoproject.com/en/2.2/topics/db/queries/#other-queryset-methods Chapter 15: Search QuerySet API252 available as well that is worthy of further study. 296 Q Objects Using filter() is powerful and it\u2019s even possible to chain filters253 together such as search for all titles that contain \u201cbeginners\u201d and \u201cdjango\u201d. However often you\u2019ll want more complex lookups that can use \u201cOR\u201d not just \u201cAND\u201d; that\u2019s when it is time to turn to Q objects254. Here\u2019s an example where we set the filter to look for a result that matches a title of either \u201cbeginners\u201d or \u201capi\u201d. It\u2019s as simple as importing Q at the top of the file and then subtly tweaking our existing query. The | symbol represents the \u201cor\u201d operator. We can filter on any available field: not just title but also author or price as desired. As the number of filters grows it can be helpful to separate out the queryset override via get_queryset(). That\u2019s what we\u2019ll do here but note that this choice is optional. Code","title":"books/views.py"},{"location":"33/#booksviewspy_2","text":"from django.db.models import Q # new ... class SearchResultsListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/book_list.html' def get_queryset(self): # new 252 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#queryset-api 253 https://docs.djangoproject.com/en/2.2/topics/db/queries/#chaining-filters 254 https://docs.djangoproject.com/en/2.2/topics/db/queries/#complex-lookups-with-q-objects Chapter 15: Search return Book.objects.filter( Q(title__icontains='beginners') | Q(title__icontains='api') ) Refresh the search results page to see the new result. 297 Search with Q objects Now let\u2019s turn our attention to the corresponding search form so that rather than hardcode our filters in we can populate them based on the user\u2019s search query. Forms Fundamentally a web form is simple: it takes user input and sends it to a URL via either a GET or POST method. However in practice this fundamental behavior of the web can be monstrously complex. The first issue is sending the form data: where does the data actually go and how do we handle it once there? Not to mention there are numerous security concerns whenever we allow users to submit data to a website. Chapter 15: Search 298 There are only two options for \u201chow\u201d a form is sent: either via GET or POST HTTP methods. A POST bundles up form data, encodes it for transmission, sends it to the server, and then receives a response. Any request that changes the state of the database\u2013creates, edits, or deletes data\u2013should use a POST. A GET bundles form data into a string that is added to the destination URL. GET should only be used for requests that do not affect the state of the application, such as a search where nothing within the database is changing, basically we\u2019re just doing a filtered list view. If you look at the URL after visiting Google.com you\u2019ll see your search query in the actual search results page URL itself. For more information, Mozilla has detailed guides on both sending form data255 and form data validation256 that are worth reviewing if you\u2019re not already familiar with form basics. Search Form Let\u2019s add a basic search form to the current homepage right now. It can easily be placed in the navbar or on a dedicated search page as desired in the future. We start with HTML tags and use Bootstrap\u2019s styling to make them look nice. The action specifies where to redirect the user after the form is submitted, which will be the search_results page. As with all URL links this is the URL name for the page. Then we indicate the desired method of get rather than post. The second part of the form is the input which contains the user search query. We provide it with a variable name, q, which will be later visible in the URL and also available 255 https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data 256 https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation Chapter 15: Search 299 in the views file. We add Bootstrap styling with the class, specify the type of input is text, add a Placeholder which is default text that prompts the user. The last part, aria-label, is the name provided to screen reader users. Accessibility is a big part of web development and should always be considered from the beginning: include aria-labels with all your forms! Code {% extends '_base.html' %} {% load static %} {% block title %}Home{% endblock title %} {% block content %}","title":"books/views.py"},{"location":"33/#booksviewspy_3","text":"class SearchResultsListView(ListView): model = Book context_object_name = 'book_list' template_name = 'books/search_results.html' 301 def get_queryset(self): # new query = self.request.GET.get('q') return Book.objects.filter( Q(title__icontains=query) | Q(author__icontains=query) ) What changed? We added a query variable that takes the value of q from the form submission. Then updated our filter to use query on either a title or an author field. That\u2019s it! Refresh the search results page\u2013it still has the same URL with our query\u2013and the result is expected: no results on either title or author for \u201chello\u201d. Go back to the homepage and try a new search such as for \u201cdjango\u201d or \u201cbeginners\u201d or \u201cwilliam\u201d to see the complete search functionality in action. Git Make sure to save our current work in this chapter by committing the new code to Git. Chapter 15: Search Command Line $ git status $ git add . $ git commit -m 'ch15' The official source code for this chapter is available on Github258 . 302 Conclusion Our basic search is now complete, but we\u2019ve only scratched the surface of potential search optimizations. For example, maybe we want a button added to the search form that could be clicked in addition to hitting the Return key? Or better yet include form validation. Beyond filtering with ANDs and ORs there are other factors if we want a Google-quality search, things like relevancy and much more. A next-step would be to use a third-party package like django-watson259 or django- haystack260 to add more advanced search. Or given that we\u2019re using PostgreSQL as the database take advantage of its full text search261 . A final option is either use an enterprise-level solution like ElasticSearch262 that must be running on a separate server (not the hardest thing with Docker), or rely on a hosted solution like Swiftype263 or Algolia264 . In the next chapter we\u2019ll explore the many performance optimizations available in Django as we prepare our Bookstore project for eventual deployment. 258 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch15-search 259 https://github.com/etianen/django-watson 260 https://github.com/django-haystack/django-haystack 261 https://docs.djangoproject.com/en/2.2/ref/contrib/postgres/search/ 262 https://www.elastic.co/ 263 https://swiftype.com/ 264 https://www.algolia.com/","title":"books/views.py"},{"location":"34/","text":"Chapter 16: Performance The first priority for any website is that it must work properly and contain proper tests. But if your project is fortunate enough to receive a large amount of traffic the focus quickly shifts to performance and making things as efficient as possible. This is a fun and challenging exercise for many engineers, but it can also be a trap. The computer scientist Donald Knuth has a famous quote265 worth reading in its entirety: \u201cThe real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.\u201d While it\u2019s important to set up proper monitoring so you can optimize your project later on, don\u2019t focus too much on it upfront. There\u2019s no way to properly mimic production environments locally. And there is no way to predict exactly how a site\u2019s traffic will look. But it is possible to spend far too much time seeking out tiny performance gains in the early stages instead of talking to users and making larger code improvements! In this chapter we\u2019ll focus on the broad strokes of Django-related performance and highlight areas worth further investigation at scale. Generally speaking performance comes down to four major areas: optimizing database queries, caching, indexes, and compressing front-end assets like images, JavaScript, and CSS. 265 http://www.paulgraham.com/knuth.html Chapter 16: Performance 304 django-debug-toolbar Before we can optimize our database queries we need to see them. And for this the default tool in the Django community is the third-party package django-debug- toolbar266 . It comes with a configurable set of panels to inspect the complete re- quest/response cycle of any given page. Per usual we can install it within Docker and stop our running containers. Command Line $ docker-compose exec web pipenv install django-debug-toolbar==2.0 $ docker-compose down There are three separate configurations to set in our bookstore_project/settings.py file: 1. INSTALLED_APPS 2. Middleware 3. INTERNAL_IPS First add Debug Toolbar to the INSTALLED_APPS configuration. Note that the proper name is debug_toolbar not django_debug_toolbar as might be expected. 266 https://github.com/jazzband/django-debug-toolbar Chapter 16: Performance Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites', Third-party 'crispy_forms', 'allauth', 'allauth.account', 'debug_toolbar', # new 305 ] Local 'users.apps.UsersConfig', 'pages.apps.PagesConfig', 'books.apps.BooksConfig', 'orders.apps.OrdersConfig', Second, add Debug Toolbar to the Middleware where it is primarily implemented. Chapter 16: Performance Code bookstore_project/settings.py MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', # new ] 306 And third, set the INTERNAL_IPS267 as well. If we were not in Docker this could be set to '127.0.0.1', however, since we\u2019re running our web server within Docker an additional step is required so that it matches the machine address of Docker. Add the following lines at the bottom of bookstore_project/settings.py. Code bookstore_project/settings.py ... django-debug-toolbar import socket hostname, _, ips = socket.gethostbyname_ex(socket.gethostname()) INTERNAL_IPS = [ip[:-1] + \"1\" for ip in ips] Phew. That looks a bit scary, but basically it ensures that our INTERNAL_IPS matches that of our Docker host. 267 https://docs.djangoproject.com/en/2.2/ref/settings/#internal-ips Chapter 16: Performance 307 Now rebuild the base image so it contains the package and the updated settings configuration. Command Line $ docker-compose up -d --build There\u2019s one last step and that is to update our URLconf. We only want Debug Toolbar to appear if DEBUG is true so we\u2019ll add logic to display it only in this case. Code bookstore_project/urls.py ... if settings.DEBUG: import debug_toolbar urlpatterns = [ path(' debug /', include(debug_toolbar.urls)), ] + urlpatterns Now if you refresh the homepage you\u2019ll see the django-debug-toolbar on the righthand side. Chapter 16: Performance 308 Debug Toolbar If you click the \u201cHide\u201d link on top it becomes a much smaller sidebar on the righthand side of the page. Analyzing Pages Debug Toolbar has many possible customizations268 but the default settings visible tell us a lot about our homepage. For instance, we can see the current version of Django being used as well as the Time it took to load the page. Also the specific request called 268 https://django-debug-toolbar.readthedocs.io/en/latest/index.html Chapter 16: Performance 309 which was HomePageView. This may seem obvious but on large codebases especially if you are jumping in as a new developer, it may not be obvious which view is calling which page. Debug Toolbar is a helpful quickstart to understanding existing sites. Probably the most useful item, however, is SQL which shows two queries are being run and the time for them. If you click on it even more data appears. Debug Toolbar Large and poorly optimized sites can have hundreds or even thousands of queries being run on a single page! Chapter 16: Performance 310 select_related and prefetch_related What are the options if you do find yourself working on a Django site with way too many SQL queries per page? In general, though, fewer large queries will be faster than many smaller queries, though it\u2019s possible and required to test this in practice. Two common techniques for doing so are select_related()269 and prefetch_related()270. select_related is used for single-value relationships through a forward one-to-many or a one-to-one relationship. It creates a SQL join and includes the fields of the related object in the SELECT statement, which results in all related objects being included in a single more complex database query. This single query is typically more performant than multiple, smaller queries. prefetch_related is used for a set or list of objects like a many-to-many or many-to- one relationship. Under the hood a lookup is done for each relationship and the \u201cjoin\u201d occurs in Python, not SQL. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using select_related, in addition to the foreign key and one-to-one relationships that are supported by select_related. Implementing one or both on a website is a common first pass towards reducing queries and loading time for a given page. Caching Consider that our Bookstore project is a dynamic website. Each time a user requests a page our server has to make various calculations including database queries, template rendering, and so on before servicing it. This takes time and is much slower than simply reading a file from a static site where the content does not change. 269 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#select-related 270 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#prefetch-related Chapter 16: Performance 311 On large sites, though, this type of overhead can be quite slow and caching is one of the first solutions in a web developer\u2019s tool bag. Implementing caching on our current project is definitely overkill, but we will nonetheless review the options and implement a basic version. A cache is an in-memory storing of an expensive calculation. Once executed it doesn\u2019t need to be run again! The two most popular options are Memcached271 which features native Django support and Redis272 which is commonly implemented with the django- redis273 third-party package. Django has its own cache framework274 which includes four different caching options in descending order of granularity: 1) The per-site cache275 is the simplest to set up and caches your entire site. 2) The per-view cache276 lets you cache individual views. 3) Template fragment caching277 lets you specify a specific section of a template to cache. 4) The low-level cache API278 lets you manually set, retrieve, and maintain specific objects in the cache. Why not just cache everything all the time? One reason is that cache memory is expensive, as it\u2019s stored as RAM: think about the cost of going from 8GB to 16GB of RAM on your laptop vs. 256GB to 512GB of hard drive space. Another is the cache must be \u201cwarm,\u201d that is filled with updated content, so depending upon the needs of a site, optimizing the cache so it is accurate, but not wasteful, takes quite a bit of tuning. 271 https://docs.djangoproject.com/en/2.2/topics/cache/#memcached 272 https://redis.io/ 273 https://github.com/niwinz/django-redis 274 https://docs.djangoproject.com/en/2.2/topics/cache/ 275 https://docs.djangoproject.com/en/2.2/topics/cache/#the-per-site-cache 276 https://docs.djangoproject.com/en/2.2/topics/cache/#the-per-view-cache 277 https://docs.djangoproject.com/en/2.2/topics/cache/#template-fragment-caching 278 https://docs.djangoproject.com/en/2.2/topics/cache/#the-low-level-cache-api Chapter 16: Performance 312 If you wanted to implement per-site caching, which is the simplest approach, you\u2019d add UpdateCacheMiddleware at the very top of the MIDDLEWARE configuration in bookstore_- project/settings.py and FetchFromCacheMiddleware at the very bottom. Also set three additional fields CACHE_MIDDLEWARE_ALIAS 279 , CACHE_MIDDLEWARE_SECONDS280and CACHE_MIDDLEWARE_KEY_PREFIX281 . Code bookstore_project/settings.py MIDDLEWARE = [ 'django.middleware.cache.UpdateCacheMiddleware', # new 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', 'django.middleware.cache.FetchFromCacheMiddleware', # new ] , CACHE_MIDDLEWARE_ALIAS = 'default' CACHE_MIDDLEWARE_SECONDS = 604800 CACHE_MIDDLEWARE_KEY_PREFIX = '' The only default you might want to adjust is CACHE_MIDDLEWARE_SECONDS which is the default number of seconds (600) to cache a page. After the period is up, the cache 279 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-CACHE_MIDDLEWARE_ALIAS 280 https://docs.djangoproject.com/en/2.2/ref/settings/#cache-middleware-seconds 281 https://docs.djangoproject.com/en/2.2/ref/settings/#cache-middleware-key-prefix Chapter 16: Performance 313 expires and becomes empty. A good default when starting out is 604800 seconds or 1 week (60secs x 60minutes x 168hours) for a site with content that doesn\u2019t change very often. But if you find your cache filling up rapidly or you are running a site where the content changes on a frequent basis, shortening this setting is a good first step. Implementing caching is strictly optional at this point though. Once a website is up and running the need for caching\u2013per site, per page, and so on\u2013will quickly become apparent. There is also extra complexity as Memcache must be run as a separate instance. On the hosting service Heroku, which we\u2019ll use in chapter 18 for deployment, there is a free tier available via Memcachier282. Indexes Indexing283 is a common technique for speeding up database performance. It is a separate data structure that allows faster searches and is typically only applied to the primary key in a model. The downside is that indexes require additional space on a disk so they must be used with care. Tempting as it is to simply add indexes to primary keys from the beginning, it is better to start without them and only add them later based on production needs. A general rule of thumb is that if a given field is being used frequently, such as 10-25% of all queries, it is a prime candidate to be indexed. Historically an index field could be created by adding db_index=True to any model field. For example, if we wanted to add one to the id field in our Book model it would look as follows (don\u2019t actually implement this though). 282 https://elements.heroku.com/addons/memcachier 283 https://en.wikipedia.org/wiki/Database_index Chapter 16: Performance Code books/models.py ... class Book(models.Model): id = models.UUIDField( primary_key=True, db_index=True, # new default=uuid.uuid4, editable=False) ... 314 This change would need to be added via a migration file and migrated. Starting in Django 1.11284 class-based model indexes were added so can include in the Meta section instead285 . So you could write the previous index as follows: Code books/models.py ... class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) ... class Meta: indexes = [ # new 284 https://docs.djangoproject.com/en/2.2/releases/1.11/#class-based-model-indexes 285 https://docs.djangoproject.com/en/2.2/ref/models/options/#indexes Chapter 16: Performance models.Index(fields=['id'], name='id_index'), ] permissions = [ (\"special_status\", \"Can read all books\"), ] 315 Since we\u2019ve changed the model we must create a migrations file and apply it. Command Line $ docker-compose exec web python manage.py makemigrations books $ docker-compose exec web python manage.py migrate django-extensions Another very popular third-party package for inspecting a Django project is django- extensions286 which adds a number of helpful custom extensions287. One that is particularly helpful is shell_plus288 which will autoload all models into the shell which makes working with the Django ORM much easier. Front-end Assets A final major source of bottlenecks in a website is loading front-end assets. CSS and JavaScript can become quite large and therefore tools like django-compressor289 can help to minimize their size. 286 https://github.com/django-extensions/django-extensions 287 https://django-extensions.readthedocs.io/en/latest/command_extensions.html 288 https://django-extensions.readthedocs.io/en/latest/shell_plus.html 289 https://github.com/django-compressor/django-compressor Chapter 16: Performance 316 Images are often the first place to look in terms of asset size. The static/media file set up we have in place will scale to a quite large size, but for truly large sites it is worth investigating the use of a Content Delivery Network (CDN)290 for images instead of storing them on the server filesystem. You can also serve different size images to users. For example, rather than shrink down a large book cover for a list or search page you could store a smaller thumbnail version instead and serve that where needed. The third-party easy-thumbnails291 package is a good place to start for this. A fantastic free e-book on the topic is Essential Image Optimization292 by Addy Osmani that goes into depth on image optimization and automations. As a final check there are automated tests for front-end speed such as Google\u2019s PageSpeed Insights 293 that will assign a score based on how quickly a page loads. Git There\u2019s been a lot of code changes in this chapter so make sure to commit everything with Git. Command Line $ git status $ git add . $ git commit -m 'ch16' If you have any errors make sure to look at your logs with docker-compose logs and compare your code with the official source code on Github294 . 290 https://en.wikipedia.org/wiki/Content_delivery_network 291 https://github.com/SmileyChris/easy-thumbnails 292 https://images.guide/ 293 https://developers.google.com/speed/pagespeed/insights/ 294 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch16-performance Chapter 16: Performance 317 Conclusion There is an almost endless list of performance optimizations that can be applied to a project. But take care to recall Donald Knuth\u2019s sage advice and not go too crazy on this. Bottlenecks will reveal themselves in production and should largely be addressed then; not in advance. You should remember that performance problems are a good problem to have! They are fixable and mean that your project is being heavily used.","title":"34"},{"location":"34/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.sites',","title":"bookstore_project/settings.py"},{"location":"34/#third-party","text":"'crispy_forms', 'allauth', 'allauth.account', 'debug_toolbar', # new 305 ]","title":"Third-party"},{"location":"34/#local","text":"'users.apps.UsersConfig', 'pages.apps.PagesConfig', 'books.apps.BooksConfig', 'orders.apps.OrdersConfig', Second, add Debug Toolbar to the Middleware where it is primarily implemented. Chapter 16: Performance Code","title":"Local"},{"location":"34/#bookstore_projectsettingspy_1","text":"MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', # new ] 306 And third, set the INTERNAL_IPS267 as well. If we were not in Docker this could be set to '127.0.0.1', however, since we\u2019re running our web server within Docker an additional step is required so that it matches the machine address of Docker. Add the following lines at the bottom of bookstore_project/settings.py. Code","title":"bookstore_project/settings.py"},{"location":"34/#bookstore_projectsettingspy_2","text":"...","title":"bookstore_project/settings.py"},{"location":"34/#django-debug-toolbar","text":"import socket hostname, _, ips = socket.gethostbyname_ex(socket.gethostname()) INTERNAL_IPS = [ip[:-1] + \"1\" for ip in ips] Phew. That looks a bit scary, but basically it ensures that our INTERNAL_IPS matches that of our Docker host. 267 https://docs.djangoproject.com/en/2.2/ref/settings/#internal-ips Chapter 16: Performance 307 Now rebuild the base image so it contains the package and the updated settings configuration. Command Line $ docker-compose up -d --build There\u2019s one last step and that is to update our URLconf. We only want Debug Toolbar to appear if DEBUG is true so we\u2019ll add logic to display it only in this case. Code","title":"django-debug-toolbar"},{"location":"34/#bookstore_projecturlspy","text":"... if settings.DEBUG: import debug_toolbar urlpatterns = [ path(' debug /', include(debug_toolbar.urls)), ] + urlpatterns Now if you refresh the homepage you\u2019ll see the django-debug-toolbar on the righthand side. Chapter 16: Performance 308 Debug Toolbar If you click the \u201cHide\u201d link on top it becomes a much smaller sidebar on the righthand side of the page. Analyzing Pages Debug Toolbar has many possible customizations268 but the default settings visible tell us a lot about our homepage. For instance, we can see the current version of Django being used as well as the Time it took to load the page. Also the specific request called 268 https://django-debug-toolbar.readthedocs.io/en/latest/index.html Chapter 16: Performance 309 which was HomePageView. This may seem obvious but on large codebases especially if you are jumping in as a new developer, it may not be obvious which view is calling which page. Debug Toolbar is a helpful quickstart to understanding existing sites. Probably the most useful item, however, is SQL which shows two queries are being run and the time for them. If you click on it even more data appears. Debug Toolbar Large and poorly optimized sites can have hundreds or even thousands of queries being run on a single page! Chapter 16: Performance 310 select_related and prefetch_related What are the options if you do find yourself working on a Django site with way too many SQL queries per page? In general, though, fewer large queries will be faster than many smaller queries, though it\u2019s possible and required to test this in practice. Two common techniques for doing so are select_related()269 and prefetch_related()270. select_related is used for single-value relationships through a forward one-to-many or a one-to-one relationship. It creates a SQL join and includes the fields of the related object in the SELECT statement, which results in all related objects being included in a single more complex database query. This single query is typically more performant than multiple, smaller queries. prefetch_related is used for a set or list of objects like a many-to-many or many-to- one relationship. Under the hood a lookup is done for each relationship and the \u201cjoin\u201d occurs in Python, not SQL. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using select_related, in addition to the foreign key and one-to-one relationships that are supported by select_related. Implementing one or both on a website is a common first pass towards reducing queries and loading time for a given page. Caching Consider that our Bookstore project is a dynamic website. Each time a user requests a page our server has to make various calculations including database queries, template rendering, and so on before servicing it. This takes time and is much slower than simply reading a file from a static site where the content does not change. 269 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#select-related 270 https://docs.djangoproject.com/en/2.2/ref/models/querysets/#prefetch-related Chapter 16: Performance 311 On large sites, though, this type of overhead can be quite slow and caching is one of the first solutions in a web developer\u2019s tool bag. Implementing caching on our current project is definitely overkill, but we will nonetheless review the options and implement a basic version. A cache is an in-memory storing of an expensive calculation. Once executed it doesn\u2019t need to be run again! The two most popular options are Memcached271 which features native Django support and Redis272 which is commonly implemented with the django- redis273 third-party package. Django has its own cache framework274 which includes four different caching options in descending order of granularity: 1) The per-site cache275 is the simplest to set up and caches your entire site. 2) The per-view cache276 lets you cache individual views. 3) Template fragment caching277 lets you specify a specific section of a template to cache. 4) The low-level cache API278 lets you manually set, retrieve, and maintain specific objects in the cache. Why not just cache everything all the time? One reason is that cache memory is expensive, as it\u2019s stored as RAM: think about the cost of going from 8GB to 16GB of RAM on your laptop vs. 256GB to 512GB of hard drive space. Another is the cache must be \u201cwarm,\u201d that is filled with updated content, so depending upon the needs of a site, optimizing the cache so it is accurate, but not wasteful, takes quite a bit of tuning. 271 https://docs.djangoproject.com/en/2.2/topics/cache/#memcached 272 https://redis.io/ 273 https://github.com/niwinz/django-redis 274 https://docs.djangoproject.com/en/2.2/topics/cache/ 275 https://docs.djangoproject.com/en/2.2/topics/cache/#the-per-site-cache 276 https://docs.djangoproject.com/en/2.2/topics/cache/#the-per-view-cache 277 https://docs.djangoproject.com/en/2.2/topics/cache/#template-fragment-caching 278 https://docs.djangoproject.com/en/2.2/topics/cache/#the-low-level-cache-api Chapter 16: Performance 312 If you wanted to implement per-site caching, which is the simplest approach, you\u2019d add UpdateCacheMiddleware at the very top of the MIDDLEWARE configuration in bookstore_- project/settings.py and FetchFromCacheMiddleware at the very bottom. Also set three additional fields CACHE_MIDDLEWARE_ALIAS 279 , CACHE_MIDDLEWARE_SECONDS280and CACHE_MIDDLEWARE_KEY_PREFIX281 . Code","title":"bookstore_project/urls.py"},{"location":"34/#bookstore_projectsettingspy_3","text":"MIDDLEWARE = [ 'django.middleware.cache.UpdateCacheMiddleware', # new 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', 'django.middleware.cache.FetchFromCacheMiddleware', # new ] , CACHE_MIDDLEWARE_ALIAS = 'default' CACHE_MIDDLEWARE_SECONDS = 604800 CACHE_MIDDLEWARE_KEY_PREFIX = '' The only default you might want to adjust is CACHE_MIDDLEWARE_SECONDS which is the default number of seconds (600) to cache a page. After the period is up, the cache 279 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-CACHE_MIDDLEWARE_ALIAS 280 https://docs.djangoproject.com/en/2.2/ref/settings/#cache-middleware-seconds 281 https://docs.djangoproject.com/en/2.2/ref/settings/#cache-middleware-key-prefix Chapter 16: Performance 313 expires and becomes empty. A good default when starting out is 604800 seconds or 1 week (60secs x 60minutes x 168hours) for a site with content that doesn\u2019t change very often. But if you find your cache filling up rapidly or you are running a site where the content changes on a frequent basis, shortening this setting is a good first step. Implementing caching is strictly optional at this point though. Once a website is up and running the need for caching\u2013per site, per page, and so on\u2013will quickly become apparent. There is also extra complexity as Memcache must be run as a separate instance. On the hosting service Heroku, which we\u2019ll use in chapter 18 for deployment, there is a free tier available via Memcachier282. Indexes Indexing283 is a common technique for speeding up database performance. It is a separate data structure that allows faster searches and is typically only applied to the primary key in a model. The downside is that indexes require additional space on a disk so they must be used with care. Tempting as it is to simply add indexes to primary keys from the beginning, it is better to start without them and only add them later based on production needs. A general rule of thumb is that if a given field is being used frequently, such as 10-25% of all queries, it is a prime candidate to be indexed. Historically an index field could be created by adding db_index=True to any model field. For example, if we wanted to add one to the id field in our Book model it would look as follows (don\u2019t actually implement this though). 282 https://elements.heroku.com/addons/memcachier 283 https://en.wikipedia.org/wiki/Database_index Chapter 16: Performance Code","title":"bookstore_project/settings.py"},{"location":"34/#booksmodelspy","text":"... class Book(models.Model): id = models.UUIDField( primary_key=True, db_index=True, # new default=uuid.uuid4, editable=False) ... 314 This change would need to be added via a migration file and migrated. Starting in Django 1.11284 class-based model indexes were added so can include in the Meta section instead285 . So you could write the previous index as follows: Code","title":"books/models.py"},{"location":"34/#booksmodelspy_1","text":"... class Book(models.Model): id = models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False) ... class Meta: indexes = [ # new 284 https://docs.djangoproject.com/en/2.2/releases/1.11/#class-based-model-indexes 285 https://docs.djangoproject.com/en/2.2/ref/models/options/#indexes Chapter 16: Performance models.Index(fields=['id'], name='id_index'), ] permissions = [ (\"special_status\", \"Can read all books\"), ] 315 Since we\u2019ve changed the model we must create a migrations file and apply it. Command Line $ docker-compose exec web python manage.py makemigrations books $ docker-compose exec web python manage.py migrate django-extensions Another very popular third-party package for inspecting a Django project is django- extensions286 which adds a number of helpful custom extensions287. One that is particularly helpful is shell_plus288 which will autoload all models into the shell which makes working with the Django ORM much easier. Front-end Assets A final major source of bottlenecks in a website is loading front-end assets. CSS and JavaScript can become quite large and therefore tools like django-compressor289 can help to minimize their size. 286 https://github.com/django-extensions/django-extensions 287 https://django-extensions.readthedocs.io/en/latest/command_extensions.html 288 https://django-extensions.readthedocs.io/en/latest/shell_plus.html 289 https://github.com/django-compressor/django-compressor Chapter 16: Performance 316 Images are often the first place to look in terms of asset size. The static/media file set up we have in place will scale to a quite large size, but for truly large sites it is worth investigating the use of a Content Delivery Network (CDN)290 for images instead of storing them on the server filesystem. You can also serve different size images to users. For example, rather than shrink down a large book cover for a list or search page you could store a smaller thumbnail version instead and serve that where needed. The third-party easy-thumbnails291 package is a good place to start for this. A fantastic free e-book on the topic is Essential Image Optimization292 by Addy Osmani that goes into depth on image optimization and automations. As a final check there are automated tests for front-end speed such as Google\u2019s PageSpeed Insights 293 that will assign a score based on how quickly a page loads. Git There\u2019s been a lot of code changes in this chapter so make sure to commit everything with Git. Command Line $ git status $ git add . $ git commit -m 'ch16' If you have any errors make sure to look at your logs with docker-compose logs and compare your code with the official source code on Github294 . 290 https://en.wikipedia.org/wiki/Content_delivery_network 291 https://github.com/SmileyChris/easy-thumbnails 292 https://images.guide/ 293 https://developers.google.com/speed/pagespeed/insights/ 294 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch16-performance Chapter 16: Performance 317 Conclusion There is an almost endless list of performance optimizations that can be applied to a project. But take care to recall Donald Knuth\u2019s sage advice and not go too crazy on this. Bottlenecks will reveal themselves in production and should largely be addressed then; not in advance. You should remember that performance problems are a good problem to have! They are fixable and mean that your project is being heavily used.","title":"books/models.py"},{"location":"35/","text":"Chapter 17: Security The World Wide Web is a dangerous place. There are many bad actors and even more automated bots that will try to hack into your website and cause ill. Therefore understanding and implementing security features is a must in any website. Fortunately Django has a very strong record when it comes to security thanks to its years of experience handling web security issues as well as a robust and regular security update cycle. New feature releases295 come out roughly every 9 months such as 2.2 to 3.0 but there are also patch releases around bugs and security like 2.2.2 to 2.2.3 that occur almost monthly. However as with any tool it\u2019s important to implement security features correctly and in this chapter we\u2019ll cover how to do so in our bookstore project. Social Engineering The biggest security risk to any website is ultimately not technical: it is people. The term social engineering296 refers to the technique of finding individuals with access to a system who will willingly or unwillingly share their their login credentials with a bad actor. These days phishing297 is probably the most likely culprit if you are in a technical organization. All it takes is one bad click on an email link for a malicious actor to potentially gain access to the system, or at least all the access the compromised employee has. 295 https://www.djangoproject.com/download/ 296 https://en.wikipedia.org/wiki/Social_engineering_%28security%29 297 https://en.wikipedia.org/wiki/Phishing Chapter 17: Security 319 To mitigate this risk, implement a robust permissions scheme and only provide the exact security access an employee needs, not more. Does every engineer need access to the production database? Probably not. Do non-engineers need write access? Again, probably not.These are discussions best had up front and a good default is to only add permissions as needed, not to default to superuser status for everyone! Django updates Keeping your project up-to-date with the latest version of Django is another impor- tant way to stay secure. And I don\u2019t just mean being current with the latest feature release298 (2.2, 3.0, 3.1, etc) which comes out roughly every 9 months. There are also monthly security patch updates that take the form of 2.2.1, 2.2.2, 2.2.3, etc. What about long-term support (LTS) releases? Certain feature releases designated as LTS receive security and data loss fixes for a guaranteed period of time, usually around 3 years. For example, Django 2.2 is an LTS and will be supported into 2022 when Django 4.0 is released as the next LTS version. Can you stay on LTS versions? Yes. Should you? No. It is better and more secure to stay up-to-date. Resist the temptation and reality of many real-world projects which is not to devote a portion of developer time to staying current with Django versions. A website is like a car: it needs regular maintenance to run at its best. You are only compounding the problem if you put off updates. How to update? Django features deprecation warnings299 that can and should be run for each new release by typing python -Wa manage.py test. It is far better to update from 2.0 to 2.1 to 2.2 and run the deprecation warnings each time rather than skipping multiple versions. 298 https://www.djangoproject.com/download/ 299 https://docs.djangoproject.com/en/2.2/howto/upgrade-version/ Chapter 17: Security 320 Deployment Checklist To assist with with deployment and checking security settings, the Django docs contain a dedicated deployment checklist300 that further describes security settings. Even better there is a command we can run to automate Django\u2019s recommendations, python manage.py check --deploy, that will check if a project is deployment ready. It uses the Django system check framework301 which can be used to customize similar commands in mature projects. Since we are working in Docker we must prepend docker-compose exec web to the command though. Command Line $ docker-compose exec web python manage.py check --deploy System check identified some issues: WARNINGS: ... System check identified 9 issues (0 silenced). How nice! A descriptive and lengthy list of issues which we can go through one-by- one to prepare our Bookstore project. Local vs. Production Ultimately our local development settings will differ from those used in production. There are a number of techniques to manage this complexity including the use of 300 https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/ 301 https://docs.djangoproject.com/en/2.2/topics/checks/ Chapter 17: Security 321 multiple settings.py files, however, a cleaner approach is to take advantage of our existing use of Docker and environment variables. Let\u2019s start by adding an ENVIRONMENT setting into bookstore_project/settings.py near the top of the file, right below BASE_DIR. Set the default to production since it\u2019s always good to default to production settings, otherwise you risk deploying a project that has security vulnerabilities. Code bookstore_project/settings.py ENVIRONMENT = os.environ.get('ENVIRONMENT', default='development') Within the existing docker-compose.yml file add an ENVIRONMENT variable for development. docker-compose.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - ENVIRONMENT=development ... Now here\u2019s where the magic happens. We\u2019ll create a dedicated docker-compose-prod.yml file just for production settings. Chapter 17: Security 322 Command Line $ touch docker-compose-prod.yml Copy and paste the existing docker-compose.yml file into the docker-compose-prod.yml file and remove any volumes. The volumes serve to persist information locally within the Docker containers but are not needed in production. Then change ENVIRONMENT from development to production. docker-compose-prod.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - ENVIRONMENT=production - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+ ev82 - DEBUG=1 - STRIPE_TEST_PUBLISHABLE_KEY= - STRIPE_TEST_SECRET_KEY= ports: - 8000:8000 depends_on: - db db: image: postgres:11 Chapter 17: Security 323 Make sure SECRET_KEY, STRIPE_TEST_PUBLISHABLE_KEY, and STRIPE_TEST_SECRET_KEY con- tain your own specific values, not the placeholders included here! DEBUG First up is the DEBUG302 setting, currently set to \u201cTrue\u201d with the number \u201c1\u201d in the Compose file. Debug should never be on when deploying a site to production. One of debug modes main features is detailed error pages that display a host of metadata about the environment including most currently defined settings. This is helpful for spotting errors but a recipe for potential hackers to compromise a website. Debug mode also remembers every SQL query executed which helps with debugging, but dramatically consumes memory on a production server. Therefore we must switch DEBUG to \u201c0\u201d, or \u201cFalse\u201d, in docker-compose-prod.yml. docker-compose-prod.yml DEBUG=0 ALLOWED HOSTS Next up is the ALLOWED_HOSTS303 configuration which controls the host/domain names our Django site can serve. It likely exists right below DEBUG in the bookstore - project/settings.py file. By default in development it is set to [], an empty list. But for production, when DEBUG is False, it must be set explicitly and include values. The two ways we access it locally which are via either 127.0.0.1 or localhost. We will be using Heroku for deployments in the next section and all of its hosted sites are at the subdomain of '.herokuapp.com', so we can add that now. 302 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-DEBUG 303 https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts Chapter 17: Security Code bookstore_project/settings.py ALLOWED_HOSTS = ['.herokuapp.com', 'localhost', '127.0.0.1'] 324 To confirm, spin down the Docker host now and restart it via the -f flag to specify an alternate compose file304. By default Docker assumes a docker-compose.yml so adding the -f flag is unnecessary in that case. Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build $ docker-compose exec web python manage.py migrate The --build flag is added for the initial building of the image, along with all the corresponding software packages, for the new compose file. Also migrate is run on the new database. This is an entirely new instance of our project! As such it won\u2019t have a superuser account or any of our data such as book information. But that\u2019s OK for now; that information can be added in production and for now our focus to is pass the deployment checklist! Run the --deploy check again. Command Line $ docker-compose exec web python manage.py check --deploy ... System check identified 7 issues (0 silenced). There is still a long string of warnings but only 7 issues now, not 9 because DEBUG and ALLOWED_HOSTS have been fixed. Success! Two down and many more to go. 304 https://docs.docker.com/compose/reference/overview/ Chapter 17: Security 325 Web Security Now it is time for a brief dive into web security. Django handles most common use cases, however, it is still vital to understand frequent attack methods and the steps Django takes to mitigate them. You can find an overview on the Django security page305, but we\u2019ll go into further depth here. Django comes by default with a number of additional security middlewares306 that guard against other request/response cycle attacks. A full explanation of each is beyond the scope of this book, but it is worth reading about the protections provided by the Django security team over the years. Do not change the defaults without good cause. SQL injection Let\u2019s start with a SQL injection attack307 which occurs when a malicious user can execute arbitrary SQL code on a database. Consider a log in form on a site. What happens if a malicious user instead types DELETE from users WHERE user_id=user_- id? If this is run against the database without proper protections it could result in the deletion of all user records! Not good. This XKCD comic308 provides a humorous though potentially accurate example of how this can occur. Fortunately the Django ORM automatically sanitizes user inputs by default when constructing querysets to prevent this type of attack. Where you need to be careful is that Django does provide the option to execute custom sql309 or raw queries310. These 305 https://docs.djangoproject.com/en/2.2/topics/security/ 306 https://docs.djangoproject.com/en/2.2/ref/middleware/#django.middleware.security.SecurityMiddleware 307 https://en.wikipedia.org/wiki/SQL_injection 308 https://www.xkcd.com/327/ 309 https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-custom-sql 310 https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-raw-queries Chapter 17: Security 326 should both be used with extreme caution since they could open up a vulnerability to SQL injection. The non-profit Open Web Application Security Project (OWASP) has a fantastic and very detailed SQL Injection Cheat Sheet311 that is recommended for further reading. XSS (Cross Site Scripting) Cross-site scripting (XSS)312 is another classic attack that occurs when an attacker is able to inject small bits of code onto web pages viewed by other people. This code, typically JavaScript, if stored in the database will then be retrieved and displayed to other users. For example, consider the form used for writing book reviews on our current site. What if instead of typing, \u201cThis book was great\u201d a user typed something with JavaScript? For example, alert('hello'); . If this script were stored on the database then every future user\u2019s page would have a pop-up saying \u201chello\u201d. While this particular example is more annoying than dangerous, a site vulnerable to XSS is very dangerous because a malicious user could insert any JavaScript into the page, including JavaScript that steals pretty much anything from an unsuspecting user. To prevent an XSS attack Django templates automatically escape313 specific charac- ters that are potentially dangerous including brackets (< and >), single quotes ', double quotes \", and the ampersand &. There are some edge cases where you might want to turn autoescape off314 but this should be used with extreme caution. One step we do want to take is to set SECURE_BROWSER_XSS_FILTER315 to True 311 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/SQL_Injection_Prevention_Cheat_ Sheet.md 312 https://en.wikipedia.org/wiki/Cross-site_scripting 313 https://docs.djangoproject.com/en/2.2/ref/templates/language/#automatic-html-escaping 314 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#std:templatetag-autoescape 315 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-browser-xss-filter Chapter 17: Security 327 which will use the X-XSS-Protection Header316 to help guard against XSS attacks. We can use the ENVIRONMENT setting now to add if/else logic at the bottom of our bookstore_project/settings.py file. If we are in production, then make sure that SECURE_BROWSER_XSS_FILTER is set to True. Code bookstore_project/settings.py production if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True # new Spin down the container and start it up again to register the changes to our settings file. Running the --deploy check again shows we\u2019re now down to 6 issues! Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d $ docker-compose exec web python manage.py check --deploy Even with Django\u2019s protections in place always be careful when storing HTML in a database that will then be displayed to users. OWASP\u2019s XSS Cheat Sheet317 is recommended for further reading. Cross-Site Request Forgery (CSRF) A Cross-Site Request Forgery (CSRF)318 is the third major type of attack but generally lesser known than SQL Injection or XSS. Fundamentally it exploits that trust a site has 316 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection 317 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_ Cheat_Sheet.md 318 https://en.wikipedia.org/wiki/Cross-site_request_forgery Chapter 17: Security 328 in a user\u2019s web browser. When a user logs in to a website, let\u2019s call it a banking website for illustration purposes, the server sends back a session token for that user. This is included in the HTTP Headers of all future requests and authenticates the user. But what happens if a malicious actor somehow obtains access to this session token? For example, consider a user who logs into their bank in one browser tab. Then in another tab they open their email and click on an email link from a malicious actor. This link looks legitimate, but in fact it is pointing to the user\u2019s bank which they are still logged into! So instead of leaving a blog comment on this fake site, behind the scenes the user\u2019s credentials are used to transfer money from their account to the hacker\u2019s account. In practice there are multiple ways to obtain a user\u2019s credentials via a CSRF attack, not just links, but hidden forms, special image tags, and even AJAX requests. Django provides CSRF protection319 by including a random secret key both as a cookie via CSRF Middleware320 and in a form via the csrf_token321 template tag. A 3rd party website will not have access to a user\u2019s cookies and therefore any discrepancy between the two keys causes an error. As ever, Django does allow customization: you can disable the CSRF middleware and use the csrf_protect()322 template tag on specific views. However, undertake this step with extreme caution. The OWASP CSRF Cheat Sheet323 provides a comprehensive look at the issue. Almost all major websites have been victims of CSRF attacks at some point in time. A good rule of thumb is whenever you have a form on your site, think about whether 319 https://docs.djangoproject.com/en/2.2/ref/csrf/#how-it-works 320 https://docs.djangoproject.com/en/2.2/ref/middleware/#django.middleware.csrf.CsrfViewMiddleware 321 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#csrf-token 322 https://docs.djangoproject.com/en/2.2/ref/csrf/#django.views.decorators.csrf.csrf_protect 323 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_ Prevention_Cheat_Sheet.md Chapter 17: Security you need to include the csrf_token tag in it. Most of the time you will! 329 Clickjacking Protection Clickjacking324 is yet another attack when a malicious site tricks a user into clicking on a hidden frame. An internal frame, known as an iframe, is commonly used to embed one website within another. For example, if you wanted to include a Google Map or YouTube video on your site you would include the iframe tag that puts that site within your own. This is very convenient. But it has a security risk which is that a frame can be hidden from a user. Consider if a user is already logged into their Amazon account and then visits a malicious site that purports to be a picture of kittens. The user clicks on said malicious site to see more kittens, but in fact they click an iFrame of an Amazon item that is unknowingly purchased. This is but one example of clickjacking. To prevent against this Django comes with a default clickjacking middleware325 that checks whether or not a resource can be loaded within a frame or iframe. You can turn this protection off if desired or even set it at a per view level. As ever, do so with a degree of caution and research326 . For production though we will set it to DENY rather than the default of SAMEORIGIN. Note that strings must be placed around it so use 'DENY' rather than simply DENY. 324 https://en.wikipedia.org/wiki/Clickjacking 325 https://docs.djangoproject.com/en/2.2/ref/clickjacking/#clickjacking-prevention 326 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Clickjacking_Defense_Cheat_Sheet. md Chapter 17: Security Code bookstore_project/settings.py production if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' # new Spin down the server, rebuild it, and run the tests again. Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build $ docker-compose exec web python manage.py check --deploy Now only 5 issues remaining! 330 HTTPS/SSL All modern websites should use HTTPS327 which provides encrypted communication between a client and server. HTTP (Hypertext Transfer Protocol)328 is the backbone of the modern web, but it does not, by default, have encryption. The \u201cs\u201d in HTTPS refers to its encrypted nature first due to SSL (Secure Sockets Layer) and these days its successor TLS (Transport Layer Security)329 . With HTTPS enabled, which we will do in our deployment chapter, malicious actors can\u2019t sniff the incoming and outgoing traffic for data like authentication credentials or API keys. 327 https://en.wikipedia.org/wiki/HTTPS 328 https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol 329 https://en.wikipedia.org/wiki/Transport_Layer_Security Chapter 17: Security 331 In our settings.py file we can force all non-HTTPS traffic to be redirected to HTTPS. Add the following line at the bottom of the file. Code bookstore_project/settings.py production if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True # new HTTP Strict Transport Security (HSTS) HTTP Strict Transport Security (HSTS)330 is a security policy that lets our server enforce that web browsers should only interact via HTTPS by adding a Strict- Transport-Security header331 . It\u2019s best to start with a small value of time for testing, such as 3600 seconds, one hour, and then later extending it to one year (314,536,000 seconds). This is done in the SECURE_HSTS_SECONDS332 config which is implicitly set to 0. We don\u2019t have any subdomains in our Bookstore project so it makes sense to force any subdomains to also exclusively use SSL via the SECURE_HSTS_INCLUDE_SUB- DOMAINS333 setting. Also SECURE_HSTS_PRELOAD334 to True. 330 https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security 331 https://docs.djangoproject.com/en/2.2/ref/middleware/#http-strict-transport-security 332 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECURE_HSTS_SECONDS 333 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-hsts-include-subdomains 334 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-hsts-preload Chapter 17: Security 332 Finally also SECURE_CONTENT_TYPE_NOSNIFF335 which controls nosniff336 set to True Code bookstore_project/settings.py production if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True SECURE_HSTS_SECONDS = 3600 # new SECURE_HSTS_INCLUDE_SUBDOMAINS = True # new SECURE_HSTS_PRELOAD = True # new SECURE_CONTENT_TYPE_NOSNIFF = True # new Secure Cookies An HTTP Cookie 337 is used to store information on a client\u2019s computer such as authentication credentials. This is necessary because the HTTP protocol is stateless by design: there\u2019s no way to tell if a user is authenticated other than including an identifier in the HTTP Header! Django uses sessions and cookies for this, as do most websites. But cookies can and should be forced over HTTPS as well via the SESSION_COOKIE_SECURE338 config. It defaults to False so we must set it to True in production. We can also do the same for CSRF cookies using CSRF_COOKIE_SECURE339 . 335 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECURE_CONTENT_TYPE_NOSNIFF 336 https://docs.djangoproject.com/en/2.2/ref/middleware/#x-content-type-options 337 https://en.wikipedia.org/wiki/HTTP_cookie 338 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SESSION_COOKIE_SECURE 339 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-CSRF_COOKIE_SECURE Chapter 17: Security Code bookstore_project/settings.py production if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True SECURE_HSTS_SECONDS = 3600 SECURE_HSTS_INCLUDE_SUBDOMAINS = True SECURE_HSTS_PRELOAD = True SECURE_CONTENT_TYPE_NOSNIFF = True SESSION_COOKIE_SECURE = True # new CSRF_COOKIE_SECURE = True # new 333 Spin down and up the containers one last time and then run the --check to confirm there are no more errors! Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build $ docker-compose exec web python manage.py check --deploy System check identified no issues (0 silenced). Admin Hardening So far it may seem as though the advice is to rely on Django defaults, use HTTPS, add csrf_token tags on forms, and set a permissions structure. All true. But one step Django does not take on our behalf is hardening the Django admin. Chapter 17: Security 334 Consider that every Django website sets the admin, by default, to the /admin URL. This is a prime suspect for any hacker trying to access a Django site. Therefore an easy step is to simply change the admin URL to literally anything else! To do this, open up the bookstore_project/urls.py file. In this example it\u2019s been set to anything-but-admin/. Code bookstore_project/urls.py from django.conf import settings from django.conf.urls.static import static from django.contrib import admin from django.urls import path, include urlpatterns = [ Django admin path('anything-but-admin/', admin.site.urls), # new User management path('accounts/', include('allauth.urls')), Local apps path('', include('pages.urls')), path('books/', include('books.urls')), ] if settings.DEBUG: urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) Chapter 17: Security 335 A fun 3rd party package django-admin-honeypot340 will generate a fake admin log in screen and email site admins341 the IP address of anyone trying to attack your site at /admin. These IP addresses can then be added to a blocked address list for the site. It\u2019s also possible via django-two-factor-auth342 to add two-factor authentication to your admin for an even further layer of protection. Git This chapter has been particularly heavy on code changes so make sure to commit all the updates with Git. Command Line $ git status $ git add . $ git commit -m 'ch17' If you have any errors, check your logs with docker-compose logs and compare you code with the official source code on Github343. Conclusion Security is a major concern for any website, especially one that handles payments like our Bookstore. By using a docker-compose-prod.yml file we can accurately test, within Docker, our production settings before deploying the site live. Django comes with many built-in security features and with the addition of the deployment checklist we can now deploy our site now with a high degree of confidence that it is secure. 340 https://github.com/dmpayton/django-admin-honeypot 341 https://docs.djangoproject.com/en/2.2/ref/settings/#admins 342 https://github.com/Bouke/django-two-factor-auth 343 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch17-security Chapter 17: Security 336 Ultimately security is constant battle and while the steps in this chapter cover most areas of concern, keeping your website up-to-date with the latest Django version is vital for continued safety.","title":"35"},{"location":"35/#bookstore_projectsettingspy","text":"ENVIRONMENT = os.environ.get('ENVIRONMENT', default='development') Within the existing docker-compose.yml file add an ENVIRONMENT variable for development. docker-compose.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - ENVIRONMENT=development ... Now here\u2019s where the magic happens. We\u2019ll create a dedicated docker-compose-prod.yml file just for production settings. Chapter 17: Security 322 Command Line $ touch docker-compose-prod.yml Copy and paste the existing docker-compose.yml file into the docker-compose-prod.yml file and remove any volumes. The volumes serve to persist information locally within the Docker containers but are not needed in production. Then change ENVIRONMENT from development to production. docker-compose-prod.yml version: '3.7' services: web: build: . command: python /code/manage.py runserver 0.0.0.0:8000 environment: - ENVIRONMENT=production - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+ ev82 - DEBUG=1 - STRIPE_TEST_PUBLISHABLE_KEY= - STRIPE_TEST_SECRET_KEY= ports: - 8000:8000 depends_on: - db db: image: postgres:11 Chapter 17: Security 323 Make sure SECRET_KEY, STRIPE_TEST_PUBLISHABLE_KEY, and STRIPE_TEST_SECRET_KEY con- tain your own specific values, not the placeholders included here! DEBUG First up is the DEBUG302 setting, currently set to \u201cTrue\u201d with the number \u201c1\u201d in the Compose file. Debug should never be on when deploying a site to production. One of debug modes main features is detailed error pages that display a host of metadata about the environment including most currently defined settings. This is helpful for spotting errors but a recipe for potential hackers to compromise a website. Debug mode also remembers every SQL query executed which helps with debugging, but dramatically consumes memory on a production server. Therefore we must switch DEBUG to \u201c0\u201d, or \u201cFalse\u201d, in docker-compose-prod.yml. docker-compose-prod.yml DEBUG=0 ALLOWED HOSTS Next up is the ALLOWED_HOSTS303 configuration which controls the host/domain names our Django site can serve. It likely exists right below DEBUG in the bookstore - project/settings.py file. By default in development it is set to [], an empty list. But for production, when DEBUG is False, it must be set explicitly and include values. The two ways we access it locally which are via either 127.0.0.1 or localhost. We will be using Heroku for deployments in the next section and all of its hosted sites are at the subdomain of '.herokuapp.com', so we can add that now. 302 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-DEBUG 303 https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts Chapter 17: Security Code","title":"bookstore_project/settings.py"},{"location":"35/#bookstore_projectsettingspy_1","text":"ALLOWED_HOSTS = ['.herokuapp.com', 'localhost', '127.0.0.1'] 324 To confirm, spin down the Docker host now and restart it via the -f flag to specify an alternate compose file304. By default Docker assumes a docker-compose.yml so adding the -f flag is unnecessary in that case. Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build $ docker-compose exec web python manage.py migrate The --build flag is added for the initial building of the image, along with all the corresponding software packages, for the new compose file. Also migrate is run on the new database. This is an entirely new instance of our project! As such it won\u2019t have a superuser account or any of our data such as book information. But that\u2019s OK for now; that information can be added in production and for now our focus to is pass the deployment checklist! Run the --deploy check again. Command Line $ docker-compose exec web python manage.py check --deploy ... System check identified 7 issues (0 silenced). There is still a long string of warnings but only 7 issues now, not 9 because DEBUG and ALLOWED_HOSTS have been fixed. Success! Two down and many more to go. 304 https://docs.docker.com/compose/reference/overview/ Chapter 17: Security 325 Web Security Now it is time for a brief dive into web security. Django handles most common use cases, however, it is still vital to understand frequent attack methods and the steps Django takes to mitigate them. You can find an overview on the Django security page305, but we\u2019ll go into further depth here. Django comes by default with a number of additional security middlewares306 that guard against other request/response cycle attacks. A full explanation of each is beyond the scope of this book, but it is worth reading about the protections provided by the Django security team over the years. Do not change the defaults without good cause. SQL injection Let\u2019s start with a SQL injection attack307 which occurs when a malicious user can execute arbitrary SQL code on a database. Consider a log in form on a site. What happens if a malicious user instead types DELETE from users WHERE user_id=user_- id? If this is run against the database without proper protections it could result in the deletion of all user records! Not good. This XKCD comic308 provides a humorous though potentially accurate example of how this can occur. Fortunately the Django ORM automatically sanitizes user inputs by default when constructing querysets to prevent this type of attack. Where you need to be careful is that Django does provide the option to execute custom sql309 or raw queries310. These 305 https://docs.djangoproject.com/en/2.2/topics/security/ 306 https://docs.djangoproject.com/en/2.2/ref/middleware/#django.middleware.security.SecurityMiddleware 307 https://en.wikipedia.org/wiki/SQL_injection 308 https://www.xkcd.com/327/ 309 https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-custom-sql 310 https://docs.djangoproject.com/en/2.2/topics/db/sql/#executing-raw-queries Chapter 17: Security 326 should both be used with extreme caution since they could open up a vulnerability to SQL injection. The non-profit Open Web Application Security Project (OWASP) has a fantastic and very detailed SQL Injection Cheat Sheet311 that is recommended for further reading. XSS (Cross Site Scripting) Cross-site scripting (XSS)312 is another classic attack that occurs when an attacker is able to inject small bits of code onto web pages viewed by other people. This code, typically JavaScript, if stored in the database will then be retrieved and displayed to other users. For example, consider the form used for writing book reviews on our current site. What if instead of typing, \u201cThis book was great\u201d a user typed something with JavaScript? For example, alert('hello'); . If this script were stored on the database then every future user\u2019s page would have a pop-up saying \u201chello\u201d. While this particular example is more annoying than dangerous, a site vulnerable to XSS is very dangerous because a malicious user could insert any JavaScript into the page, including JavaScript that steals pretty much anything from an unsuspecting user. To prevent an XSS attack Django templates automatically escape313 specific charac- ters that are potentially dangerous including brackets (< and >), single quotes ', double quotes \", and the ampersand &. There are some edge cases where you might want to turn autoescape off314 but this should be used with extreme caution. One step we do want to take is to set SECURE_BROWSER_XSS_FILTER315 to True 311 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/SQL_Injection_Prevention_Cheat_ Sheet.md 312 https://en.wikipedia.org/wiki/Cross-site_scripting 313 https://docs.djangoproject.com/en/2.2/ref/templates/language/#automatic-html-escaping 314 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#std:templatetag-autoescape 315 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-browser-xss-filter Chapter 17: Security 327 which will use the X-XSS-Protection Header316 to help guard against XSS attacks. We can use the ENVIRONMENT setting now to add if/else logic at the bottom of our bookstore_project/settings.py file. If we are in production, then make sure that SECURE_BROWSER_XSS_FILTER is set to True. Code","title":"bookstore_project/settings.py"},{"location":"35/#bookstore_projectsettingspy_2","text":"","title":"bookstore_project/settings.py"},{"location":"35/#production","text":"if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True # new Spin down the container and start it up again to register the changes to our settings file. Running the --deploy check again shows we\u2019re now down to 6 issues! Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d $ docker-compose exec web python manage.py check --deploy Even with Django\u2019s protections in place always be careful when storing HTML in a database that will then be displayed to users. OWASP\u2019s XSS Cheat Sheet317 is recommended for further reading. Cross-Site Request Forgery (CSRF) A Cross-Site Request Forgery (CSRF)318 is the third major type of attack but generally lesser known than SQL Injection or XSS. Fundamentally it exploits that trust a site has 316 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection 317 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_ Cheat_Sheet.md 318 https://en.wikipedia.org/wiki/Cross-site_request_forgery Chapter 17: Security 328 in a user\u2019s web browser. When a user logs in to a website, let\u2019s call it a banking website for illustration purposes, the server sends back a session token for that user. This is included in the HTTP Headers of all future requests and authenticates the user. But what happens if a malicious actor somehow obtains access to this session token? For example, consider a user who logs into their bank in one browser tab. Then in another tab they open their email and click on an email link from a malicious actor. This link looks legitimate, but in fact it is pointing to the user\u2019s bank which they are still logged into! So instead of leaving a blog comment on this fake site, behind the scenes the user\u2019s credentials are used to transfer money from their account to the hacker\u2019s account. In practice there are multiple ways to obtain a user\u2019s credentials via a CSRF attack, not just links, but hidden forms, special image tags, and even AJAX requests. Django provides CSRF protection319 by including a random secret key both as a cookie via CSRF Middleware320 and in a form via the csrf_token321 template tag. A 3rd party website will not have access to a user\u2019s cookies and therefore any discrepancy between the two keys causes an error. As ever, Django does allow customization: you can disable the CSRF middleware and use the csrf_protect()322 template tag on specific views. However, undertake this step with extreme caution. The OWASP CSRF Cheat Sheet323 provides a comprehensive look at the issue. Almost all major websites have been victims of CSRF attacks at some point in time. A good rule of thumb is whenever you have a form on your site, think about whether 319 https://docs.djangoproject.com/en/2.2/ref/csrf/#how-it-works 320 https://docs.djangoproject.com/en/2.2/ref/middleware/#django.middleware.csrf.CsrfViewMiddleware 321 https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#csrf-token 322 https://docs.djangoproject.com/en/2.2/ref/csrf/#django.views.decorators.csrf.csrf_protect 323 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_ Prevention_Cheat_Sheet.md Chapter 17: Security you need to include the csrf_token tag in it. Most of the time you will! 329 Clickjacking Protection Clickjacking324 is yet another attack when a malicious site tricks a user into clicking on a hidden frame. An internal frame, known as an iframe, is commonly used to embed one website within another. For example, if you wanted to include a Google Map or YouTube video on your site you would include the iframe tag that puts that site within your own. This is very convenient. But it has a security risk which is that a frame can be hidden from a user. Consider if a user is already logged into their Amazon account and then visits a malicious site that purports to be a picture of kittens. The user clicks on said malicious site to see more kittens, but in fact they click an iFrame of an Amazon item that is unknowingly purchased. This is but one example of clickjacking. To prevent against this Django comes with a default clickjacking middleware325 that checks whether or not a resource can be loaded within a frame or iframe. You can turn this protection off if desired or even set it at a per view level. As ever, do so with a degree of caution and research326 . For production though we will set it to DENY rather than the default of SAMEORIGIN. Note that strings must be placed around it so use 'DENY' rather than simply DENY. 324 https://en.wikipedia.org/wiki/Clickjacking 325 https://docs.djangoproject.com/en/2.2/ref/clickjacking/#clickjacking-prevention 326 https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Clickjacking_Defense_Cheat_Sheet. md Chapter 17: Security Code","title":"production"},{"location":"35/#bookstore_projectsettingspy_3","text":"","title":"bookstore_project/settings.py"},{"location":"35/#production_1","text":"if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' # new Spin down the server, rebuild it, and run the tests again. Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build $ docker-compose exec web python manage.py check --deploy Now only 5 issues remaining! 330 HTTPS/SSL All modern websites should use HTTPS327 which provides encrypted communication between a client and server. HTTP (Hypertext Transfer Protocol)328 is the backbone of the modern web, but it does not, by default, have encryption. The \u201cs\u201d in HTTPS refers to its encrypted nature first due to SSL (Secure Sockets Layer) and these days its successor TLS (Transport Layer Security)329 . With HTTPS enabled, which we will do in our deployment chapter, malicious actors can\u2019t sniff the incoming and outgoing traffic for data like authentication credentials or API keys. 327 https://en.wikipedia.org/wiki/HTTPS 328 https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol 329 https://en.wikipedia.org/wiki/Transport_Layer_Security Chapter 17: Security 331 In our settings.py file we can force all non-HTTPS traffic to be redirected to HTTPS. Add the following line at the bottom of the file. Code","title":"production"},{"location":"35/#bookstore_projectsettingspy_4","text":"","title":"bookstore_project/settings.py"},{"location":"35/#production_2","text":"if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True # new HTTP Strict Transport Security (HSTS) HTTP Strict Transport Security (HSTS)330 is a security policy that lets our server enforce that web browsers should only interact via HTTPS by adding a Strict- Transport-Security header331 . It\u2019s best to start with a small value of time for testing, such as 3600 seconds, one hour, and then later extending it to one year (314,536,000 seconds). This is done in the SECURE_HSTS_SECONDS332 config which is implicitly set to 0. We don\u2019t have any subdomains in our Bookstore project so it makes sense to force any subdomains to also exclusively use SSL via the SECURE_HSTS_INCLUDE_SUB- DOMAINS333 setting. Also SECURE_HSTS_PRELOAD334 to True. 330 https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security 331 https://docs.djangoproject.com/en/2.2/ref/middleware/#http-strict-transport-security 332 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECURE_HSTS_SECONDS 333 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-hsts-include-subdomains 334 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-hsts-preload Chapter 17: Security 332 Finally also SECURE_CONTENT_TYPE_NOSNIFF335 which controls nosniff336 set to True Code","title":"production"},{"location":"35/#bookstore_projectsettingspy_5","text":"","title":"bookstore_project/settings.py"},{"location":"35/#production_3","text":"if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True SECURE_HSTS_SECONDS = 3600 # new SECURE_HSTS_INCLUDE_SUBDOMAINS = True # new SECURE_HSTS_PRELOAD = True # new SECURE_CONTENT_TYPE_NOSNIFF = True # new Secure Cookies An HTTP Cookie 337 is used to store information on a client\u2019s computer such as authentication credentials. This is necessary because the HTTP protocol is stateless by design: there\u2019s no way to tell if a user is authenticated other than including an identifier in the HTTP Header! Django uses sessions and cookies for this, as do most websites. But cookies can and should be forced over HTTPS as well via the SESSION_COOKIE_SECURE338 config. It defaults to False so we must set it to True in production. We can also do the same for CSRF cookies using CSRF_COOKIE_SECURE339 . 335 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECURE_CONTENT_TYPE_NOSNIFF 336 https://docs.djangoproject.com/en/2.2/ref/middleware/#x-content-type-options 337 https://en.wikipedia.org/wiki/HTTP_cookie 338 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SESSION_COOKIE_SECURE 339 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-CSRF_COOKIE_SECURE Chapter 17: Security Code","title":"production"},{"location":"35/#bookstore_projectsettingspy_6","text":"","title":"bookstore_project/settings.py"},{"location":"35/#production_4","text":"if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True SECURE_HSTS_SECONDS = 3600 SECURE_HSTS_INCLUDE_SUBDOMAINS = True SECURE_HSTS_PRELOAD = True SECURE_CONTENT_TYPE_NOSNIFF = True SESSION_COOKIE_SECURE = True # new CSRF_COOKIE_SECURE = True # new 333 Spin down and up the containers one last time and then run the --check to confirm there are no more errors! Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build $ docker-compose exec web python manage.py check --deploy System check identified no issues (0 silenced). Admin Hardening So far it may seem as though the advice is to rely on Django defaults, use HTTPS, add csrf_token tags on forms, and set a permissions structure. All true. But one step Django does not take on our behalf is hardening the Django admin. Chapter 17: Security 334 Consider that every Django website sets the admin, by default, to the /admin URL. This is a prime suspect for any hacker trying to access a Django site. Therefore an easy step is to simply change the admin URL to literally anything else! To do this, open up the bookstore_project/urls.py file. In this example it\u2019s been set to anything-but-admin/. Code","title":"production"},{"location":"35/#bookstore_projecturlspy","text":"from django.conf import settings from django.conf.urls.static import static from django.contrib import admin from django.urls import path, include urlpatterns = [","title":"bookstore_project/urls.py"},{"location":"35/#django-admin","text":"path('anything-but-admin/', admin.site.urls), # new","title":"Django admin"},{"location":"35/#user-management","text":"path('accounts/', include('allauth.urls')),","title":"User management"},{"location":"35/#local-apps","text":"path('', include('pages.urls')), path('books/', include('books.urls')), ] if settings.DEBUG: urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) Chapter 17: Security 335 A fun 3rd party package django-admin-honeypot340 will generate a fake admin log in screen and email site admins341 the IP address of anyone trying to attack your site at /admin. These IP addresses can then be added to a blocked address list for the site. It\u2019s also possible via django-two-factor-auth342 to add two-factor authentication to your admin for an even further layer of protection. Git This chapter has been particularly heavy on code changes so make sure to commit all the updates with Git. Command Line $ git status $ git add . $ git commit -m 'ch17' If you have any errors, check your logs with docker-compose logs and compare you code with the official source code on Github343. Conclusion Security is a major concern for any website, especially one that handles payments like our Bookstore. By using a docker-compose-prod.yml file we can accurately test, within Docker, our production settings before deploying the site live. Django comes with many built-in security features and with the addition of the deployment checklist we can now deploy our site now with a high degree of confidence that it is secure. 340 https://github.com/dmpayton/django-admin-honeypot 341 https://docs.djangoproject.com/en/2.2/ref/settings/#admins 342 https://github.com/Bouke/django-two-factor-auth 343 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch17-security Chapter 17: Security 336 Ultimately security is constant battle and while the steps in this chapter cover most areas of concern, keeping your website up-to-date with the latest Django version is vital for continued safety.","title":"Local apps"},{"location":"36/","text":"Chapter 18: Deployment So far we have been working entirely in a local development environment on our com- puter. But now it is time to deploy our project so that it is accessible to the public. In truth the topic of deployment is worth an entire book on its own. Compared to other web frameworks Django is very hands-off and agnostic on the topic. There are no one-click deploys for most hosting platforms and while this requires more developer work it also allows, in typical Django fashion, for a high degree of customization. In the previous chapter we configured a completely separate docker-compose-prod.yml file and updated bookstore_project/settings.py to be production-ready. In this chapter we\u2019ll review how to choose a hosting provider, add a production-ready web server, and properly configure static/media files before deploying our Bookstore site! PaaS vs IaaS The first question is whether to use a Platform-as-a-Service (PaaS) or Infrastructure- as-a-Service (IaaS). A PaaS is an opinionated hosting option that handles much of the initial configuration and scaling needed for a website. Popular examples include Heroku344, PythonAnywhere345, and Dokku346 among many others. While a PaaS costs more money upfront than an IaaS it saves an incredible amount of developer time, handles security updates automatically, and can be quickly scaled. An IaaS by contrast provides total flexibility is typically cheaper, but it requires a high degree of knowledge and effort to properly set up. Prominent IaaS options include 344 https://www.heroku.com/ 345 https://www.pythonanywhere.com/details/django_hosting 346 http://dokku.viewdocs.io/dokku/ Chapter 18: Deployment 338 DigitalOcean347, Linode348 , Amazon EC2349 , and Google Compute Engine350 among many others. So which one to use? Django developers tend to fall in one of two camps: either they already have a deployment pipeline configured with their IaaS of choice or they use a PaaS. Since the former is far more complex and varies widely in its configuration, we will use a PaaS in this book, specifically Heroku. The choice of Heroku is somewhat arbitrary, but it is a mature technology that comes with a truly free tier sufficient for deploying our Bookstore project. WhiteNoise For local development Django relies on the staticfiles app351 to automatically gather and serve static files from across the entire project. This is convenient, but quite inefficient and likely insecure, too. For production the collectstatic352 must be run to compile all static files into a single directory specified by STATIC_ROOT353 . They can then be served either on the same server, a separate server, or a dedicated cloud service/CDN by updating STATICFILES_STORAGE354 . While it is tempting to jump right to a dedicated CDN beware premature optimization: the default option of serving from your server\u2019s filesystem scales to a quite large size. If you decide to go this route the django-storages355 project is a popular approach. 347 https://www.digitalocean.com/ 348 https://www.linode.com/ 349 https://aws.amazon.com/ec2/ 350 https://cloud.google.com/compute/ 351 https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#module-django.contrib.staticfiles 352 https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#collectstatic 353 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-STATIC_ROOT 354 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-STATICFILES_STORAGE 355 https://github.com/jschneier/django-storages Chapter 18: Deployment 339 In our project we will rely on serving files from our server with the aid of the WhiteNoise356 project which works extremely well on Heroku and is both faster and more configurable than Django defaults. The first step is to install whitenoise within Docker and stop the running containers. Command Line $ docker-compose exec web pipenv install whitenoise==4.1.4 $ docker-compose down We won\u2019t rebuild the image just yet because we also have to make changes to our settings. Since we\u2019re using Docker it\u2019s possible to switch to WhiteNoise locally as well as in production. While it\u2019s possible to do this by passing in a --nostatic flag to the runserver command, this becomes tiring in practice. A better approach is to add whitenoise.runserver_nostatic before django.contrib.stataticfiles in the INSTALLED_APPS config which will do the same thing. We\u2019ll also add it to our MIDDLEWARE right below SecurityMiddleware. Code bookstore_project/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new 'django.contrib.staticfiles', 'django.contrib.sites', 356 https://github.com/evansd/whitenoise Chapter 18: Deployment 340 ... ] MIDDLEWARE = [ 'django.middleware.cache.UpdateCacheMiddleware', 'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new ... ] With all our changes made we can now start up our project again in local development mode. Command Line $ docker-compose up -d --build WhiteNoise has additional options to serve compressed content and far-future cache headers on content that won\u2019t change. But for now, go ahead and run the collectstatic command one more time. Command Line $ docker-compose exec web python manage.py collectstatic There will be a warning about overwriting existing files. That\u2019s fine. Type \u201cyes\u201d and then hit the \u201cReturn\u201d key to continue. Chapter 18: Deployment 341 Gunicorn When we ran the startproject command way back in Chapter 3 a wsgi.py file was created with a default WSGI (Web Server Gateway Interface)357 configuration. This is a specification for how a web app (like our Bookstore project) communicates with a web server. For production it is common to swap this out for either Gunicorn358 or uWSGI359 . Both offer a performance boost, but Gunicorn is more focused and simpler to implement so it will be our choice. The first step is to install it within our project and stopping our containers. Command Line $ docker-compose exec web pipenv install gunicorn==19.9.0 $ docker-compose down Because we are using Docker our local environment can mimic production quite easily so we\u2019ll update both docker-compose.yml and docker-compose-prod.yml to use Gunicorn instead of the local server. docker-compose.yml command: python /code/manage.py runserver 0.0.0.0:8000 command: gunicorn bookstore_project.wsgi -b 0.0.0.0:8000 # new 357 https://wsgi.readthedocs.io/en/latest/ 358 https://gunicorn.org/ 359 https://uwsgi-docs.readthedocs.io/en/latest/ Chapter 18: Deployment 342 docker-compose-prod.yml command: python /code/manage.py runserver 0.0.0.0:8000 command: gunicorn bookstore_project.wsgi -b 0.0.0.0:8000 # new Now start up the containers again building a new image with the Gunicorn package and our updated environment variables. Command Line $ docker-compose up -d --build dj-database-url We will ultimately spin up a dedicated PostgreSQL database within Heroku for our de- ployment. The way database information is supplied to Heroku is via an environment variable named DATABASE_URL. We can use the dj-database-url360 package to parse the DATABASE_URL environment variable and automatically convert it to the proper configuration format. For the last time in this book, install the package within Docker and then stop the containers. Command Line $ docker-compose exec web pipenv install dj-database-url==0.5.0 $ docker-compose down Then add three lines to the bottom of the bookstore_project/settings.py file. 360 https://github.com/kennethreitz/dj-database-url Chapter 18: Deployment Code bookstore_project/settings.py Heroku import dj_database_url db_from_env = dj_database_url.config(conn_max_age=500) DATABASES['default'].update(db_from_env) 343 And then build our new image, start the containers, and load the updated settings into our project. Command Line $ docker-compose up -d --build We\u2019re done with local changes and can now fully switch over to deploying with Heroku. Heroku Head over to the Heroku361 website and sign up for a free account. After you confirm your email Heroku will redirect you to the dashboard section of the site. 361 https://www.heroku.com/ Chapter 18: Deployment 344 Heroku Dashboard Next make sure to install Heroku\u2019s Command Line Interface (CLI) so we can deploy from the command line. There are detailed instructions here362 . The final step is to log in with your Heroku credentials via the command line by typing heroku login. Use the email and password for Heroku you just set. Command Line $ heroku login All set! If you have any issues you can type heroku help on the command line or visit the Heroku site for additional information. Deploying with Docker Now we are presented with a choice: deploy the traditional way on Heroku or with Docker containers. The latter is a new approach Heroku and other hosting providers 362 https://devcenter.heroku.com/articles/getting-started-with-python#set-up Chapter 18: Deployment 345 have only recently added. However, just as Docker has taken over local development, it is starting to take over deployments as well. And once you\u2019ve configured containers for deployment it is far easy to switch between potential hosting providers rather than if you configure their specific way. So we will deploy with Docker containers. Even then we have, yet again, a choice to make as there are two different container options available363 : using a container registry to deploy pre-built images or adding a heroku.yml file. We will use the latter approach as it will allow additional commands and more closely mimics the traditional Heroku approach of adding a Procfile for configuration. heroku.yml Traditional non-Docker Heroku relies on a custom Procfile for configuring a site for deployment. For containers Heroku relies on a similar approach of a custom file but called heroku.yml364 in the root directory. It is similar to docker-compose.yml which is used for building local Docker containers. Let\u2019s create our heroku.yml file now. Command Line $ touch heroku.yml There are four top-level sections365 available for configuration: setup, build, release, and run. The main function of setup is to specify which add-ons are needed. These are hosted solutions Heroku provides, typically for a fee. The big one is our database which 363 https://devcenter.heroku.com/categories/deploying-with-docker 364 https://devcenter.heroku.com/articles/build-docker-images-heroku-yml 365 https://devcenter.heroku.com/articles/build-docker-images-heroku-yml#heroku-yml-overview Chapter 18: Deployment 346 will rely on the free heroku-postgresql366 tier. Heroku takes care of provisioning it, security updates, and we can easily upgrade the database size and uptime as needed. The build section is how we specify the Dockerfile should be, well, built. This relies on our current Dockerfile in the root directory. The release phase is used to run tasks before each new release is deployed. For example, we can make sure collectstatic is run on every deploy automatically. Finally there is the run phase where we specify which processes actually run the application. Notably, the use of Gunicorn as the web server. heroku.yml setup: addons: - plan: heroku-postgresql build: docker: web: Dockerfile release: image: web command: - python manage.py collectstatic --noinput run: web: gunicorn bookstore_project.wsgi Make sure to add the new deployment updates to Git and commit them. In the next section we\u2019ll push all our local code to Heroku itself. 366 https://elements.heroku.com/addons/heroku-postgresql Chapter 18: Deployment Command Line $ git status $ git add . $ git commit -m 'ch18' 347 Heroku Deployment Now create a new app on Heroku for our Bookstore project. If you type heroku create then Heroku will assign a random name. Since names are global in Heroku, it\u2019s unlikely that common ones like \u201cblog\u201d or \u201cwebapp\u201d will be available. The name can always be changed later within Heroku to an available global namespace. Command Line $ heroku create Creating app... done, \ufffd damp-dawn-44130 https://damp-dawn-44130.herokuapp.com/ | https://git.heroku.com/damp-dawn-44130.git In this case Heroku assigned my app the name damp-dawn-44130. If you refresh the Heroku dashboard on the website you will now see the newly created app. Heroku New App Chapter 18: Deployment Click on the new app, damp-dawn-44130 in my case, to open the \u201cOverview\u201d page. 348 Heroku Overview Page Then click on the \u201cSettings\u201d option at the top as we want to set our production environment variables within Heroku. Chapter 18: Deployment 349 Heroku App Settings Click on \u201cReveal Config Vars\u201d. Then add environment variables for ENVIRONMENT to \u201cproduction,\u201d the SECRET_KEY, and DEBUG equal to \u201c0\u201d from the docker-compose-prod.yml file. Chapter 18: Deployment 350 Heroku Config Vars It\u2019s also possible to add config variables from the command line to Heroku. Doing so via the Dashboard is easier to see, which is why it is demonstrated either way. Both approaches work. Now set the stack367 to use our Docker containers, not Heroku\u2019s default buildpack. Include your app name here at the end of the command after heroku stack:set container -a. 367 https://devcenter.heroku.com/articles/stack Chapter 18: Deployment Command Line $ heroku stack:set container -a damp-dawn-44130 Stack set. Next release on \ufffd damp-dawn-44130 will use container. Run git push heroku master to create a new release on \ufffd damp-dawn-44130. 351 To confirm this change executed correctly, refresh the Heroku dashboard page and note that under the \u201cInfo\u201d section, for \u201cStack\u201d it now features \u201ccontainer.\u201d That\u2019s what we want. Heroku Stack Before pushing our code to Heroku specify the hosted PostgreSQL database we want. In our case, the free hobby-dev tier works well; it can always be updated in the future. Chapter 18: Deployment Command Line $ heroku addons:create heroku-postgresql:hobby-dev -a damp-dawn-44130 Creating heroku-postgresql:hobby-dev on \ufffd damp-dawn-44130... free Database has been created and is available ! This database is empty. If upgrading, you can transfer ! data from another database with pg:copy Created postgresql-opaque-38157 as DATABASE_URL Use heroku addons:docs heroku-postgresql to view documentation 352 The dj-database-url setting we set previously will automatically find and use this DATABASE_URL for us. We\u2019re ready! Create a Heroku remote368 , which means a version of our code that will live on a Heroku-hosted server. Make sure to include -a and the name of your app. Then \u201cpush\u201d the code to Heroku which will result in building our Docker image and running the containers. Command Line $ heroku git:remote -a damp-dawn-44130 $ git push heroku master The initial push might take a while to complete. You can see active progress by clicking on the \u201cActivity\u201d tab on the Heroku dashboard. Our Bookstore project should now be available online. Remember that while the code mirrors our own local code, the production site has its own database that has no information in it. To run commands on it add heroku run to standard commands. For example, we should migrate our initial database and then create a superuser account. 368 https://devcenter.heroku.com/articles/git#creating-a-heroku-remote Chapter 18: Deployment Command Line $ heroku run python manage.py migrate $ heroku run python manage.py createsuperuser 353 There are two ways to open the newly-deployed application. From the command line you can type heroku open -a and the name of your app. Or you can click on the \u201cOpen app\u201d button in the upper right corner of the Heroku dashboard. Command Line $ heroku open -a damp-dawn-44130 Heroku Redirects But...ack! What\u2019s this? A redirect error. Welcome to the joys of deployment where issues like this will crop up all the time. Chapter 18: Deployment 354 SECURE_PROXY_SSL_HEADER Some sleuthing uncovers that the issue is related to our SECURE_SSL_REDIRECT369 setting. Heroku uses proxies and so we must find the proper header and update SECURE_PROXY_SSL_HEADER370 accordingly. Since we do trust Heroku we can add Django\u2019s default suggestion. So update the \u201cproduction\u201d section of bookstore_project/settings.py with the following line. Code bookstore_project/settings.py production if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True SECURE_HSTS_SECONDS = 3600 SECURE_HSTS_INCLUDE_SUBDOMAINS = True SECURE_HSTS_PRELOAD = True SECURE_CONTENT_TYPE_NOSNIFF = True SESSION_COOKIE_SECURE = True CSRF_COOKIE_SECURE = True SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # new While we\u2019re at it, we can also update ALLOWED_HOSTS with the exact URL name of our Heroku deployment. Mine is damp-dawn-44130.herokuapp.com/ so the updated configuration looks as follows: 369 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-ssl-redirect 370 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECURE_PROXY_SSL_HEADER Chapter 18: Deployment 355 Code bookstore_project/settings.py ALLOWED_HOSTS = ['damp-dawn-44130.herokuapp.com', 'localhost', '127.0.0.1'] Use your own unique Heroku subdomain here! Finally, commit these changes to Git and then push the updated code to Heroku. Command Line $ git status $ git add . $ git commit -m 'secure_proxy_ssl_header and allowed_hosts update' $ git push heroku master After the build has completed refresh the webpage for your site. There it is! Heroku Live Site Heroku Logs It is inevitable that you will have errors in your deployment at some point. When you do, run heroku logs --tail to see error and info logs and debug what\u2019s going on. Chapter 18: Deployment 356 Hopefully this deployment process was smooth. But in practice, even with an estab- lished Platform-as-a-Service like Heroku, it is highly likely that issues will occur. If you see an error page, type heroku logs --tail, which displays info and error logs, to diagnose the issue. Stripe Live Payments Our orders page is still running with Stripe in test mode. How do we update this to use live keys and make actual payments? First, make sure to fully activate your account on the Stripe website by filling in additional personal and banking infor- mation about yourself. Second, add the live publishable and secret keys to your docker-compose-prod.yml file\u2013docker-compose.yml is for local development only. docker-compose-prod.yml version: '3.7' services: web: build: . command: gunicorn bookstore_project.wsgi -b 0.0.0.0:8000 environment: - ENVIRONMENT=production - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 - DEBUG=0 - STRIPE_LIVE_PUBLISHABLE_KEY= - STRIPE_LIVE_SECRET_KEY= ports: - 8000:8000 depends_on: Chapter 18: Deployment - db db: image: postgres:11 357 And third, add these two new environment variables to bookstore_project/settings.py under the existing entries for Stripe test values. Code bookstore_project/settings.py STRIPE_LIVE_PUBLISHABLE_KEY=os.environ.get('STRIPE_LIVE_PUBLISHABLE_KEY') STRIPE_LIVE_SECRET_KEY=os.environ.get('STRIPE_LIVE_SECRET_KEY') To confirm these production settings work as expected make sure to stop any running local Docker containers, then restart with docker-compose-prod.yml and try it out. Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build Be aware that this is a real payment! While it is going to your own banking account Stripe will still deduct its standard 2.9% + 30 cents per transaction so test this sparingly. Heroku Add-ons Heroku comes with a large list of add-on services371 that, for a fee, can be quickly added to any site. For example, to enable caching with Memcache, Memcachier372 is an option to consider. 371 https://elements.heroku.com/addons/ 372 https://elements.heroku.com/addons/memcachier Chapter 18: Deployment 358 Daily backups373 are an additional, but essential, feature of any production database. And if you\u2019re using a custom domain for your site, ensuring SSL is vital for any website, especially one handling payments. You will need to be on a paid tier on Heroku374 to enable this functionality. PonyCheckup A popular way to test Django deployments is with Pony Checkup375 by Sasha Romijn, a long-standing member of the Django Security team. 373 https://devcenter.heroku.com/articles/heroku-postgres-backups#scheduling-backups 374 https://devcenter.heroku.com/articles/understanding-ssl-on-heroku 375 https://www.ponycheckup.com/ Chapter 18: Deployment 359 Pony Checkup If you have any errors, please check the official source code on Github376 . 376 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch18-deployment Chapter 18: Deployment 360 Conclusion Even with all the advantages of a modern Platform-as-a-Service like Heroku, de- ployment remains a complicated and often frustrating task for many developers. Personally, I want my web apps to \u201cjust work\u201d. But many engineers come to enjoy the challenges of working on performance, security, and scaling. After all, it is far easier to measure improvements in this realm: did page load times decrease? Did site uptime improve? Is security up-to-date? Working on these problems can often feel far more rewarding than debating which new feature to add to the site itself.","title":"36"},{"location":"36/#bookstore_projectsettingspy","text":"INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'whitenoise.runserver_nostatic', # new 'django.contrib.staticfiles', 'django.contrib.sites', 356 https://github.com/evansd/whitenoise Chapter 18: Deployment 340 ... ] MIDDLEWARE = [ 'django.middleware.cache.UpdateCacheMiddleware', 'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', # new ... ] With all our changes made we can now start up our project again in local development mode. Command Line $ docker-compose up -d --build WhiteNoise has additional options to serve compressed content and far-future cache headers on content that won\u2019t change. But for now, go ahead and run the collectstatic command one more time. Command Line $ docker-compose exec web python manage.py collectstatic There will be a warning about overwriting existing files. That\u2019s fine. Type \u201cyes\u201d and then hit the \u201cReturn\u201d key to continue. Chapter 18: Deployment 341 Gunicorn When we ran the startproject command way back in Chapter 3 a wsgi.py file was created with a default WSGI (Web Server Gateway Interface)357 configuration. This is a specification for how a web app (like our Bookstore project) communicates with a web server. For production it is common to swap this out for either Gunicorn358 or uWSGI359 . Both offer a performance boost, but Gunicorn is more focused and simpler to implement so it will be our choice. The first step is to install it within our project and stopping our containers. Command Line $ docker-compose exec web pipenv install gunicorn==19.9.0 $ docker-compose down Because we are using Docker our local environment can mimic production quite easily so we\u2019ll update both docker-compose.yml and docker-compose-prod.yml to use Gunicorn instead of the local server. docker-compose.yml","title":"bookstore_project/settings.py"},{"location":"36/#command-python-codemanagepy-runserver-00008000","text":"command: gunicorn bookstore_project.wsgi -b 0.0.0.0:8000 # new 357 https://wsgi.readthedocs.io/en/latest/ 358 https://gunicorn.org/ 359 https://uwsgi-docs.readthedocs.io/en/latest/ Chapter 18: Deployment 342 docker-compose-prod.yml","title":"command: python /code/manage.py runserver 0.0.0.0:8000"},{"location":"36/#command-python-codemanagepy-runserver-00008000_1","text":"command: gunicorn bookstore_project.wsgi -b 0.0.0.0:8000 # new Now start up the containers again building a new image with the Gunicorn package and our updated environment variables. Command Line $ docker-compose up -d --build dj-database-url We will ultimately spin up a dedicated PostgreSQL database within Heroku for our de- ployment. The way database information is supplied to Heroku is via an environment variable named DATABASE_URL. We can use the dj-database-url360 package to parse the DATABASE_URL environment variable and automatically convert it to the proper configuration format. For the last time in this book, install the package within Docker and then stop the containers. Command Line $ docker-compose exec web pipenv install dj-database-url==0.5.0 $ docker-compose down Then add three lines to the bottom of the bookstore_project/settings.py file. 360 https://github.com/kennethreitz/dj-database-url Chapter 18: Deployment Code","title":"command: python /code/manage.py runserver 0.0.0.0:8000"},{"location":"36/#bookstore_projectsettingspy_1","text":"","title":"bookstore_project/settings.py"},{"location":"36/#heroku","text":"import dj_database_url db_from_env = dj_database_url.config(conn_max_age=500) DATABASES['default'].update(db_from_env) 343 And then build our new image, start the containers, and load the updated settings into our project. Command Line $ docker-compose up -d --build We\u2019re done with local changes and can now fully switch over to deploying with Heroku. Heroku Head over to the Heroku361 website and sign up for a free account. After you confirm your email Heroku will redirect you to the dashboard section of the site. 361 https://www.heroku.com/ Chapter 18: Deployment 344 Heroku Dashboard Next make sure to install Heroku\u2019s Command Line Interface (CLI) so we can deploy from the command line. There are detailed instructions here362 . The final step is to log in with your Heroku credentials via the command line by typing heroku login. Use the email and password for Heroku you just set. Command Line $ heroku login All set! If you have any issues you can type heroku help on the command line or visit the Heroku site for additional information. Deploying with Docker Now we are presented with a choice: deploy the traditional way on Heroku or with Docker containers. The latter is a new approach Heroku and other hosting providers 362 https://devcenter.heroku.com/articles/getting-started-with-python#set-up Chapter 18: Deployment 345 have only recently added. However, just as Docker has taken over local development, it is starting to take over deployments as well. And once you\u2019ve configured containers for deployment it is far easy to switch between potential hosting providers rather than if you configure their specific way. So we will deploy with Docker containers. Even then we have, yet again, a choice to make as there are two different container options available363 : using a container registry to deploy pre-built images or adding a heroku.yml file. We will use the latter approach as it will allow additional commands and more closely mimics the traditional Heroku approach of adding a Procfile for configuration. heroku.yml Traditional non-Docker Heroku relies on a custom Procfile for configuring a site for deployment. For containers Heroku relies on a similar approach of a custom file but called heroku.yml364 in the root directory. It is similar to docker-compose.yml which is used for building local Docker containers. Let\u2019s create our heroku.yml file now. Command Line $ touch heroku.yml There are four top-level sections365 available for configuration: setup, build, release, and run. The main function of setup is to specify which add-ons are needed. These are hosted solutions Heroku provides, typically for a fee. The big one is our database which 363 https://devcenter.heroku.com/categories/deploying-with-docker 364 https://devcenter.heroku.com/articles/build-docker-images-heroku-yml 365 https://devcenter.heroku.com/articles/build-docker-images-heroku-yml#heroku-yml-overview Chapter 18: Deployment 346 will rely on the free heroku-postgresql366 tier. Heroku takes care of provisioning it, security updates, and we can easily upgrade the database size and uptime as needed. The build section is how we specify the Dockerfile should be, well, built. This relies on our current Dockerfile in the root directory. The release phase is used to run tasks before each new release is deployed. For example, we can make sure collectstatic is run on every deploy automatically. Finally there is the run phase where we specify which processes actually run the application. Notably, the use of Gunicorn as the web server. heroku.yml setup: addons: - plan: heroku-postgresql build: docker: web: Dockerfile release: image: web command: - python manage.py collectstatic --noinput run: web: gunicorn bookstore_project.wsgi Make sure to add the new deployment updates to Git and commit them. In the next section we\u2019ll push all our local code to Heroku itself. 366 https://elements.heroku.com/addons/heroku-postgresql Chapter 18: Deployment Command Line $ git status $ git add . $ git commit -m 'ch18' 347 Heroku Deployment Now create a new app on Heroku for our Bookstore project. If you type heroku create then Heroku will assign a random name. Since names are global in Heroku, it\u2019s unlikely that common ones like \u201cblog\u201d or \u201cwebapp\u201d will be available. The name can always be changed later within Heroku to an available global namespace. Command Line $ heroku create Creating app... done, \ufffd damp-dawn-44130 https://damp-dawn-44130.herokuapp.com/ | https://git.heroku.com/damp-dawn-44130.git In this case Heroku assigned my app the name damp-dawn-44130. If you refresh the Heroku dashboard on the website you will now see the newly created app. Heroku New App Chapter 18: Deployment Click on the new app, damp-dawn-44130 in my case, to open the \u201cOverview\u201d page. 348 Heroku Overview Page Then click on the \u201cSettings\u201d option at the top as we want to set our production environment variables within Heroku. Chapter 18: Deployment 349 Heroku App Settings Click on \u201cReveal Config Vars\u201d. Then add environment variables for ENVIRONMENT to \u201cproduction,\u201d the SECRET_KEY, and DEBUG equal to \u201c0\u201d from the docker-compose-prod.yml file. Chapter 18: Deployment 350 Heroku Config Vars It\u2019s also possible to add config variables from the command line to Heroku. Doing so via the Dashboard is easier to see, which is why it is demonstrated either way. Both approaches work. Now set the stack367 to use our Docker containers, not Heroku\u2019s default buildpack. Include your app name here at the end of the command after heroku stack:set container -a. 367 https://devcenter.heroku.com/articles/stack Chapter 18: Deployment Command Line $ heroku stack:set container -a damp-dawn-44130 Stack set. Next release on \ufffd damp-dawn-44130 will use container. Run git push heroku master to create a new release on \ufffd damp-dawn-44130. 351 To confirm this change executed correctly, refresh the Heroku dashboard page and note that under the \u201cInfo\u201d section, for \u201cStack\u201d it now features \u201ccontainer.\u201d That\u2019s what we want. Heroku Stack Before pushing our code to Heroku specify the hosted PostgreSQL database we want. In our case, the free hobby-dev tier works well; it can always be updated in the future. Chapter 18: Deployment Command Line $ heroku addons:create heroku-postgresql:hobby-dev -a damp-dawn-44130 Creating heroku-postgresql:hobby-dev on \ufffd damp-dawn-44130... free Database has been created and is available ! This database is empty. If upgrading, you can transfer ! data from another database with pg:copy Created postgresql-opaque-38157 as DATABASE_URL Use heroku addons:docs heroku-postgresql to view documentation 352 The dj-database-url setting we set previously will automatically find and use this DATABASE_URL for us. We\u2019re ready! Create a Heroku remote368 , which means a version of our code that will live on a Heroku-hosted server. Make sure to include -a and the name of your app. Then \u201cpush\u201d the code to Heroku which will result in building our Docker image and running the containers. Command Line $ heroku git:remote -a damp-dawn-44130 $ git push heroku master The initial push might take a while to complete. You can see active progress by clicking on the \u201cActivity\u201d tab on the Heroku dashboard. Our Bookstore project should now be available online. Remember that while the code mirrors our own local code, the production site has its own database that has no information in it. To run commands on it add heroku run to standard commands. For example, we should migrate our initial database and then create a superuser account. 368 https://devcenter.heroku.com/articles/git#creating-a-heroku-remote Chapter 18: Deployment Command Line $ heroku run python manage.py migrate $ heroku run python manage.py createsuperuser 353 There are two ways to open the newly-deployed application. From the command line you can type heroku open -a and the name of your app. Or you can click on the \u201cOpen app\u201d button in the upper right corner of the Heroku dashboard. Command Line $ heroku open -a damp-dawn-44130 Heroku Redirects But...ack! What\u2019s this? A redirect error. Welcome to the joys of deployment where issues like this will crop up all the time. Chapter 18: Deployment 354 SECURE_PROXY_SSL_HEADER Some sleuthing uncovers that the issue is related to our SECURE_SSL_REDIRECT369 setting. Heroku uses proxies and so we must find the proper header and update SECURE_PROXY_SSL_HEADER370 accordingly. Since we do trust Heroku we can add Django\u2019s default suggestion. So update the \u201cproduction\u201d section of bookstore_project/settings.py with the following line. Code","title":"Heroku"},{"location":"36/#bookstore_projectsettingspy_2","text":"","title":"bookstore_project/settings.py"},{"location":"36/#production","text":"if ENVIRONMENT == 'production': SECURE_BROWSER_XSS_FILTER = True X_FRAME_OPTIONS = 'DENY' SECURE_SSL_REDIRECT = True SECURE_HSTS_SECONDS = 3600 SECURE_HSTS_INCLUDE_SUBDOMAINS = True SECURE_HSTS_PRELOAD = True SECURE_CONTENT_TYPE_NOSNIFF = True SESSION_COOKIE_SECURE = True CSRF_COOKIE_SECURE = True SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # new While we\u2019re at it, we can also update ALLOWED_HOSTS with the exact URL name of our Heroku deployment. Mine is damp-dawn-44130.herokuapp.com/ so the updated configuration looks as follows: 369 https://docs.djangoproject.com/en/2.2/ref/settings/#secure-ssl-redirect 370 https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SECURE_PROXY_SSL_HEADER Chapter 18: Deployment 355 Code","title":"production"},{"location":"36/#bookstore_projectsettingspy_3","text":"ALLOWED_HOSTS = ['damp-dawn-44130.herokuapp.com', 'localhost', '127.0.0.1'] Use your own unique Heroku subdomain here! Finally, commit these changes to Git and then push the updated code to Heroku. Command Line $ git status $ git add . $ git commit -m 'secure_proxy_ssl_header and allowed_hosts update' $ git push heroku master After the build has completed refresh the webpage for your site. There it is! Heroku Live Site Heroku Logs It is inevitable that you will have errors in your deployment at some point. When you do, run heroku logs --tail to see error and info logs and debug what\u2019s going on. Chapter 18: Deployment 356 Hopefully this deployment process was smooth. But in practice, even with an estab- lished Platform-as-a-Service like Heroku, it is highly likely that issues will occur. If you see an error page, type heroku logs --tail, which displays info and error logs, to diagnose the issue. Stripe Live Payments Our orders page is still running with Stripe in test mode. How do we update this to use live keys and make actual payments? First, make sure to fully activate your account on the Stripe website by filling in additional personal and banking infor- mation about yourself. Second, add the live publishable and secret keys to your docker-compose-prod.yml file\u2013docker-compose.yml is for local development only. docker-compose-prod.yml version: '3.7' services: web: build: . command: gunicorn bookstore_project.wsgi -b 0.0.0.0:8000 environment: - ENVIRONMENT=production - SECRET_KEY=p_o3vp1rg5)t^lxm9-43%0)s-=1qpeq%o7gfq+e4#*!t+_ev82 - DEBUG=0 - STRIPE_LIVE_PUBLISHABLE_KEY= - STRIPE_LIVE_SECRET_KEY= ports: - 8000:8000 depends_on: Chapter 18: Deployment - db db: image: postgres:11 357 And third, add these two new environment variables to bookstore_project/settings.py under the existing entries for Stripe test values. Code","title":"bookstore_project/settings.py"},{"location":"36/#bookstore_projectsettingspy_4","text":"STRIPE_LIVE_PUBLISHABLE_KEY=os.environ.get('STRIPE_LIVE_PUBLISHABLE_KEY') STRIPE_LIVE_SECRET_KEY=os.environ.get('STRIPE_LIVE_SECRET_KEY') To confirm these production settings work as expected make sure to stop any running local Docker containers, then restart with docker-compose-prod.yml and try it out. Command Line $ docker-compose down $ docker-compose -f docker-compose-prod.yml up -d --build Be aware that this is a real payment! While it is going to your own banking account Stripe will still deduct its standard 2.9% + 30 cents per transaction so test this sparingly. Heroku Add-ons Heroku comes with a large list of add-on services371 that, for a fee, can be quickly added to any site. For example, to enable caching with Memcache, Memcachier372 is an option to consider. 371 https://elements.heroku.com/addons/ 372 https://elements.heroku.com/addons/memcachier Chapter 18: Deployment 358 Daily backups373 are an additional, but essential, feature of any production database. And if you\u2019re using a custom domain for your site, ensuring SSL is vital for any website, especially one handling payments. You will need to be on a paid tier on Heroku374 to enable this functionality. PonyCheckup A popular way to test Django deployments is with Pony Checkup375 by Sasha Romijn, a long-standing member of the Django Security team. 373 https://devcenter.heroku.com/articles/heroku-postgres-backups#scheduling-backups 374 https://devcenter.heroku.com/articles/understanding-ssl-on-heroku 375 https://www.ponycheckup.com/ Chapter 18: Deployment 359 Pony Checkup If you have any errors, please check the official source code on Github376 . 376 https://github.com/wsvincent/djangoforprofessionals/tree/master/ch18-deployment Chapter 18: Deployment 360 Conclusion Even with all the advantages of a modern Platform-as-a-Service like Heroku, de- ployment remains a complicated and often frustrating task for many developers. Personally, I want my web apps to \u201cjust work\u201d. But many engineers come to enjoy the challenges of working on performance, security, and scaling. After all, it is far easier to measure improvements in this realm: did page load times decrease? Did site uptime improve? Is security up-to-date? Working on these problems can often feel far more rewarding than debating which new feature to add to the site itself.","title":"bookstore_project/settings.py"},{"location":"conclusion/","text":"Conclusi\u00f3n \u00a1Felicidades por terminar Django para principiantes! Despu\u00e9s de empezar desde cero, hemos construido cinco aplicaciones web diferentes desde cero. Y hemos cubierto todas las caracter\u00edsticas principales de Django: plantillas, vistas, urls, usuarios, modelos, seguridad, pruebas y despliegue. Ahora tienes el conocimiento para salir y construir tus propios sitios web modernos con Django. Como con cualquier habilidad nueva, es importante practicar y aplicar lo que acabas de aprender. La funcionalidad de CRUD en nuestros sitios de blog y peri\u00f3dicos es com\u00fan en muchas, muchas otras aplicaciones web. Por ejemplo, \u00bfpuedes hacer una aplicaci\u00f3n web de Todo List? Ya tienes todas las herramientas que necesitas. El desarrollo web es un campo muy profundo y todav\u00eda hay mucho m\u00e1s que aprender sobre lo que Django tiene que ofrecer. Por ejemplo, un proyecto Django m\u00e1s avanzado probablemente usar\u00eda m\u00faltiples archivos de configuraci\u00f3n, variables de entorno y PostgreSQL localmente en lugar de SQLite. Incluso podr\u00eda utilizar paquetes de terceros como django-allauth para la autenticaci\u00f3n social, django-debug-toolbar para la depuraci\u00f3n, y django-extensions para las ventajas adicionales. La mejor manera de aprender m\u00e1s sobre Django y el desarrollo web en general es pensar en un proyecto que quieras construir y luego aprender paso a paso lo que necesitas para completarlo. Un recurso adicional que puede ayudarte es DjangoX, que es un proyecto de inicio en el mundo real que cuenta con autenticaci\u00f3n social y m\u00e1s. Tambi\u00e9n puedes suscribirte al bolet\u00edn de Django para principiantes para recibir actualizaciones peri\u00f3dicas sobre nuevos contenidos y descuentos en futuros libros. Y un \u00faltimo recurso es mi propio sitio web personal, wsvincent.com, que se actualiza regularmente y ya presenta art\u00edculos sobre algunas de estas t\u00e9cnicas avanzadas: Autenticaci\u00f3n social Django Mega-tutorial de acceso a Django Django, PostgreSQL y Docker Tutorial del marco de descanso de Django Marco de descanso de Django con React Recursos de Django Para continuar aprendiendo Django, recomiendo trabajar a trav\u00e9s de los siguientes tutoriales gratuitos en l\u00ednea: - Tutorial de encuestas oficiales - Tutorial de las chicas de Django - MDN: Marco Web Django - Una completa gu\u00eda para principiantes de Django Tambi\u00e9n recomiendo encarecidamente Two Scoops of Django 1.11: Best Practices for the Django Web Framework, que es la actual biblia de mejores pr\u00e1cticas para los desarrolladores de Django. Libros de Python Si eres nuevo en Python, hay varios libros excelentes disponibles para principiantes y avanzados Pythonistas: - Python Crash Course es una fant\u00e1stica introducci\u00f3n a Python que tambi\u00e9n te lleva a trav\u00e9s de tres proyectos del mundo real, incluyendo una aplicaci\u00f3n de Django. - Think Python introduce los fundamentos de Python y de la inform\u00e1tica en el al mismo tiempo. - Automatizar las cosas aburridas es otra gran gu\u00eda para aprender y usar Python en el mundo real. - La Gu\u00eda del autoestopista para Python cubre las mejores pr\u00e1cticas en la programaci\u00f3n de Python. - Python Tricks demuestra c\u00f3mo escribir c\u00f3digo python. - Effective Python es una excelente gu\u00eda no s\u00f3lo para Python sino para la programaci\u00f3n en general. - Fluent Python es asombroso y proporciona un profundo entendimiento del lenguaje Python. Blogs a seguir Estos sitios proporcionan escritos regulares de alta calidad sobre Python y el desarrollo de la web. - Real Python - Dan Bader - Trey Hunner - Pila completa de pit\u00f3n - Ned Batchelder - Armin Ronacher - Kenneth Reitz - Daniel Greenfeld Comentarios Si has conseguido terminar el libro entero, me encantar\u00eda escuchar tus pensamientos. \u00bfQu\u00e9 te gust\u00f3 o no te gust\u00f3? \u00bfQu\u00e9 \u00e1reas fueron especialmente dif\u00edciles? \u00bfY qu\u00e9 nuevo contenido te gustar\u00eda ver? Me pueden contactar en will@wsvincent.com. Conclusion 2 Building a \u201cprofessional\u201d website is no small task even with all the help that a batteries- included web framework like Django provides. Docker provides a major advantage in standardizing both local and production environments regardless of local machine\u2013 and especially in a team context. However Docker is a complicated beast on its own. While we have used it judiciously in this book there is much more that it can do depending on the needs of a project. Django itself is friendly to small projects because its defaults emphasize rapid local development but these settings must be systematically updated for production, from upgrading the database to PostgreSQL, using a custom user model, environment variables, configuring user registration flow, static assets, email...on and on it goes. The good news is that the steps needed for a production-level approach are quite similar. Hence the first half of this book is deliberately agnostic about the eventual project that is built: you\u2019ll find these steps are standard on almost any new Django project. The second half focused on building a real Bookstore site with modern best practices, added Reviews, image uploads, set permissions, configured payments with Stripe, added search, reviewed performance and security measures, and finally deployed on Heroku with containers. For all the content covered in this book we\u2019ve really only scratched the surface of what Django can do. This is the nature of modern web development: constant iteration. Django is a magnificent partner in building out a professional website because so many of the considerations required have already been thought of and included. But knowledge is needed to know how to turn these production switches on to take full advantage of the customization Django allows. Ultimately that is the goal of this Conclusion 362 book: to expose you, the reader, to the full spectrum of what Django and professional websites require. As you learn more about web development and Django I\u2019d urge caution when it comes to premature optimization. It is always tempting to features and optimizations to your project that you think you\u2019ll need later. The short list includes adding a CDN for static and media assets, judiciously analyzing database queries, adding indexes to models, and so on. The truth is that in any given web project there will always be more to do than time allows. This book has covered the fundamentals that are worthy of upfront time to get right. Additional steps around security, performance, and features will present themselves to you in real-time. Try to resist the urge to add complexity until absolutely necessary. If you have feedback on this book or examples of what you\u2019ve built as a result, I read and respond to every email I receive at will@wsvincent.com377. I look forward to hearing from you!","title":"Conclusi\u00f3n"},{"location":"conclusion/#conclusion","text":"\u00a1Felicidades por terminar Django para principiantes! Despu\u00e9s de empezar desde cero, hemos construido cinco aplicaciones web diferentes desde cero. Y hemos cubierto todas las caracter\u00edsticas principales de Django: plantillas, vistas, urls, usuarios, modelos, seguridad, pruebas y despliegue. Ahora tienes el conocimiento para salir y construir tus propios sitios web modernos con Django. Como con cualquier habilidad nueva, es importante practicar y aplicar lo que acabas de aprender. La funcionalidad de CRUD en nuestros sitios de blog y peri\u00f3dicos es com\u00fan en muchas, muchas otras aplicaciones web. Por ejemplo, \u00bfpuedes hacer una aplicaci\u00f3n web de Todo List? Ya tienes todas las herramientas que necesitas. El desarrollo web es un campo muy profundo y todav\u00eda hay mucho m\u00e1s que aprender sobre lo que Django tiene que ofrecer. Por ejemplo, un proyecto Django m\u00e1s avanzado probablemente usar\u00eda m\u00faltiples archivos de configuraci\u00f3n, variables de entorno y PostgreSQL localmente en lugar de SQLite. Incluso podr\u00eda utilizar paquetes de terceros como django-allauth para la autenticaci\u00f3n social, django-debug-toolbar para la depuraci\u00f3n, y django-extensions para las ventajas adicionales. La mejor manera de aprender m\u00e1s sobre Django y el desarrollo web en general es pensar en un proyecto que quieras construir y luego aprender paso a paso lo que necesitas para completarlo. Un recurso adicional que puede ayudarte es DjangoX, que es un proyecto de inicio en el mundo real que cuenta con autenticaci\u00f3n social y m\u00e1s. Tambi\u00e9n puedes suscribirte al bolet\u00edn de Django para principiantes para recibir actualizaciones peri\u00f3dicas sobre nuevos contenidos y descuentos en futuros libros. Y un \u00faltimo recurso es mi propio sitio web personal, wsvincent.com, que se actualiza regularmente y ya presenta art\u00edculos sobre algunas de estas t\u00e9cnicas avanzadas: Autenticaci\u00f3n social Django Mega-tutorial de acceso a Django Django, PostgreSQL y Docker Tutorial del marco de descanso de Django Marco de descanso de Django con React Recursos de Django Para continuar aprendiendo Django, recomiendo trabajar a trav\u00e9s de los siguientes tutoriales gratuitos en l\u00ednea: - Tutorial de encuestas oficiales - Tutorial de las chicas de Django - MDN: Marco Web Django - Una completa gu\u00eda para principiantes de Django Tambi\u00e9n recomiendo encarecidamente Two Scoops of Django 1.11: Best Practices for the Django Web Framework, que es la actual biblia de mejores pr\u00e1cticas para los desarrolladores de Django. Libros de Python Si eres nuevo en Python, hay varios libros excelentes disponibles para principiantes y avanzados Pythonistas: - Python Crash Course es una fant\u00e1stica introducci\u00f3n a Python que tambi\u00e9n te lleva a trav\u00e9s de tres proyectos del mundo real, incluyendo una aplicaci\u00f3n de Django. - Think Python introduce los fundamentos de Python y de la inform\u00e1tica en el al mismo tiempo. - Automatizar las cosas aburridas es otra gran gu\u00eda para aprender y usar Python en el mundo real. - La Gu\u00eda del autoestopista para Python cubre las mejores pr\u00e1cticas en la programaci\u00f3n de Python. - Python Tricks demuestra c\u00f3mo escribir c\u00f3digo python. - Effective Python es una excelente gu\u00eda no s\u00f3lo para Python sino para la programaci\u00f3n en general. - Fluent Python es asombroso y proporciona un profundo entendimiento del lenguaje Python. Blogs a seguir Estos sitios proporcionan escritos regulares de alta calidad sobre Python y el desarrollo de la web. - Real Python - Dan Bader - Trey Hunner - Pila completa de pit\u00f3n - Ned Batchelder - Armin Ronacher - Kenneth Reitz - Daniel Greenfeld Comentarios Si has conseguido terminar el libro entero, me encantar\u00eda escuchar tus pensamientos. \u00bfQu\u00e9 te gust\u00f3 o no te gust\u00f3? \u00bfQu\u00e9 \u00e1reas fueron especialmente dif\u00edciles? \u00bfY qu\u00e9 nuevo contenido te gustar\u00eda ver? Me pueden contactar en will@wsvincent.com.","title":"Conclusi\u00f3n"},{"location":"conclusion/#conclusion-2","text":"Building a \u201cprofessional\u201d website is no small task even with all the help that a batteries- included web framework like Django provides. Docker provides a major advantage in standardizing both local and production environments regardless of local machine\u2013 and especially in a team context. However Docker is a complicated beast on its own. While we have used it judiciously in this book there is much more that it can do depending on the needs of a project. Django itself is friendly to small projects because its defaults emphasize rapid local development but these settings must be systematically updated for production, from upgrading the database to PostgreSQL, using a custom user model, environment variables, configuring user registration flow, static assets, email...on and on it goes. The good news is that the steps needed for a production-level approach are quite similar. Hence the first half of this book is deliberately agnostic about the eventual project that is built: you\u2019ll find these steps are standard on almost any new Django project. The second half focused on building a real Bookstore site with modern best practices, added Reviews, image uploads, set permissions, configured payments with Stripe, added search, reviewed performance and security measures, and finally deployed on Heroku with containers. For all the content covered in this book we\u2019ve really only scratched the surface of what Django can do. This is the nature of modern web development: constant iteration. Django is a magnificent partner in building out a professional website because so many of the considerations required have already been thought of and included. But knowledge is needed to know how to turn these production switches on to take full advantage of the customization Django allows. Ultimately that is the goal of this Conclusion 362 book: to expose you, the reader, to the full spectrum of what Django and professional websites require. As you learn more about web development and Django I\u2019d urge caution when it comes to premature optimization. It is always tempting to features and optimizations to your project that you think you\u2019ll need later. The short list includes adding a CDN for static and media assets, judiciously analyzing database queries, adding indexes to models, and so on. The truth is that in any given web project there will always be more to do than time allows. This book has covered the fundamentals that are worthy of upfront time to get right. Additional steps around security, performance, and features will present themselves to you in real-time. Try to resist the urge to add complexity until absolutely necessary. If you have feedback on this book or examples of what you\u2019ve built as a result, I read and respond to every email I receive at will@wsvincent.com377. I look forward to hearing from you!","title":"Conclusion 2"},{"location":"la_api_de_sendgrid/","text":"La API de SendGrid Existen varias formas empezar con la API de SendGrid: 1. Prerrequisitos para enviar el primer email con la API de SendGrid Estas instrucciones describen c\u00f3mo enviar un correo electr\u00f3nico usando llamadas cURL. Esta es una de las muchas maneras de enviar un correo electr\u00f3nico con la API de SendGrid - tambi\u00e9n existen bibliotecas PHP , Python , Node.js , Java , C# , Go , y Ruby . Antes de empezar a usar la API, hay que hacer lo siguiente: Crear una cuenta de SendGrid. Crear una Clave API . Aseg\u00fararse de tener curl instalado en la m\u00e1quina. 2. C\u00f3mo enviar un correo electr\u00f3nico con la API 2.1. Crear la llamada a la API La llamada a la API debe tener los siguientes componentes: Un Host . El host para las solicitudes de la API v3 de la Web siempre es https://api.sendgrid.com/v3/ Un Authorization Header (encabezado de autorizaci\u00f3n) Una API Key dentro del encabezado de autorizaci\u00f3n Una petici\u00f3n. Cuando se env\u00edan datos a un recurso a trav\u00e9s de POST o PUT, debe enviar toda la carga en JSON. Nota.- L\u00edmite del tama\u00f1o del mensaje: El tama\u00f1o total del mensaje no debe exceder los 20MB. Esto incluye el mensaje en s\u00ed mismo, los encabezados y el tama\u00f1o combinado de los archivos adjuntos. 2.2. Env\u00edo del correo electr\u00f3nico usando la API Para enviar un correo electr\u00f3nico usando el SendGrid API: curl --request POST \\ --url https://api.sendgrid.com/v3/mail/send \\ --header 'authorization: Bearer <<YOUR_API_KEY>>' \\ --header 'content-type: application/json' \\ --data '{\"personalizations\":[{\"to\":[{\"email\":\"john.doe@example.com\",\"name\":\"John Doe\"}],\"subject\":\"Hello, World!\"}],\"content\": [{\"type\": \"text/plain\", \"value\": \"Heya!\"}],\"from\":{\"email\":\"sam.smith@example.com\",\"name\":\"Sam Smith\"},\"reply_to\":{\"email\":\"sam.smith@example.com\",\"name\":\"Sam Smith\"}}' Copiar el ejemplo de arriba de curl Pegar la llamada curl en un editor de texto. Copiar la API key y pegarla en el encabezado de la autorizaci\u00f3n. En la secci\u00f3n de datos, especificar los nombres y las direcciones de correo electr\u00f3nico de \"destino\", \"procedencia\" y \"respuesta\" e introducir un asunto. Copiar el c\u00f3digo y pegarlo en el terminal. Presionar Enter . Revisar la bandeja de entrada de la direcci\u00f3n que se especific\u00f3 como \"to\" el correo electr\u00f3nico para ver el mensaje Si a\u00fan no se ha configurado la autenticaci\u00f3n del remitente en la cuenta, es posible que se tenga que comprobar en la carpeta de correo basura el correo electr\u00f3nico que acaba de enviar. 2.3. Mensajes de respuesta de la API Todas las respuestas se devuelven en formato JSON. Se especifica enviando el encabezado Content-Type . La Web API v3 proporciona una selecci\u00f3n de c\u00f3digos de respuesta , content-type headers , y opciones de paginaci\u00f3n para ayudar a interpretar las respuestas a las solicitudes de API. 3. A continuaci\u00f3n... Para m\u00e1s informaci\u00f3n sobre SendGrid y d\u00f3nde se puede ir desde aqu\u00ed, revisar las p\u00e1ginas: Referencia API Autenticaci\u00f3n del remitente Automatizaci\u00f3n de subusuarios Crear una app django para enviar email con SendGrid","title":"La API de SendGrid"},{"location":"la_api_de_sendgrid/#la-api-de-sendgrid","text":"Existen varias formas empezar con la API de SendGrid:","title":"La API de SendGrid"},{"location":"la_api_de_sendgrid/#1-prerrequisitos-para-enviar-el-primer-email-con-la-api-de-sendgrid","text":"Estas instrucciones describen c\u00f3mo enviar un correo electr\u00f3nico usando llamadas cURL. Esta es una de las muchas maneras de enviar un correo electr\u00f3nico con la API de SendGrid - tambi\u00e9n existen bibliotecas PHP , Python , Node.js , Java , C# , Go , y Ruby . Antes de empezar a usar la API, hay que hacer lo siguiente: Crear una cuenta de SendGrid. Crear una Clave API . Aseg\u00fararse de tener curl instalado en la m\u00e1quina.","title":"1. Prerrequisitos para enviar el primer email con la API de SendGrid"},{"location":"la_api_de_sendgrid/#2-como-enviar-un-correo-electronico-con-la-api","text":"","title":"2. C\u00f3mo enviar un correo electr\u00f3nico con la API"},{"location":"la_api_de_sendgrid/#21-crear-la-llamada-a-la-api","text":"La llamada a la API debe tener los siguientes componentes: Un Host . El host para las solicitudes de la API v3 de la Web siempre es https://api.sendgrid.com/v3/ Un Authorization Header (encabezado de autorizaci\u00f3n) Una API Key dentro del encabezado de autorizaci\u00f3n Una petici\u00f3n. Cuando se env\u00edan datos a un recurso a trav\u00e9s de POST o PUT, debe enviar toda la carga en JSON. Nota.- L\u00edmite del tama\u00f1o del mensaje: El tama\u00f1o total del mensaje no debe exceder los 20MB. Esto incluye el mensaje en s\u00ed mismo, los encabezados y el tama\u00f1o combinado de los archivos adjuntos.","title":"2.1. Crear la llamada a la API"},{"location":"la_api_de_sendgrid/#22-envio-del-correo-electronico-usando-la-api","text":"Para enviar un correo electr\u00f3nico usando el SendGrid API: curl --request POST \\ --url https://api.sendgrid.com/v3/mail/send \\ --header 'authorization: Bearer <<YOUR_API_KEY>>' \\ --header 'content-type: application/json' \\ --data '{\"personalizations\":[{\"to\":[{\"email\":\"john.doe@example.com\",\"name\":\"John Doe\"}],\"subject\":\"Hello, World!\"}],\"content\": [{\"type\": \"text/plain\", \"value\": \"Heya!\"}],\"from\":{\"email\":\"sam.smith@example.com\",\"name\":\"Sam Smith\"},\"reply_to\":{\"email\":\"sam.smith@example.com\",\"name\":\"Sam Smith\"}}' Copiar el ejemplo de arriba de curl Pegar la llamada curl en un editor de texto. Copiar la API key y pegarla en el encabezado de la autorizaci\u00f3n. En la secci\u00f3n de datos, especificar los nombres y las direcciones de correo electr\u00f3nico de \"destino\", \"procedencia\" y \"respuesta\" e introducir un asunto. Copiar el c\u00f3digo y pegarlo en el terminal. Presionar Enter . Revisar la bandeja de entrada de la direcci\u00f3n que se especific\u00f3 como \"to\" el correo electr\u00f3nico para ver el mensaje Si a\u00fan no se ha configurado la autenticaci\u00f3n del remitente en la cuenta, es posible que se tenga que comprobar en la carpeta de correo basura el correo electr\u00f3nico que acaba de enviar.","title":"2.2. Env\u00edo del correo electr\u00f3nico usando la API"},{"location":"la_api_de_sendgrid/#23-mensajes-de-respuesta-de-la-api","text":"Todas las respuestas se devuelven en formato JSON. Se especifica enviando el encabezado Content-Type . La Web API v3 proporciona una selecci\u00f3n de c\u00f3digos de respuesta , content-type headers , y opciones de paginaci\u00f3n para ayudar a interpretar las respuestas a las solicitudes de API.","title":"2.3. Mensajes de respuesta de la API"},{"location":"la_api_de_sendgrid/#3-a-continuacion","text":"Para m\u00e1s informaci\u00f3n sobre SendGrid y d\u00f3nde se puede ir desde aqu\u00ed, revisar las p\u00e1ginas: Referencia API Autenticaci\u00f3n del remitente Automatizaci\u00f3n de subusuarios Crear una app django para enviar email con SendGrid","title":"3. A continuaci\u00f3n..."},{"location":"por_que_django/","text":"\u00bfPor qu\u00e9 Django? Esta es la primera pregunta que los no iniciados casi siempre se hace cuando se les presenta Django: \"\u00bfPor qu\u00e9 debo aprender Django?\" \"\u00bfQu\u00e9 tiene Django que lo hace mejor que el Marco X o el lenguaje Y para construir aplicaciones web?\" Buena pregunta. La programaci\u00f3n, como la mayor\u00eda de las actividades creativas, tiene a mucha gente dedicada que lleva sus pasiones al extremo. Es por esta raz\u00f3n que se debe desconfiar de las comparaciones entre este software y aquel. El resultado final es que todos los lenguajes de programaci\u00f3n y las herramientas y marcos construidos sobre ellos tienen puntos buenos y malos . Cuando se trata de comparar Django con otros frameworks web, la \u00fanica comparaci\u00f3n que vale la pena considerar es el pragmatismo vs. la perfecci\u00f3n. O para decirlo de otra manera, \u00bfquieres c\u00f3digo estable y mantenible que puedas entregar en un plazo determinado? \u00bfO quieres una caja de magia arcana y una plantilla que haga que los profesores de la universidad te quieran y los que la mantienen te odien al mismo tiempo? Django tiene sus asperezas, pero su enfoque pragm\u00e1tico para hacer las cosas es lo que realmente le destaca de la multitud. Django tiene muchos partidarios y unos cuantos enemigos, as\u00ed que no dudar en sacar conclusiones propias. Las 10 mejores razones de Django 1. Python Se puede decir que Python es el lenguaje de programaci\u00f3n m\u00e1s f\u00e1cil de aprender. Con su uso de construcciones de lenguaje natural (por ejemplo, disposici\u00f3n y sangr\u00eda parecida a la de un p\u00e1rrafo) y una sintaxis f\u00e1cil de aprender, Python hace que la comprensi\u00f3n de la estructura y el flujo de los programas sea significativamente m\u00e1s f\u00e1cil de aprender que otros lenguajes populares. Esto se pone de manifiesto en el hecho de que la mayor proporci\u00f3n de cursos de programaci\u00f3n introductoria en universidades e institutos de ense\u00f1anza superior utilizan ahora Python como el lenguaje elegido. Python es vers\u00e1til . Ejecuta sitios web y se utiliza en muchas aplicaciones de escritorio populares en PC y Mac. Tambi\u00e9n se puede encontrar en aplicaciones m\u00f3viles e incorporado en muchos dispositivos. Python tambi\u00e9n es un lenguaje de programaci\u00f3n popular para otras aplicaciones. Aprender Python casi seguro que servir\u00e1, sin importar la carrera que se elija. Python es popular . Google, una de las empresas m\u00e1s grandes del mundo, utiliza Python en muchas de sus aplicaciones. Tambi\u00e9n es usado ampliamente por programadores profesionales. Algunos datos interesantes de la encuesta de desarrolladores de Stack Overflow de 2017: Python es el segundo en crecimiento en los \u00faltimos cinco a\u00f1os, despu\u00e9s de node.js. PHP, Java y Ruby han disminuido en popularidad. Python es ahora m\u00e1s com\u00fan que PHP. Python es el lenguaje m\u00e1s buscado entre todos los desarrolladores, saltando cuatro lugares desde 2016 y superando a JavaScript en el primer lugar. Los trabajos en Python pagan mejor que los tradicionales trabajos de Microsoft (C#, C++, VBA y .NET). 2. Bater\u00edas incluidas Django hereda su filosof\u00eda de \"pilas incluidas\" de Python. Esto se interpreta a menudo como que Django incluye muchas cosas extra que probablemente no se necesiten, sin embargo, la mejor analog\u00eda es que, en lugar de tener que abrir el lenguaje para insertar energ\u00eda propia (bater\u00edas), s\u00f3lo hay que pulsar el interruptor y Django hace el resto. En t\u00e9rminos pr\u00e1cticos esto significa que Django implementa algunos procesos comunes, pero complejos, proporcionando herramientas y envoltorios simples para ocultar la complejidad sin comprometer la potencia. Las \"bater\u00edas\" de Django se encuentran en los contrib packages que son: admin .- La aplicaci\u00f3n de administraci\u00f3n de Django auth .- El marco de autenticaci\u00f3n de Django contenttypes .- Un marco para enganchar con los modelos Django flatpages .- Un marco para la gesti\u00f3n de las p\u00e1ginas de casos especiales, como las pol\u00edticas del sitio y los t\u00e9rminos y condiciones de uso gis .- A\u00f1ade capacidades geoespaciales a Django humanize .- A\u00f1ade filtros de plantilla para mejorar la legibilidad de los datos messages .- Un marco para la gesti\u00f3n de los mensajes basados en sesiones y cookies postgres .- Caracter\u00edsticas espec\u00edficas de la base de datos postgreSQL redirects .- Gesti\u00f3n de redirecciones sessions .- Un marco para la gesti\u00f3n de sesiones an\u00f3nimas sites .- Permite operar varios sitios web desde una sola instalaci\u00f3n sitemaps .- Implementa archivos sitemap XML syndication .- Un marco para generar feeds para la sindicaci\u00f3n Los contrib packages pueden ser un poco complejos, sin embargo, Django proporciona una s\u00f3lida lista de poderosos m\u00f3dulos incorporados para que no haya que crearlos. 3. No se interpone en tu camino Cuando creas una aplicaci\u00f3n Django, Django no agrega ning\u00fan tipo de funciones innecesarias. No hay importaciones obligatorias, no se requieren bibliotecas de terceros ni archivos de configuraci\u00f3n XML. Esto puede ser un poco aterrador cuando se crea un proyecto Django por primera vez, ya que las herramientas autom\u00e1ticas de Django ( startproject y startapp ) s\u00f3lo crean un archivo de configuraci\u00f3n b\u00e1sico, unas cuantas carpetas y algunos archivos de inicio casi vac\u00edos. Aunque esto pueda parecer algo malo, en realidad es un gran beneficio ya que Django proporciona una base s\u00f3lida sobre la que se puede construir de la forma que se quiera. El resultado es una mayor confianza en el c\u00f3digo ya que se sabe que lo que sea que est\u00e9 en la aplicaci\u00f3n, se ha puesto ah\u00ed. 4. Administraci\u00f3n incorporada Desde el principio, Django proporciona una interfaz de administraci\u00f3n ( admin ) para trabajar con los modelos y gestionar los usuarios, los permisos de usuario y los grupos. La interfaz del modelo reemplaza inmediatamente la necesidad de un programa de administraci\u00f3n de base de datos separado para todas las funciones de la base de datos, excepto las avanzadas. Con cambios muy simples en la configuraci\u00f3n de la administraci\u00f3n, se puede organizar los campos del modelo, mostrar y ocultar campos, clasificar, filtrar y organizar los datos para maximizar la eficiencia. El administrador tambi\u00e9n tiene una funci\u00f3n opcional de documentaci\u00f3n de modelos que proporciona una documentaci\u00f3n autom\u00e1tica de los mismos. La administraci\u00f3n de usuarios siempre es importante en un sitio Web moderno y Django proporciona todo lo que se espera: a\u00f1adir y modificar usuarios, cambiar contrase\u00f1as, crear grupos de usuarios, asignar permisos y comunicarse con los usuarios. Al igual que el resto de Django, el administrador tambi\u00e9n es personalizable y ampliable. Por ejemplo, se pueden anular las plantillas de visualizaci\u00f3n del administrador y a\u00f1adir nuevas funciones para tareas como la exportaci\u00f3n de los datos del modelo a un archivo delimitado por comas (CSV). 5. Escalable Django se basa en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC). Esto significa que la base de datos, el c\u00f3digo de programa (back-end) y el c\u00f3digo de visualizaci\u00f3n (front-end) est\u00e1n separados. Django lleva esta separaci\u00f3n un paso m\u00e1s all\u00e1 al separar el c\u00f3digo de los medios est\u00e1ticos -im\u00e1genes, archivos, CSS y JavaScript- que conforman tu sitio. Estas filosof\u00edas de dise\u00f1o permiten: Ejecutar servidores separados para la base de datos, las aplicaciones y los medios Tener f\u00e1cilmente los medios servidos desde una Red de Entrega de Contenido (CDN) Cachear el contenido en m\u00faltiples niveles y alcances Para sitios realmente grandes, se puede emplear la agrupaci\u00f3n y el equilibrio de carga para distribuir el sitio web entre varios servidores Django es compatible con una serie de proveedores externos populares para servidores web, administraci\u00f3n del rendimiento, almacenamiento en cach\u00e9, agrupaci\u00f3n en cl\u00fasteres y balanceo. Tambi\u00e9n es compatible con las principales aplicaciones y servicios de correo electr\u00f3nico y mensajer\u00eda como OAuth y ReST. 6. Probado en el campo de batalla Una buena forma de saber si un marco de trabajo en la web es robusto y fiable es averiguar cu\u00e1nto tiempo ha estado en funcionamiento, si est\u00e1 creciendo y qu\u00e9 sitios de alto perfil lo est\u00e1n utilizando. Django fue de fuentes abiertas por primera vez en 2005, despu\u00e9s de haber funcionado durante varios a\u00f1os en el entorno de alta demanda de una organizaci\u00f3n de noticias. Despu\u00e9s de crecer desde el 2005, Django ahora no s\u00f3lo corre en empresas de publicaci\u00f3n de noticias como el Washington Post, sino que tambi\u00e9n dirige todas o parte de las principales empresas globales como Pinterest, Instagram, Disqus, Bitbucket, EventBrite y Zapier. Django contin\u00faa creciendo en popularidad. Djangosites enumera m\u00e1s de 5200 sitios que usan Django, y eso es s\u00f3lo para los sitios que se registran en Djangosites. Ser\u00eda imposible adivinar cu\u00e1ntas p\u00e1ginas sirve Django cada d\u00eda en comparaci\u00f3n con otras tecnolog\u00edas de Internet, pero eso es en gran medida irrelevante: Django ha demostrado su val\u00eda en los \u00faltimos a\u00f1os gestionando algunos de los sitios de mayor tr\u00e1fico de la Internet, y sigue aumentando su base de usuarios en la actualidad. 7. Paquetes, paquetes y m\u00e1s paquetes! Casi todo lo que se quiera hacer con Django ya se ha hecho antes. Muchos de la gran comunidad internacional de desarrolladores de Django lo devuelven liberando sus proyectos como paquetes de c\u00f3digo abierto. El mayor repositorio de estos proyectos se puede encontrar en el sitio Django Packages . A d\u00eda de hoy, Django Packages enumera m\u00e1s de 3400 aplicaciones, sitios y herramientas reutilizables de Django para usar en proyectos propios. Un r\u00e1pido recorrido por los paquetes m\u00e1s populares incluye: Wagtail, Mezzanine y django CMS .- Sistemas de gesti\u00f3n de contenidos Cookiecutter .- Configuraci\u00f3n r\u00e1pida y sencilla del proyecto Django y de las estructuras de las aplicaciones para aplicaciones m\u00e1s avanzadas Django ReST Framework .-Implementa una API de ReST en Django Django allauth .-Apps de autenticaci\u00f3n de Facebook, GitHub, Google y Twitter Debug toolbar .- Barra de herramientas de depuraci\u00f3n que muestra la informaci\u00f3n de depuraci\u00f3n a medida que el proyecto se ejecuta. Django Celery .- Proporciona la integraci\u00f3n con Celery para Django Oscar, Django Shop y Cartridge .- eCommerce frameworks para Django (Cartridge es una extensi\u00f3n para Mezzanine CMS) Con miles de paquetes m\u00e1s como estos, es muy probable que se encuentre un paquete que se adapte a unas necesidades espec\u00edficas, sin tener que reinventar la rueda. 8. Desarrollado activamente Uno de los mayores riesgos del c\u00f3digo abierto es si hay suficiente inter\u00e9s en el proyecto para que atraiga el apoyo de los desarrolladores a largo plazo. No existe tal riesgo con Django; no s\u00f3lo el proyecto tiene m\u00e1s de 15 a\u00f1os de antig\u00fcedad, sino que tiene un largo historial de liberaciones constantes y sigue contando con el apoyo de una comunidad activa y un gran equipo b\u00e1sico de contribuyentes voluntarios que mantienen y mejoran la base del c\u00f3digo todos los d\u00edas. Django tuvo su primera versi\u00f3n de producci\u00f3n en 2008 (versi\u00f3n 1.0) y ha tenido tres versiones de soporte a largo plazo (LTS): 1.4, 1.8, 1.11 y 2.2. La versi\u00f3n 2.2 LTS (la actual) tiene soporte completo hasta mediados de 2022. El equipo de desarrollo de Django mantiene una hoja de ruta de desarrollo en el sitio web del Proyecto Django y tiene un s\u00f3lido historial de cumplimiento de los hitos de la hoja de ruta. El Proyecto Django tambi\u00e9n cuenta con el apoyo de una fundaci\u00f3n independiente, la Django Software Foundation, que es una organizaci\u00f3n sin \u00e1nimo de lucro registrada en los Estados Unidos. 9. Lanzamientos estables Los proyectos de software de c\u00f3digo abierto son, en muchos casos, desarrollados m\u00e1s activamente y m\u00e1s seguros que el software propietario de la competencia. El inconveniente del desarrollo en constante evoluci\u00f3n de un proyecto de software de c\u00f3digo abierto es la falta de una base de c\u00f3digo estable en la que basar el desarrollo comercial. Django aborda este problema con versiones de apoyo a largo plazo (LTS) del software y un proceso de lanzamiento definido. Las versiones LTS se lanzan con un per\u00edodo de soporte garantizado (normalmente de tres a\u00f1os). En este periodo se garantiza que la base del c\u00f3digo permanezca estable; con parches para errores, seguridad y p\u00e9rdida de datos 100% compatibles con la versi\u00f3n de la caracter\u00edstica. El proceso de lanzamiento de Django asegura que las versiones oficiales sean tan estables como sea posible. Tras una fase de desarrollo, cada versi\u00f3n entra en una fase Alfa en la que se aplica una congelaci\u00f3n de caracter\u00edsticas. La nueva versi\u00f3n pasa entonces por las fases Beta y Candidata a la Liberaci\u00f3n (RC Release Candidate), donde se trabajan los errores de la versi\u00f3n. Si no se encuentran errores importantes durante un per\u00edodo despu\u00e9s de la versi\u00f3n candidata, se lanzar\u00e1 la versi\u00f3n final (feature release). Despu\u00e9s de que la versi\u00f3n final ha sido liberada, s\u00f3lo se aplican correcciones de errores y parches de seguridad. Estos parches, como las versiones LTS, son 100% compatibles con la feature release . 10. Documentaci\u00f3n de primera clase Incluso en las primeras versiones, los desarrolladores de Django se aseguraron de que la documentaci\u00f3n fuera completa y que los tutoriales fueran f\u00e1ciles de seguir. La documentaci\u00f3n deber\u00eda ser la raz\u00f3n n\u00famero uno de esta lista porque fue la calidad de la documentaci\u00f3n lo que en muchos casos prevalezca la elecci\u00f3n de Django sobre otras opciones. Django tambi\u00e9n cuenta con un fuerte apoyo de los miembros de la comunidad que producen materiales de aprendizaje gratuitos, libros, cursos pagados y gratuitos y muchos consejos, trucos y asistencia en sus sitios web. Hay muchos grupos. Algunos de los m\u00e1s relevantes son: Tango con Django Cualquier cosa de Danny y Audrey en TwoScoops Press Django Girls Por supuesto, tambi\u00e9n se van a descubrir cosas sobre Django que parezcan frustrantes pero, dado que todos los lenguajes de programaci\u00f3n y los frameworks construidos sobre ellos tienen sus idiosincrasias, seguro que se descubrir\u00e1 que cuando se trata de construir r\u00e1pidamente sitios web seguros y escalables, los beneficios de Django superan con creces a sus desaf\u00edos.","title":"\u00bfPor qu\u00e9 Django?"},{"location":"por_que_django/#por-que-django","text":"Esta es la primera pregunta que los no iniciados casi siempre se hace cuando se les presenta Django: \"\u00bfPor qu\u00e9 debo aprender Django?\" \"\u00bfQu\u00e9 tiene Django que lo hace mejor que el Marco X o el lenguaje Y para construir aplicaciones web?\" Buena pregunta. La programaci\u00f3n, como la mayor\u00eda de las actividades creativas, tiene a mucha gente dedicada que lleva sus pasiones al extremo. Es por esta raz\u00f3n que se debe desconfiar de las comparaciones entre este software y aquel. El resultado final es que todos los lenguajes de programaci\u00f3n y las herramientas y marcos construidos sobre ellos tienen puntos buenos y malos . Cuando se trata de comparar Django con otros frameworks web, la \u00fanica comparaci\u00f3n que vale la pena considerar es el pragmatismo vs. la perfecci\u00f3n. O para decirlo de otra manera, \u00bfquieres c\u00f3digo estable y mantenible que puedas entregar en un plazo determinado? \u00bfO quieres una caja de magia arcana y una plantilla que haga que los profesores de la universidad te quieran y los que la mantienen te odien al mismo tiempo? Django tiene sus asperezas, pero su enfoque pragm\u00e1tico para hacer las cosas es lo que realmente le destaca de la multitud. Django tiene muchos partidarios y unos cuantos enemigos, as\u00ed que no dudar en sacar conclusiones propias.","title":"\u00bfPor qu\u00e9 Django?"},{"location":"por_que_django/#las-10-mejores-razones-de-django","text":"","title":"Las 10 mejores razones de Django"},{"location":"por_que_django/#1-python","text":"Se puede decir que Python es el lenguaje de programaci\u00f3n m\u00e1s f\u00e1cil de aprender. Con su uso de construcciones de lenguaje natural (por ejemplo, disposici\u00f3n y sangr\u00eda parecida a la de un p\u00e1rrafo) y una sintaxis f\u00e1cil de aprender, Python hace que la comprensi\u00f3n de la estructura y el flujo de los programas sea significativamente m\u00e1s f\u00e1cil de aprender que otros lenguajes populares. Esto se pone de manifiesto en el hecho de que la mayor proporci\u00f3n de cursos de programaci\u00f3n introductoria en universidades e institutos de ense\u00f1anza superior utilizan ahora Python como el lenguaje elegido. Python es vers\u00e1til . Ejecuta sitios web y se utiliza en muchas aplicaciones de escritorio populares en PC y Mac. Tambi\u00e9n se puede encontrar en aplicaciones m\u00f3viles e incorporado en muchos dispositivos. Python tambi\u00e9n es un lenguaje de programaci\u00f3n popular para otras aplicaciones. Aprender Python casi seguro que servir\u00e1, sin importar la carrera que se elija. Python es popular . Google, una de las empresas m\u00e1s grandes del mundo, utiliza Python en muchas de sus aplicaciones. Tambi\u00e9n es usado ampliamente por programadores profesionales. Algunos datos interesantes de la encuesta de desarrolladores de Stack Overflow de 2017: Python es el segundo en crecimiento en los \u00faltimos cinco a\u00f1os, despu\u00e9s de node.js. PHP, Java y Ruby han disminuido en popularidad. Python es ahora m\u00e1s com\u00fan que PHP. Python es el lenguaje m\u00e1s buscado entre todos los desarrolladores, saltando cuatro lugares desde 2016 y superando a JavaScript en el primer lugar. Los trabajos en Python pagan mejor que los tradicionales trabajos de Microsoft (C#, C++, VBA y .NET).","title":"1. Python"},{"location":"por_que_django/#2-baterias-incluidas","text":"Django hereda su filosof\u00eda de \"pilas incluidas\" de Python. Esto se interpreta a menudo como que Django incluye muchas cosas extra que probablemente no se necesiten, sin embargo, la mejor analog\u00eda es que, en lugar de tener que abrir el lenguaje para insertar energ\u00eda propia (bater\u00edas), s\u00f3lo hay que pulsar el interruptor y Django hace el resto. En t\u00e9rminos pr\u00e1cticos esto significa que Django implementa algunos procesos comunes, pero complejos, proporcionando herramientas y envoltorios simples para ocultar la complejidad sin comprometer la potencia. Las \"bater\u00edas\" de Django se encuentran en los contrib packages que son: admin .- La aplicaci\u00f3n de administraci\u00f3n de Django auth .- El marco de autenticaci\u00f3n de Django contenttypes .- Un marco para enganchar con los modelos Django flatpages .- Un marco para la gesti\u00f3n de las p\u00e1ginas de casos especiales, como las pol\u00edticas del sitio y los t\u00e9rminos y condiciones de uso gis .- A\u00f1ade capacidades geoespaciales a Django humanize .- A\u00f1ade filtros de plantilla para mejorar la legibilidad de los datos messages .- Un marco para la gesti\u00f3n de los mensajes basados en sesiones y cookies postgres .- Caracter\u00edsticas espec\u00edficas de la base de datos postgreSQL redirects .- Gesti\u00f3n de redirecciones sessions .- Un marco para la gesti\u00f3n de sesiones an\u00f3nimas sites .- Permite operar varios sitios web desde una sola instalaci\u00f3n sitemaps .- Implementa archivos sitemap XML syndication .- Un marco para generar feeds para la sindicaci\u00f3n Los contrib packages pueden ser un poco complejos, sin embargo, Django proporciona una s\u00f3lida lista de poderosos m\u00f3dulos incorporados para que no haya que crearlos.","title":"2. Bater\u00edas incluidas"},{"location":"por_que_django/#3-no-se-interpone-en-tu-camino","text":"Cuando creas una aplicaci\u00f3n Django, Django no agrega ning\u00fan tipo de funciones innecesarias. No hay importaciones obligatorias, no se requieren bibliotecas de terceros ni archivos de configuraci\u00f3n XML. Esto puede ser un poco aterrador cuando se crea un proyecto Django por primera vez, ya que las herramientas autom\u00e1ticas de Django ( startproject y startapp ) s\u00f3lo crean un archivo de configuraci\u00f3n b\u00e1sico, unas cuantas carpetas y algunos archivos de inicio casi vac\u00edos. Aunque esto pueda parecer algo malo, en realidad es un gran beneficio ya que Django proporciona una base s\u00f3lida sobre la que se puede construir de la forma que se quiera. El resultado es una mayor confianza en el c\u00f3digo ya que se sabe que lo que sea que est\u00e9 en la aplicaci\u00f3n, se ha puesto ah\u00ed.","title":"3. No se interpone en tu camino"},{"location":"por_que_django/#4-administracion-incorporada","text":"Desde el principio, Django proporciona una interfaz de administraci\u00f3n ( admin ) para trabajar con los modelos y gestionar los usuarios, los permisos de usuario y los grupos. La interfaz del modelo reemplaza inmediatamente la necesidad de un programa de administraci\u00f3n de base de datos separado para todas las funciones de la base de datos, excepto las avanzadas. Con cambios muy simples en la configuraci\u00f3n de la administraci\u00f3n, se puede organizar los campos del modelo, mostrar y ocultar campos, clasificar, filtrar y organizar los datos para maximizar la eficiencia. El administrador tambi\u00e9n tiene una funci\u00f3n opcional de documentaci\u00f3n de modelos que proporciona una documentaci\u00f3n autom\u00e1tica de los mismos. La administraci\u00f3n de usuarios siempre es importante en un sitio Web moderno y Django proporciona todo lo que se espera: a\u00f1adir y modificar usuarios, cambiar contrase\u00f1as, crear grupos de usuarios, asignar permisos y comunicarse con los usuarios. Al igual que el resto de Django, el administrador tambi\u00e9n es personalizable y ampliable. Por ejemplo, se pueden anular las plantillas de visualizaci\u00f3n del administrador y a\u00f1adir nuevas funciones para tareas como la exportaci\u00f3n de los datos del modelo a un archivo delimitado por comas (CSV).","title":"4. Administraci\u00f3n incorporada"},{"location":"por_que_django/#5-escalable","text":"Django se basa en el patr\u00f3n de dise\u00f1o Modelo-Vista-Controlador (MVC). Esto significa que la base de datos, el c\u00f3digo de programa (back-end) y el c\u00f3digo de visualizaci\u00f3n (front-end) est\u00e1n separados. Django lleva esta separaci\u00f3n un paso m\u00e1s all\u00e1 al separar el c\u00f3digo de los medios est\u00e1ticos -im\u00e1genes, archivos, CSS y JavaScript- que conforman tu sitio. Estas filosof\u00edas de dise\u00f1o permiten: Ejecutar servidores separados para la base de datos, las aplicaciones y los medios Tener f\u00e1cilmente los medios servidos desde una Red de Entrega de Contenido (CDN) Cachear el contenido en m\u00faltiples niveles y alcances Para sitios realmente grandes, se puede emplear la agrupaci\u00f3n y el equilibrio de carga para distribuir el sitio web entre varios servidores Django es compatible con una serie de proveedores externos populares para servidores web, administraci\u00f3n del rendimiento, almacenamiento en cach\u00e9, agrupaci\u00f3n en cl\u00fasteres y balanceo. Tambi\u00e9n es compatible con las principales aplicaciones y servicios de correo electr\u00f3nico y mensajer\u00eda como OAuth y ReST.","title":"5. Escalable"},{"location":"por_que_django/#6-probado-en-el-campo-de-batalla","text":"Una buena forma de saber si un marco de trabajo en la web es robusto y fiable es averiguar cu\u00e1nto tiempo ha estado en funcionamiento, si est\u00e1 creciendo y qu\u00e9 sitios de alto perfil lo est\u00e1n utilizando. Django fue de fuentes abiertas por primera vez en 2005, despu\u00e9s de haber funcionado durante varios a\u00f1os en el entorno de alta demanda de una organizaci\u00f3n de noticias. Despu\u00e9s de crecer desde el 2005, Django ahora no s\u00f3lo corre en empresas de publicaci\u00f3n de noticias como el Washington Post, sino que tambi\u00e9n dirige todas o parte de las principales empresas globales como Pinterest, Instagram, Disqus, Bitbucket, EventBrite y Zapier. Django contin\u00faa creciendo en popularidad. Djangosites enumera m\u00e1s de 5200 sitios que usan Django, y eso es s\u00f3lo para los sitios que se registran en Djangosites. Ser\u00eda imposible adivinar cu\u00e1ntas p\u00e1ginas sirve Django cada d\u00eda en comparaci\u00f3n con otras tecnolog\u00edas de Internet, pero eso es en gran medida irrelevante: Django ha demostrado su val\u00eda en los \u00faltimos a\u00f1os gestionando algunos de los sitios de mayor tr\u00e1fico de la Internet, y sigue aumentando su base de usuarios en la actualidad.","title":"6. Probado en el campo de batalla"},{"location":"por_que_django/#7-paquetes-paquetes-y-mas-paquetes","text":"Casi todo lo que se quiera hacer con Django ya se ha hecho antes. Muchos de la gran comunidad internacional de desarrolladores de Django lo devuelven liberando sus proyectos como paquetes de c\u00f3digo abierto. El mayor repositorio de estos proyectos se puede encontrar en el sitio Django Packages . A d\u00eda de hoy, Django Packages enumera m\u00e1s de 3400 aplicaciones, sitios y herramientas reutilizables de Django para usar en proyectos propios. Un r\u00e1pido recorrido por los paquetes m\u00e1s populares incluye: Wagtail, Mezzanine y django CMS .- Sistemas de gesti\u00f3n de contenidos Cookiecutter .- Configuraci\u00f3n r\u00e1pida y sencilla del proyecto Django y de las estructuras de las aplicaciones para aplicaciones m\u00e1s avanzadas Django ReST Framework .-Implementa una API de ReST en Django Django allauth .-Apps de autenticaci\u00f3n de Facebook, GitHub, Google y Twitter Debug toolbar .- Barra de herramientas de depuraci\u00f3n que muestra la informaci\u00f3n de depuraci\u00f3n a medida que el proyecto se ejecuta. Django Celery .- Proporciona la integraci\u00f3n con Celery para Django Oscar, Django Shop y Cartridge .- eCommerce frameworks para Django (Cartridge es una extensi\u00f3n para Mezzanine CMS) Con miles de paquetes m\u00e1s como estos, es muy probable que se encuentre un paquete que se adapte a unas necesidades espec\u00edficas, sin tener que reinventar la rueda.","title":"7. Paquetes, paquetes y m\u00e1s paquetes!"},{"location":"por_que_django/#8-desarrollado-activamente","text":"Uno de los mayores riesgos del c\u00f3digo abierto es si hay suficiente inter\u00e9s en el proyecto para que atraiga el apoyo de los desarrolladores a largo plazo. No existe tal riesgo con Django; no s\u00f3lo el proyecto tiene m\u00e1s de 15 a\u00f1os de antig\u00fcedad, sino que tiene un largo historial de liberaciones constantes y sigue contando con el apoyo de una comunidad activa y un gran equipo b\u00e1sico de contribuyentes voluntarios que mantienen y mejoran la base del c\u00f3digo todos los d\u00edas. Django tuvo su primera versi\u00f3n de producci\u00f3n en 2008 (versi\u00f3n 1.0) y ha tenido tres versiones de soporte a largo plazo (LTS): 1.4, 1.8, 1.11 y 2.2. La versi\u00f3n 2.2 LTS (la actual) tiene soporte completo hasta mediados de 2022. El equipo de desarrollo de Django mantiene una hoja de ruta de desarrollo en el sitio web del Proyecto Django y tiene un s\u00f3lido historial de cumplimiento de los hitos de la hoja de ruta. El Proyecto Django tambi\u00e9n cuenta con el apoyo de una fundaci\u00f3n independiente, la Django Software Foundation, que es una organizaci\u00f3n sin \u00e1nimo de lucro registrada en los Estados Unidos.","title":"8. Desarrollado activamente"},{"location":"por_que_django/#9-lanzamientos-estables","text":"Los proyectos de software de c\u00f3digo abierto son, en muchos casos, desarrollados m\u00e1s activamente y m\u00e1s seguros que el software propietario de la competencia. El inconveniente del desarrollo en constante evoluci\u00f3n de un proyecto de software de c\u00f3digo abierto es la falta de una base de c\u00f3digo estable en la que basar el desarrollo comercial. Django aborda este problema con versiones de apoyo a largo plazo (LTS) del software y un proceso de lanzamiento definido. Las versiones LTS se lanzan con un per\u00edodo de soporte garantizado (normalmente de tres a\u00f1os). En este periodo se garantiza que la base del c\u00f3digo permanezca estable; con parches para errores, seguridad y p\u00e9rdida de datos 100% compatibles con la versi\u00f3n de la caracter\u00edstica. El proceso de lanzamiento de Django asegura que las versiones oficiales sean tan estables como sea posible. Tras una fase de desarrollo, cada versi\u00f3n entra en una fase Alfa en la que se aplica una congelaci\u00f3n de caracter\u00edsticas. La nueva versi\u00f3n pasa entonces por las fases Beta y Candidata a la Liberaci\u00f3n (RC Release Candidate), donde se trabajan los errores de la versi\u00f3n. Si no se encuentran errores importantes durante un per\u00edodo despu\u00e9s de la versi\u00f3n candidata, se lanzar\u00e1 la versi\u00f3n final (feature release). Despu\u00e9s de que la versi\u00f3n final ha sido liberada, s\u00f3lo se aplican correcciones de errores y parches de seguridad. Estos parches, como las versiones LTS, son 100% compatibles con la feature release .","title":"9. Lanzamientos estables"},{"location":"por_que_django/#10-documentacion-de-primera-clase","text":"Incluso en las primeras versiones, los desarrolladores de Django se aseguraron de que la documentaci\u00f3n fuera completa y que los tutoriales fueran f\u00e1ciles de seguir. La documentaci\u00f3n deber\u00eda ser la raz\u00f3n n\u00famero uno de esta lista porque fue la calidad de la documentaci\u00f3n lo que en muchos casos prevalezca la elecci\u00f3n de Django sobre otras opciones. Django tambi\u00e9n cuenta con un fuerte apoyo de los miembros de la comunidad que producen materiales de aprendizaje gratuitos, libros, cursos pagados y gratuitos y muchos consejos, trucos y asistencia en sus sitios web. Hay muchos grupos. Algunos de los m\u00e1s relevantes son: Tango con Django Cualquier cosa de Danny y Audrey en TwoScoops Press Django Girls Por supuesto, tambi\u00e9n se van a descubrir cosas sobre Django que parezcan frustrantes pero, dado que todos los lenguajes de programaci\u00f3n y los frameworks construidos sobre ellos tienen sus idiosincrasias, seguro que se descubrir\u00e1 que cuando se trata de construir r\u00e1pidamente sitios web seguros y escalables, los beneficios de Django superan con creces a sus desaf\u00edos.","title":"10. Documentaci\u00f3n de primera clase"}]}